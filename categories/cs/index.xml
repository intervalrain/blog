<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>CS on Rain's Blog</title><link>http://intervalrain.github.io/categories/cs/</link><description>Recent content in CS on Rain's Blog</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 05 Jul 2022 21:56:32 +0800</lastBuildDate><atom:link href="http://intervalrain.github.io/categories/cs/index.xml" rel="self" type="application/rss+xml"/><item><title>[nachos] 概述</title><link>http://intervalrain.github.io/posts/csnotes/nachos/intro/</link><pubDate>Tue, 05 Jul 2022 21:56:32 +0800</pubDate><guid>http://intervalrain.github.io/posts/csnotes/nachos/intro/</guid><description>Nachos 概述 簡介 Nachos 是一個教學用的作業系統，建立在一個軟件模擬的通用虛擬機(virtual machine)，模擬 MIPS R2/3000 的指令集、主存、中斷系統、網路以及磁碟系統等作業系統所必須的硬體系統。 R2/3000 的指令集為 RISC 指令集，指令數目比較少，Nachos 模擬了其中的 63 條指令，許多現有的編譯器如 g++ 能直接將 C 或 C++ 源始碼編譯成該指令集的機械碼，省去編寫編譯器的工夫，所有讀者可以直接用 C/C++ 語言編寫該應用程式，使得在 Nachos 上開發大型的應用程式成為可能。 使用並實現了作業系統中的一些新的概念。包括網路、執行緒、分散式應用。並且 Nachos 中以**執行緒(thread)**作為一個基本概念講述，取代原本進程(process) 在作業系統教學中的地位。 nachos 虛擬機使得網路的實現相當簡單，nachos 只是一個在宿主機上運行的一個進程。在同一個宿主機上可以運行多個 nachos 進程，各個進程間可以相互通訊，作為一個為互連網路的一個節點；進程之間通過 Socket 進行通訊，模擬一個全互連發路。 確定性調試比較方便。隨機因素使系統運行更加真實。因為作業系統的不確定性，所以在一個實際的系統中進行多執行緒調試是比較困難的。由於 Nachos 是在宿主機上運行的進程，它提供了確定性調試的手段。 確定性調試就是在同樣的輸入順序、輸入參數的情況下，Nachos 運行的結果是完全一樣的。在多執行緒的調試中，可以將注意力集中在某一個實際問題上，而不受作業系統不確定性的干擾。 另外，Nachos 採用了隨機因子來模擬真實作業系統的不確定性。 簡單而易於擴展。Nachos 的目的不是展示一個成功的作業系統，而是提供一個框架使讀者可以發揮自己的創造性進行擴展。 例如一個完整的類似於 UNIX 的文件系統是很複雜的，但是對於文件系統而言，無非是需要實現文件的邏輯地址到物理地址的映射以及實現文件 inode、打開文件結構、執行緒打開文件表等重要的數據結構以及維護它們之間的觀係。Nachos 具有以上所有這些內容，但是在很多方面做了一定的限制，比如只有一級索引結構限制了系統中最大文件的大小。讀者可對文件系統進行擴展，逐步消除這些限制。 物件導向性。Nachos 的主體是用 C++ 的一個子集來實現的。物件導向可以清楚地描述作業系統各個部分的介面(interface)。但 Nachos 並未用到物件導向的所有特徵，如繼承性、多態性等，使得其程式碼更容易理解與閱讀。</description></item><item><title>[作業系統] Nachos</title><link>http://intervalrain.github.io/posts/csnotes/nachos/</link><pubDate>Sun, 03 Jul 2022 18:01:57 +0800</pubDate><guid>http://intervalrain.github.io/posts/csnotes/nachos/</guid><description>Nachos 概述</description></item><item><title>[作業系統] 計算機組織與結構</title><link>http://intervalrain.github.io/posts/csnotes/ca/</link><pubDate>Sun, 03 Jul 2022 01:39:35 +0800</pubDate><guid>http://intervalrain.github.io/posts/csnotes/ca/</guid><description>計算機組織與結構 概述 計算機抽象化 指令集架構 計算機算術 處理器 Pipeline 記憶體 參考資料 黃婷婷 清大開放式課程 計算機結構 Mr. opengate</description></item><item><title>[作業系統] Linux</title><link>http://intervalrain.github.io/posts/csnotes/linux/</link><pubDate>Sat, 02 Jul 2022 04:00:55 +0800</pubDate><guid>http://intervalrain.github.io/posts/csnotes/linux/</guid><description>準備中</description></item><item><title>[作業系統] 計算機作業系統</title><link>http://intervalrain.github.io/posts/csnotes/os/</link><pubDate>Sat, 02 Jul 2022 04:00:55 +0800</pubDate><guid>http://intervalrain.github.io/posts/csnotes/os/</guid><description>計算機作業系統 概述 進程管理 死鎖 記憶體管理 設備管理 鏈接 參考資料 cyc2018 Mr. opengate</description></item><item><title>[計算機作業系統] 概述</title><link>http://intervalrain.github.io/posts/csnotes/os/intro/</link><pubDate>Sat, 02 Jul 2022 04:00:55 +0800</pubDate><guid>http://intervalrain.github.io/posts/csnotes/os/intro/</guid><description>作業系統 簡介 電腦系統主要可分成四個部分，或分成硬體(hardware)、軟體(software)、數據(data)
硬體(hardware)：為系統提供基本的計算資源。 中央處理器(central processing unit, CPU) 記憶體(memory) I/O 裝置 應用程式(Application programs)：定義資源如何用來解決使用者的計算問題。 使用者(users) 作業系統(Operating system, OS)： 作業系統(Operating system, OS) 是管理電腦硬體與軟體資源的電腦程式，同時也是電腦系統的核心與基石。
OS 最主要的兩個功能是：
資源分配：根據需求調配資源分配率(resource utilization)與效能(performance) 監控使用者程式的執行，避免不正常的運作造成對系統的危害。 一個標準的 PC 作業系統應該提供以下的功能：
行程管理(Processing management) 記憶體管理(Memory management) 檔案系統(File system) 網路通訊(Networking) 安全機制(Security) 使用者介面(User interface) 驅動程式(Device drivers) PC 基本特徵 1. 並行計算(Concurrent computing) Concurrent computing 是指宏觀上在一段時間內能同時運行多個進程，微觀上是交替發生的；而平行計算(parallel computing) 則指同一個時間內能運行多個指令。 平行計算需要硬體支持，如多線程(multi-thread)、多核處理器(multi-core processor)或者分散式計算機系統(distributed OS)。 作業系統通過引入進程(process)與線程(thread)，使程式能夠並行運作。 2. 分享(Sharing) 共享是指系統中的資源可以被多個並行進程共同使用。 有兩種共享方式：互斥共享(mutual exclusion)與同時訪問(time sharing)。 互斥共享的資源稱為臨界資源(critical resources)，例如印表機等，在同一時間內只允許一個進程訪問，需要用同步機制來實現互斥訪問。 3. 虛擬(Virtual) 虛擬技術把一個物理實體轉換為多個邏輯實體。 主要有兩種虛擬技術：分時技術(time sharing)、空間分享技術。 多個進程能在同一個處理器上並行處理使用了分時技術，讓每個進程輪流占用處理器，每次只執行一小個時間片段並快速切換。 虛擬記憶體使用了空間分享技術，它將物理記憶體抽象化為地址空間，每個進程都有各自的地址空間。地址空間的頁被映射到物理記憶體中，地址空間的頁並不需要全部在物理記憶體中，當使用到一個沒有物理記憶體的頁時，執行頁面置換演算法，將該頁置換到記憶體中。 4.</description></item><item><title>[計算機作業系統] 死鎖</title><link>http://intervalrain.github.io/posts/csnotes/os/deadlock/</link><pubDate>Sat, 02 Jul 2022 04:00:55 +0800</pubDate><guid>http://intervalrain.github.io/posts/csnotes/os/deadlock/</guid><description>準備中</description></item><item><title>[計算機作業系統] 記憶體管理</title><link>http://intervalrain.github.io/posts/csnotes/os/memorymanagement/</link><pubDate>Sat, 02 Jul 2022 04:00:55 +0800</pubDate><guid>http://intervalrain.github.io/posts/csnotes/os/memorymanagement/</guid><description>準備中</description></item><item><title>[計算機作業系統] 設備管理</title><link>http://intervalrain.github.io/posts/csnotes/os/equipmentmanagement/</link><pubDate>Sat, 02 Jul 2022 04:00:55 +0800</pubDate><guid>http://intervalrain.github.io/posts/csnotes/os/equipmentmanagement/</guid><description>準備中</description></item><item><title>[計算機作業系統] 進程管理</title><link>http://intervalrain.github.io/posts/csnotes/os/processmanagement/</link><pubDate>Sat, 02 Jul 2022 04:00:55 +0800</pubDate><guid>http://intervalrain.github.io/posts/csnotes/os/processmanagement/</guid><description>進程管理 進程與執行緒 1. 進程(process) 進程是資源分配的基本單位。 進程控制塊(Process Control Block, PCB)描述進程的基本訊息和運行狀態，所謂的創建進程和撤銷進程，都是指對 PCB 的操作。 2. 執行緒(thread) 執行緒又稱線程，是獨立調度的基本單位。 一個進程可以有多個執行緒，它們共享進程資源。 以瀏覽器(browser)為例，瀏覽器進程有很多執行緒，如 HTTP 請求(request)、事件響應、渲染。執行緒的並行處理(concurrent)使得瀏覽器中點擊一個新的超連結從而發起 HTTP 請求時，瀏覽器還可以響應用戶的其它事件。 3. 區別 擁有資源 進程是資源分配的基本單位，但是執行緒不擁有資源，而是訪問隸屬進程的資源。 調度 執行緒是獨立調度的基本單位，在同一進程中，執行緒的切換不會引起進程切換，從一個進程中的執行緒切換到另一個進程中的執行緒時，才會進行進程的切換。 系統開銷 由於創建或撤銷進程時，系統都要為之分配或回收資源，如硬碟中的記憶體、I/O 設備等，所付出的開銷遠大於創建或撤銷執行緒時的開銷。 同樣的，在進行進程切換時，涉及當前執行進程 CPU 環境的保存及新調度進程 CPU 環境的設置，而執行緒切換只需保存和設置少量暫存器的內容，開銷較小。 溝通 執行緒可以通過直接讀寫同一個進程中的數據進行溝通，但是進程的溝通需要借助 IPC(inter-process communication)。 進程狀態的切換 就緒就態(ready)：等待被調度 執行狀態(running) 阻塞狀態(waiting)：等待資源 只有就緒狀態和執行狀態可以相互轉換，其它的都是單向轉換。就緒狀態的進程通過調度演算法從而獲得 CPU Time，轉為執行狀態；而執行狀態的進程，在分配給它的 CPU Time 片段用完之後就會轉為就緒狀態，等待下一次調度。 阻塞狀態是缺少需要的資源從而由執行狀態轉換而來，但是該資源不包括 CPU Time, 缺少 CPU Time 會從執行狀態轉換為就緒狀態。 進程調度演算法 不同環境的調度演算法目標不同，因此需要針對不同環境來討論調度演算法。 1. 批次處理系統(batch system) 批次處理系統沒有太多的用戶操作，在該系統中，調度演算法目標是保証吞吐量和周轉時間(從提交到終止的時間)。 1.1 先來先服務(first-come first-served, FCFS) 非搶占式的調度，按照請求的順序進行調度。 有利於長作業，不利於短作業，因為短作業必須一直等待前面的長作業執行完畢才能執行，而長作業又需要執行很長時間，造成短作業等待時間過長 1.2 短作業優先(shortest job first, SJF) 非搶占式的調度算法，按估計運行時間最短的順序進行調度。 長作業有可能會永遠做不完，處於一直等待短作業執行完畢的狀態。因為如果一直有短作業到來，那麼長作業永遠得不到調度。 1.</description></item><item><title>[計算機作業系統] 鏈接</title><link>http://intervalrain.github.io/posts/csnotes/os/link/</link><pubDate>Sat, 02 Jul 2022 04:00:55 +0800</pubDate><guid>http://intervalrain.github.io/posts/csnotes/os/link/</guid><description>準備中</description></item><item><title>CS 學習筆記</title><link>http://intervalrain.github.io/posts/csnotes/</link><pubDate>Sat, 02 Jul 2022 03:01:48 +0800</pubDate><guid>http://intervalrain.github.io/posts/csnotes/</guid><description> 演算法 Leetcode 演算法 計算機結構 計算機結構 作業系統 計算機作業系統 Linux Nachos 網路 計算機網路 HTTP Socket 資料庫 資料庫系統原理 SQL 語法 SQL 練習 MySQL Redis Java Java 基礎 Java 容器 Java 開發 Java 虛擬機 Java I/O 系統設計 系統設計基礎 分布式 集群 駭客技術 緩存 訊息佇列 物件導向 物件導向概念 設計模式 工具 Git Docker 框架 正則表達式 程式碼實踐 程式碼可讀性 程式碼格規範</description></item><item><title>[CS50] Lec 1 - C</title><link>http://intervalrain.github.io/posts/cs50/lec1/</link><pubDate>Thu, 10 Mar 2022 02:39:12 +0800</pubDate><guid>http://intervalrain.github.io/posts/cs50/lec1/</guid><description>Introduction to programming language C</description></item><item><title>[CS50] Lec 0 - Introduction to Computer Science</title><link>http://intervalrain.github.io/posts/cs50/lec0/</link><pubDate>Wed, 23 Feb 2022 00:43:18 +0800</pubDate><guid>http://intervalrain.github.io/posts/cs50/lec0/</guid><description>Intoduction to Computer Science</description></item></channel></rss>