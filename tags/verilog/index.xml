<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Verilog on Rain's Blog</title><link>http://intervalrain.github.io/tags/verilog/</link><description>Recent content in Verilog on Rain's Blog</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sun, 01 May 2022 21:23:46 +0800</lastBuildDate><atom:link href="http://intervalrain.github.io/tags/verilog/index.xml" rel="self" type="application/rss+xml"/><item><title>[VHDL] Normative references 規範參考資料</title><link>http://intervalrain.github.io/posts/verilog/ch2/</link><pubDate>Sun, 01 May 2022 21:23:46 +0800</pubDate><guid>http://intervalrain.github.io/posts/verilog/ch2/</guid><description>下列引用的文件對於本文件的應用是必不可少的。對於過時的參考文獻，僅引用的版本適用。對未註明日期的參考文獻，最新版本適用(包含任何修改或勘誤)。 Anderson, R., Biham, E., and Knudsen, L. “Serpent: A Proposal for the Advanced Encryption Standard,” NIST AES Proposal, 1998, http://www.cl.cam.ac.uk/ftp/users/rja14/serpent.tar.gz. ANSI Std X9.52-1998, American National Standard for Financial Services—Triple Data Encryption Algorithm Modes of Operation.2 ElGamal, T., “A Public-Key Cryptosystem and a Signature Scheme Based on Discrete Logarithms,” IEEE Transactions on Information Theory, vol. IT-31, no. 4, pp. 469–472, July 1985. FIPS 46-3 (October 1999), Data Encryption Standard (DES).</description></item><item><title>[VHDL] Overview 概述</title><link>http://intervalrain.github.io/posts/verilog/ch1/</link><pubDate>Sun, 01 May 2022 19:00:13 +0800</pubDate><guid>http://intervalrain.github.io/posts/verilog/ch1/</guid><description>1、概述 1.1 範圍 Verilog 是一種硬體描述語言(HDL)，它在被標準化為 IEEE Std 1364™-1995 且被第一次修訂為 IEEE Std 1364-2001。此修訂更正並澄清了在 1995 年和 2001 年版本中定義模稜兩可。而 IEEE Std 1800™-2005 解決了 IEEE 1364-2001 的不兼容和不一致的問題。 該文件的目的是作為 Verilog HDL 的完整規範。本文件包含以下： 所有 Verilog HDL 結構的形式語法和語義 標準延遲格式 (standard delay format, SDF) 結構的形式語法和語義 模擬系統任務和函式，例如文本輸出顯示命令 編譯器指令，例如文本替換巨集和仿真時間縮放 程式語言介面 (Programming language interface, PLI) 綁定機制 Verilog 程序介面 (VPI) 的形式語法和語義 使用範例 SDF 的訊息延遲模型 VPI 表頭檔 1.2 本文件中使用的約定 該文件被組織成條款(clauses)，每個條款都著重於語言的特定領域。每個條款中的子條款討論各種結構和概念。從基本介紹和構造、概念的基本原理開始，再來是語法和語義描述，最後是範例和註釋。 在本文件中，以下術語會被時常用到，對不同的讀者會帶有不帶的意義： shall 用於表示強制性規定(mandatory requirements)。 may 用於表示非必要(optional)。 對於處理 Verilog HDL 工具的開發人員，shall 表示標準強加(standard imposes)的規定，必須實現符合此要求的結果並且在不符合規定時指定相對應的報錯。 對於 Verilog HDL 模型開發人員，shall 表示其特徵遵循 Verilog HDL 的原生定義，模型開發者需要遵守其隱含的約束。may 表示模型開發人員可以自行決定其功能，但是一旦定義了功能，則模型開發人員必須遵循其定義的法則。 對於 Verilog HDL 模型使用者， shall 表示其特徵遵循模型開發者的定義。模型使用者可以參照其模型的 VHDL 文本的規定。 1.</description></item><item><title>[VHDL] IEEE 標準硬體描述語言</title><link>http://intervalrain.github.io/posts/verilog/ch0/</link><pubDate>Sun, 01 May 2022 17:37:22 +0800</pubDate><guid>http://intervalrain.github.io/posts/verilog/ch0/</guid><description>IEEE 標準硬體描述語言 IEEE Standard for Verilog Hardware Description Language 介紹 在 1995 年，Verilog hardware description language(HDL) 成為了 IEEE 的標準規範(IEEE Std 1364-1995)，它被設計成簡單、直覺、且有效率的標準規範語言，可應用於驗證模擬、時效分析、測試分析與合成。這些特性使得 Verilog 成為大量 ic 設計者的選擇。 Verilog 包含一組很豐富的內建型別(primitives)，包含邏輯閘(logic gates)、自定義型別(user-defined primitives)、開關(switches)與線邏輯(wired logic)，它還具備了元件接腳的延遲(pin-to-pin delay)和時間分析。具象化層級的混合本質上可以被兩種資料型態所描述：電路(nets) 與 變數(variables)，以變數與電路表示的連續賦值(continuous assignments)，可以將值驅動到電路上，形成基本的結構構造(structural construct)；而有序的賦值(procedural assignments)，其中牽涉了變數與電路值的運算，可以被存入變數，形成基本的行為構造(behavior construct)。一個設計包含了一組包含輸入與輸出介面的模組(module)，還有函式的描述，可以為結構構造的、行為構造的、或是混合的。這些模組形成有層級的結構(hierarchy)且被接通於不同電路之間。 Verilog 語言具備可擴展性，透過程式語言介面(programming language interface, PLI)、與 Verilog 程序介面(Verilog procedual interface, VPI)。PLI/VPI 是一種可允許外部函數訪問硬體描述語中的資料的一種組合，且可促進與模擬動態的互動。PLI/VPI 的應用包含將 VHDL 仿真器(simulator)與其他模擬與電腦輔助系統(computer-assisted design, CAD)、客製化的除錯任務(costomized debugging task)、延遲計算器(delay calculators)、注釋器(annotators)相接連。 目錄 1. Overview 2. Normative references 3. Lexical conventions 4. Data Types 5.</description></item></channel></rss>