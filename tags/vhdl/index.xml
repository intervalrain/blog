<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>VHDL on Rain's Blog</title><link>http://intervalrain.github.io/tags/vhdl/</link><description>Recent content in VHDL on Rain's Blog</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sun, 01 May 2022 17:37:22 +0800</lastBuildDate><atom:link href="http://intervalrain.github.io/tags/vhdl/index.xml" rel="self" type="application/rss+xml"/><item><title>[VHDL] IEEE 標準硬體描述語言</title><link>http://intervalrain.github.io/posts/verilog/intro/</link><pubDate>Sun, 01 May 2022 17:37:22 +0800</pubDate><guid>http://intervalrain.github.io/posts/verilog/intro/</guid><description>IEEE 標準硬體描述語言 IEEE Standard for Verilog Hardware Description Language 1 介紹 在 1995 年，Verilog hardware description language(HDL) 成為了 IEEE 的標準規範(IEEE Std 1364-1995)，它被設計成簡單、直覺、且有效率的標準規範語言，可應用於驗證模擬、時效分析、測試分析與合成。這些特性使得 Verilog 成為大量 ic 設計者的選擇。 Verilog 包含一組很豐富的內建型別(primitives)，包含邏輯閘(logic gates)、自定義型別(user-defined primitives)、開關(switches)與線邏輯(wired logic)，它還具備了元件接腳的延遲(pin-to-pin delay)和時間分析。具象化層級的混合本質上可以被兩種資料型態所描述：電路(nets) 與 變數(variables)，以變數與電路表示的連續賦值(continuous assignments)，可以將值驅動到電路上，形成基本的結構構造(structural construct)；而有序的賦值(procedural assignments)，其中牽涉了變數與電路值的運算，可以被存入變數，形成基本的行為構造(behavior construct)。一個設計包含了一組包含輸入與輸出介面的模組(module)，還有函式的描述，可以為結構構造的、行為構造的、或是混合的。這些模組形成有層級的結構(hierarchy)且被接通於不同電路之間。 Verilog 語言具備可擴展性，透過程式語言介面(programming language interface, PLI)、與 Verilog 程序介面(Verilog procedual interface, VPI)。PLI/VPI 是一種可允許外部函數訪問硬體描述語中的資料的一種組合，且可促進與模擬動態的互動。PLI/VPI 的應用包含將 VHDL 仿真器(simulator)與其他模擬與電腦輔助系統(computer-assisted design, CAD)、客製化的除錯任務(costomized debugging task)、延遲計算器(delay calculators)、注釋器(annotators)相接連。 2 引讀 2.1 Verilog 簡介 一套硬體描述語言 輔助設計數位系統 描述電路的行為 電子自動化工具 類似C語言的硬體描述語言 易學、容易接受 高階行為描述 切勿使用軟體思維(循序)撰寫(硬體描述語言多是並行的) 支援多種硬體層級的描述方式 從低階到高階模式 依照不同的方法設計 支援階層式的設計方法 樹狀式的設計結構 由繁化簡 2.</description></item></channel></rss>