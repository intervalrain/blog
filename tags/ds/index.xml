<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>DS on Rain's Blog</title><link>http://intervalrain.github.io/tags/ds/</link><description>Recent content in DS on Rain's Blog</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 03 Jan 2023 21:49:42 +0800</lastBuildDate><atom:link href="http://intervalrain.github.io/tags/ds/index.xml" rel="self" type="application/rss+xml"/><item><title>[Algo] 1-9. Algorithm</title><link>http://intervalrain.github.io/posts/cs/algo/algorithm/</link><pubDate>Tue, 03 Jan 2023 21:49:42 +0800</pubDate><guid>http://intervalrain.github.io/posts/cs/algo/algorithm/</guid><description>algorithm &amp;lt;algorithm&amp;gt; 定義了專為元素集合設計的函式。
元素集合包含可以被迭代器或指標存取的一系列元素，例如陣列或 STL container。但且注意，演算法只會透過迭代器去操作容器中的值，並不會更改其結構或是大小。
一、函式 1. 無修改值的操作 all_of bool all_of(Iterator first, Iterator last, UnaryPredicate pred)
檢查是否全部的元素都符合判斷式。 #include &amp;lt;iostream&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;algorithm&amp;gt; using namespace std; int main(){ vector&amp;lt;int&amp;gt; arr1 = {1,2,3,4,5}; vector&amp;lt;int&amp;gt; arr2 = {1,3,5,7,9}; vector&amp;lt;int&amp;gt; arr3 = {2,4,6,8,10}; auto isodd = [](int x)-&amp;gt;bool{ return x%2; }; cout &amp;lt;&amp;lt; all_of(arr1.begin(), arr1.end(), isodd) &amp;lt;&amp;lt; endl; // 0 cout &amp;lt;&amp;lt; all_of(arr2.begin(), arr2.end(), isodd) &amp;lt;&amp;lt; endl; // 1 cout &amp;lt;&amp;lt; all_of(arr3.begin(), arr3.</description></item><item><title>[Algo] 2-5. 動態規劃 Dynamic Programming</title><link>http://intervalrain.github.io/posts/cs/algo/dp/</link><pubDate>Tue, 15 Nov 2022 16:10:53 +0800</pubDate><guid>http://intervalrain.github.io/posts/cs/algo/dp/</guid><description>一、動態規劃的思考藝術 動態規劃其實就是一種暴力枚舉的優化，在暴力枚舉的過程中有著大量的重複，藉由「備忘錄(memoization)」的方式做到剪枝(pruning)來達到優化的一種演算法。 舉例來說： Leetcode 62. Unique Paths
機器人由左上走到右下角星星有幾種走法，其中機器人只能選擇往右走或往下走。 試想機器人從 (1,1) 走到 (m,n) 的不同路徑中，可見有大量的重複，比如過程中有一點 (i,j)，其 (1,1) 走到 (i,j) 有 k 條不同路徑，麼那對於任何一條固定 (i,j) 到 (m,n) 的路徑，都需走 k 遍來模擬。 但其實我們不必關心具體的走法，我們只關心狀態，也就是走法的數目。 同理，我們若知道 (i,j) 到 (m,n) 共有 t 條不同的路徑，那麼 (1,1) -&amp;gt; (i,j) -&amp;gt; (m,n) 的不同路徑總數就是 k*s。 我們知道最左邊那欄與最上面那列都只有可能有一種路徑可以走，又每一格的路徑來自於上方與左方的和： sum of (i,j) = sum of (i-1,j) + sum of (i,j-1) \(\begin{array}{|c|c|c|c|c|c|c|}\hline \text{1}&amp;amp;\text{1}&amp;amp;\text{1}&amp;amp;\text{1}&amp;amp;\text{1}&amp;amp;\text{1}&amp;amp;\text{1}\\\hline \text{1}&amp;amp;\text{2}&amp;amp;\text{3}&amp;amp;\text{4}&amp;amp;\text{5}&amp;amp;\text{6}&amp;amp;\text{7}\\\hline \text{1}&amp;amp;\text{3}&amp;amp;\text{6}&amp;amp;\text{10}&amp;amp;\text{15}&amp;amp;\text{21}&amp;amp;\text{28}\\\hline \end{array}\) 寫成程式碼就是 int uniquePaths(int m, int n) { vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; dp(m+1, vector&amp;lt;int&amp;gt;(n+1,0)); for (int i = 1; i &amp;lt;= m; i++) // 將第一列填成 1 dp[i][1] = 1; for (int j = 1; j &amp;lt;= n; j++) // 將第一欄填成 1 dp[1][j] = 1; for (int i = 2; i &amp;lt;= m; i++) { // 將剩下的格子填完 for (int j = 2; j &amp;lt;= n; j++) { dp[i][j] = dp[i-1][j] + dp[i][j-1]; } } return dp[m][n]; } 注意填格子的順序是有一定的限制的，必須要確保相關聯的子問題已經處理過。 動態規劃 由上例我們可以發現，原本的問題可以拆解成更小的問題(從 (1,1)-&amp;gt;(m,n) 變成從 (1,1)-&amp;gt;(i,j) 和從 (i,j)-&amp;gt;(m,n))。 我們令 f(i,j) 表示從 (1,1)-&amp;gt;(i,j) 的不同路徑數，則我們可以得到轉移方程式 f(i,j)=f(i-1,j)+f(i,j-1)。 我們發現，想求出 f(i,j) 只需要知道幾個更小的 f(i',j')。我們將 f(i',j') 稱為子問題。 我們捨棄冗餘的訊息(具體的走法)，只記錄對解決問題有幫助的結果。 動態規劃的兩大特點(適用前提) 無後效性 一旦 f(i,j) 確定，就不用關心我們如何計算出 f(i,j) 想要確定 f(i,j)，只需要知道 f(i-1,j) 和 f(i,j-1) 的值，而至於它們是如何算出來的，對當前或之後的任何子問題都沒有影響。 過去不依賴未來，未來不影響過去。 最優子結構 f(i,j) 的定義就已經蘊含了最優。 大問題的最優解可以由若干個小問題的最優解推出。(max, min, sum&amp;hellip;) DP 能適用於：能將大問題拆成若干小問題，滿足無後效性、最優子結構性質。 以下介紹幾種刷題會遇到的動態規劃套路： 二、動態規劃框架 1.</description></item><item><title>[Algo] 0-1. 複雜度分析 Algorithmic complexity / Big-O / Asymptotic analysis</title><link>http://intervalrain.github.io/posts/cs/algo/bigo/</link><pubDate>Thu, 06 Oct 2022 23:00:28 +0800</pubDate><guid>http://intervalrain.github.io/posts/cs/algo/bigo/</guid><description>一、Big O 表示法 Big O 的數學定義： \(\boxed{O(g(n)) = \lbrace{f(n):存在正常量\space c\space 和\space n_0，使得對所有\space n\ge n_0，有\space 0 \le f(n) \le cg(n)\rbrace}}\) 我們常用的 big O 表示法中的 \(O\) 其實代表了一個函數的集合，比方說 \(O(n^2)\) 代表著一個由 \(g(n) = n^2\) 派生出來的一個函數集合；我們說一個演算法的時間複雜度為 \(O(n^2)\)，意思就是描述該演算法的複雜度函數屬於這個函數集合之中。 分析複雜度時，常用的兩個特性： 只保留增長速率最快的項，其它省略 \(\boxed{O(2n+100) = O(n)}\) \(\boxed{O(2^{n+1}) = O(2^n)}\) \(\boxed{O(m+3n+99) = O(m+n)}\) \(\boxed{O(n^3+999\times n^2+999\times n) = O(n^3)}\) Big O 記號表示複雜度的「上限」 換句話說，只要給出的是一個上限，用 Big O 表示法都是正確的。 但在習慣上，我們特別取最緊臨的上限。但若複雜度會跟算法的輸入數據有關，沒辦法提前給出一個特別精確的時間複雜度時，擴大時間複雜度的上限就變得有意義了。 例如湊零錢問題中，金額 amount 的值為 n，coins 列表中的個數為 k，則這棵遞迴樹就是 K 叉樹。而節點的數量與樹的結構有關，而我們無法提前知道樹的結構，所以我們按照最壞情形來處理，高度為 n 的一棵滿 k 叉樹，其節點數為 \(\frac{k^n-1}{k-1}\)，用 big O 表示就是 \(O(k^n)\)。 回到目錄：[Algo] 演算法筆記 接著閱讀：[Algo] 0-2.</description></item><item><title>[Algo] 0-4. 二叉樹(Binary Tree)</title><link>http://intervalrain.github.io/posts/cs/algo/binary_tree/</link><pubDate>Thu, 06 Oct 2022 23:00:28 +0800</pubDate><guid>http://intervalrain.github.io/posts/cs/algo/binary_tree/</guid><description>一、二叉樹的思維模式 二叉樹的解題模式大致分為兩類： 是否可以通過遍歷一遍得解 是否可以定義一個遞迴函數，通過分治法推導出原問題的答案？ [LeetCode. 104] Maximum Depth of Binary Tree(Easy) 以此題為例，可以遍歷完整個樹，並比較當下的樹的深度，得以求解。 int depth = 0; int maxDepth(TreeNode* root){ traverse(root, 1); return depth; } void traverse(TreeNode* root, int currDepth){ if (!root) return; traverse(root-&amp;gt;left, currDepth+1); depth = max(depth, currDepth); traverse(root-&amp;gt;right, currDepth+1); } 若想辦法定義一個遞迴函數，通過分治法推導出原問題，換言之，就是先處理更小的樹，再藉由小的樹處理大的樹： int maxDepth(TreeNode* root) { if (root == NULL) return 0; return 1 + max(maxDepth(root-&amp;gt;left), maxDepth(root-&amp;gt;right)); } 事實上，兩個思維模式便對應著兩種演算法：回溯法(back tracking)與動態規劃(dynamic programming) 二、前序、中序、後序 無論使用哪種思維模式(遍歷或找出遞迴函數)，都要思考單獨抽出一個節點，它需要在何時(前、中、後序)做哪些事情，其它的節點交由遞迴函數去執行相同的操作。 以下我們以 quick sort 與 merge sort 為例，同樣是分治法，看看在數組上有什麼同樣的思維模式。 quick sort 從 sort() 函式便可見類似於前序的結構。 void sort(vector&amp;lt;int&amp;gt;&amp;amp; nums, int left, int right){ if (left &amp;gt;= right) return; // 終止條件 int mid = partition(nums, left, right); // 做什麼事(pre-order) sort(nums, left, mid-1); // 左子樹 sort(nums, mid+1, right); // 右子樹 } int partition(vector&amp;lt;int&amp;gt;&amp;amp; nums, int left, int right){ int pivot = right; while (left &amp;lt; right){ while (nums[left] &amp;lt; nums[pivot]) left++; while (nums[right] &amp;gt; nums[pivot]) right--; if (left &amp;lt; right) swap(nums[left], nums[right]); } if (left == right &amp;amp;&amp;amp; nums[left] &amp;gt; nums[pivot] || nums[right] &amp;lt; nums[pivot]){ swap(nums[left], pivot); return left; } return pivot; } merge sort 從 sort() 函式便可見類似於後序的結構。 void sort(vector&amp;lt;int&amp;gt;&amp;amp; nums, int left, int right){ if (left &amp;lt;= right) return; // 終止條件 int mid = left + (right-left)/2; sort(nums, left, mid); // 左子樹 sort(nums, mid+1, right); // 右子樹 merge(nums, left, mid, right); // 做什麼事(post-order) } void merge(vector&amp;lt;int&amp;gt;&amp;amp; nums, int left, int mid, int right){ vector&amp;lt;int&amp;gt; vec; int i = left, j = right; while (i &amp;lt;= mid &amp;amp;&amp;amp; j &amp;lt;= right){ int x = nums[i] &amp;lt; nums[j] ?</description></item><item><title>[Algo] 0-3. 鏈表(Linked List)</title><link>http://intervalrain.github.io/posts/cs/algo/linked_list/</link><pubDate>Thu, 06 Oct 2022 22:30:28 +0800</pubDate><guid>http://intervalrain.github.io/posts/cs/algo/linked_list/</guid><description>一、鏈表的基本結構 鏈表是由節點和指針構成的數據結構，每個節點存有一個值，和一個指向下一個節點的指針。不同於數組，鏈表並不能隨機訪問，必須透過指針找到該節點才能獲取其值；同理在未遍歷到鏈表結尾時，我們也無法知道鏈表長度，除非依賴其它數據結構儲存長度。 LeetCode 中默認的鏈表： struct ListNode { int val; ListNode *next; ListNode(int x) : val(x), next(nullptr) {} }; 二、鏈表的基本操作 在開始演算法實踐前，先來練習一下鏈表的 CRUD 吧！ 1. 查(Read) 由於鏈表並非在儲存格中連續分布，所以無法用索引進行隨機訪問，所以我們必須逐個訪問，直到到達我們想要的元素。 藉由指針每次指向當前節點的 next，移動 n 次到達 index 為 n 的節點。 int at(ListNode* head, int n){ // index 為 n ListNode* curr = head; while (n--){ // 移動 n 次 curr = curr-&amp;gt;next; } return curr-&amp;gt;val; } 2. 改(Update) 改的步驟，只是將查完的元素予以賦值。 void update(ListNode* head, int n, int val){ ListNode* curr = head; while (n--){ curr = curr-&amp;gt;next; } curr-&amp;gt;val = val; // 查完後賦值 } 3.</description></item><item><title>[Algo] 0-2. 算法思維</title><link>http://intervalrain.github.io/posts/cs/algo/concept/</link><pubDate>Thu, 06 Oct 2022 22:15:28 +0800</pubDate><guid>http://intervalrain.github.io/posts/cs/algo/concept/</guid><description>一、資料結構概要 資料結構的存儲方式大體上只分為兩種： Array、Linked List。
雖說資料結構有 disjoint matrix, queue, stack, tree, graph 等等，但它們都可以視為 Array 與 Linked List 的上層結構，可以看成是以 Array 或 Linked List 為基底上的操作，只是 API 不同而已。 Array：由於是緊湊連續儲存的，可以隨機訪問，通過 index 快速找到對應元素，且相對節約空間。但也因必須一次性分配儲存空間，所以 array 如果需要擴充容量，就必須再重新分配一塊更大的空間，再把數孛複製過去，其時間複雜度為 \(O(N)\)；在 array 中間進行 delete 與 insert，必須搬移後面所有數據以保持連續，故時間複雜度也為\(O(N)\)。 Linked List：因為元素不連續，而是靠指針指向下一個元素的位置，所以不存在 array 的擴充容量的問題，如果知道某一元素的前一個節點與後一個節點，操作指針即可刪除該元素或者插入新元素，時間複雜度為\(O(1)\)。但正因為儲存空間不連續，無法根擇 index 算出對應元素的地址，所以不能隨機訪問；而且由於每個元素必須額外儲存前後元素位置的指針，相對較耗空間。 在 C、C++ 語言中，指針(pointer)的存在使得其能更直接對儲存空間的位址做操作，所以在處理 C 語言時，要額外了解指針的運作方式。 二、資料結構的基本操作 資料結構的基本操作不外乎： 遍歷(traverse)、增減查改(CRUD, create, read, update, delete) Array：數組的遍歷框架 -&amp;gt; 典型的線性迭代結構： void traverse(vector&amp;lt;int&amp;gt; arr){ for (int i = 0; i &amp;lt; arr.size(); i++){ // iteration } } ListNode：鏈表的遍歷框架 -&amp;gt; 兼具迭代與遞迴 class ListNode { public: int val; ListNode* next; }; void traverse(ListNode* head){ for (ListNode curr = head; curr !</description></item><item><title>[DS] 演算法筆記</title><link>http://intervalrain.github.io/posts/cs/algo/</link><pubDate>Thu, 06 Oct 2022 22:00:28 +0800</pubDate><guid>http://intervalrain.github.io/posts/cs/algo/</guid><description>前言：此系列文章為參考 labuladong 的 fucking algorithm與 Leetcode101(高暢) 作為基底，簡化核心內容，並將程式碼以自己的 C++ code 替代，作為自己的學習筆記。
第零章、核心框架 0-1. 複雜度分析 Algorithmic complexity / Big-O / Asymptotic analysis 0-2. 算法思維 0-3. 鏈表 Linked List 0-4. 二叉樹 Binary Tree 第一章、資料結構、STL 1-1. vector 1-2. list 1-3. stack 1-4. queue 1-5. set 1-6. map 1-7. deque 1-8. priority_queue 1-9. algorithm 第二章、演算法設計 2-1. 暴力演算法 Brute Force 2-2. 貪心演算法 Greedy 2-3. 分治法 Divide and Conquer 2-4. 回溯法 Backtacking 2-5. 動態規劃 Dynamic Programming 第三章、主題介紹 4-1.</description></item></channel></rss>