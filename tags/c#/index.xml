<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>C# on Rain Hu's Workspace</title><link>https://intervalrain.github.io/tags/c#/</link><description>Recent content in C# on Rain Hu's Workspace</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 28 Feb 2023 21:08:01 +0800</lastBuildDate><atom:link href="https://intervalrain.github.io/tags/c#/index.xml" rel="self" type="application/rss+xml"/><item><title>[C#] static class 靜態類別</title><link>https://intervalrain.github.io/posts/csharp/static/</link><pubDate>Tue, 28 Feb 2023 21:08:01 +0800</pubDate><guid>https://intervalrain.github.io/posts/csharp/static/</guid><description>Introduction to static class in C#</description></item><item><title>[C#] C# 筆記</title><link>https://intervalrain.github.io/posts/csharp/csharp/</link><pubDate>Tue, 28 Feb 2023 18:49:39 +0800</pubDate><guid>https://intervalrain.github.io/posts/csharp/csharp/</guid><description>Notes for C#</description></item><item><title>[C#] Partial Type 局部類型</title><link>https://intervalrain.github.io/posts/csharp/partial/</link><pubDate>Tue, 28 Feb 2023 15:11:11 +0800</pubDate><guid>https://intervalrain.github.io/posts/csharp/partial/</guid><description>Introduction to partial class ans partial method in C#</description></item><item><title>[C#] IEnumerable &amp; IEnumerator 迭代器</title><link>https://intervalrain.github.io/posts/csharp/iterator/</link><pubDate>Mon, 27 Feb 2023 11:50:20 +0800</pubDate><guid>https://intervalrain.github.io/posts/csharp/iterator/</guid><description>Introduction to Iterator in C#, including IEnumerator and IEnumerable</description></item><item><title>[C#] Delegate 委派</title><link>https://intervalrain.github.io/posts/csharp/delegate/</link><pubDate>Sun, 26 Feb 2023 19:24:56 +0800</pubDate><guid>https://intervalrain.github.io/posts/csharp/delegate/</guid><description>Introduction to Delegate in C#</description></item><item><title>[C#] Nullable 可空值類型</title><link>https://intervalrain.github.io/posts/csharp/nullable/</link><pubDate>Thu, 23 Feb 2023 21:40:03 +0800</pubDate><guid>https://intervalrain.github.io/posts/csharp/nullable/</guid><description>Introduction to Nullable in C#</description></item><item><title>[C#] Generic 泛型</title><link>https://intervalrain.github.io/posts/csharp/generic/</link><pubDate>Wed, 22 Feb 2023 21:39:56 +0800</pubDate><guid>https://intervalrain.github.io/posts/csharp/generic/</guid><description>Introduction to Generic in C#</description></item><item><title>[IT] C# Depth Ch.2 C# 2</title><link>https://intervalrain.github.io/posts/it/csharp_depth_ch2/</link><pubDate>Fri, 20 Jan 2023 10:10:46 +0800</pubDate><guid>https://intervalrain.github.io/posts/it/csharp_depth_ch2/</guid><description>C# 2 一、泛型 使用泛型(generic type)可以在編寫在編譯時類型安全的通用程式碼，無須事先知道要使用的具體類型。 示例1: array類型: 大小需預先設定，若要添加需要重新分配 public static void Main(string[] args) { PrintNames(GenerateNames()); } public static void PrintNames(string[] names) { foreach (string name in names) { Console.WriteLine(name); } } public static string[] GenerateNames() { string[] names = new string[4]; names[0] = &amp;#34;Mike&amp;#34;; names[1] = &amp;#34;Rain&amp;#34;; names[2] = &amp;#34;Jessica&amp;#34;; names[3] = &amp;#34;Billy&amp;#34;; return names; } 示例2: ArrayList類型: ArrayList.Add是Object的方法，但如果塞入不適合的參數類型，可能會引發InvalidCastException
public static void Main(string[] args) { PrintNames(GenerateNames()); } public static void PrintNames(ArrayList names) { foreach (object name in names) { Console.</description></item><item><title>[IT] C# Depth Ch.1 與時俱進的語言</title><link>https://intervalrain.github.io/posts/it/csharp_depth_ch1/</link><pubDate>Tue, 17 Jan 2023 22:27:58 +0800</pubDate><guid>https://intervalrain.github.io/posts/it/csharp_depth_ch1/</guid><description>與時俱進的語言 一、System Class 1. 泛型(genric) 可更清楚的描述序列中每個元素的類型。 C#1 示例
public class Bookshelf { public IEnumerable Books { get { ... } } } C#2 示例：泛型
public class Bookshelf { public IEnumerable&amp;lt;Book&amp;gt; Books { get { ... } } } 2. 可空值類型(nullable value type) 可有效的表示未定的變量值，以擺脫魔數(用-1當集合索引，用 MinValue 或 MaxValue 做為初始值)。 示例
string? a = null; Console.WriteLine(a ?? &amp;#34;null&amp;#34;); // null a = &amp;#34;abc&amp;#34;; Console.WriteLine(a ?? &amp;#34;null&amp;#34;); // abc 3. 匿名類型(anonymous type)、隱式局部變數(var) 兩者皆可解決靜態類型語言的缺陷：程式碼冗長。 示例1: 匿名類型(anonymous type)</description></item><item><title>[C#] Yield Return</title><link>https://intervalrain.github.io/posts/csharp/yield/</link><pubDate>Sun, 01 Jan 2023 21:40:25 +0800</pubDate><guid>https://intervalrain.github.io/posts/csharp/yield/</guid><description>Introduction to yield return in C#, and the background of IEnumerable and IEnumerator</description></item></channel></rss>