[{"content":"1. Layer Layer 是神經網路的基本資料處理模組(data-processing module)，可以接受一個或多個張量輸入，再輸出一個或多個張量。Layer 的權重可視為該層的狀態(state)，在經過隨機梯度下降法(SGD)不斷更新權重(學習)，最終得到損失值最低的權重值。 分類 不同格式的資料需要不同的層來處理。 密集連接層(densely connected layer): 又稱全連接層(fully connected layer)或密集層(dense layer)。如果資料輸入是簡單的 1D 向量資料，則多半是儲存在 2D 張量中，其 shape 為 (樣本 samples, 特徵 features)，通常是用 循環層(recurrent layer): 如果輸入的資料是 2D 序列(sequence) 資料，多半是儲存在 3D 張量中，其 shape 為 (樣本 samples, 時戳 timestamps, 特徵 features)，如 LSTM 層。 2D 卷積層: 如果是 3D 影像資料，多半是儲存在 4D 張量中，通常使用 2D 卷積層(Conv2D Layer) Keras 中的基礎 Layer 類別 Layer 類別是 Keras 的核心，每個 Keras 元件都是一個 Layer 物件並與 Layer 有密切互動。Layer 是將一些狀態(權重)和運算(正向傳播)包在一起的物件。 雖然權重可以在建構子 __init__() 中建立，但我們通常會使用 build() 來建立，然後用 call() 來執行正向傳播。 from tensorflow import tf class SimpleDemo(keras.layers.Layer): def __init__(self, units, activation=None): super().__init__() self.units = units self.activation = activation def build(self, input_shape): input_dim = input_shape[-1] self.W = self.add_weight(shape=(input_dim, self.units),initializer=\u0026#34;random_normal\u0026#34;) self.b = self.add_weight(shape=(self.units,),initializer=\u0026#34;zeros\u0026#34;) def call(self, inputs): y = tf.matmul(inputs, self.W) + self.b if self.activation is not None: y = self.activation(y) return y 我們可以像使用函式一樣來實例化 Layer 物件，其輸入為一個張量 sample_layer = SimpleDemo(units=32, activation=tf.nn.relu) 建立 build() 方法的意義在於，我們希望在第一次呼叫 layer 物件時才即時創建權重張量。 keras 會幫我們做好自動推論權重的 shape，我們可以把關注給放在如何定義 build()。 model = keras.Sequential([ SimpleDense(32, activation=\u0026#34;relu\u0026#34;), SimpleDense(64, activation=\u0026#34;relu\u0026#34;), SimpleDense(32, activation=\u0026#34;relu\u0026#34;), SimpleDense(10, activation=\u0026#34;softmax\u0026#34;) ]) 事實上 __call__() 做的是遠不只推論 shape，還有 eager 執行模式 和 graph 執行模式 之的路徑選擇等等。 2. Model 深度學習模型是由多個層所組成的結構，在 Keras 是以 Model 類別來建立模型物件。\n目前為止我們只使用過 Sequential 類別的模型(序列式模型)，由多個層簡單堆疊而成，有單一的輸入與單一的輸出。\n有其他常見的神經網路拓撲，如：\n雙分支神經網路(Two-branch networks): 中間有分支，而非只有線性連接 多端口網路(Multihead networks): 有多個輸入端或輸出端 殘差連接(Residual connections): 某些層的輸出會分一條分支跳接到較遠的層 Keras 有兩種方式來建構這些非線性模型：\n直接創建 Model 類別的子類別 使用函數式 API(functional API) 模型的拓撲定義了一個假設空間(hypothesis space)，經由回饋訊號的指引，搜尋有用的輸入資料表示法。選擇完模型拓撲後，接著就是要找出可以發揮最好效果的權重張量。\n為了進行訓練，必須做一些假設，這些假設定義了模型可以學到的東西，所以假設空間的結構(模型架構)就變得格外重要，因為它會對現有問題的假設進行編碼，這些假設就是模型開始學習前的先驗知識(prior knowledge)\n3. 編譯 在 compile 之前，要先定義三件事情：\n損失函數(loss function) 優化器(optimizer) 評量指標 使用字串的方式定義優化器、損失函數、評量指標\nmodel = keras.Sequential([keras.layers.Dense(1)]) model.compile(optimizer=\u0026#34;rmsprop\u0026#34;, loss=\u0026#34;mean_square_error\u0026#34;, metrics=[\u0026#34;accuracy\u0026#34;]) 使用物件實例的方式定義優化器、損失函數、評量指標 model.compile(optimizer=keras.optimizer.RMSprop(), loss=keras.losses.meanSquaredError(), metrics=[keras.metrics.BinaryAccuracy()]) 物件實例的方法可以用於調整客制化配置 model.compile(optimizer=keras.optimizer.RMSprop(learning_rate=1e-4), loss=my_custom_loss, metrics=[my_custom_metric_1, my_custom_metric_2]) 4. 選擇損失函數 神經網路在學習過程中，設法降低損常值，所以如果損失函數與要達到的目標無相關時，可能會造成無效的訓練。 二分元類問題: 二元交叉熵(binary crossentropy) 多類別分類問題: 分類交叉熵(categorical crossentropy) 5. fit() 輸入(input) 與目標值(targets): 用來訓練的資料，包括輸入樣本和目標答案。資料通常以 NumPy 陣列或 Tensorflow 的 Dataset 物件傳入。 週期數(epochs): 訓練的迴圈數。 批次量(batch_size): 每一週期中，進行小批次梯度下降訓練時的批次量，也就是多少樣本進行一次梯度更新。 fit() 會回傳一個 History 物件，該物件是一個字典，key 是特定的評量指標名稱，value 是每一週期的損失值或指標值。 history = model.fit( inputs, targets, epochs=5, batch_size=128 ) 驗證資料 通常我們會將資料分為「訓練集」與「驗證集」，因為我們的目的並非只在訓練資料上表現良好，也需要在面對新資料時，有良好的預測。 model = keras.Sequential([keras.layers.Dense(1)]) model.compile(optimizer=keras.optimizer.RMSprop(learning_rate=0.1), loss=keras.losses.MeanSquaredError(), metrics=[keras.metrics.BinaryAccuracy()]) # 洗牌 indices_permutation = np.random.permutation(len(inputs)) shuffled_inputs = inputs[indices_permutation] shuffled_targets = targets[indices_permutation] # 用 3 成的資料做為驗證集 num_validation_samples = int(0.3 * len(inputs)) val_inputs = shuffled_inputs[:num_validation_samples] val_targets = shuffled_targets[:num_validation_samples] training_inputs = shuffled_inputs[num_validation_samples] training_target = shuffled_targets[num_validation_samples] model.fit( training_inputs, training_targets, epochs=5 batch_size=16, validation_data=(val_inputs, val_targets0) ) ","permalink":"https://intervalrain.github.io/ai/3_6/","summary":"\u003ch2 id=\"1-layer\"\u003e1. Layer\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eLayer 是神經網路的基本資料處理模組(data-processing module)，可以接受一個或多個張量輸入，再輸出一個或多個張量。Layer 的權重可視為該層的\u003cstrong\u003e狀態\u003c/strong\u003e(state)，在經過隨機梯度下降法(SGD)不斷更新權重(學習)，最終得到損失值最低的權重值。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"分類\"\u003e分類\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e不同格式的資料需要不同的層來處理。\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e密集連接層(densely connected layer):\u003c/strong\u003e 又稱全連接層(fully connected layer)或密集層(dense layer)。如果資料輸入是簡單的 1D 向量資料，則多半是儲存在 2D 張量中，其 shape 為 (樣本 samples, 特徵 features)，通常是用\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e循環層(recurrent layer)\u003c/strong\u003e: 如果輸入的資料是 2D 序列(sequence) 資料，多半是儲存在 3D 張量中，其 shape 為 (樣本 samples, 時戳 timestamps, 特徵 features)，如 LSTM 層。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e2D 卷積層\u003c/strong\u003e: 如果是 3D 影像資料，多半是儲存在 4D 張量中，通常使用 2D 卷積層(Conv2D Layer)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"keras-中的基礎-layer-類別\"\u003eKeras 中的基礎 Layer 類別\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eLayer 類別是 Keras 的核心，每個 Keras 元件都是一個 Layer 物件並與 Layer 有密切互動。Layer 是將一些狀態(權重)和運算(正向傳播)包在一起的物件。\u003c/li\u003e\n\u003cli\u003e雖然權重可以在建構子 \u003ccode\u003e__init__()\u003c/code\u003e 中建立，但我們通常會使用 \u003ccode\u003ebuild()\u003c/code\u003e 來建立，然後用 \u003ccode\u003ecall()\u003c/code\u003e 來執行正向傳播。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e tensorflow \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e tf\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSimpleDemo\u003c/span\u003e(keras\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003elayers\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eLayer):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e __init__(self, units, activation\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eNone\u003c/span\u003e):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        super()\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e__init__()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eunits \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e units\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eactivation \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e activation\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ebuild\u003c/span\u003e(self, input_shape):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tinput_dim \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e input_shape[\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tself\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eW \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eadd_weight(shape\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e(input_dim, self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eunits),initializer\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;random_normal\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tself\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eb \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eadd_weight(shape\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e(self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eunits,),initializer\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;zeros\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecall\u003c/span\u003e(self, inputs): \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\ty \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e tf\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ematmul(inputs, self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eW) \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eb\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eactivation \u003cspan style=\"color:#f92672\"\u003eis\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003enot\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eNone\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\ty \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e self\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eactivation(y)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e y\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e我們可以像使用函式一樣來實例化 Layer 物件，其輸入為一個張量\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esample_layer \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e SimpleDemo(units\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e32\u003c/span\u003e, activation\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003etf\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003enn\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003erelu)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e建立 \u003ccode\u003ebuild()\u003c/code\u003e 方法的意義在於，我們希望在第一次呼叫 layer 物件時才即時創建權重張量。\u003c/li\u003e\n\u003cli\u003ekeras 會幫我們做好自動推論權重的 shape，我們可以把關注給放在如何定義 \u003ccode\u003ebuild()\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emodel \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e keras\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eSequential([\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tSimpleDense(\u003cspan style=\"color:#ae81ff\"\u003e32\u003c/span\u003e, activation\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;relu\u0026#34;\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tSimpleDense(\u003cspan style=\"color:#ae81ff\"\u003e64\u003c/span\u003e, activation\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;relu\u0026#34;\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tSimpleDense(\u003cspan style=\"color:#ae81ff\"\u003e32\u003c/span\u003e, activation\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;relu\u0026#34;\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tSimpleDense(\u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e, activation\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;softmax\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e事實上 \u003ccode\u003e__call__()\u003c/code\u003e 做的是遠不只推論 shape，還有 \u003cstrong\u003eeager 執行模式\u003c/strong\u003e 和 \u003cstrong\u003egraph 執行模式\u003c/strong\u003e 之的路徑選擇等等。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"2-model\"\u003e2. Model\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e深度學習模型是由多個層所組成的結構，在 Keras 是以 \u003cstrong\u003eModel 類別\u003c/strong\u003e來建立模型物件。\u003c/p\u003e","title":"[AI] 3-6. Keras API"},{"content":"命題 我們先嘗試製作一個 sample data，考慮某一個台獨國內的房價與坪數的分布，標記出「城市」與「鄉下」兩個標籤：\n紫色代表城市的房子、黃色代表鄉下的房子 城市的房子房價較高且坪數較小、鄉下的房子房價較低且坪數較大。 隱藏的特徵為單位坪數的價格，城市會高於鄉下。 以下是產生的 data，seed 設為 42 import numpy as np def load_data(n1=1000,n2=300,seed=42): np.random.seed(seed) n=n1+n2 # 城市房屋 city = np.random.multivariate_normal( mean=[25.9, 1503.7], # [坪數, 總價(萬)] cov=[[33.64, 400], # 坪數標準差 5.8 [400, 64112.24]], # 總價標準差 253.2 size=n ) # 鄉村房屋 rural = np.random.multivariate_normal( mean=[31.8, 834.3], # [坪數, 總價(萬)] cov=[[62.41, 200], # 坪數標準差 7.9 [200, 9623.61]], # 總價標準差 98.1 size=n ) # 合併資料 data = np.vstack((city, rural)).astype(np.float32) labels = np.vstack((np.zeros((n,1), dtype=\u0026#34;float32\u0026#34;), np.ones((n,1), dtype=\u0026#34;float32\u0026#34;))) # 打散順序 shuffle_idx = np.random.permutation(len(data)) data = data[shuffle_idx] labels = labels[shuffle_idx] # 分割訓練集和測試集 train_data = data[:2*n1] test_data = data[2*n1:] train_labels = labels[:2*n1] test_labels = labels[2*n1:] return (train_data, train_labels), (test_data, test_labels) (train_data, train_labels), (test_data, test_labels) = load_data() 通用函式 因為 price 與 size 之間的值相差較大，所以我定義了正規化的函式、繪圖的函式、training 函式。 import numpy as np import matplotlib.pyplot as plt from sklearn.preprocessing import StandardScaler import tensorflow as tf from tensorflow.keras import layers, models, callbacks import pandas as pd # 共用參數 LEARNING_RATE = 0.01 BATCH_SIZE = 32 EPOCHS = 100 EARLY_STOPPING_PATIENCE = 10 def normalize_data(train_data, test_data): \u0026#34;\u0026#34;\u0026#34;標準化資料\u0026#34;\u0026#34;\u0026#34; scaler = StandardScaler() train_normalized = scaler.fit_transform(train_data) test_normalized = scaler.transform(test_data) return train_normalized, test_normalized, scaler def plot_decision_boundary(model, X, y, title, scaler=None, is_extended=False): \u0026#34;\u0026#34;\u0026#34;繪製決策邊界 Parameters: ----------- model : 訓練好的模型 X : array-like, shape (n_samples, 2) or (n_samples, 3) 輸入特徵 y : array-like 目標變數 title : str 圖表標題 scaler : StandardScaler, optional 用於還原正規化的scaler is_extended : bool 是否為擴展特徵模型 \u0026#34;\u0026#34;\u0026#34; if is_extended: # 對於擴展特徵模型，只使用前兩個特徵繪圖 X_plot = X[:, :2] else: X_plot = X # 設定決策邊界的範圍 x_min, x_max = X_plot[:, 0].min() - 0.5, X_plot[:, 0].max() + 0.5 y_min, y_max = X_plot[:, 1].min() - 0.5, X_plot[:, 1].max() + 0.5 # 創建網格點 xx, yy = np.meshgrid(np.arange(x_min, x_max, 0.02), np.arange(y_min, y_max, 0.02)) # 預測網格點的類別 grid_points = np.c_[xx.ravel(), yy.ravel()] if is_extended: # 為擴展特徵模型添加 price/size ratio ratio = grid_points[:, 1:2] / grid_points[:, 0:1] grid_points = np.hstack((grid_points, ratio)) Z = model.predict(grid_points) Z = Z.reshape(xx.shape) # 如果提供了scaler，將數據轉換回原始尺度 if scaler is not None: # 轉換網格點 grid_points_original = scaler.inverse_transform(grid_points[:, :2]) xx_original = grid_points_original[:, 0].reshape(xx.shape) yy_original = grid_points_original[:, 1].reshape(yy.shape) # 轉換特徵點 X_original = scaler.inverse_transform(X_plot) x_plot = X_original[:, 0] y_plot = X_original[:, 1] xlabel = \u0026#39;Size\u0026#39; ylabel = \u0026#39;Price\u0026#39; else: x_plot = X_plot[:, 0] y_plot = X_plot[:, 1] xx_original = xx yy_original = yy xlabel = \u0026#39;Normalized Size\u0026#39; ylabel = \u0026#39;Normalized Price\u0026#39; # 繪製圖形 plt.figure(figsize=(10, 8)) # 繪製預測機率的漸層 plt.contourf(xx_original, yy_original, Z, alpha=0.4, levels=np.linspace(0, 1, 11)) # 添加決策邊界（機率=0.5的等高線） plt.contour(xx_original, yy_original, Z, levels=[0.5], colors=\u0026#39;red\u0026#39;, linestyles=\u0026#39;-\u0026#39;, linewidths=2) # 繪製資料點 plt.scatter(x_plot, y_plot, c=y.ravel(), alpha=0.8) plt.title(title) plt.xlabel(xlabel) plt.ylabel(ylabel) # 添加顏色條 plt.colorbar(label=\u0026#39;Prediction Probability\u0026#39;) plt.show() def train_and_evaluate(model, train_data, train_labels, test_data, test_labels, epochs=EPOCHS, batch_size=BATCH_SIZE, use_early_stopping=False): \u0026#34;\u0026#34;\u0026#34;訓練模型並評估\u0026#34;\u0026#34;\u0026#34; callbacks_list = [] if use_early_stopping: early_stopping = callbacks.EarlyStopping( monitor=\u0026#39;val_loss\u0026#39;, patience=EARLY_STOPPING_PATIENCE, restore_best_weights=True ) callbacks_list.append(early_stopping) history = model.fit( train_data, train_labels, epochs=epochs, batch_size=batch_size, validation_split=0.2, callbacks=callbacks_list, verbose=0 ) test_loss, test_accuracy = model.evaluate(test_data, test_labels, verbose=0) return history, test_loss, test_accuracy 定義模型 本篇設定了不同的 model, optimizer, loss，不代表哪一種 pattern 的優劣，純粹是示範 library 使用。 由於我想看不同的 optimizer/activation/loss function的差異，所以我共用了部分參數 LEARNING_RATE = 0.01 BATCH_SIZE = 32 EPOCHS = 100 EARLY_STOPPING_PATIENCE = 10 我列了幾個不同的策略，來看看結果的差異 SGD + 線性模型 (wx+b) + MSE SGD + Sigmoid 模型 + MSE SGD + ReLU 模型 + MSE SGD + Sigmoid 模型 + BCE Adam + Sigmoid 模型 + BCE Adam + Sigmoid 模型 + BCE (加入新特徵 price/size) Adam + 雜複模型 + BCD Adam + 複雜模型 + BCD (加入新特徵 price/size) 1. SGD + 線性模型 (wx+b) + MSE # 1. 線性模型 (wx+b) def create_linear_model(): model = models.Sequential([ layers.Dense(1, input_shape=(2,), activation=\u0026#39;linear\u0026#39;) ]) model.compile(optimizer=tf.keras.optimizers.SGD(learning_rate=LEARNING_RATE), loss=\u0026#39;mse\u0026#39;, metrics=[\u0026#39;accuracy\u0026#39;]) return model 2. SGD + Sigmoid + MSE # 2. Sigmoid模型 def create_sigmoid_model(): model = models.Sequential([ layers.Dense(1, input_shape=(2,), activation=\u0026#39;sigmoid\u0026#39;) ]) model.compile(optimizer=tf.keras.optimizers.SGD(learning_rate=LEARNING_RATE), loss=\u0026#39;mse\u0026#39;, metrics=[\u0026#39;accuracy\u0026#39;]) return model 3. SGD + ReLU + MSE # 3. ReLU模型 + MSE def create_relu_mse_model(): model = models.Sequential([ layers.Dense(1, input_shape=(2,), activation=\u0026#39;relu\u0026#39;) ]) model.compile(optimizer=tf.keras.optimizers.SGD(learning_rate=LEARNING_RATE), loss=\u0026#39;mse\u0026#39;, metrics=[\u0026#39;accuracy\u0026#39;]) return model 4. SGD + ReLU + BCE # 4. ReLU模型 + BCE def create_relu_bce_model(): model = models.Sequential([ layers.Dense(1, input_shape=(2,), activation=\u0026#39;relu\u0026#39;) ]) model.compile(optimizer=tf.keras.optimizers.SGD(learning_rate=LEARNING_RATE), loss=\u0026#39;binary_crossentropy\u0026#39;, metrics=[\u0026#39;accuracy\u0026#39;]) return model 5. Adam + Sigmoid + BCE # 5. Adam + BCE def create_adam_model(): model = models.Sequential([ layers.Dense(1, input_shape=(2,), activation=\u0026#39;sigmoid\u0026#39;) ]) model.compile(optimizer=\u0026#39;adam\u0026#39;, loss=\u0026#39;binary_crossentropy\u0026#39;, metrics=[\u0026#39;accuracy\u0026#39;]) return model 6. Adam + Sigmoid + BCE (加入新特徵) # 6. 新增 price/size feature 的模型 def add_price_size_ratio(data): price_size_ratio = data[:, 1:2] / data[:, 0:1] return np.hstack((data, price_size_ratio)) def create_extended_model(): model = models.Sequential([ layers.Dense(1, input_shape=(3,), activation=\u0026#39;sigmoid\u0026#39;) ]) model.compile(optimizer=\u0026#39;adam\u0026#39;, loss=\u0026#39;binary_crossentropy\u0026#39;, metrics=[\u0026#39;accuracy\u0026#39;]) return model 7. Adam + 複雜模型 + Dropout + Early Stop # 7. 複雜模型 + Dropout def create_complex_model(input_shape): model = models.Sequential([ layers.Dense(64, input_shape=input_shape, activation=\u0026#39;relu\u0026#39;), layers.Dropout(0.3), layers.Dense(32, activation=\u0026#39;relu\u0026#39;), layers.Dropout(0.2), layers.Dense(16, activation=\u0026#39;relu\u0026#39;), layers.Dense(1, activation=\u0026#39;sigmoid\u0026#39;) ]) model.compile(optimizer=\u0026#39;adam\u0026#39;, loss=\u0026#39;binary_crossentropy\u0026#39;, metrics=[\u0026#39;accuracy\u0026#39;]) return model 8. Adam + 複雜模型 + Dropout + Early Stop (加入新特徵) 執行 def main(): # 載入資料 (train_data, train_labels), (test_data, test_labels) = load_data() # 標準化資料 train_normalized, test_normalized, scaler = normalize_data(train_data, test_data) # 儲存結果的列表 results = [] # 1. 線性模型 model1 = create_linear_model() history1, test_loss1, test_acc1 = train_and_evaluate( model1, train_normalized, train_labels, test_normalized, test_labels) plot_decision_boundary(model1, train_normalized, train_labels, \u0026#39;Linear Model (wx+b)\u0026#39;, scaler) results.append((\u0026#39;Linear Model\u0026#39;, test_acc1)) # 2. Sigmoid模型 model2 = create_sigmoid_model() history2, test_loss2, test_acc2 = train_and_evaluate( model2, train_normalized, train_labels, test_normalized, test_labels) plot_decision_boundary(model2, train_normalized, train_labels, \u0026#39;Sigmoid Model\u0026#39;, scaler) results.append((\u0026#39;Sigmoid Model\u0026#39;, test_acc2)) # 3. ReLU + MSE model3 = create_relu_mse_model() history3, test_loss3, test_acc3 = train_and_evaluate( model3, train_normalized, train_labels, test_normalized, test_labels) plot_decision_boundary(model3, train_normalized, train_labels, \u0026#39;ReLU + MSE\u0026#39;, scaler) results.append((\u0026#39;ReLU + MSE\u0026#39;, test_acc3)) # 4. ReLU + BCE model4 = create_relu_bce_model() history4, test_loss4, test_acc4 = train_and_evaluate( model4, train_normalized, train_labels, test_normalized, test_labels) plot_decision_boundary(model4, train_normalized, train_labels, \u0026#39;ReLU + BCE\u0026#39;, scaler) results.append((\u0026#39;ReLU + BCE\u0026#39;, test_acc4)) # 5. Adam + BCE model5 = create_adam_model() history5, test_loss5, test_acc5 = train_and_evaluate( model5, train_normalized, train_labels, test_normalized, test_labels) plot_decision_boundary(model5, train_normalized, train_labels, \u0026#39;Adam + BCE\u0026#39;, scaler) results.append((\u0026#39;Adam + BCE\u0026#39;, test_acc5)) # 6. 加入 price/size ratio train_extended = add_price_size_ratio(train_normalized) test_extended = add_price_size_ratio(test_normalized) model6 = create_extended_model() history6, test_loss6, test_acc6 = train_and_evaluate( model6, train_extended, train_labels, test_extended, test_labels) plot_decision_boundary(model6, train_normalized, train_labels, \u0026#39;Extended Model\u0026#39;, scaler, is_extended=True) results.append((\u0026#39;Extended Features\u0026#39;, test_acc6)) # 7. 複雜模型 + Dropout + Early Stopping model7 = create_complex_model((2,)) history7, test_loss7, test_acc7 = train_and_evaluate( model7, train_normalized, train_labels, test_normalized, test_labels, use_early_stopping=True) plot_decision_boundary(model7, train_normalized, train_labels, \u0026#39;Complex Model + Dropout\u0026#39;, scaler) results.append((\u0026#39;Complex Model\u0026#39;, test_acc7)) # 8. 複雜模型 + new feature model8 = create_complex_model((3,)) history8, test_loss8, test_acc8 = train_and_evaluate( model8, train_extended, train_labels, test_extended, test_labels, use_early_stopping=True) plot_decision_boundary(model8, train_extended, train_labels, \u0026#39;Extended Complex Model + Dropout\u0026#39;, scaler, is_extended=True) results.append((\u0026#39;Extended Features Complex Model\u0026#39;, test_acc8)) # 顯示結果比較 results_df = pd.DataFrame(results, columns=[\u0026#39;Model\u0026#39;, \u0026#39;Test Accuracy\u0026#39;]) print(\u0026#34;\\nModel Comparison:\u0026#34;) print(results_df.to_string(index=False)) if __name__ == \u0026#34;__main__\u0026#34;: main() 結果比較 Model Comparison: Model Test Accuracy Linear Model 0.968333 Sigmoid Model 0.975000 ReLU + MSE 0.985000 ReLU + BCE 0.985000 Adam + BCE 0.976667 Extended Features 0.973333 Complex Model 0.986667 Extended Features Complex Model 0.981667 其中紅色的線是我們得出的決策邊界，如果在高維空間，則會是一個「超平面」。 ","permalink":"https://intervalrain.github.io/ai/3_5/","summary":"\u003ch2 id=\"命題\"\u003e命題\u003c/h2\u003e\n\u003cp\u003e我們先嘗試製作一個 sample data，考慮某一個台獨國內的房價與坪數的分布，標記出「城市」與「鄉下」兩個標籤：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e紫色代表城市的房子、黃色代表鄉下的房子\u003c/li\u003e\n\u003cli\u003e城市的房子房價較高且坪數較小、鄉下的房子房價較低且坪數較大。\u003c/li\u003e\n\u003cli\u003e隱藏的特徵為單位坪數的價格，城市會高於鄉下。\n\u003cimg alt=\"ori\" loading=\"lazy\" src=\"/ai/AI/3_5/ori.png\"\u003e\u003c/li\u003e\n\u003cli\u003e以下是產生的 data，\u003ccode\u003eseed\u003c/code\u003e 設為 \u003ccode\u003e42\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e numpy \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e np\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eload_data\u003c/span\u003e(n1\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1000\u003c/span\u003e,n2\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e300\u003c/span\u003e,seed\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e42\u003c/span\u003e):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  np\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003erandom\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eseed(seed)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  n\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003en1\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003en2\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e# 城市房屋\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  city \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e np\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003erandom\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003emultivariate_normal(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    mean\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e25.9\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e1503.7\u003c/span\u003e],    \u003cspan style=\"color:#75715e\"\u003e# [坪數, 總價(萬)]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    cov\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e[[\u003cspan style=\"color:#ae81ff\"\u003e33.64\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e400\u003c/span\u003e],      \u003cspan style=\"color:#75715e\"\u003e# 坪數標準差 5.8\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e         [\u003cspan style=\"color:#ae81ff\"\u003e400\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e64112.24\u003c/span\u003e]],  \u003cspan style=\"color:#75715e\"\u003e# 總價標準差 253.2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    size\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003en\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  )\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e# 鄉村房屋\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  rural \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e np\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003erandom\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003emultivariate_normal(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    mean\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e31.8\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e834.3\u003c/span\u003e],     \u003cspan style=\"color:#75715e\"\u003e# [坪數, 總價(萬)]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    cov\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e[[\u003cspan style=\"color:#ae81ff\"\u003e62.41\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e200\u003c/span\u003e],      \u003cspan style=\"color:#75715e\"\u003e# 坪數標準差 7.9\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e         [\u003cspan style=\"color:#ae81ff\"\u003e200\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e9623.61\u003c/span\u003e]],   \u003cspan style=\"color:#75715e\"\u003e# 總價標準差 98.1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    size\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003en\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  )\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e# 合併資料\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  data \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e np\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003evstack((city, rural))\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eastype(np\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003efloat32)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  labels \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e np\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003evstack((np\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ezeros((n,\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e), dtype\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;float32\u0026#34;\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                      np\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eones((n,\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e), dtype\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;float32\u0026#34;\u003c/span\u003e)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e# 打散順序\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  shuffle_idx \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e np\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003erandom\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003epermutation(len(data))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  data \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e data[shuffle_idx]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  labels \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e labels[shuffle_idx]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e# 分割訓練集和測試集\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  train_data \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e data[:\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003en1]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  test_data \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e data[\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003en1:]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  train_labels \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e labels[:\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003en1]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  test_labels \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e labels[\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003en1:]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e (train_data, train_labels), (test_data, test_labels)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e(train_data, train_labels), (test_data, test_labels) \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e load_data()\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"通用函式\"\u003e通用函式\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e因為 price 與 size 之間的值相差較大，所以我定義了正規化的函式、繪圖的函式、training 函式。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e numpy \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e np\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e matplotlib.pyplot \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e plt\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e sklearn.preprocessing \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e StandardScaler\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e tensorflow \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e tf\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e tensorflow.keras \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e layers, models, callbacks\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e pandas \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e pd\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 共用參數\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eLEARNING_RATE \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0.01\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eBATCH_SIZE \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e32\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eEPOCHS \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e100\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eEARLY_STOPPING_PATIENCE \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enormalize_data\u003c/span\u003e(train_data, test_data):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u0026#34;標準化資料\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    scaler \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e StandardScaler()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    train_normalized \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e scaler\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003efit_transform(train_data)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    test_normalized \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e scaler\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003etransform(test_data)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e train_normalized, test_normalized, scaler\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eplot_decision_boundary\u003c/span\u003e(model, X, y, title, scaler\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eNone\u003c/span\u003e, is_extended\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eFalse\u003c/span\u003e):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u0026#34;繪製決策邊界\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e    Parameters:\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e    -----------\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e    model : 訓練好的模型\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e    X : array-like, shape (n_samples, 2) or (n_samples, 3)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e        輸入特徵\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e    y : array-like\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e        目標變數\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e    title : str\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e        圖表標題\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e    scaler : StandardScaler, optional\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e        用於還原正規化的scaler\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e    is_extended : bool\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e        是否為擴展特徵模型\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#e6db74\"\u003e    \u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e is_extended:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e# 對於擴展特徵模型，只使用前兩個特徵繪圖\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        X_plot \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e X[:, :\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        X_plot \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e X\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e# 設定決策邊界的範圍\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    x_min, x_max \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e X_plot[:, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003emin() \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0.5\u003c/span\u003e, X_plot[:, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003emax() \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0.5\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    y_min, y_max \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e X_plot[:, \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003emin() \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0.5\u003c/span\u003e, X_plot[:, \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003emax() \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0.5\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e# 創建網格點\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    xx, yy \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e np\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003emeshgrid(np\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003earange(x_min, x_max, \u003cspan style=\"color:#ae81ff\"\u003e0.02\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                        np\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003earange(y_min, y_max, \u003cspan style=\"color:#ae81ff\"\u003e0.02\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e# 預測網格點的類別\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    grid_points \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e np\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ec_[xx\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eravel(), yy\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eravel()]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e is_extended:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e# 為擴展特徵模型添加 price/size ratio\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        ratio \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e grid_points[:, \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e:\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e grid_points[:, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e:\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        grid_points \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e np\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ehstack((grid_points, ratio))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Z \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e model\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003epredict(grid_points)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Z \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Z\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ereshape(xx\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eshape)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e# 如果提供了scaler，將數據轉換回原始尺度\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e scaler \u003cspan style=\"color:#f92672\"\u003eis\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003enot\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eNone\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e# 轉換網格點\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        grid_points_original \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e scaler\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003einverse_transform(grid_points[:, :\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        xx_original \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e grid_points_original[:, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ereshape(xx\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eshape)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        yy_original \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e grid_points_original[:, \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ereshape(yy\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eshape)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e# 轉換特徵點\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        X_original \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e scaler\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003einverse_transform(X_plot)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        x_plot \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e X_original[:, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        y_plot \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e X_original[:, \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        xlabel \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;Size\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        ylabel \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;Price\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        x_plot \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e X_plot[:, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        y_plot \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e X_plot[:, \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        xx_original \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e xx\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        yy_original \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e yy\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        xlabel \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;Normalized Size\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        ylabel \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;Normalized Price\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e# 繪製圖形\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    plt\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003efigure(figsize\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e8\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e# 繪製預測機率的漸層\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    plt\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003econtourf(xx_original, yy_original, Z, alpha\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0.4\u003c/span\u003e, levels\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003enp\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003elinspace(\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e11\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e# 添加決策邊界（機率=0.5的等高線）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    plt\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003econtour(xx_original, yy_original, Z, levels\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e0.5\u003c/span\u003e], \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e               colors\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;red\u0026#39;\u003c/span\u003e, linestyles\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;-\u0026#39;\u003c/span\u003e, linewidths\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e# 繪製資料點\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    plt\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003escatter(x_plot, y_plot, c\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003ey\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eravel(), alpha\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0.8\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    plt\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003etitle(title)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    plt\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003exlabel(xlabel)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    plt\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eylabel(ylabel)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e# 添加顏色條\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    plt\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecolorbar(label\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;Prediction Probability\u0026#39;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    plt\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eshow()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etrain_and_evaluate\u003c/span\u003e(model, train_data, train_labels, test_data, test_labels, \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                      epochs\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eEPOCHS, batch_size\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eBATCH_SIZE, use_early_stopping\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eFalse\u003c/span\u003e):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u0026#34;訓練模型並評估\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    callbacks_list \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e []\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e use_early_stopping:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        early_stopping \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e callbacks\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eEarlyStopping(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            monitor\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;val_loss\u0026#39;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            patience\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eEARLY_STOPPING_PATIENCE,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            restore_best_weights\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eTrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        )\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        callbacks_list\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eappend(early_stopping)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    history \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e model\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003efit(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        train_data, train_labels,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        epochs\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eepochs,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        batch_size\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003ebatch_size,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        validation_split\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0.2\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        callbacks\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003ecallbacks_list,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        verbose\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    )\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    test_loss, test_accuracy \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e model\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eevaluate(test_data, test_labels, verbose\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e history, test_loss, test_accuracy\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"定義模型\"\u003e定義模型\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e本篇設定了不同的 model, optimizer, loss，不代表哪一種 pattern 的優劣，純粹是示範 library 使用。\u003c/li\u003e\n\u003cli\u003e由於我想看不同的 optimizer/activation/loss function的差異，所以我共用了部分參數\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eLEARNING_RATE = 0.01\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eBATCH_SIZE = 32\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eEPOCHS = 100\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eEARLY_STOPPING_PATIENCE = 10\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e我列了幾個不同的策略，來看看結果的差異\n\u003col\u003e\n\u003cli\u003eSGD + 線性模型 (wx+b) + MSE\u003c/li\u003e\n\u003cli\u003eSGD + Sigmoid 模型 + MSE\u003c/li\u003e\n\u003cli\u003eSGD + ReLU 模型 + MSE\u003c/li\u003e\n\u003cli\u003eSGD + Sigmoid 模型 + BCE\u003c/li\u003e\n\u003cli\u003eAdam + Sigmoid 模型 + BCE\u003c/li\u003e\n\u003cli\u003eAdam + Sigmoid 模型 + BCE (加入新特徵 price/size)\u003c/li\u003e\n\u003cli\u003eAdam + 雜複模型 + BCD\u003c/li\u003e\n\u003cli\u003eAdam + 複雜模型 + BCD  (加入新特徵 price/size)\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"1-sgd--線性模型-wxb--mse\"\u003e1. SGD + 線性模型 (wx+b) + MSE\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 1. 線性模型 (wx+b)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecreate_linear_model\u003c/span\u003e():\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    model \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e models\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eSequential([\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        layers\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eDense(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, input_shape\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e,), activation\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;linear\u0026#39;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    model\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecompile(optimizer\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003etf\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ekeras\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eoptimizers\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eSGD(learning_rate\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eLEARNING_RATE),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                 loss\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;mse\u0026#39;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                 metrics\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e[\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;accuracy\u0026#39;\u003c/span\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e model\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cimg alt=\"test1\" loading=\"lazy\" src=\"/ai/AI/3_5/test1.png\"\u003e\u003c/p\u003e","title":"[AI] 3-5. 實作線性分類器"},{"content":"目標 機器學習的目標有很多種，參考李宏毅教授的機器學習課程，可以用下面一張圖來概述。 Task 代表機器學習的目標 Regression: 透過迴歸來預測值。 Classification: 處理分類問題。 Structed Learning: 生成結構化的資訊(現在稱為生成式 AI, GenAI) Scenario 代表解決問題的策略 Supervised Learning: 使用已標記的訓練數據進行訓練 Semi-supervised Learning: 使用有標記與無標記的訓練數據進行訓練 Unsupervised Learning: 不使用標記的訓練數據進行訓據，由模型自行發現模式與結構 Reinforcement Learning: 透過「獎勵」與「懲罰」來學習。 Transfer Learning: 將一個任務學習到的知識應用到相關的新任務 Method 指應用的方法 Linear Model Deep Learning SVM Decision Tree KNN 線性迴歸 暴力解 假設我們大概知道答案的區間，我們可以暴力求解，將每一個 w, b 代入求最小的 (w, b) 組合 這個方法的缺點是，計算量很大，且我們求值的方式不是連續的，精準度不夠。 import sys areas = data[:,0] prices = data[:,1] def compute_loss(y_pred, y): return (y_pred - y)**2 best_w = 0. best_b = 0. min_loss = sys.float_info.max # 猜 w=30-50, step = 0.1 # 猜 b=200-600 step = 1 for i in range(200): for j in range(400): w = 30 + i*0.1 b = 200 + j*1 loss = 0. for area, price in zip(areas, prices): y_pred = w * area + b loss += compute_loss(y_pred, price) if loss \u0026lt; min_loss: min_loss = loss best_w = w best_b = b w=35.1 b=599 線性代數解法 假如我們學過線性代數，我們想得到它的歸性迴歸方程式，我們的作法會是： 設迴歸方程式為 $$\\text{y}=\\text{wx}+\\text{b}\\quad\\quad (1)$$\n我們要求最小平方差 $$\\text{L}=\\sum_{i=0}^n(\\text{y}_i-\\text{y})^2\\quad\\quad (2)$$\n將 (1) 代入 (2)\n$$\\text{L}=\\sum_{i=0}^n(\\text{y}_i-\\text{wx}-\\text{b})^2\\quad\\quad (3)$$\n學過線性代數，我們知道要求極值，可以對其求導數為0，並設 w 與 b 互不為函數，故我們對其個別做偏微分等於0。 $$\\frac{\\partial\\text{L}}{\\partial\\text{w}}=0$$\n$$\\frac{\\partial\\text{L}}{\\partial\\text{b}}=0$$\n對 b 做偏微分 $$\\frac{\\partial\\text{L}}{\\partial\\text{b}}=-2\\sum_{i=0}^n(\\text{y}_i-\\text{wx}_i-\\text{b})=0$$\n$$\\sum_{i=0}^n(\\text{y}_i-\\text{wx}_i-\\text{b})=0$$\n$$\\sum_{i=0}^n\\text{y}_i-\\text{w}\\sum _{i=0}^n\\text{x}_i-\\text{nb}=0$$\n$$\\text{n}\\bar{\\text{y}}-\\text{n}\\bar{\\text{wx}}-\\text{nb}=0$$\n$$\\text{b}=\\bar{\\text{y}}-\\text{w}\\bar{\\text{x}}\\quad\\quad (4)$$\n對 w 做偏微分 $$\\frac{\\partial\\text{L}}{\\partial\\text{w}}=-2\\sum_{i=0}^n\\text{x}_i(\\text{y}_i-\\text{wx}_i-\\text{b})=0$$\n$$\\sum_{i=0}^n\\text{x}_i(\\text{y}_i-\\text{wx}_i-\\text{b})=0$$\n$$\\sum_{i=0}^n\\text{x}_i\\text{y}_i-\\text{w}\\sum _{i=0}^n\\text{x}_i^2-\\text{b}\\sum _{i=0}^n\\text{x}_i=0$$\n代入 (4) $$\\sum_{i=0}^n\\text{x}_i\\text{y}_i-\\text{w}\\sum _{i=0}^n\\text{x}_i^2-(\\bar{\\text{y}}-\\text{w}\\bar{\\text{x}})\\sum _{i=0}^n\\text{x}_i=0$$\n$$\\sum_{i=0}^n\\text{x}_i\\text{y}_i-\\text{w}\\sum _{i=0}^n\\text{x}_i^2-\\bar{\\text{y}}\\sum _{i=0}^n\\text{x}_i+\\text{w}\\sum _{i=0}^n\\text{x}_i\\bar{\\text{x}}=0$$\n$$\\text{w}(\\sum _{i=0}^n\\text{x}_i\\bar{\\text{x}}-\\sum _{i=0}^n\\text{x}_i^2)=\\bar{\\text{y}}\\sum _{i=0}^n\\text{x}_i-\\sum _{i=0}^n\\text{x}_i\\text{y}_i$$\n$$\\text{w}(\\text{n}\\bar{\\text{x}}^2-\\sum _{i=0}^n\\text{x}_i^2)=\\text{n}\\bar{\\text{x}}\\bar{\\text{y}}-\\sum _{i=0}^n\\text{x}_i\\text{y}_i$$\n$$\\text{w}=\\frac{\\sum\\text{x}_i\\text{y}_i-\\text{n}\\bar{\\text{x}}\\bar{\\text{y}}}{\\sum\\text{x}_i^2-\\text{n}\\bar{\\text{x}}^2}$$\n$$\\text{w}=\\frac{\\sum\\text{y}_i(\\text{x}_i-\\bar{\\text{x}})}{\\sum\\text{x}_i(\\text{x}_i-\\bar{\\text{x}})}$$\n$$\\text{w}=\\frac{\\sum(\\text{y}-\\bar{\\text{y}})(\\text{x}-\\bar{\\text{x}})}{\\sum(\\text{x}_i-\\bar{\\text{x}})^2}$$\n$$\\text{w}=\\frac{S_{XY}}{S_{XX}}\\quad\\quad(5)$$\n換言之，我們可以透過 (4) 與 (5) 式直接求得迴歸方程式 $$\\text{y}=\\frac{S_{XY}}{S_{XX}}\\text{x}+(\\bar{\\text{y}}-\\frac{S_{XY}}{S_{XX}}\\bar{\\text{x}})$$\n其中\n$$S_{XY}=\\sum(\\text{x}_i-\\bar{\\text{x}})(\\text{y}_i-\\bar{\\text{y}})=\\sum\\text{x}_i\\text{y}_i-\\text{n}\\bar{\\text{x}}\\bar{\\text{y}}$$\n$$S_{XX}=\\sum(\\text{x}_i-\\bar{\\text{x}})^2=\\sum\\text{x}_i^2-\\text{n}\\bar{\\text{x}}^2$$\n直接運用於 sample:\nimport matplotlib.pyplot as plt meanx = data[:, 0].mean() meany = data[:, 1].mean() sxy = 0.0 sxx = 0.0 for i in range(data.shape[0]): sxy += (data[i,0] - meanx)*(data[i,1] - meany) sxx += (data[i,0] - meanx)**2 w = sxy/sxx b = meany - w*meanx plt.figure(figsize=(10, 6)) plt.scatter(data[:, 0], data[:, 1], alpha=0.5) plt.plot(data[:, 0], w*data[:, 0] + b, color=\u0026#39;red\u0026#39;, label=\u0026#39;Regression Line\u0026#39;) plt.xlabel(\u0026#39;Size (ping)\u0026#39;) plt.ylabel(\u0026#39;Total Price (10k)\u0026#39;) plt.title(\u0026#39;House Price versus House Size\u0026#39;) plt.legend() plt.grid(True) plt.show() print(f\u0026#34;w = {w:.4f}\u0026#34;) print(f\u0026#34;b = {b:.4f}\u0026#34;) w = 34.9738 b = 602.5411 梯度下降(gradient descent) 但事實上，在機器學習的領域要處理的不一定是上述這種只有兩維的問題，多維的問題會有多個梯度為0的地方，代表我們需要求出全部梯度為0的地方，再逐一代入我們的 loss function，最後找出 loss 最小的一組答案。 再者是，加入 activation function 後的方程式，變得並非上述案例中的容易微分。 import numpy as np import tensorflow as tf from tensorflow import keras import matplotlib.pyplot as plt from matplotlib import cm # 1. 資料正規化函數 def normalize_data(data): return (data - np.mean(data, axis=0)) / np.std(data, axis=0) # 2. 建立並訓練模型的函數 def train_linear_regression(x_norm, y_norm, learning_rate=0.01, epochs=10): # 建立模型 model = keras.Sequential([ keras.layers.Dense(1, input_shape=(1,)) ]) # 編譯模型 optimizer = keras.optimizers.SGD(learning_rate=learning_rate) model.compile(optimizer=optimizer, loss=\u0026#39;mse\u0026#39;) # 用於記錄訓練過程的參數 history = {\u0026#39;w\u0026#39;: [], \u0026#39;b\u0026#39;: [], \u0026#39;loss\u0026#39;: []} class ParameterHistory(keras.callbacks.Callback): def on_epoch_begin(self, epoch, logs=None): w = self.model.layers[0].get_weights()[0][0][0] b = self.model.layers[0].get_weights()[1][0] loss = self.model.evaluate(x_norm, y_norm, verbose=0) history[\u0026#39;w\u0026#39;].append(w) history[\u0026#39;b\u0026#39;].append(b) history[\u0026#39;loss\u0026#39;].append(loss) # 訓練模型 parameter_history = ParameterHistory() model.fit(x_norm, y_norm, epochs=epochs, verbose=0, callbacks=[parameter_history]) # 記錄最後一次的參數 w = model.layers[0].get_weights()[0][0][0] b = model.layers[0].get_weights()[1][0] loss = model.evaluate(x_norm, y_norm, verbose=0) history[\u0026#39;w\u0026#39;].append(w) history[\u0026#39;b\u0026#39;].append(b) history[\u0026#39;loss\u0026#39;].append(loss) return model, history # 3. 視覺化函數 def plot_training_process(x_raw, y_raw, x_norm, y_norm, history): # 創建圖表 fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6)) # 將正規化的係數轉換回原始尺度 w_raw_history = [w * np.std(y_raw) / np.std(x_raw) for w in history[\u0026#39;w\u0026#39;]] b_raw_history = [(b * np.std(y_raw) + np.mean(y_raw) - w * np.std(y_raw) * np.mean(x_raw) / np.std(x_raw)) for w, b in zip(history[\u0026#39;w\u0026#39;], history[\u0026#39;b\u0026#39;])] # Contour plot with raw scale margin_w = (max(w_raw_history) - min(w_raw_history)) * 0.5 margin_b = (max(b_raw_history) - min(b_raw_history)) * 0.5 w_raw_range = np.linspace(min(w_raw_history)-margin_w, max(w_raw_history)+margin_w, 100) b_raw_range = np.linspace(min(b_raw_history)-margin_b, max(b_raw_history)+margin_b, 100) W_RAW, B_RAW = np.meshgrid(w_raw_range, b_raw_range) Z = np.zeros_like(W_RAW) # 計算每個點的 MSE（在原始尺度上） for i in range(W_RAW.shape[0]): for j in range(W_RAW.shape[1]): y_pred = W_RAW[i,j] * x_raw + B_RAW[i,j] Z[i,j] = np.mean((y_pred - y_raw) ** 2) CS = ax1.contour(W_RAW, B_RAW, Z, levels=20) ax1.clabel(CS, inline=True, fontsize=8) ax1.plot(w_raw_history, b_raw_history, \u0026#39;r.-\u0026#39;, label=\u0026#39;Training path\u0026#39;) ax1.set_xlabel(\u0026#39;w (原始尺度)\u0026#39;) ax1.set_ylabel(\u0026#39;b (原始尺度)\u0026#39;) ax1.set_title(\u0026#39;Contour Plot with Training Path (原始尺度)\u0026#39;) ax1.legend() # Raw data scatter plot with regression lines ax2.scatter(x_raw, y_raw, alpha=0.5, label=\u0026#39;Raw data\u0026#39;) ax2.set_ylim(700, 2300) # 繪製每一輪的回歸線 x_plot = np.linspace(min(x_raw), max(x_raw), 100) colors = cm.rainbow(np.linspace(0, 1, len(w_raw_history))) for i, (w, b) in enumerate(zip(w_raw_history, b_raw_history)): y_plot = w * x_plot + b ax2.plot(x_plot, y_plot, color=colors[i], alpha=0.3) ax2.set_xlabel(\u0026#39;Area (坪)\u0026#39;) ax2.set_ylabel(\u0026#39;Price (萬)\u0026#39;) ax2.set_title(\u0026#39;Raw Data with Regression Lines\u0026#39;) plt.tight_layout() plt.show() # 載入數據 data = load_data() x_raw, y_raw = data[:, 0], data[:, 1] # 轉換為 TensorFlow 格式 x_raw = x_raw.reshape(-1, 1) y_raw = y_raw.reshape(-1, 1) # 正規化數據 x_norm = normalize_data(x_raw) y_norm = normalize_data(y_raw) # 訓練模型 model, history = train_linear_regression(x_norm, y_norm) # 視覺化結果 plot_training_process(x_raw.flatten(), y_raw.flatten(), x_norm.flatten(), y_norm.flatten(), history) # 輸出最終結果 final_w = history[\u0026#39;w\u0026#39;][-1] final_b = history[\u0026#39;b\u0026#39;][-1] final_loss = history[\u0026#39;loss\u0026#39;][-1] # 將係數轉換回原始尺度 w_raw = final_w * np.std(y_raw) / np.std(x_raw) b_raw = (final_b * np.std(y_raw) + np.mean(y_raw) - final_w * np.std(y_raw) * np.mean(x_raw) / np.std(x_raw)) print(f\u0026#34;Final equation: y = {w_raw[0]:.2f}x + {b_raw[0]:.2f}\u0026#34;) print(f\u0026#34;Final normalized loss: {final_loss:.6f}\u0026#34;) 批次訓練(Batch)的概念 我們可以在不同的時機點來更新 w 與 b，假設我們的訓練次數為 3000，那 epochs 為3000。且樣本數為 1000。 批次訓練(batch training)，代表的是我們總共做 3000 次的更新，每次都是利用全部 1000 筆樣本算出來的 dw 與 db 去做調整。 SGD(Stochastic gradient descent)，代表我們做 3000 * 1000 次的更新，每一個樣本計算出 dw 與 db 就立即去調整。 小批次訓練(mini-batch training)則是介於批次訓練與 SGD 之間，假設我們每 200 個樣本做一次更新，實際上會做 3000 * 5 次更新。 import numpy as np import matplotlib.pyplot as plt class LinearRegression: def __init__(self, learning_rate=0.0000001): self.w = 0.0 self.b = 0.0 self.lr = learning_rate self.loss_history = [] def predict(self, X): return self.w * X + self.b def compute_loss(self, X, y): y_pred = self.predict(X) return np.mean((y_pred - y) ** 2) def compute_gradients(self, X, y): y_pred = self.predict(X) error = y_pred - y dw = np.mean(2 * error * X) db = np.mean(2 * error) return dw, db def train_batch(self, X, y, epochs=3000): \u0026#34;\u0026#34;\u0026#34;Full batch gradient descent\u0026#34;\u0026#34;\u0026#34; for epoch in range(epochs): # Compute gradients using all data dw, db = self.compute_gradients(X, y) # Update parameters self.w -= self.lr * dw self.b -= self.lr * db # Record loss if epoch % 100 == 0: loss = self.compute_loss(X, y) self.loss_history.append(loss) print(f\u0026#34;Epoch {epoch}, Loss: {loss:.2f}\u0026#34;) def train_mini_batch(self, X, y, batch_size=2, epochs=3000): \u0026#34;\u0026#34;\u0026#34;Mini-batch gradient descent\u0026#34;\u0026#34;\u0026#34; n_samples = len(X) for epoch in range(epochs): # Shuffle the data indices = np.random.permutation(n_samples) X_shuffled = X[indices] y_shuffled = y[indices] # Mini-batch training for i in range(0, n_samples, batch_size): X_batch = X_shuffled[i:i+batch_size] y_batch = y_shuffled[i:i+batch_size] # Compute gradients using batch data dw, db = self.compute_gradients(X_batch, y_batch) # Update parameters self.w -= self.lr * dw self.b -= self.lr * db # Record loss for the whole dataset if epoch % 100 == 0: loss = self.compute_loss(X, y) self.loss_history.append(loss) print(f\u0026#34;Epoch {epoch}, Loss: {loss:.2f}\u0026#34;) def train_sgd(self, X, y, epochs=3000): \u0026#34;\u0026#34;\u0026#34;Stochastic gradient descent\u0026#34;\u0026#34;\u0026#34; n_samples = len(X) for epoch in range(epochs): # Shuffle the data indices = np.random.permutation(n_samples) X_shuffled = X[indices] y_shuffled = y[indices] # SGD training (batch_size = 1) for i in range(n_samples): X_sample = X_shuffled[i:i+1] y_sample = y_shuffled[i:i+1] # Compute gradients using single sample dw, db = self.compute_gradients(X_sample, y_sample) # Update parameters self.w -= self.lr * dw self.b -= self.lr * db # Record loss for the whole dataset if epoch % 100 == 0: loss = self.compute_loss(X, y) self.loss_history.append(loss) print(f\u0026#34;Epoch {epoch}, Loss: {loss:.2f}\u0026#34;) (areas, prices) = load_data() models = { \u0026#39;Batch\u0026#39;: LinearRegression(learning_rate=1e-7), \u0026#39;Mini-batch\u0026#39;: LinearRegression(learning_rate=1e-7), \u0026#39;SGD\u0026#39;: LinearRegression(learning_rate=5e-8) } models[\u0026#39;Batch\u0026#39;].train_batch(areas, prices) models[\u0026#39;Mini-batch\u0026#39;].train_mini_batch(areas, prices) models[\u0026#39;SGD\u0026#39;].train_sgd(areas, prices) plt.figure(figsize=(10, 6)) for name, model in models.items(): plt.plot(range(0, 3000, 100), model.loss_history, label=name) plt.xlabel(\u0026#39;Epoch\u0026#39;) plt.ylabel(\u0026#39;Loss\u0026#39;) plt.title(\u0026#39;Loss Comparison\u0026#39;) plt.legend() plt.grid(True) plt.show() for name, model in models.items(): print(f\u0026#34;\\n{name} Results:\u0026#34;) print(f\u0026#34;w = {model.w:.6f}\u0026#34;) print(f\u0026#34;b = {model.b:.6f}\u0026#34;) print(f\u0026#34;Final Loss = {model.loss_histroy[-1]:.2f}\u0026#34;) 從更新次數來看，SGD 的更新次數 \u0026gt; 小批次訓練 \u0026gt; 批次訓練，SGD 所耗的時間同樣也比小批次訓練與批次訓練長，但實際上 loss 收斂的情形也比較好嗎？\n從下圖比較可見，收斂情況最佳的反而是小批次訓練，我們比較三種方法，總結一下成果： 批次訓練 Batch Gradient Descent (BGD)\n每次更新使用所有數據 穩定但計算量大 容易找到局部最優解 小批次訓練 Mini-batch Gradient Descent\n每次使用一小批數據 平衡了計算效率和更新穩定性 常用於實際應用 Stochastic Gradient Descent (SGD)\n每次只使用一個樣本 更新頻繁，收斂較快但不穩定 需要較小的學習率 損失函數(loss function) 損失函數是用來衡量模型預測值與實際值之間差異的函數，以下是幾個常見的損失函數：\n均方誤差(Mean Squared Error, MSE) 常用於迴歸問題 對異常值敏感 $$ \\text{MSE}=\\frac{1}{\\text{n}}\\sum^n(\\text{y}_\\text{pred}-\\text{y} _\\text{true})^2 $$ 交叉熵損失(Cross Entropy Loss) 常用於分類問題 衡量兩個概率分布之間的差異 又分為二元交叉熵和多類別交叉熵 二元交叉熵(Binary Cross Entropy) $$ \\text{BCE}=-(\\text{y}_\\text{true}\\times \\log(\\text{y} _\\text{pred})+(1-\\text{y} _\\text{true})\\times \\log(1-\\text{y} _\\text{pred})) $$ 多類別交叉熵(Categorical Cross Entropy) $$ \\text{CCE}=-\\sum^n((\\text{y} _\\text{true})_i\\times\\log((\\text{y} _\\text{true})_i)) $$ 平均絕對誤差(Mean Absolute Error, MAE) 用於迴歸問題 相較 MSE 對異常值不那麼敏感 $$ \\text{MAE}=\\frac{1}{\\text{n}}\\sum^n|\\text{y} _\\text{pred}-\\text{y} _\\text{true}| $$ Hinge Loss 主要用於支持向量機(SVM) 特別適合最大間隔分類問題 $$ \\text{HL} = \\max(0, 1-\\text{y} _\\text{pred}\\times\\text{y} _\\text{true}) $$ 在選擇損失函數時需考慮\n問題類型(分類還是迴歸) 數據分布特性 對異常值的敏感度要求 模型的收斂速度要求 L1/L2 正則化(L1/L2 Regularization) 在考慮有多個特徵、且帶有 outlier 或雜訊時\nL1 正則化 (Lasso Regression)\nLasso (Least Absolute Shrinkage and Selection Operator) 定義：在損失函數中加入參數的絕對值項 $$ \\text{Loss} = \\text{MSE} + \\lambda \\times \\sum|w| $$ 特點： 傾向於產生稀疏解（某些參數會變成0） 適合用於特徵選擇 對異常值較不敏感 L2 正則化 (Ridge Regression)\n定義：在損失函數中加入參數的平方項 $$ \\text{Loss} = \\text{MSE} + \\lambda \\times \\sum(w^2) $$ 特點： 傾向於使所有參數值變小但不為0 計算導數較簡單 對共線性（多重共線性）問題有好處 import numpy as np import matplotlib.pyplot as plt from sklearn.preprocessing import StandardScaler from sklearn.model_selection import train_test_split # 生成合成數據 np.random.seed(42) def generate_synthetic_data(n_samples=100): # 生成基本特徵 X1 = np.random.normal(0, 1, n_samples) # 面積 X2 = np.random.normal(0, 1, n_samples) # 房齡 # 生成共線性特徵（與面積高度相關的特徵，如房間數） X3 = 0.8 * X1 + 0.2 * np.random.normal(0, 1, n_samples) # 生成噪音特徵（完全無關的特徵） X4 = np.random.normal(0, 1, n_samples) # 組合特徵 X = np.column_stack([X1, X2, X3, X4]) # 生成目標值（房價） # 主要由X1和X2決定，X3有少許影響，X4完全不影響 y = 3 * X1 + 2 * X2 + 0.5 * X3 + np.random.normal(0, 0.1, n_samples) return X, y class RegularizedRegression: def __init__(self, learning_rate=1e-7, reg_type=\u0026#39;l2\u0026#39;, lambda_reg=0.1): self.w = 0. self.b = 0. self.lr = learning_rate self.reg_type = reg_type self.lambda_reg = lambda_reg self.loss_history = [] def predict(self, X): return self.w * X + self.b def compute_loss(self, X, y): y_pred = self.predict(X) mse = np.mean((y_pred - y) ** 2) if self.reg_type == \u0026#39;l1\u0026#39;: reg_term = self.lambda_reg * np.abs(self.w) elif self.reg_type == \u0026#39;l2\u0026#39;: reg_term = self.lambda_reg * (self.w ** 2) else: reg_term = 0 return mse + reg_term def compute_gradients(self, X, y): y_pred = self.predict(X) error = y_pred - y # mse 的梯度 dw_mse = np.mean(2 * error * X) db = np.mean(2 * error) # 正則化項的梯度 if self.reg_type == \u0026#39;l1\u0026#39;: dw_reg = self.lambda_reg * np.sign(self.w) elif self.reg_type == \u0026#39;l2\u0026#39;: dw_reg = self.lambda_reg * 2 * self.w else: dw_reg = 0 dw = dw_mse + dw_reg return dw, db def train(self, X, y, epochs=3000): for epoch in range(epochs): dw, db = self.compute_gradients(X, y) self.w -= self.lr * dw self.b -= self.lr * db def train(self, X, y, batch_size=None, epochs=3000): n_samples = len(X) if batch_size is None: batch_size = n_samples for epoch in range(epochs): # Shuffle the data indices = np.random.permutation(n_samples) X_shuffled = X[indices] y_shuffled = y[indices] # Mini-batch training for i in range(0, n_samples, batch_size): X_batch = X_shuffled[i:i+batch_size] y_batch = y_shuffled[i:i+batch_size] # Compute gradients using batch data dw, db = self.compute_gradients(X_batch, y_batch) # Update parameters self.w -= self.lr * dw self.b -= self.lr * db # Record loss for the whole dataset if epoch % 100 == 0: loss = self.compute_loss(X, y) self.loss_history.append(loss) print(f\u0026#34;Epoch {epoch}, Loss: {loss:.2f}\u0026#34;) 觀察重點：\nL1 正則化（Lasso）： 傾向於將不重要的特徵（如 Noise）權重設為 0 在有共線性的特徵中選擇一個（Area vs Rooms） L2 正則化（Ridge）： 所有權重都被縮小 共線性特徵的權重會被平均分配 無正則化： 可能過度擬合噪音 在共線性特徵上表現不穩定 從結果可以看出：\nL1 正則化確實將無關特徵（Noise）的權重降到接近 0 L2 正則化讓所有權重都變得更小，但保持了相對重要性 無正則化的模型權重更大，更容易受噪音影響 主要的差異和實作細節：\n正則化項的加入 L1：在損失函數中加入 λ * |w| L2：在損失函數中加入 λ * w² 梯度計算 L1 的梯度：sign(w) * λ L2 的梯度：2 * λ * w 超參數 λ (lambda_reg) 控制正則化的強度 較大的 λ 會產生較小的權重 需要通過交叉驗證來選擇適當的值 使用場景 L1：特徵選擇，當你認為只有部分特徵是重要的 L2：處理共線性，當特徵之間有相關性 激活函數(activation function) 在設計 model 時，不是所有的問題都可以用線性模型來描述，此時我們就需要\n多層結構(至少一個隱藏層) 非線性激活函數 以下為三個重要的激活函數 Sigmoid (σ(x) = 1/(1+e^(-x)))\n輸出範圍：(0,1) 優點：適合二分類問題 缺點：容易出現梯度消失 ReLU (max(0,x))\n輸出範圍：[0,∞) 優點：計算簡單，不會有梯度消失 缺點：Dead ReLU 問題 Tanh (tanh(x))\n輸出範圍：(-1,1) 優點：零中心化 缺點：也有梯度消失問題 import numpy as np import matplotlib.pyplot as plt class Activation: @staticmethod def sigmoid(x): return 1 / (1 + np.exp(-x)) @staticmethod def sigmoid_derivative(x): sx = Activation.sigmoid(x) return sx * (1 - sx) @staticmethod def relu(x): return np.maximum(0, x) @staticmethod def relu_derivative(x): return np.where(x \u0026gt; 0, 1, 0) @staticmethod def tanh(x): return np.tanh(x) @staticmethod def tanh_derivative(x): return 1 - np.tanh(x) ** 2 以 xor 為例來做以下的機器學習 import numpy as np import matplotlib.pyplot as plt class Activation: @staticmethod def sigmoid(x): return 1 / (1 + np.exp(-x)) @staticmethod def sigmoid_derivative(x): sx = Activation.sigmoid(x) return sx * (1 - sx) @staticmethod def relu(x): return np.maximum(0, x) @staticmethod def relu_derivative(x): return np.where(x \u0026gt; 0, 1, 0) @staticmethod def tanh(x): return np.tanh(x) @staticmethod def tanh_derivative(x): return 1 - np.tanh(x)**2 class NeuralNetwork: def __init__(self, activation=\u0026#39;sigmoid\u0026#39;): # 網絡架構: 2 -\u0026gt; 4 -\u0026gt; 1 self.W1 = np.random.randn(2, 4) * 0.1 # 輸入層到隱藏層的權重 self.b1 = np.zeros((1, 4)) # 隱藏層偏差 self.W2 = np.random.randn(4, 1) * 0.1 # 隱藏層到輸出層的權重 self.b2 = np.zeros((1, 1)) # 輸出層偏差 # 選擇激活函數 if activation == \u0026#39;sigmoid\u0026#39;: self.activation = Activation.sigmoid self.activation_derivative = Activation.sigmoid_derivative elif activation == \u0026#39;relu\u0026#39;: self.activation = Activation.relu self.activation_derivative = Activation.relu_derivative elif activation == \u0026#39;tanh\u0026#39;: self.activation = Activation.tanh self.activation_derivative = Activation.tanh_derivative self.loss_history = [] def forward(self, X): # 前向傳播 self.z1 = np.dot(X, self.W1) + self.b1 self.a1 = self.activation(self.z1) self.z2 = np.dot(self.a1, self.W2) + self.b2 self.a2 = self.activation(self.z2) return self.a2 def backward(self, X, y, learning_rate=0.1): m = X.shape[0] # 計算梯度 dz2 = self.a2 - y dW2 = np.dot(self.a1.T, dz2) / m db2 = np.sum(dz2, axis=0, keepdims=True) / m dz1 = np.dot(dz2, self.W2.T) * self.activation_derivative(self.z1) dW1 = np.dot(X.T, dz1) / m db1 = np.sum(dz1, axis=0, keepdims=True) / m # 更新權重 self.W2 -= learning_rate * dW2 self.b2 -= learning_rate * db2 self.W1 -= learning_rate * dW1 self.b1 -= learning_rate * db1 def train(self, X, y, epochs=10000, learning_rate=0.1): for epoch in range(epochs): # 前向傳播 output = self.forward(X) # 計算損失 loss = np.mean((output - y) ** 2) self.loss_history.append(loss) # 反向傳播 self.backward(X, y, learning_rate) if epoch % 1000 == 0: print(f\u0026#34;Epoch {epoch}, Loss: {loss:.4f}\u0026#34;) def predict(self, X): return np.round(self.forward(X)) # 準備 XOR 數據 X = np.array([[0,0], [0,1], [1,0], [1,1]]) y = np.array([[0], [1], [1], [0]]) # 訓練不同激活函數的模型 activation_functions = [\u0026#39;sigmoid\u0026#39;, \u0026#39;relu\u0026#39;, \u0026#39;tanh\u0026#39;] models = {} for activation in activation_functions: print(f\u0026#34;\\nTraining with {activation} activation:\u0026#34;) model = NeuralNetwork(activation=activation) model.train(X, y) models[activation] = model # 繪製損失曲線比較 plt.figure(figsize=(10, 6)) for activation, model in models.items(): plt.plot(model.loss_history, label=activation) plt.xlabel(\u0026#39;Iteration\u0026#39;) plt.ylabel(\u0026#39;Loss\u0026#39;) plt.title(\u0026#39;Training Loss with Different Activation Functions\u0026#39;) plt.legend() plt.grid(True) plt.show() # 測試預測結果 print(\u0026#34;\\nPrediction Results:\u0026#34;) for activation, model in models.items(): print(f\u0026#34;\\n{activation} activation:\u0026#34;) predictions = model.predict(X) for x, y_true, y_pred in zip(X, y, predictions): print(f\u0026#34;Input: {x}, True: {y_true[0]}, Predicted: {y_pred[0]}\u0026#34;) # 視覺化決策邊界 plt.figure(figsize=(15, 5)) for i, (activation, model) in enumerate(models.items()): plt.subplot(1, 3, i+1) # 創建網格點 xx, yy = np.meshgrid(np.linspace(-0.5, 1.5, 100), np.linspace(-0.5, 1.5, 100)) grid = np.c_[xx.ravel(), yy.ravel()] # 預測 Z = model.predict(grid) Z = Z.reshape(xx.shape) # 繪製決策邊界 plt.contourf(xx, yy, Z, alpha=0.4) plt.scatter(X[:, 0], X[:, 1], c=y, s=100) plt.title(f\u0026#39;{activation} Decision Boundary\u0026#39;) plt.xlabel(\u0026#39;Input 1\u0026#39;) plt.ylabel(\u0026#39;Input 2\u0026#39;) plt.tight_layout() plt.show() Sigmoid 適用時機：\n二元分類問題的輸出層（因為輸出範圍是 0~1，適合表示機率） 需要將輸出限制在 0~1 之間的情境 較淺的網路（1-2層） 不建議用在：\n深層網路的中間層（因為容易發生梯度消失） 需要快速訓練的模型（因為計算exponential較慢） 對稱數據的問題（因為不是零中心化） ReLU 適用時機：\n深層網路的隱藏層（現代深度學習最常用） CNN（卷積神經網路） 需要快速訓練的大型網路 稀疏激活是可接受的場景 主要優點：\n計算簡單快速 能緩解梯度消失問題 能產生稀疏的表示（部分神經元輸出為0） Tanh 適用時機：\n需要零中心化輸出的場景（輸出範圍-1~1） RNN（循環神經網路）的隱藏層 數據本身是歸一化/標準化的情況 需要較強的梯度在接近零的區域 實際應用建議：\n常見的最佳實踐組合： class NeuralNetwork: def __init__(self): self.hidden_activation = ReLU # 隱藏層使用ReLU self.output_activation = Sigmoid # 二分類輸出層使用Sigmoid 根據任務選擇： 分類問題：輸出層用Sigmoid（二分類）或Softmax（多分類） 回歸問題：輸出層可以不用激活函數 特徵提取：中間層優先使用ReLU 特殊情況： 處理序列數據（如RNN）：優先考慮Tanh 處理圖像數據（如CNN）：優先考慮ReLU 如果ReLU表現不佳：可以嘗試LeakyReLU或ELU 其它變體 Leaky ReLu 適用時機： 當標準ReLU出現大量\u0026quot;死亡\u0026quot;神經元時 需要保留負值信息的場景 訓練初期希望網絡快速收斂 f(x) = x if x \u0026gt; 0 else αx # (α通常為0.01) ELU (Exponential Linear Unit) 適用時機： 深層網絡需要更強的正則化 對噪聲較敏感的任務 需要更快收斂速度的場景 f(x) = x if x \u0026gt; 0 else α(exp(x) - 1) SELU (Scaled ELU) 適用時機： 深層全連接網絡 需要自歸一化特性的場景 希望避免額外的批標準化層 f(x) = λ(x if x \u0026gt; 0 else α(exp(x) - 1)) GELU(Gaussian Error Linear Unit) 適用時機： Transformer架構 BERT等預訓練模型 需要考慮輸入不確定性的場景 f(x) = x * P(X ≤ x) Swish 適用時機： 深層模型 需要更好泛化性能的場景 計算資源充足的情況 f(x) = x * sigmoid(βx) Summary 先嘗試 ReLU：\n最簡單且通常效果不錯 計算效率高 容易優化 如果遇到問題，按順序嘗試：\nDead ReLU問題 → Leaky ReLU 需要自歸一化 → SELU 用於Transformer → GELU 追求極致性能 → Swish 特殊情況：\n需要處理時序數據 → ELU或SELU 計算資源受限 → 堅持使用ReLU 特別關注梯度流動 → Leaky ReLU或ELU 優化器(Optimizers) 優化器是 backpropagation 時使用的更新策略，常見的優化器有：\n隨機梯度下降 SGD(Stochastic Gradient Descent) 最佳基本的優化器 適用時機： 數據量大且資源有限 問題較簡單 需要較好的泛化性能 class Optimizer: def __init__(self, learning_rate=0.01): self.lr = learning_rate def update(self, params, grads): raise NotImplementedError class SGD(Optimizer): def update(self, params, grads): for param, grad in zip(params, grads): param -= self.lr * grad return params 動量 Momemtum 加入動量項(動態調整學習率)，幫助越過局部最小值 適用時機： 梯度下降震盪嚴重時 需要加速收斂 有較多局部最小值時 class Momemtum(Optimizer): def __init__(self, learning_rate=0.01, momemtum=0.9): super().__init__(learning_rate) self.momemtum = momemtum self.velocities = None def update(self, params, grades): if self.velocities is None: self.velocities = [np.zeros_like(param) for param in params] for i (param, grad) in enumerate(zip(params, grads)): self.velocities[i] = self.momentum * self.velocities[i] - self.lr * grad param += self.velocities[i] return params 自適應學習率 RMSProp 動態調整學習率 使用時機： 處理非平穩問題 RNN訓練 梯度稀疏的問題 class RMSProp(Optimizer): def __init__(self, learning_rate=0.01, decay_rate=0.09, epsilon=1e-8): super().__init__(learning_rate) self.decay_rate = decay_rate self.epsilon = epsilon self.cache = None def update(self, params, grads): if self.cache is None: self.cache = [np.zeros_like(param) for param in params] for i, (param, grad) in enumerate(zip(params, grads)): self.cache[i] = self.decay_rate * self.cache[i] + (1 - self.decay_rate) * grad ** 2 param -= self.lr * grad / (np.sqrt(self.cache[i]) + self.epsilon) return params Adam 結合Momentum和RMSprop的優點 使用時機： 深度學習的默認選擇 需要快速收斂 大多數問題 class Adam(Optimizer): def __init__(self, learning_rate=0.01, beta1=0.9, beta2=0.999, epsilon=1e-8): super().__init__(learning_rate) self.beta1 = beta1 self.beta2 = beta2 self.epsilon = epsilon self.m = None self.v = None self.t = 0 def update(self, params, grads): if self.m is None: self.m = [np.zeros_like(param) for param in params] self.v = [np.zeros_like(param) for param in params] self.t += 1 for i, (param, grad) in enumerate(zip(params, grads)): self.m[i] = self.beta1 * self.m[i] + (1 - self.beta1) * grad self.v[i] = self.beta2 * self.v[i] + (1 - self.beta2) * grad**2 m_hat = self.m[i] / (1 - self.beta1**self.t) v_hat = self.v[i] / (1 - self.beta2**self.t) param -= self.lr * m_hat / (np.sqrt(v_hat) + self.epsilon) return params Summary 首選Adam： optimizer = Adam(learning_rate=0.001, beta1=0.9, beta2=0.999) 如果模型較大： optimizer = AdamW(learning_rate=0.001, weight_decay=0.01) 如果需要更好的泛化性能： optimizer = SGD(learning_rate=0.01, momentum=0.9) ","permalink":"https://intervalrain.github.io/ai/3_4/","summary":"\u003ch2 id=\"目標\"\u003e目標\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e機器學習的目標有很多種，參考李宏毅教授的機器學習課程，可以用下面一張圖來概述。\n\u003cimg alt=\"terminology\" loading=\"lazy\" src=\"/ai/AI/3_4/terminology.png\"\u003e\n\u003cul\u003e\n\u003cli\u003eTask 代表機器學習的目標\n\u003cul\u003e\n\u003cli\u003eRegression: 透過迴歸來預測值。\u003c/li\u003e\n\u003cli\u003eClassification: 處理分類問題。\u003c/li\u003e\n\u003cli\u003eStructed Learning: 生成結構化的資訊(現在稱為生成式 AI, GenAI)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eScenario 代表解決問題的策略\n\u003cul\u003e\n\u003cli\u003eSupervised Learning: 使用\u003cstrong\u003e已標記\u003c/strong\u003e的訓練數據進行訓練\u003c/li\u003e\n\u003cli\u003eSemi-supervised Learning: 使用\u003cstrong\u003e有標記\u003c/strong\u003e與\u003cstrong\u003e無標記\u003c/strong\u003e的訓練數據進行訓練\u003c/li\u003e\n\u003cli\u003eUnsupervised Learning: 不使用標記的訓練數據進行訓據，由模型自行發現模式與結構\u003c/li\u003e\n\u003cli\u003eReinforcement Learning: 透過「獎勵」與「懲罰」來學習。\u003c/li\u003e\n\u003cli\u003eTransfer Learning: 將一個任務學習到的知識應用到相關的新任務\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eMethod 指應用的方法\n\u003cul\u003e\n\u003cli\u003eLinear Model\u003c/li\u003e\n\u003cli\u003eDeep Learning\u003c/li\u003e\n\u003cli\u003eSVM\u003c/li\u003e\n\u003cli\u003eDecision Tree\u003c/li\u003e\n\u003cli\u003eKNN\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"線性迴歸\"\u003e線性迴歸\u003c/h2\u003e\n\u003cp\u003e\u003cimg alt=\"sample\" loading=\"lazy\" src=\"/ai/AI/3_4/sample.png\"\u003e\u003c/p\u003e\n\u003ch3 id=\"暴力解\"\u003e暴力解\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e假設我們大概知道答案的區間，我們可以暴力求解，將每一個 w, b 代入求最小的 (w, b) 組合\u003c/li\u003e\n\u003cli\u003e這個方法的缺點是，計算量很大，且我們求值的方式不是連續的，精準度不夠。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e sys\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eareas \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e data[:,\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprices \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e data[:,\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecompute_loss\u003c/span\u003e(y_pred, y):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e (y_pred \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e y)\u003cspan style=\"color:#f92672\"\u003e**\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ebest_w \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ebest_b \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emin_loss \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e sys\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003efloat_info\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003emax\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 猜 w=30-50, step = 0.1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 猜 b=200-600 step = 1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e range(\u003cspan style=\"color:#ae81ff\"\u003e200\u003c/span\u003e):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e j \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e range(\u003cspan style=\"color:#ae81ff\"\u003e400\u003c/span\u003e):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        w \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e30\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e i\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0.1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        b \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e200\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e j\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        loss \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0.\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e area, price \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e zip(areas, prices):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            y_pred \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e w \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e area \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e b\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            loss \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e compute_loss(y_pred, price)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e loss \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e min_loss:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            min_loss \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e loss\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            best_w \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e w\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            best_b \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e b\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ew=35.1\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eb=599\u003c/code\u003e\n\u003cimg alt=\"brute_force\" loading=\"lazy\" src=\"/ai/AI/3_4/brute_force.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"線性代數解法\"\u003e線性代數解法\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e假如我們學過線性代數，我們想得到它的歸性迴歸方程式，我們的作法會是：\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e設迴歸方程式為\n$$\\text{y}=\\text{wx}+\\text{b}\\quad\\quad (1)$$\u003c/p\u003e","title":"[AI] 3-4. 線性迴歸"},{"content":"建立張量與變數 張量 引入 tensorflow import tensorflow as tf 建立張量並以 0 作為初始值 x = tf.ones(shape=(2,1)) print(x) \u0026gt;\u0026gt;\u0026gt; tf.Tensor( [[1.] [1.]], shape=(2, 1), dtype=float32) 建立張量並以 1 作為初始值 y = tf.zeros(shape=(2,1)) print(y) \u0026gt;\u0026gt;\u0026gt; tf.Tensor( [[0.] [0.]], shape=(2, 1), dtype=float32) 建立張量，並以常數初始化 a = tf.constant(((1.,4.),(9.,16.))) print(a) \u0026gt;\u0026gt;\u0026gt; tf.Tensor( [[ 1. 4.] [ 9. 16.]], shape=(2, 2), dtype=float32) 建立由亂數組成的張量 常態分佈 # 亂數從平均值 0、標準差 1 的常態分佈中抽取出來 # 等同於 np.random.normal(size=(3,1), loc=0., scale=1.) z = tf.random.normal(shape=(3,1), mean=0., stddev=1.) print(z) \u0026gt;\u0026gt;\u0026gt; tf.Tensor( [[-1.1859674 ] [ 0.3267818 ] [ 0.11066005]], shape=(3, 1), dtype=float32) 均勻分布 # 亂數從 0 到 1 之間均勻分布抽取出來 # 等同於 np.random.uniform(size=(3,1), low=0., high=1.) k = tf.random.uniform(shape=(3,1), minval=0., maxval=1.) print(k) \u0026gt;\u0026gt;\u0026gt; tf.Tensor( [[0.97643256] [0.13791454] [0.7854562 ]], shape=(3, 1), dtype=float32) NumPy 與 TensorFlow 的差異在於，TensorFlow 的張量為常數 ，無法修改。 將 numpy 轉換成 tensorflow x = np.ones((2,2)) x[0, 0] = 0 y = tf.convert_to_tensor(x) print(y) \u0026gt;\u0026gt;\u0026gt; tf.Tensor( [[0. 1.] [1. 1.]], shape=(2, 2), dtype=float64) 變數 創建變數 直接用 tuple 初始化 v = tf.Variable(((3.,1.,3.),(2.,3.,2.))) print(v) \u0026gt;\u0026gt;\u0026gt; \u0026lt;tf.Variable \u0026#39;Variable:0\u0026#39; shape=(2, 3) dtype=float32, numpy=array( [[3., 1., 3.], [2., 3., 2.]], dtype=float32)\u0026gt; 用隨機值初始化 v = tf.Variable(initial_value=tf.random.normal(shape=(3,1))) print(v) \u0026gt;\u0026gt;\u0026gt; \u0026lt;tf.Variable \u0026#39;Variable:0\u0026#39; shape=(3, 1) dtype=float32, numpy=array( [[2.1368823 ], [0.8101084 ], [0.47075817]], dtype=float32)\u0026gt; 變數賦值 透過 assign() 方法對變數賦值 v.assign(tf.ones(shape=(3,1))) \u0026gt;\u0026gt;\u0026gt; \u0026lt;tf.Variable \u0026#39;UnreadVariable\u0026#39; shape=(3, 1) dtype=float32, numpy=array( [[1.], [1.], [1.]], dtype=float32)\u0026gt; 對變數局部賦值 v[0,0].assign(0) \u0026gt;\u0026gt;\u0026gt; \u0026lt;tf.Variable \u0026#39;UnreadVariable\u0026#39; shape=(2, 3) dtype=float32, numpy=array( [[0., 1., 3.], [2., 3., 2.]], dtype=float32)\u0026gt; 變數運算 加法 v.assign_add(tf.ones((2,3))) \u0026gt;\u0026gt;\u0026gt; \u0026lt;tf.Variable \u0026#39;Variable:0\u0026#39; shape=(2, 3) dtype=float32, numpy=array( [[1., 2., 4.], [3., 4., 3.]], dtype=float32)\u0026gt; 減法 v.assign_sub(2*tf.ones((2,3))) \u0026gt;\u0026gt;\u0026gt; \u0026lt;tf.Variable \u0026#39;UnreadVariable\u0026#39; shape=(2, 3) dtype=float32, numpy=array( [[-1., 0., 2.], [ 1., 2., 1.]], dtype=float32)\u0026gt; 張量操作 基本數學運算 初始化 a = tf.constant(((1.,4.),(9.,16.))) \u0026gt;\u0026gt;\u0026gt; tf.Tensor( [[ 1. 4.] [ 9. 16.]], shape=(2, 2), dtype=float32) 平方 a = tf.square(a) print(a) \u0026gt;\u0026gt;\u0026gt; tf.Tensor( [[ 1. 16.] [ 81. 256.]], shape=(2, 2), dtype=float32) 平方根 a = tf.sqrt(a) print(a) \u0026gt;\u0026gt;\u0026gt; tf.Tensor( [[ 1. 4.] [ 9. 16.]], shape=(2, 2), dtype=float32) 加法(逐元素相加) b = tf.ones((2,2)) print(a+b) \u0026gt;\u0026gt;\u0026gt; tf.Tensor( [[ 2. 5.] [10. 17.]], shape=(2, 2), dtype=float32) 點積 b = tf.constant(((1.,-1.),(-1.,1.))) c = tf.matmul(a,b) print(c) \u0026gt;\u0026gt;\u0026gt; tf.Tensor( [[-3. 3.] [-7. 7.]], shape=(2, 2), dtype=float32) 相乘(逐元素相乘) d = a*b print(d) \u0026gt;\u0026gt;\u0026gt; tf.Tensor( [[ 1. -4.] [-9. 16.]], shape=(2, 2), dtype=float32) 微分 計算一階梯度\n試算 \\(\\text{y}=\\text{2x}^2+\\text{3x}+\\text{1}\\) \\(\\text{y}\u0026rsquo;|_\\text{x=3}=\\text{4x}+3=\\text{15}\\) import tensorflow as tf x = tf.Variable(3.) # 在 with 子句中定義函式 f(x) with tf.GradientTape() as tape: y = 2 * x ** 2 + 3*x + 1 gradient = tape.gradient(y, x) print(gradient) \u0026gt;\u0026gt;\u0026gt; tf.Tensor(15.0, shape=(), dtype=float32) 未來會大量的使用自動微分來處理 \\(\\frac{\\partial L}{\\partial W}\\) (損失值對權重的梯度)\n系統預設只會追縱 GradientTape 區塊中的可訓練變數(trainable variable)，對常數張量需要用 tape.watch() 進行指定追縱。 x = tf.constant(3.) with tf.GradientTape() as tape: tape.watch(x) # 忽略這行輸出會是 None y = 2 * x ** 2 + 3*x + 1 gradient = tape.gradient(y, x) print(gradient) \u0026gt;\u0026gt;\u0026gt; tf.Tensor(15.0, shape=(), dtype=float32) 計算二階梯度\n試算一個自由落體運動 令 \\(\\text{h}=\\frac{1}{2}\\text{gt}^2\\)，其中 \\(\\text{g}=9.8\\) def free_fall(time): t = tf.Variable(time) with tf.GradientTape() as outer_tape: with tf.GradientTape() as inner_tape: h = 0.5 * 9.8 * t ** 2 v = inner_tape.gradient(h, t) a = outer_tape.gradient(v, t) print(f\u0026#34;t={time:.1f}s, h={h.numpy():.1f}m, v={v.numpy():.1f}m/s, a={a.numpy():.1f}m/s²\u0026#34;) free_fall(0.) free_fall(1.) free_fall(2.) free_fall(3.) \u0026gt;\u0026gt;\u0026gt; t=0.0s, h=0.0m, v=0.0m/s, a=9.8m/s² t=1.0s, h=4.9m, v=9.8m/s, a=9.8m/s² t=2.0s, h=19.6m, v=19.6m/s, a=9.8m/s² t=3.0s, h=44.1m, v=29.4m/s, a=9.8m/s² ","permalink":"https://intervalrain.github.io/ai/3_3/","summary":"\u003ch2 id=\"建立張量與變數\"\u003e建立張量與變數\u003c/h2\u003e\n\u003ch3 id=\"張量\"\u003e張量\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e引入 tensorflow\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e tensorflow \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e tf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e建立張量並以 0 作為初始值\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ex \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e tf\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eones(shape\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(x)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e tf\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eTensor(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[[\u003cspan style=\"color:#ae81ff\"\u003e1.\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e [\u003cspan style=\"color:#ae81ff\"\u003e1.\u003c/span\u003e]], shape\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e), dtype\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003efloat32)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e建立張量並以 1 作為初始值\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ey \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e tf\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ezeros(shape\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(y)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e tf\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eTensor(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[[\u003cspan style=\"color:#ae81ff\"\u003e0.\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e [\u003cspan style=\"color:#ae81ff\"\u003e0.\u003c/span\u003e]], shape\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e), dtype\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003efloat32)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e建立張量，並以常數初始化\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ea \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e tf\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003econstant(((\u003cspan style=\"color:#ae81ff\"\u003e1.\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e4.\u003c/span\u003e),(\u003cspan style=\"color:#ae81ff\"\u003e9.\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e16.\u003c/span\u003e)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(a)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e tf\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eTensor(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[[ \u003cspan style=\"color:#ae81ff\"\u003e1.\u003c/span\u003e  \u003cspan style=\"color:#ae81ff\"\u003e4.\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e [ \u003cspan style=\"color:#ae81ff\"\u003e9.\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e16.\u003c/span\u003e]], shape\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e), dtype\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003efloat32)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e建立由亂數組成的張量\n\u003cul\u003e\n\u003cli\u003e常態分佈\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 亂數從平均值 0、標準差 1 的常態分佈中抽取出來\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 等同於 np.random.normal(size=(3,1), loc=0., scale=1.)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ez \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e tf\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003erandom\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003enormal(shape\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e), mean\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0.\u003c/span\u003e, stddev\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1.\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(z)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e tf\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eTensor(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[[\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1.1859674\u003c/span\u003e ]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e [ \u003cspan style=\"color:#ae81ff\"\u003e0.3267818\u003c/span\u003e ]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e [ \u003cspan style=\"color:#ae81ff\"\u003e0.11066005\u003c/span\u003e]], shape\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e), dtype\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003efloat32)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e均勻分布\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 亂數從 0 到 1 之間均勻分布抽取出來\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 等同於 np.random.uniform(size=(3,1), low=0., high=1.)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ek \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e tf\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003erandom\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003euniform(shape\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e), minval\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0.\u003c/span\u003e, maxval\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1.\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(k)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e tf\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eTensor(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[[\u003cspan style=\"color:#ae81ff\"\u003e0.97643256\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e [\u003cspan style=\"color:#ae81ff\"\u003e0.13791454\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e [\u003cspan style=\"color:#ae81ff\"\u003e0.7854562\u003c/span\u003e ]], shape\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e), dtype\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003efloat32)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003eNumPy 與 TensorFlow 的差異在於，TensorFlow 的張量為常數 ，無法修改。\u003c/li\u003e\n\u003cli\u003e將 numpy 轉換成 tensorflow\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ex \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e np\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eones((\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ex[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ey \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e tf\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003econvert_to_tensor(x)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(y)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e tf\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eTensor(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[[\u003cspan style=\"color:#ae81ff\"\u003e0.\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1.\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e [\u003cspan style=\"color:#ae81ff\"\u003e1.\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1.\u003c/span\u003e]], shape\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e), dtype\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003efloat64)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"變數\"\u003e變數\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e創建變數\n\u003cul\u003e\n\u003cli\u003e直接用 tuple 初始化\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ev \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e tf\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eVariable(((\u003cspan style=\"color:#ae81ff\"\u003e3.\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e1.\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e3.\u003c/span\u003e),(\u003cspan style=\"color:#ae81ff\"\u003e2.\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e3.\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e2.\u003c/span\u003e)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(v)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003etf\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eVariable \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;Variable:0\u0026#39;\u003c/span\u003e shape\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e) dtype\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003efloat32, numpy\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003earray(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  [[\u003cspan style=\"color:#ae81ff\"\u003e3.\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e1.\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3.\u003c/span\u003e],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   [\u003cspan style=\"color:#ae81ff\"\u003e2.\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3.\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2.\u003c/span\u003e]], dtype\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003efloat32)\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e用隨機值初始化\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ev \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e tf\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eVariable(initial_value\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003etf\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003erandom\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003enormal(shape\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(v)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003etf\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eVariable \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;Variable:0\u0026#39;\u003c/span\u003e shape\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e) dtype\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003efloat32, numpy\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003earray(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   [[\u003cspan style=\"color:#ae81ff\"\u003e2.1368823\u003c/span\u003e ],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    [\u003cspan style=\"color:#ae81ff\"\u003e0.8101084\u003c/span\u003e ],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    [\u003cspan style=\"color:#ae81ff\"\u003e0.47075817\u003c/span\u003e]], dtype\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003efloat32)\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e變數賦值\n\u003cul\u003e\n\u003cli\u003e透過 \u003ccode\u003eassign()\u003c/code\u003e 方法對變數賦值\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ev\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eassign(tf\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eones(shape\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003etf\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eVariable \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;UnreadVariable\u0026#39;\u003c/span\u003e shape\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e) dtype\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003efloat32, numpy\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003earray(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   [[\u003cspan style=\"color:#ae81ff\"\u003e1.\u003c/span\u003e],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    [\u003cspan style=\"color:#ae81ff\"\u003e1.\u003c/span\u003e],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    [\u003cspan style=\"color:#ae81ff\"\u003e1.\u003c/span\u003e]], dtype\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003efloat32)\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e對變數局部賦值\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ev[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eassign(\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003etf\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eVariable \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;UnreadVariable\u0026#39;\u003c/span\u003e shape\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e) dtype\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003efloat32, numpy\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003earray(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  [[\u003cspan style=\"color:#ae81ff\"\u003e0.\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e1.\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3.\u003c/span\u003e],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   [\u003cspan style=\"color:#ae81ff\"\u003e2.\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3.\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2.\u003c/span\u003e]], dtype\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003efloat32)\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e變數運算\n\u003cul\u003e\n\u003cli\u003e加法\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ev\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eassign_add(tf\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eones((\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003etf\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eVariable \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;Variable:0\u0026#39;\u003c/span\u003e shape\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e) dtype\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003efloat32, numpy\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003earray(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  [[\u003cspan style=\"color:#ae81ff\"\u003e1.\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2.\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e4.\u003c/span\u003e],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   [\u003cspan style=\"color:#ae81ff\"\u003e3.\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e4.\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3.\u003c/span\u003e]], dtype\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003efloat32)\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e減法\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ev\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eassign_sub(\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003etf\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eones((\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003etf\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eVariable \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;UnreadVariable\u0026#39;\u003c/span\u003e shape\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e) dtype\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003efloat32, numpy\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003earray(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  [[\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1.\u003c/span\u003e,  \u003cspan style=\"color:#ae81ff\"\u003e0.\u003c/span\u003e,  \u003cspan style=\"color:#ae81ff\"\u003e2.\u003c/span\u003e],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   [ \u003cspan style=\"color:#ae81ff\"\u003e1.\u003c/span\u003e,  \u003cspan style=\"color:#ae81ff\"\u003e2.\u003c/span\u003e,  \u003cspan style=\"color:#ae81ff\"\u003e1.\u003c/span\u003e]], dtype\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003efloat32)\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"張量操作\"\u003e張量操作\u003c/h2\u003e\n\u003ch3 id=\"基本數學運算\"\u003e基本數學運算\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e初始化\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ea \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e tf\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003econstant(((\u003cspan style=\"color:#ae81ff\"\u003e1.\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e4.\u003c/span\u003e),(\u003cspan style=\"color:#ae81ff\"\u003e9.\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e16.\u003c/span\u003e)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e tf\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eTensor(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[[ \u003cspan style=\"color:#ae81ff\"\u003e1.\u003c/span\u003e  \u003cspan style=\"color:#ae81ff\"\u003e4.\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e [ \u003cspan style=\"color:#ae81ff\"\u003e9.\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e16.\u003c/span\u003e]], shape\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e), dtype\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003efloat32)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e平方\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ea \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e tf\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esquare(a)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(a)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e tf\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eTensor(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[[  \u003cspan style=\"color:#ae81ff\"\u003e1.\u003c/span\u003e  \u003cspan style=\"color:#ae81ff\"\u003e16.\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e [ \u003cspan style=\"color:#ae81ff\"\u003e81.\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e256.\u003c/span\u003e]], shape\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e), dtype\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003efloat32)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e平方根\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ea \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e tf\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esqrt(a)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(a)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e tf\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eTensor(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[[ \u003cspan style=\"color:#ae81ff\"\u003e1.\u003c/span\u003e  \u003cspan style=\"color:#ae81ff\"\u003e4.\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e [ \u003cspan style=\"color:#ae81ff\"\u003e9.\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e16.\u003c/span\u003e]], shape\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e), dtype\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003efloat32)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e加法(逐元素相加)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eb \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e tf\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eones((\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(a\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003eb)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e tf\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eTensor(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[[ \u003cspan style=\"color:#ae81ff\"\u003e2.\u003c/span\u003e  \u003cspan style=\"color:#ae81ff\"\u003e5.\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e [\u003cspan style=\"color:#ae81ff\"\u003e10.\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e17.\u003c/span\u003e]], shape\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e), dtype\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003efloat32)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e點積\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eb \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e tf\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003econstant(((\u003cspan style=\"color:#ae81ff\"\u003e1.\u003c/span\u003e,\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1.\u003c/span\u003e),(\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1.\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e1.\u003c/span\u003e)))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ec \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e tf\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ematmul(a,b)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(c)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e tf\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eTensor(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[[\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e3.\u003c/span\u003e  \u003cspan style=\"color:#ae81ff\"\u003e3.\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e [\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e7.\u003c/span\u003e  \u003cspan style=\"color:#ae81ff\"\u003e7.\u003c/span\u003e]], shape\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e), dtype\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003efloat32)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e相乘(逐元素相乘)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ed \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e a\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003eb\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(d)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e tf\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eTensor(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e[[ \u003cspan style=\"color:#ae81ff\"\u003e1.\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e4.\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e [\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e9.\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e16.\u003c/span\u003e]], shape\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e), dtype\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003efloat32) \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"微分\"\u003e微分\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e計算一階梯度\u003c/p\u003e","title":"[AI] 3-3. 使用 TensorFlow 與 Keras 函式庫"},{"content":"Keras 是建立在 TensorFlow 上的 Python 深度學習 API，提供了簡易方法來定義、訓練深度學習的模型。\n可以想成 TensorFlow 負責張量運算、Keras 是演算法。\nKeras（高層 API）：\n負責深度學習模型的高階抽象 提供用戶友好的介面 處理模型定義和訓練流程 eg. Layer, Model, Optimizers, Loss functions, Metrics TensorFlow（中層）：\n處理底層的數學運算 管理計算圖和自動微分 優化運算效率 eg. Tensor, Variable、GradientTape Hardware（硬體層）：\n實際執行計算任務 提供不同的計算加速選項 優化特定類型的運算 eg. CPU, GPU, TPU ","permalink":"https://intervalrain.github.io/ai/3_2/","summary":"\u003cp\u003eKeras 是建立在 TensorFlow 上的 Python 深度學習 API，提供了簡易方法來定義、訓練深度學習的模型。\u003cbr\u003e\n可以想成 TensorFlow 負責張量運算、Keras 是演算法。\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eKeras（高層 API）：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e負責深度學習模型的高階抽象\u003c/li\u003e\n\u003cli\u003e提供用戶友好的介面\u003c/li\u003e\n\u003cli\u003e處理模型定義和訓練流程\u003c/li\u003e\n\u003cli\u003eeg. Layer, Model, Optimizers, Loss functions, Metrics\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eTensorFlow（中層）：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e處理底層的數學運算\u003c/li\u003e\n\u003cli\u003e管理計算圖和自動微分\u003c/li\u003e\n\u003cli\u003e優化運算效率\u003c/li\u003e\n\u003cli\u003eeg. Tensor, Variable、GradientTape\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eHardware（硬體層）：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e實際執行計算任務\u003c/li\u003e\n\u003cli\u003e提供不同的計算加速選項\u003c/li\u003e\n\u003cli\u003e優化特定類型的運算\u003c/li\u003e\n\u003cli\u003eeg. CPU, GPU, TPU\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ol\u003e","title":"[AI] 3-2. Keras 介紹"},{"content":"TensorFlow 是一個開源的 Python 機器學習框架，主要由 Google 開發。\nTensorFlow 可以做到以下的事：\n可進行自動微分、計算梯度。 可在 CPU 上運行，也可以在 GPU 及 TPU 上運行。 可以將運算程序分散到多台機器上共同執行。 可以匯出為各種不同語言的程式，包含 C++, JavaScript 或 TensorFlow Lite，使得 TensorFlow 應用可以輕鬆部署到各種實際場景。 ","permalink":"https://intervalrain.github.io/ai/3_1/","summary":"\u003cp\u003eTensorFlow 是一個開源的 Python 機器學習框架，主要由 Google 開發。\u003cbr\u003e\nTensorFlow 可以做到以下的事：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e可進行自動微分、計算梯度。\u003c/li\u003e\n\u003cli\u003e可在 CPU 上運行，也可以在 GPU 及 TPU 上運行。\u003c/li\u003e\n\u003cli\u003e可以將運算程序分散到多台機器上共同執行。\u003c/li\u003e\n\u003cli\u003e可以匯出為各種不同語言的程式，包含 C++, JavaScript 或 TensorFlow Lite，使得 TensorFlow 應用可以輕鬆部署到各種實際場景。\u003c/li\u003e\n\u003c/ul\u003e","title":"[AI] 3-1. TensorFlow 介紹"},{"content":" 在神經網路中，每個神經層都通過以下的方式進行資料轉換\noutput = relu(dot(W, input) + b) W 和 b 為該層的屬性張量，統稱為該層的權重(weights) 或可訓練參數(trainable parameters)，分別為 內核(kernel) 屬性和 偏值(bias) 屬性。 我們的目標是要透過訓練(training) 來進行權重的微調，進而得到最小的損失值。 參數調大或調小，可能會對應到「損失值變大」或「損失值變小」兩種可能(如果兩者皆變小，稱為 saddle point，兩者皆變大，可能為 local minium)。\n但如果透過兩個方向的正向傳播來檢查微調的方向，效率很低，於是科學家引入了梯度下降法。 梯度下降法(gradient descent) 張量運算的導數稱為梯度(gradient)。 純量函數的導數相當於在函數曲線上找某一點的斜率。 張量函數上求梯度，相當於在函數描繪的多維曲面上求曲率。 y_pred = dot(W, x) loss_value = loss(y_pred, y_true) 假設只考慮 W 為變數，我們可以將 loss_value 視為 W 的函數。\nloss_value = loss(dot(W, x), y_true) = f(W) 假設 W 的當前值為 W0，那麼函數 f 在 W0 這點的導數就是\n$$ f\u0026rsquo;(W)=\\frac{d\\text{(loss\\_value)}}{d\\text{W}}|\\text{W}_0 $$ 我們將上式寫成\ng = grad(loss_value, W0) 代表了在 W0 附近，loss_value = f(W) 的梯度最陡方向之張量，我們可以透過往往「斜率反方向」移動來降低 f(W)。\nif g \u0026gt; 0: W\u0026#39; = W0 - dW elif: g \u0026lt; 0: W\u0026#39; = W0 + dW 我們將 g 直接代入式子，並引入 \\(\\eta\\)(eta) 的概念，\\(\\eta\\)可以想成是每次移動的步伐大小。\nW\u0026#39; = W0 - g * eta 藉由不斷迭代，直到最後平緩，代表移到動 local minimum。但這個 local minimum 不一定是 global minimum，所以後面會加入其它方法來避免被 trap 在 local minimum。 以下是李宏毅老師的圖解，我覺得很生動，可以幫助理解。 圖解 隨機梯度下降 從上述的推導，其實我們可以設想，如何快速取得最小的損失值，方法是找出所有導數為 0 的點，再對這些點進行檢查，便可求出 global minimum。\n然後對實際的神經網路而言，參數不會只有 2~3 個，可能會有上千萬個，故要求這樣的方程式解並非容易的事。\n於是我們可以透過 小批次隨機梯度下降(mini-batch stochastic gradient descent, mini-batch SGD) 來進行\n取出一批次的訓練樣本 x 和對應的目標 y_true(也是標籤(label)) 以 x 為輸出資料，運行神經網路獲得預測值 y_pred。此步驟稱為正向傳播(forward pass) 計算神經網路的批次損失值。 計算損失值相對於神經網路權重的梯度。 將參數稍微向梯度的反方向移動，從而降低一些批次損失值。此步驟稱為反向傳播(back propagation) $$ W\u0026rsquo; = W - \\eta \\times \\frac{dL}{dW} $$ 其中 \\(\\eta\\) 為學習率(learning rate)，為純量因子，可用來調整梯度下降的速度。 學習率太大太小都可能產生問題 學習率太大可能會略過真正的最小值 學習率太小可能會困在區域最小值 批次的量(batch size)\n一次將所有的資料全用上，稱為整批 SGD(batch gradient descent)，好處是每次參數值更新會更準確，但是也會提升時間複雜度。 為了在「準確度」與「複雜度」取一個 tradeoff，通常會使用合理大小的小批次資料進行計算。 SGD 的變體\n在計算下一次權重的更新量，可以考慮先前的取重更新量來做調整，而非僅僅根據梯度的當前值。常見的變體包含： momemtum past_velocity = 0. momemtum = 0.1 # 固定的動量因數 while loss \u0026gt; 0.01: w, loss, gradient = get_current_parameters() velocity = past_velocity * momemtum - learning_rate * gradient w = w + momemtum * velocity - learning_rate * gradient past_velocity = velocity update_parameter(w) Adagrad RMSProp 反向傳播演算法(Backpropagation) 前面介紹的函數是簡單函式，可以很簡單地算出導數(梯度)，但在實際情況下，我們需要能夠處理複雜函數的梯度。\n連鎖律(Chain Rule) 反向傳播是借助簡單運算(eg. 加法、relu或是張量積)的導數，進而得出這算簡單運算的複雜組合的梯度。\n舉例而言，如下圖，我們使用了兩個密集層做轉換，\n\\( \\boxed{ \\begin{array}{ccccccc} \u0026amp;\u0026amp; \\text{輸入資料 X} \u0026amp; \\\\ \u0026amp;\u0026amp; \\downarrow \u0026amp; \\\\ \\boxed{\\text{權重\u0026rsquo;}} \u0026amp; \\rightarrow \u0026amp; \\boxed{\\text{層(資料轉換)}} \u0026amp; \\red{\\text{relu(W1,b1)}}\\\\ \\uparrow \u0026amp;\u0026amp; \\downarrow \u0026amp; \\\\ \\boxed{\\text{權重\u0026rsquo;}} \u0026amp; \\rightarrow \u0026amp; \\boxed{\\text{層(資料轉換)}} \u0026amp; \\red{\\text{softmax(W1,b2)}}\\\\ \u0026amp;\u0026amp; \\downarrow \u0026amp; \\\\ \\uparrow \u0026amp;\u0026amp; \\boxed{\\text{預測 Y\u0026rsquo;}}\\rightarrow \u0026amp; \\boxed{\\text{損失函數}} \u0026amp; \\leftarrow \u0026amp; \\boxed{\\text{標準答案 Y}} \\\\ \u0026amp;\u0026amp;\u0026amp; \\downarrow \u0026amp; \\\\ \\boxed{\\text{優化器}} \u0026amp;\u0026amp; \\leftarrow \u0026amp; \\boxed{\\text{損失分數}} \\end{array} } \\)\n我們可以把函式表運成：\ny1 = relu(dot(W1, X)+b1) y2 = softmax(dot(W2, y1)+b2) loss_value = loss(y_true, y2) 或\nloss_value = loss(y_true, softmax(dot(W2, relu(dot(W1, X)+b1))+b2)) 我們可以透過連鎖律求得連鎖函數的導數：假設有 \\(f\\), \\(g\\) 兩個函數，它們的複合函數 \\(fg\\) 有著 \\(fg(x)=f(g(x))\\)的特性。\ndef fg(x): x1 = g(x) y = f(x1) return y 根據連鎖律 $$ y=f(x_1,x_2,x_3\u0026hellip;x_n),\\frac{d\\text{y}}{d\\text{x}}=\\red{\\frac{d\\text{y}}{d\\text{x}_1}\\times\\frac{d\\text{x}_1}{d\\text{x}_2}\\times\\frac{d\\text{x}_2}{d\\text{x}_3}\\times\u0026hellip;\\times\\frac{d\\text{x}_n}{d\\text{x}}} $$ 換言之，我們只需要求出 \\(\\frac{d\\text{y}}{d\\text{x}_1}\\times\\frac{d\\text{x}_1}{d\\text{x}_2}\\times\\frac{d\\text{x}_2}{d\\text{x}_3}\\times\u0026hellip;\\times\\frac{d\\text{x}_n}{d\\text{x}}\\) 就可以知道找出複合函數 \\(y\\) 的導數了。\n詳述 前向傳播\n對於一個神經元，輸入值 \\(\\text{x}\\) 通過權重 \\(\\text{w}\\) 和偏置 \\(\\text{b}\\) 進行線性組合，然後通過激活函數 \\(\\text{relu}\\)： $$\\text{z}=\\text{wx+b}$$ $$\\text{y}=\\text{relu(z)}$$\n損失函數\n假設使用均方誤差(MSE)作為損失函數： $$L = \\frac{1}{2}(\\text{y} - \\text{y}_\\text{true})^2$$\n反向傳播\n使用連鎖律計算損失函數對權重的偏導數： $$\\frac{\\partial L}{\\partial \\text{w}} = \\frac{\\partial L}{\\partial \\text{y}} \\cdot \\frac{\\partial \\text{y}}{\\partial \\text{z}} \\cdot \\frac{\\partial \\text{z}}{\\partial \\text{w}}$$ 分解每一項：\n$$\\frac{\\partial L}{\\partial \\text{y}} = (\\text{y} - \\text{y}_\\text{true})$$ $$\\frac{\\partial \\text{y}}{\\partial \\text{z}} = \\text{relu}\u0026rsquo;(\\text{z})$$ $$\\frac{\\partial \\text{z}}{\\partial \\text{w}} = \\text{x}$$\n因此： $$\\frac{\\partial L}{\\partial \\text{w}} = (\\text{y} - \\text{y}_\\text{true}) \\cdot \\text{relu}\u0026rsquo;(\\text{z}) \\cdot \\text{x}$$\n權重更新\n使用梯度下降更新權重： $$\\text{w\u0026rsquo;} = \\text{w} - \\eta \\frac{\\partial L}{\\partial \\text{w}}$$\n思考正向傳播時，我們計算的順序是 $$ \\text{z}\\rightarrow\\text{y}\\rightarrow L $$ 而在推導梯度時，我們計算的順序是，剛好是反向過來計算的，故這個過程稱作「反向傳播」 $$\\frac{\\partial L}{\\partial \\text{y}}\\rightarrow\\frac{\\partial \\text{y}}{\\partial \\text{z}}\\rightarrow\\frac{\\partial \\text{z}}{\\partial \\text{w}}$$ 如今我們在現代框架中，已經可以透過自動微分來實作神經網路，如 TensorFlow 的 Gradient Tape。故我們可以只專注在「正向傳播」的過程。\nTensorFlow 的 Gradient Tape 透過 TensorFlow 的 Gradient Tape 函式，可以快速的取得微分值：\n其中 tf.Variable 是一個變數物件，它可以是任意階的張量\n範例： import tensorflow as tf x = tf.Variable(0.) with tf.GradientTape() as tape: y = 2 * x + 3 grad = tape.gradient(y, x) grad \u0026gt;\u0026gt;\u0026gt; \u0026lt;tf.Tensor: shape=(), dtype=float32, numpy=2.0\u0026gt; 實作一個簡單的模型 Dense Layer 作用是將 input 與 W 做點積，與 b 相加，再輸入激活函數 f 相當於 y = f(wx+b) import tensorflow as tf class NaiveDense: def __init__(self, input_size, output_size, activation): self.activation = activation w_shape = (input_size, output_size) w_initial_value = tf.random.uniform(w_shape, minval = 0, maxval = 0.1) self.W = tf.Variable(w_initial_value) b_shape = (output_size, ) b_initial_value = tf.zeros(b_shape) self.b = tf.Variable(b_initial_value) def __call__(self, inputs): return self.activation(tf.matmul(inputs, self.W) + self.b) @property def weights(self): return [self.W, self.b] Sequential Sequential 用來定義層與層之間連接的方式 在次簡單的用「依序」的方式進行正向傳播 class NaiveSequential: def __init__(self, layers): self.layers = layers def __call__(self, inputs): x = inputs for layer in self.layers: x = layer(x) return x @property def weights(self): weights = [] for layer in self.layers: weights += layer.weights return weights Build Model 通過上面兩個實作，便可以簡單建立一個 Keras 雙層模型： model = NaiveSequential([ NaiveDense(input_size=28*28, output_size=512, activation=tf.nn.relu), NaiveDense(input_size=512, output_size=10, activation=tf.nn.softmax) ]) Batch Generator 我們需要用「小批次」的方式來迭代，能更有效率的訓練資料： import math class BatchGeneartor: def __init__(self, images, labels, batch_size=128): assert len(images) == len(labels) self.index = 0 self.images = images self.labels = labels self.batch_size = batch_size self.num_batches = math.ceil(len(images) / batch_size) def next(self): images = self.images[self.index : self.index + self.batch_size] labels = self.labels[self.index : self.index + self.batch_size] self.index += self.batch_size return images, labels Update Weights 接下來我要透過 \\(\\text{w\u0026rsquo;}=\\text{w}-\\eta\\frac{dL}{d\\text{W}}\\) 來更新 W： def update_weights(gradients, weights, learning_rate=1e-3): for g, w in zip(gradients, weights): w.assign_sub(g * learning_rate) 事實上我們不會這樣更新權重，我們可以借用 keras 的 optimizers from tensorflow.keras import optimizers optimizer = optimizers.SGD(learning_rate=1e-3) def update_weights(gradients, weights): optimizer.apply_gradients(zip(gradients, weights)) Training 有了以上的工具，我們就可以進行訓練了 def one_training_step(model, images_batch, labels_batch): with tf.GradientTape() as tape: # y\u0026#39; = f(wx+b) predictions = model(images_batch) # loss[] = y\u0026#39; - y_true per_sample_losses = (tf.keras.losses.sparse_categorical_crossentropy (labels_batch, predictions)) # avg_loss = loss average_loss = tf.reduce_mean(per_sample_losses)[] / batch_size # g = grad(L, w) gradients = tape.gradient(average_loss, model.weights) # w\u0026#39; = w-ηg update_weights(gradients, model.weights) return average_loss fit def fit(model, images, labels, epochs, batch_size=128): for epoch_counter in range(epochs): print(f\u0026#34;Epoch {epoch_counter}\u0026#34;) batch_generator = BatchGeneartor(images, labels) for batch_counter in range(batch_generator.num_batches): images_batch, labels_batch = batch_generator.next() loss = one_training_step(model, images_batch, labels_batch) if batch_counter % 100 == 0: print(f\u0026#34;loss at batch {batch_counter}: {loss:.2f}\u0026#34;) 執行 from tensorflow.keras.datasets import mnist (train_images, train_labels),(test_images, test_labels) = mnist.load_data() train_images = train_images.reshape((60000, 28*28)) train_images = train_images.astype(\u0026#34;float32\u0026#34;) / 255 test_images = test_images.reshape((10000, 28*28)) test_images = test_images.astype(\u0026#34;float32\u0026#34;) / 255 fit(model, train_images, train_labels, epochs=10, batch_size=128) Evaluation 最後我們再投入 test_images 來評估我們 training 的結果 import numpy as np predictions = model(test_images) predictions = predictions.numpy() predicted_labels = np.argmax(predictions, axis=1) matches = predicted_labels == test_labels print(f\u0026#34;accuracy: {matches.mean():.2f}\u0026#34;) ","permalink":"https://intervalrain.github.io/ai/2_3/","summary":"\u003cul\u003e\n\u003cli\u003e在神經網路中，每個神經層都通過以下的方式進行資料轉換\u003cbr\u003e\n\u003ccode\u003eoutput = relu(dot(W, input) + b)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eW\u003c/code\u003e 和 \u003ccode\u003eb\u003c/code\u003e 為該層的屬性張量，統稱為該層的權重(weights) 或可訓練參數(trainable parameters)，分別為 \u003cstrong\u003e內核(kernel)\u003c/strong\u003e 屬性和 \u003cstrong\u003e偏值(bias)\u003c/strong\u003e 屬性。\u003c/li\u003e\n\u003cli\u003e我們的目標是要透過訓練(training) 來進行權重的微調，進而得到最小的損失值。\u003c/li\u003e\n\u003cli\u003e參數調大或調小，可能會對應到「損失值變大」或「損失值變小」兩種可能(如果兩者皆變小，稱為 saddle point，兩者皆變大，可能為 local minium)。\u003cbr\u003e\n但如果透過兩個方向的正向傳播來檢查微調的方向，效率很低，於是科學家引入了梯度下降法。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"梯度下降法gradient-descent\"\u003e梯度下降法(gradient descent)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e張量運算的導數稱為\u003cstrong\u003e梯度(gradient)\u003c/strong\u003e。\n\u003cul\u003e\n\u003cli\u003e純量函數的導數相當於在函數曲線上找某一點的\u003cstrong\u003e斜率\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e張量函數上求梯度，相當於在函數描繪的多維曲面上求\u003cstrong\u003e曲率\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ey_pred \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e dot(W, x)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eloss_value \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e loss(y_pred, y_true)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e假設只考慮 W 為變數，我們可以將 loss_value 視為 W 的函數。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eloss_value \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e loss(dot(W, x), y_true) \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e f(W)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e假設 W 的當前值為 W0，那麼函數 f 在 W0 這點的導數就是\u003c/p\u003e\n\u003cp\u003e$$\nf\u0026rsquo;(W)=\\frac{d\\text{(loss\\_value)}}{d\\text{W}}|\\text{W}_0\n$$\n我們將上式寫成\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eg \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e grad(loss_value, W0)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e代表了在 W0 附近，loss_value = f(W) 的梯度最陡方向之張量，我們可以透過往往「斜率反方向」移動來降低 f(W)。\u003c/p\u003e","title":"[AI] 2-3. 優化器 Optimizer"},{"content":"張量 Tensor 是神經網路的資料表示法。 在 Python，我們常用 NumPy 陣列來作為機器學習的基礎資料結構，說 NumPy 陣列也稱為張量。\n張量的維、階、軸 階(rank): 又稱為軸(axis)，代表陣列的軸數。 維(dimension): 某一階的元素個數。 1. 純量 (0D 張量) 純量是單一個數值，也稱為 0 維張量 (0D Tensor)\nx = 5 2. 向量 (1D 張量) 向量是包含單一軸的數列，也稱為 1 維張量 (1D Tensor)\nx = [1, 2, 3] 3. 矩陣 (2D 張量) 矩陣是二維的數據結構，也稱為 2 維張量 (2D Tensor)\nx = [[1, 2, 3], [4, 5, 6]] 4. 3D 張量與高階張量 3D 張量：在二維矩陣基礎上增加一個深度維度，常用於處理圖片數據 (例如 RGB 通道)。 高階張量 (nD 張量)：當張量的維度超過 3D 時，用於更高維度的資料表示，例如影片、文字數據等。 x = [[[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[10, 11, 12], [13, 14, 15], [16, 17, 18]]] 5. 張量的屬性 張量擁有幾個關鍵屬性，用於描述其結構與內容：\n軸 (Axes) 或 ndim\n張量的軸數量，也就是維度的數量。 純量的軸為 0，向量為 1，矩陣為 2，依此類推。 形狀 (Shape)\n每個軸的元素數量，形狀用 tuple 表示。 範例：矩陣 [[1, 2, 3], [4, 5, 6]] 的 shape 為 (2, 3)。 數據類型 (dtype) 張量中元素的資料類型，例如 float32、int32。 範例：x = np.array([1, 2, 3], dtype=np.float32)。 6. batch 的概念 在深度學習中，為了加速訓練過程，通常將多筆資料合併為一個批次 (Batch)，作為張量的第一維度。例如：\n一個批次包含 32 張圖片 (每張圖片為 28x28 像素)： shape = (32, 28, 28) 批次的概念允許高效處理資料，特別是在 GPU 上。\n7. 張量運算 keras.layers.Dense(512, activation='relu) 的概念可以比擬成：\n它是一個計算公式: output = relu(w * input + b)\nw 是權重(Weights)，用包學習資料間的關係。 b 是偏差(Bias)，用來調整輸出值。 relu 是一種激活函數，它讓輸出值變得非線性。 具體而言就是 (double x): double =\u0026gt; max(0.0, x); 逐元素運算: NumPy 的運算中，很重要的就是逐元素(element-wise) 運算，意思是對張量中每個數值進行各自獨立的運算，如上述的加法與 relu 運算都是逐元素運算，非常適合平行處理，也就是向量化執行(vectorized implementations)。\n在 GPU 上執行 Tensorflow 程式碼時，會透過全面向量化的 CUDA 架構來執行逐元素運算，加快運算的效率。 張量擴張(Boardcasting): 在不考慮特例的情形，將兩個不同軸數的張量相加， NumPy 會對較小的張量進行擴張以匹配形狀較大的張量，包含：\n較小的張量會加入新的軸(擴張軸)以匹配較大的張量。 較小的張量會在這些新的軸上重複寫入元素，以匹配較大張量的形狀。 import numpy as np x = np.array((1,2,3,4,5)) y = np.array((1)) z = x + y z \u0026gt;\u0026gt;\u0026gt; array([2,3,4,5,6]) 實際的流程如： y = np.array((1,2,3,4,5,6,7,8,9,10)) \u0026gt;\u0026gt;\u0026gt; array([1,2,3,4,5,6,7,8,9,10]) y1 = np.expand_dims(y, axis=0) \u0026gt;\u0026gt;\u0026gt; array([[1,2,3,4,5,6,7,8,9,10]]) y2 = np.concatenate([y1]*2, axios=0) \u0026gt;\u0026gt;\u0026gt; array([[1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8,9,10]]) 張量的點積運算\n在 NumPy 中會使用 np.dot 函式來進行點積運算 z = np.dot(x,y) 向量 x 與向量 y 做點積，在一般邏輯上可表示成： def naive_vector_dot(x, y): assert len(x.shape) == 1 assert len(y.shape) == 1 assert x.shape[0] == y.shape[0] z = 0. for i in range(x.shape[0]): z += x[i] * y[i] return z 矩陣 x 與向量 y 做點積，在一般邏輯上可表示成： def naive_matrix_vector_dot(x, y): assert len(x.shape) == 2 assert len(y.shape) == 1 assert x.shape[1] == y.shape[0] z = np.zeros(x.shape[0]) for i in range(x.shape[0]): for j in range(x.shape[1]): z[i] += x[i, j] * y[j] return z 張量重塑\n重塑就是調整張量各軸內的元素數，而張量元素總數不變的一種手法。 如在前一回使用過的資料前處理 train_images = train_images.reshap((60000, 28*28)) 就是一種重塑 常見的重塑還有矩陣轉置(transposition)，其實就是 x[i, :] =\u0026gt; x[:, i] x = np.transpose(x) 張量運算的幾何解釋\n1. 平移(Translation) 平移是一種將空間中的點沿特定方向移動的操作。\n在幾何上，平移不是線性運算，需要用齊次座標表示。\n假設平移向量為 \\(\\mathbf{t} = \\begin{bmatrix} t_x \\\\ t_y \\end{bmatrix}\\)，則點 \\(\\mathbf{p} = \\begin{bmatrix} x \\\\ y \\end{bmatrix}\\) 被平移後的位置為：\n$$ \\mathbf{p}\u0026rsquo; = \\mathbf{p} + \\mathbf{t} = \\begin{bmatrix} x\\\\ y \\end{bmatrix} + \\begin{bmatrix} t_x\\\\ t_y \\end{bmatrix} = \\begin{bmatrix} x + t_x \\\\ y + t_y \\end{bmatrix} $$\n在齊次座標中，可以用矩陣形式表示為：\n$$ \\begin{bmatrix} x\u0026rsquo; \\\\ y\u0026rsquo; \\\\ 1 \\end{bmatrix} = \\begin{bmatrix} 1 \u0026amp; 0 \u0026amp; t_x \\\\ 0 \u0026amp; 1 \u0026amp; t_y \\\\ 0 \u0026amp; 0 \u0026amp; 1 \\end{bmatrix} . \\begin{bmatrix} x \\\\ y \\\\ 1 \\end{bmatrix} $$\n2. 旋轉 (Rotation) 旋轉是將點繞某個固定點(通常是原點)旋轉一個角度的操作。\n旋轉矩陣(以逆時針旋轉角度 \\(\\theta\\) ) 為： $$ \\mathbf{R} = \\begin{bmatrix} \\cos\\theta \u0026amp; -\\sin\\theta \\\\ \\sin\\theta \u0026amp; \\cos\\theta \\end{bmatrix} $$ 對於 對於點 \\(\\mathbf{p} = \\begin{bmatrix} x \\\\ y \\end{bmatrix}\\)，旋轉後的位置為： $$ \\mathbf{p}\u0026rsquo; = \\mathbf{R} \\cdot \\mathbf{p} = \\begin{bmatrix} \\cos\\theta \u0026amp; -\\sin\\theta \\\\ \\sin\\theta \u0026amp; \\cos\\theta \\end{bmatrix} . \\begin{bmatrix} x \\\\ y \\end{bmatrix} $$ 在齊次座標中表示為:\n$$ \\begin{bmatrix} x\u0026rsquo; \\\\ y\u0026rsquo; \\\\ 1 \\end{bmatrix} = \\begin{bmatrix} \\cos\\theta \u0026amp; -\\sin\\theta \u0026amp; 0 \\\\ \\sin\\theta \u0026amp; \\cos\\theta \u0026amp; 0 \\\\ 0 \u0026amp; 0 \u0026amp; 1 \\end{bmatrix} . \\begin{bmatrix} x \\\\ y \\\\ 1 \\end{bmatrix} $$\n3. 縮放 (Scaling) 縮放改變點的大小，可以分別對 \\(x\\) 和 \\(y\\) 軸進行不同比例的縮放。\n縮放矩陣為： $$ \\mathbf{S} = \\begin{bmatrix} s_x \u0026amp; 0 \\\\ 0 \u0026amp; s_y \\end{bmatrix} $$\n對於點 \\(\\mathbf{p} = \\begin{bmatrix} x \\\\ y \\end{bmatrix}\\)，縮放後的位置為：\n$$ \\mathbf{p}\u0026rsquo; = \\mathbf{S} \\cdot \\mathbf{p} = \\begin{bmatrix} s_x \u0026amp; 0 \\\\ 0 \u0026amp; s_y \\end{bmatrix} . \\begin{bmatrix} x \\\\ y \\end{bmatrix} $$\n在齊次座標中表示為： $$ \\begin{bmatrix} x\u0026rsquo; \\\\ y\u0026rsquo; \\\\ 1 \\end{bmatrix} = \\begin{bmatrix} s_x \u0026amp; 0 \u0026amp; 0 \\\\ 0 \u0026amp; s_y \u0026amp; 0 \\\\ 0 \u0026amp; 0 \u0026amp; 1 \\end{bmatrix} . \\begin{bmatrix} x \\\\ y \\\\ 1 \\end{bmatrix} $$\n4. 線性變換 (Linear Transformation) 線性變換是縮放、旋轉或剪切等操作的統稱，可以用矩陣表示。\n一般的線性變換矩陣為：\n$$ \\mathbf{A} = \\begin{bmatrix} a_{11} \u0026amp; a_{12} \\\\ a_{21} \u0026amp; a_{22} \\end{bmatrix} $$\n對於點 \\(\\mathbf{p} = \\begin{bmatrix} x \\\\ y \\end{bmatrix}\\)，線性變換後的位置為：\n$$ \\mathbf{p}\u0026rsquo; = \\mathbf{A} \\cdot \\mathbf{p} = \\begin{bmatrix} a_{11} \u0026amp; a_{12} \\\\ a_{21} \u0026amp; a_{22} \\end{bmatrix} . \\begin{bmatrix} x \\\\ y \\end{bmatrix} $$\n在齊次座標中： $$ \\begin{bmatrix} x\u0026rsquo; \\\\ y\u0026rsquo; \\\\ 1 \\end{bmatrix} = \\begin{bmatrix} a_{11} \u0026amp; a_{12} \u0026amp; 0 \\\\ a_{21} \u0026amp; a_{22} \u0026amp; 0 \\\\ 0 \u0026amp; 0 \u0026amp; 1 \\end{bmatrix} . \\begin{bmatrix} x \\\\ y \\\\ 1 \\end{bmatrix} $$\n5. 仿射變換 (Affine Transformation) 仿射變換是線性變換加上平移的組合。\n在齊次座標中，仿射變換可表示為：\n$$ \\mathbf{T} = \\begin{bmatrix} a_{11} \u0026amp; a_{12} \u0026amp; t_x \\\\ a_{21} \u0026amp; a_{22} \u0026amp; t_y \\\\ 0 \u0026amp; 0 \u0026amp; 1 \\end{bmatrix} $$\n對於點 \\(\\mathbf{p} = \\begin{bmatrix} x \\\\ y \\end{bmatrix}\\)，仿射變換後的位置為： $$ \\begin{bmatrix} x\u0026rsquo; \\\\ y\u0026rsquo; \\\\ 1 \\end{bmatrix} = \\begin{bmatrix} a_{11} \u0026amp; a_{12} \u0026amp; t_x \\\\ a_{21} \u0026amp; a_{22} \u0026amp; t_y \\\\ 0 \u0026amp; 0 \u0026amp; 1 \\end{bmatrix} . \\begin{bmatrix} x \\\\ y \\\\ 1 \\end{bmatrix} $$\n由於仿射是線性變換(矩陣的點積)與平移運算(向量加法)的結合，其實就是密集層會用到的 \\(\\mathbf{y}=\\mathbf{W}\\cdot\\mathbf{x}+\\mathbf{b}\\)。一個沒有激活函數的密集層就是仿射層。 換句話說，在沒有激活函數的狀況下進行了無數次的仿射變換，可以等同於一次仿射變換 $$ \\begin{align*} y_1 \u0026amp;= W_1 \\cdot x + b_1 \\\\ y_2 \u0026amp;= W_2 \\cdot y_1 + b_2 \\end{align*} $$ 將 \\(y_1\\) 代入 \\(y_2\\) 的公式： $$ \\begin{align*} y_2 \u0026amp;= W_2 \\cdot (W_1 \\cdot x + b_1) + b_2 \\\\ y_2 \u0026amp;= W_2 \\cdot W_1 \\cdot x + W_2 \\cdot b_1 + b_2 \\end{align*} $$ 設 \\(W = W_2 \\cdot W_1\\) 和 \\(b = W_2 \\cdot b_1 + b_2\\)，則： $$ y_2 = W \\cdot x + b $$ 這個結論非常重要，代表：如果我們建構了多個密集層的神經網路，卻沒有搭配任何的激活函數，其效果等同於一個密集層，換言之，這個「深層」的神經網路模型不過是一個線性模型。 ","permalink":"https://intervalrain.github.io/ai/2_2/","summary":"\u003cp\u003e張量 Tensor 是神經網路的資料表示法。\n在 Python，我們常用 NumPy 陣列來作為機器學習的基礎資料結構，說 NumPy 陣列也稱為張量。\u003c/p\u003e\n\u003ch2 id=\"張量的維階軸\"\u003e張量的維、階、軸\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e階(rank): 又稱為軸(axis)，代表陣列的軸數。\u003c/li\u003e\n\u003cli\u003e維(dimension): 某一階的元素個數。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"1-純量-0d-張量\"\u003e1. 純量 (0D 張量)\u003c/h3\u003e\n\u003cp\u003e純量是單一個數值，也稱為 0 維張量 (0D Tensor)\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ex \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"2-向量-1d-張量\"\u003e2. 向量 (1D 張量)\u003c/h3\u003e\n\u003cp\u003e向量是包含單一軸的數列，也稱為 1 維張量 (1D Tensor)\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ex \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e [\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"3-矩陣-2d-張量\"\u003e3. 矩陣 (2D 張量)\u003c/h3\u003e\n\u003cp\u003e矩陣是二維的數據結構，也稱為 2 維張量 (2D Tensor)\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ex \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e [[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     [\u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e]]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"4-3d-張量與高階張量\"\u003e4. 3D 張量與高階張量\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e3D 張量：在二維矩陣基礎上增加一個深度維度，常用於處理圖片數據 (例如 RGB 通道)。\u003c/li\u003e\n\u003cli\u003e高階張量 (nD 張量)：當張量的維度超過 3D 時，用於更高維度的資料表示，例如影片、文字數據等。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ex \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e [[[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e], \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      [\u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e], \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      [\u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e8\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e9\u003c/span\u003e]],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e     [[\u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e11\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e12\u003c/span\u003e], \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      [\u003cspan style=\"color:#ae81ff\"\u003e13\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e14\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e15\u003c/span\u003e], \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      [\u003cspan style=\"color:#ae81ff\"\u003e16\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e17\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e18\u003c/span\u003e]]]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"5-張量的屬性\"\u003e5. 張量的屬性\u003c/h3\u003e\n\u003cp\u003e張量擁有幾個關鍵屬性，用於描述其結構與內容：\u003c/p\u003e","title":"[AI] 2-2. 張量 Tensor"},{"content":" MNIST 是經典的手寫數字圖片資料集，已經內建在 tensorflow 裡面，這個資料集可以相當於是深度學習的 \u0026ldquo;Hello World\u0026rdquo;，是由美國國家標準與技術研究院(National Institute of Standard and Technology) 所提供。 1. 認識 MNIST 資料集 透過 tensorflow 引入資料集 from tensorflow.keras.datasets import mnist (train_images, train_labels), (test_images, test_labels) = mnist.load_data() 查看資料的大小 train_images.shape len(train_labels) test_images.shape test_labels min(test_labels), max(test_labels) 結果 (60000, 28, 28) # 代表 train_images 是 60000 張 28*28 的圖片 60000 # 代表 train_labels 同樣也有 60000 份 (10000, 28, 28) # 代表 test_images 有 10000 張 28*28 的圖片 array([7, 2, 1, ..., 4, 5, 6], dtype=uint8) (0, 9) # 代表 test_labels 是 0-9 的數字，資料型別是 uint8 2. 神經網路架構 接下來的操作流程是： 將測資 train_images 和 train_labels 餵給神經網路 神經網路學習分類圖片，與每張圖片的標籤對比，分類錯誤就修正(學習) 最後對 test_images 進行預測，並驗證結果看是否與 test_labels 吻合 from tensorflow import keras from tensorflow.keras import layers model = keras.Sequential([ layers.Dense(512, activation=\u0026#34;relu\u0026#34;) layers.Dense(10, activation=\u0026#34;softmax\u0026#34;) ]) 組成神經網路的基本元件為層(layer)，一個層就是一個資料處理的模組。可以視之為資料的過濾器。具體而言，每一層都會從資料中萃取出特定的轉換或是表示法(representation)，這些特定的表示法會有助於解決某些問題。大多數深度學習模型會將許多層連接在一起，漸次執行資料萃取(data distillation)。 在範例中，神經網路由兩個密集層(Dense layers)緊密連接組成，密集層也稱為全連接(fully connected) 神經層。第二個密集層是有 10 個輸出的 softmax 層，最終會輸出 10 個機率評分的陣列，每個評分就是對應到每一個數字的機率。 model.compile(optimizer=\u0026#39;adam\u0026#39;, loss=\u0026#39;sparse_categorical_crossentropy\u0026#39;, metrics=[\u0026#39;accuracy\u0026#39;]) 為了讓神經網路接受訓練，還需要準備三個元件才能進行編譯。\n損失函數(loss function): 用來衡量神經網路在訓練資料上的表現，以及引導神經網路往正確的方向修正。 優化器(optimizer): 神經網路根據訓練資料與損失函數值來自行更新權重參數的機制 評量指標(metrics): 最後我們關心的是模型的準確度(accuracy)，即正確的比例。 \\( \\boxed{ \\begin{array}{ccccccc} \u0026amp;\u0026amp; \\text{輸入資料 X} \u0026amp; \\\\ \u0026amp;\u0026amp; \\downarrow \u0026amp; \\\\ \\red{\\boxed{\\text{權重\u0026rsquo;}}} \u0026amp; \\rightarrow \u0026amp; \\boxed{\\text{層(資料轉換)}} \\\\ \\red{\\uparrow} \u0026amp;\u0026amp; \\downarrow \u0026amp; \\\\ \\red{\\boxed{\\text{權重\u0026rsquo;}}} \u0026amp; \\rightarrow \u0026amp; \\boxed{\\text{層(資料轉換)}} \\\\ \u0026amp;\u0026amp; \\downarrow \u0026amp; \\\\ \\red{\\uparrow} \u0026amp;\u0026amp; \\boxed{\\text{預測 Y\u0026rsquo;}}\\rightarrow \u0026amp; \\boxed{\\text{損失函數}} \u0026amp; \\leftarrow \u0026amp; \\boxed{\\text{標準答案 Y}} \\\\ \u0026amp;\u0026amp;\u0026amp; \\downarrow \u0026amp; \\\\ \\red{\\boxed{\\text{優化器}}} \u0026amp;\u0026amp; \\red{\\leftarrow} \u0026amp; \\boxed{\\text{損失分數}} \\end{array} } \\)\ntrain_images = train_images.reshape((60000, 28 * 28)) train_images = train_images.astype(\u0026#39;float32\u0026#39;) / 255 test_images = test_images.reshape((10000, 28 * 28)) test_images = test_images.astype(\u0026#39;float32\u0026#39;) / 255 再進行訓練之前，需要將資料做正規化處理。在範例中，資料為 [0,255] 之間的像素值(uint8)並儲存在 (60000, 28,28) 的陣列中。我將轉換所有像素資料成 [0,1] 之間的 float32，並儲存在 (60000, 28*28) 的二軸陣列。 model.fit(train_images, train_labels, epochs=5, batch_size=128) 接下來就可以呼叫 fit() 來訓練模型了。\naccuracy 代表的是準確度。 loss 代表的是損失值，代表使用的損失函數所算出來的評估值。 Epoch 1/5 469/469 ━━━━━━━━━━━━━━━━━━━━ 6s 10ms/step - accuracy: 0.8717 - loss: 0.4605 Epoch 2/5 469/469 ━━━━━━━━━━━━━━━━━━━━ 6s 13ms/step - accuracy: 0.9655 - loss: 0.1179 Epoch 3/5 469/469 ━━━━━━━━━━━━━━━━━━━━ 9s 9ms/step - accuracy: 0.9788 - loss: 0.0720 Epoch 4/5 469/469 ━━━━━━━━━━━━━━━━━━━━ 6s 12ms/step - accuracy: 0.9857 - loss: 0.0490 Epoch 5/5 469/469 ━━━━━━━━━━━━━━━━━━━━ 4s 9ms/step - accuracy: 0.9904 - loss: 0.0354 \u0026lt;keras.src.callbacks.history.History at 0x7ae172cf8760\u0026gt; 訓練完，我們接著可以用模型來預測測試資料。\ntest_digits = test_images[0:20] predictions = model.predict(test_digits) predictions.argmax(axis=1) # 列出每行中最大值的索引值 結果 array([7, 2, 1, 0, 4, 1, 4, 9, 5, 9, 0, 6, 9, 0, 1, 5, 9, 7, 3, 4]) 嘗試把手寫圖片畫出來，比較一下 import matplotlib.pyplot as plt n = 20 for i in range(n): plt.subplot(1, n, i+1) plt.imshow(test_images_pic[i], cmap=\u0026#39;gray\u0026#39;) plt.axis(\u0026#39;off\u0026#39;) plt.tight_layout() plt.show() 最後我們把模型拿來測試全部 10000 張測資，看一下準確度是多少 test_loss, test_acc = model.evaluate(test_images, test_labels) print(f\u0026#39;test_acc: {test_acc}\u0026#39;) 結果 test_acc: 0.9810000061988831 代表正確率為 98.1% 比較訓練集的準確度為 0.9904，測試集的準確度為 0.981，這樣的差距稱為過度配適(overfitting)，意指模型對新資料的表現比訓練資料還要差。 3. 摘要 在本篇做了以下的事\n載入 mnist 資料集 用 Dense Layer 建構了一個神經網路 用 model.compile 來編譯神經網路，需要指定 opimizer, loss, metric 三個參數 對資料集做預處理 用 model.fit() 來訓練 用 model.predict() 來預測 用 model.evaluate 來評估模型表現 ","permalink":"https://intervalrain.github.io/ai/2_1/","summary":"\u003cul\u003e\n\u003cli\u003eMNIST 是經典的手寫數字圖片資料集，已經內建在 tensorflow 裡面，這個資料集可以相當於是深度學習的 \u0026ldquo;Hello World\u0026rdquo;，是由美國國家標準與技術研究院(National Institute of Standard and Technology) 所提供。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"1-認識-mnist-資料集\"\u003e1. 認識 MNIST 資料集\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e透過 tensorflow 引入資料集\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e tensorflow.keras.datasets \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e mnist\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e(train_images, train_labels), (test_images, test_labels) \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e mnist\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eload_data()\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e查看資料的大小\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003etrain_images\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eshape\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003elen(train_labels)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003etest_images\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eshape\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003etest_labels\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emin(test_labels), max(test_labels)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdetails\u003e\n    \u003csummary\u003e結果\u003c/summary\u003e\n\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e(\u003cspan style=\"color:#ae81ff\"\u003e60000\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e28\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e28\u003c/span\u003e)     \u003cspan style=\"color:#75715e\"\u003e# 代表 train_images 是 60000 張 28*28 的圖片 \u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#ae81ff\"\u003e60000\u003c/span\u003e               \u003cspan style=\"color:#75715e\"\u003e# 代表 train_labels 同樣也有 60000 份\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e(\u003cspan style=\"color:#ae81ff\"\u003e10000\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e28\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e28\u003c/span\u003e)     \u003cspan style=\"color:#75715e\"\u003e# 代表 test_images 有 10000 張 28*28 的圖片\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003earray([\u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#f92672\"\u003e...\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e], dtype\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003euint8)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e(\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e9\u003c/span\u003e)              \u003cspan style=\"color:#75715e\"\u003e# 代表 test_labels 是 0-9 的數字，資料型別是 uint8\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/details\u003e\n\n\u003ch2 id=\"2-神經網路架構\"\u003e2. 神經網路架構\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e接下來的操作流程是：\n\u003col\u003e\n\u003cli\u003e將測資 \u003ccode\u003etrain_images\u003c/code\u003e 和 \u003ccode\u003etrain_labels\u003c/code\u003e 餵給神經網路\u003c/li\u003e\n\u003cli\u003e神經網路學習分類圖片，與每張圖片的標籤對比，分類錯誤就修正(學習)\u003c/li\u003e\n\u003cli\u003e最後對 \u003ccode\u003etest_images\u003c/code\u003e 進行預測，並驗證結果看是否與 \u003ccode\u003etest_labels\u003c/code\u003e 吻合\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e tensorflow \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e keras\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e tensorflow.keras \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e layers\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emodel \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e keras\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eSequential([\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    layers\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eDense(\u003cspan style=\"color:#ae81ff\"\u003e512\u003c/span\u003e, activation\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;relu\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    layers\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eDense(\u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e, activation\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;softmax\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e組成神經網路的基本元件為\u003cstrong\u003e層(layer)\u003c/strong\u003e，一個層就是一個資料處理的模組。可以視之為資料的過濾器。具體而言，每一層都會從資料中萃取出特定的轉換或是表示法(representation)，這些特定的表示法會有助於解決某些問題。大多數深度學習模型會將許多層連接在一起，漸次執行\u003cstrong\u003e資料萃取(data distillation)\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e在範例中，神經網路由兩個密集層(Dense layers)緊密連接組成，密集層也稱為\u003cstrong\u003e全連接(fully connected)\u003c/strong\u003e 神經層。第二個密集層是有 10 個輸出的 softmax 層，最終會輸出 10 個機率評分的陣列，每個評分就是對應到每一個數字的機率。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emodel\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ecompile(optimizer\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;adam\u0026#39;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    loss\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;sparse_categorical_crossentropy\u0026#39;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    metrics\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e[\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;accuracy\u0026#39;\u003c/span\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e為了讓神經網路接受訓練，還需要準備三個元件才能進行編譯。\u003c/p\u003e","title":"[AI] 2-1. 初試神經網路-手寫辨識 mnist"},{"content":" 卷積神經網路與反向傳播這兩個應用於電腦視覺的深度學習關鍵概念，在 1989 年就已經被研究透徹。長短期記憶(Long Short-Term Memory, LSTM) 演算法是時間序列的深度學習基礎，也於 1997 年發展出來，之後幾乎沒有什麼演進。那麼為什麼深度學習會在 2012 年後才開始蓬勃發展呢？\n技術演變 硬體 資料集和競賽評比 演算法的進步 因為機器學習的發展是經由實驗結果來驗證(而不是由理論引導)，所有只有當資料和硬體可支撐新思維時，才能促進演算法的進步。\n硬體 從 1990 到 2010 年，CPU 提升了約 5000 倍，但這仍然無法供應電腦視覺或語音辨識的典型深度學習模型。\n在 2000 年代，由 NVIDIA 和 AMD 等公司投資大規模平行運算晶片(graphical processing units, 圖形處理單元, GPU)，以應愈來愈逼真的影音遊戲。在 2007 年，NVIDIA 推出了 CUDA，一個針對 GPU 的程式開發介面。從物理建模開始，只需要 GPU 就可以在各種高度平行化運算中取代大量 CPU。深度神經網路主要由許多矩陣多項式構成，也屬於高度平行化處理。因此在 2011 年，開始有研究人員(Dan Ciresan, Alex Krizhevsky)以 CUDA 來開發神經網路。\n資料 除了過去 20 年儲存設備爆發式的發展外，網際網路的興起才是真正影響資料源的重大關鍵，大量來自於網路的資料被應用於機器學習上。\nImageNet 提供了大量的已被標註(labled)的影像，包含許多大尺寸的影像資料，還有最重要的，其相關的年度影像辨識競賽。\nKaggle 是一個專注於資料科學和機器學習的競賽平台，於 2010 年成立。這個平台不僅提供大量的公開資料集，還定期舉辦競賽，讓研究者和工程師能夠透過實際問題來測試與優化他們的演算法。Kaggle 競賽的主題多元，涵蓋醫學影像分析、自然語言處理、時間序列預測等。透過這樣的競爭環境，不僅促進了演算法的進步，也加速了實驗結果的分享與技術的迭代。\nImageNet 與 Kaggle 的共同點在於，它們都提供了一個標準化的評測基準，使得研究人員能夠客觀地比較不同的模型表現。此外，這些平台的出現，使得深度學習的研究與應用從少數實驗室走向全球，更多人參與的結果是加速了技術的發展。\n演算法的進步 深度學習模型的核心挑戰之一在於深層網路結構中的梯度傳播問題（gradient propagation）。隨著網路層數的增加，用於訓練神經網路的回饋訊號可能會逐漸消失。這個問題在早期深度學習的研究中，極大地限制了神經網路的深度及其表現能力。然而，隨著多項關鍵演算法改進的提出，這一瓶頸逐漸被克服，深層網路得以成功訓練並展現強大的性能。\n激活函數(Activation Functions) 早期的深度學習網路常使用 Sigmoid 或 Tanh 作為激活函數，但這些函數容易造成梯度消失問題。 ReLU（Rectified Linear Unit）函數的引入極大地改善了這一問題。ReLU 的非線性特性允許網路捕捉更複雜的特徵，同時減少梯度消失現象，成為了深度神經網路的標配。 權重初始化策略(Weight Initialization Schemes) 不良的權重初始化可能會導致信號在前向傳播或反向傳播中被擴大或縮小。為此，研究者提出了 Xavier 初始化和 He 初始化等策略，通過調整權重的分布，讓輸入和輸出的方差保持穩定，從而促進深層網路的收斂。 透過精選的資料做 pre-training，再接著使用大量的資料做 fine-tuning。 利用 Adapter 概念(e.g. LoRA) 使預訓練的效果達到更佳。 優化方法（Optimization Schemes） 傳統的 梯度下降方法(gradient descent) 收斂速度慢且對 學習率(learning-rate) 敏感。 隨著 自適應學習率(RMSProp)、動量(Momemtum) 等優化算法的引入，訓練效率和穩定性得到了顯著提升。 Adam 結合了動量和自適應學習率調整，使其成為當前最廣泛使用的優化方法之一。 批量正規化（Batch Normalization） 深層網路中的參數分布可能隨訓練過程發生漂移（Internal Covariate Shift）。 Batch Normalization 通過在每層對輸入進行標準化，有效地穩定了訓練過程，允許使用更高的學習率並加速收斂。 殘差連接（Residual Connections） 殘差網路（ResNet）通過引入跳躍連接（skip connections），將輸入直接傳遞到後續層，解決了梯度消失問題。這一創新使得網路可以更加輕鬆地堆疊到數百層，並顯著提升了模型的準確性。 深度可分離卷積（Depth-Wise Separable Convolutions） 深度可分離卷積是一種高效的卷積操作，將空間和通道卷積分開處理，大幅減少了計算成本。同時保留了模型的表現能力，使得深度學習能夠更高效地應用於資源有限的環境（如移動設備）。 其他技術進步 其他關鍵進步包括 Dropout 用於防止過擬合、學習率調度策略（Learning Rate Schedulers）以及 Transformer 的引入，這些技術進一步推動了深度學習的應用範圍和能力。 這些改進不僅緩解了深層網路的梯度問題，也顯著提高了訓練的效率和模型的表現，最終讓深度學習進入一個前所未有的繁榮時期。\n","permalink":"https://intervalrain.github.io/ai/1_3/","summary":"\u003cblockquote\u003e\n\u003cp\u003e卷積神經網路與反向傳播這兩個應用於電腦視覺的深度學習關鍵概念，在 1989 年就已經被研究透徹。長短期記憶(Long Short-Term Memory, LSTM) 演算法是時間序列的深度學習基礎，也於 1997 年發展出來，之後幾乎沒有什麼演進。那麼為什麼深度學習會在 2012 年後才開始蓬勃發展呢？\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"技術演變\"\u003e技術演變\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e硬體\u003c/li\u003e\n\u003cli\u003e資料集和競賽評比\u003c/li\u003e\n\u003cli\u003e演算法的進步\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e因為機器學習的發展是經由實驗結果來驗證(而不是由理論引導)，所有只有當資料和硬體可支撐新思維時，才能促進演算法的進步。\u003c/p\u003e\n\u003ch3 id=\"硬體\"\u003e硬體\u003c/h3\u003e\n\u003cp\u003e從 1990 到 2010 年，CPU 提升了約 5000 倍，但這仍然無法供應電腦視覺或語音辨識的典型深度學習模型。\u003c/p\u003e\n\u003cp\u003e在 2000 年代，由 NVIDIA 和 AMD 等公司投資大規模\u003cstrong\u003e平行運算晶片(graphical processing units, 圖形處理單元, GPU)\u003c/strong\u003e，以應愈來愈逼真的影音遊戲。在 2007 年，NVIDIA 推出了 CUDA，一個針對 GPU 的程式開發介面。從物理建模開始，只需要 GPU 就可以在各種高度平行化運算中取代大量 CPU。深度神經網路主要由許多矩陣多項式構成，也屬於高度平行化處理。因此在 2011 年，開始有研究人員(Dan Ciresan, Alex Krizhevsky)以 CUDA 來開發神經網路。\u003c/p\u003e\n\u003ch3 id=\"資料\"\u003e資料\u003c/h3\u003e\n\u003cp\u003e除了過去 20 年儲存設備爆發式的發展外，網際網路的興起才是真正影響資料源的重大關鍵，大量來自於網路的資料被應用於機器學習上。\u003c/p\u003e\n\u003cp\u003eImageNet 提供了大量的已被標註(labled)的影像，包含許多大尺寸的影像資料，還有最重要的，其相關的年度影像辨識競賽。\u003c/p\u003e\n\u003cp\u003eKaggle 是一個專注於資料科學和機器學習的競賽平台，於 2010 年成立。這個平台不僅提供大量的公開資料集，還定期舉辦競賽，讓研究者和工程師能夠透過實際問題來測試與優化他們的演算法。Kaggle 競賽的主題多元，涵蓋醫學影像分析、自然語言處理、時間序列預測等。透過這樣的競爭環境，不僅促進了演算法的進步，也加速了實驗結果的分享與技術的迭代。\u003c/p\u003e\n\u003cp\u003eImageNet 與 Kaggle 的共同點在於，它們都提供了一個標準化的評測基準，使得研究人員能夠客觀地比較不同的模型表現。此外，這些平台的出現，使得深度學習的研究與應用從少數實驗室走向全球，更多人參與的結果是加速了技術的發展。\u003c/p\u003e\n\u003ch3 id=\"演算法的進步\"\u003e演算法的進步\u003c/h3\u003e\n\u003cp\u003e深度學習模型的核心挑戰之一在於深層網路結構中的\u003cstrong\u003e梯度傳播問題（gradient propagation）\u003c/strong\u003e。隨著網路層數的增加，用於訓練神經網路的回饋訊號可能會逐漸消失。這個問題在早期深度學習的研究中，極大地限制了神經網路的深度及其表現能力。然而，隨著多項關鍵演算法改進的提出，這一瓶頸逐漸被克服，深層網路得以成功訓練並展現強大的性能。\u003c/p\u003e","title":"[AI] 1-3. 深度學習的發展"},{"content":"機率建模(Probabilistic modeling) 單純貝氏演算法(Naive Bayes thorem) 單純貝氏定理是一種基於機率理論的分類方法，適用於文本分類等任務，其核心概念是基於特徵條件獨立的假設來計算後驗機率。\n以下是一個使用 Python 使現文本分類的範例\nfrom sklearn.naive_bayes import MultinomialNB from sklearn.feature_extraction.text import CountVectorizer # 示範文本數據 texts = [\u0026#34;這部電影很好看\u0026#34;, \u0026#34;服務很差\u0026#34;, \u0026#34;餐點美味\u0026#34;, \u0026#34;環境很糟\u0026#34;] labels = [\u0026#34;正面\u0026#34;, \u0026#34;負面\u0026#34;, \u0026#34;正面\u0026#34;, \u0026#34;負面\u0026#34;] # 將文本轉換為特徵向量 vectorizer = CountVectorizer() X = vectorizer.fit_transform(texts) # 訓練模型 clf = MultinomialNB() clf.fit(X, labels) # 預測新文本 new_text = [\u0026#34;這家餐廳很棒\u0026#34;] new_X = vectorizer.transform(new_text) prediction = clf.predict(new_X) 邏輯迴歸(logistic regression, logreg) 邏輯迴歸是一種二元分類問題的基礎演算法。儘管名稱中有「迴歸」，但實際上是一個分類模型，通過 sigmoid 函數 將線性預測轉換成機率值。\nfrom sklearn.linear_model import LogisticRegression import numpy as np # 示範數據 X = np.array([[1, 2], [2, 3], [3, 4], [4, 5]]) y = np.array([0, 0, 1, 1]) # 創建和訓練模型 model = LogisticRegression() model.fit(X, y) # 預測 prediction = model.predict([[2.5, 3.5]]) 早期的神經網路 1980年代的神經網路發展奠定了現代深度學習的基礎。反向傳播算法的發明是一個重要突破，它提供了一種有效的方法來訓練多層神經網路。\n1989年 Yann LeCun 結合卷積神經網路(Convolutional Neural Network, CNN) 和反向傳播，應用於手寫數字分類問題。\n反向傳播(Backpropagation) 反向傳播是一種梯度下降最佳化(gradient-descent-optimization)的演算法，用於調整神經網路中的權重。其過程可以簡化為：\n前向傳播：輸入數據通過網路產生預測 計算誤差：比較預測值與實際值 反向傳播誤差：從輸出層向輸入層計算梯度 更新權重：使用梯度下降來優化網路參數 以下是一個使用 PyTorch 實現簡單神經網路的例子：\nimport torch import torch.nn as nn class SimpleNN(nn.Module): def __init__(self): super(SimpleNN, self).__init__() self.layer1 = nn.Linear(784, 128) self.layer2 = nn.Linear(128, 10) def forward(self, x): x = torch.relu(self.layer1(x)) x = self.layer2(x) return x # 創建模型 model = SimpleNN() Kernel methods 與 SVM 支持向量機（Support Vector Methods, SVM）是一種強大的分類算法，通過在高維空間中尋找最優分類超平面來工作。\n目標是兩種類別的資料點間，找到最佳決策邊界(decision boundaries) 步驟： 映射到高維空間，決策邊界通常是一個超曲面 找到最大化邊界(maximizing the margin)，以製造最大的 margin Kernel tricks 將資料映射到高維空間在理論上可行，但在實際上卻常常很難處理(因為維度高，計算負載變大)\n我們不必在高維度空間把每一個資料點都做座標轉換，然後在高維度上計算決策超平面，取而代之，只要計算高維空間中點與點之間的距離即可。\nkernel function 定義是「初始空間中任意兩點」映射到「目標表示空間中對應點之間的距離」。 白話解釋，可以將 Kernel tricks 理解為一種「偷懶」的聰明方法。想像我們要分類兩組點，在二維平面上無法用直線分開，需要將點映射到三維空間。但直接計算三維座標會很耗時，kernel tricks 讓我們可以直接計算點之間在高維空間的距離，而不需要真的去計算高維座標。 from sklearn.svm import SVC # 創建SVM分類器 svm = SVC(kernel=\u0026#39;rbf\u0026#39;) # 使用RBF核函數 svm.fit(X_train, y_train) # 預測 predictions = svm.predict(X_test) 但在 SVM 中，只有決策超平面是學習而來的，kernel function 是需要透過人工設計的。SVM 在簡單分類問題上表現很好，是少數具備廣泛理論支持也經得起嚴謹數學分析的機器學習演算法。但 SVM 難以擴展到大型資料集。SVM 是一種淺層方法，需要有效的手動萃取有用的表示法，該步驟稱為特徵工程(feature engineering)。 打個比方，圖片的原始像素無法很好的分類手寫數字，需要人工找到有用的表示法，如像素直方圖。 決策樹、隨機森林和梯度提升機器 決策樹 Decision Tree 決策樹模擬人類決策過程，通過一系列問題將數據分類。它像是一個流程圖，從根節點開始，根據特徵值選擇分支，最終到達葉節點得到預測結果。\nfrom sklearn.tree import DecisionTreeClassifier # 創建決策樹 tree = DecisionTreeClassifier(max_depth=3) tree.fit(X_train, y_train) 隨機森林 Random Forest 隨機森林是多個決策樹的集成，每棵樹使用隨機選擇的特徵和數據樣本進行訓練。最終預測是所有樹的投票結果。\nfrom sklearn.ensemble import RandomForestClassifier # 創建隨機森林 rf = RandomForestClassifier(n_estimators=100) rf.fit(X_train, y_train) 梯度提升機 Gradient Boosting Machines (GBM) 梯度提升機是一種迭代式的集成方法，每次迭代都試圖糾正之前模型的錯誤。\nfrom sklearn.ensemble import GradientBoostingClassifier # 創建梯度提升機 gbm = GradientBoostingClassifier(n_estimators=100) gbm.fit(X_train, y_train) 深度學習最大的優勢 讓特徵工程變成自動化 淺層學習有快速遞減(fast-diminishing) 的現象，因為「在三層模型中最佳的第一表示層，並非單層或雙層模型中最佳的第一表示層。」。 想像你在蓋一棟三層樓的房子。如果你先蓋一層樓的房子，再加蓋第二層，最後加蓋第三層，這樣的結果往往不如一開始就規劃好三層樓一起設計來得好。因為當你一開始就知道要蓋三層，你可以更好地規劃整體結構，確保每一層都能最好地支持整棟建築。\n聯合學習：調整模型內部一個參數，其它相關參數也會自動調整。 現代機器學習框架應用 主流框架比較 Scikit-learn：適用於傳統機器學習算法 優點：API簡單，適合快速原型開發 應用：特徵工程、傳統算法實現 TensorFlow/Keras： 優點：生產環境部署成熟，生態系統完整 應用：深度學習模型開發和部署 PyTorch： 優點：動態計算圖，研究友好 應用：研究實驗，快速迭代開發 ","permalink":"https://intervalrain.github.io/ai/1_2/","summary":"\u003ch2 id=\"機率建模probabilistic-modeling\"\u003e機率建模(Probabilistic modeling)\u003c/h2\u003e\n\u003ch3 id=\"單純貝氏演算法naive-bayes-thorem\"\u003e單純貝氏演算法(Naive Bayes thorem)\u003c/h3\u003e\n\u003cp\u003e單純貝氏定理是一種基於機率理論的分類方法，適用於文本分類等任務，其核心概念是基於特徵條件獨立的假設來計算後驗機率。\u003c/p\u003e\n\u003cp\u003e以下是一個使用 Python 使現文本分類的範例\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e sklearn.naive_bayes \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e MultinomialNB\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e sklearn.feature_extraction.text \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e CountVectorizer\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 示範文本數據\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003etexts \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;這部電影很好看\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;服務很差\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;餐點美味\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;環境很糟\u0026#34;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003elabels \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;正面\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;負面\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;正面\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;負面\u0026#34;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 將文本轉換為特徵向量\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003evectorizer \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e CountVectorizer()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eX \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e vectorizer\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003efit_transform(texts)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 訓練模型\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eclf \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e MultinomialNB()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eclf\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003efit(X, labels)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 預測新文本\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enew_text \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e [\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;這家餐廳很棒\u0026#34;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enew_X \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e vectorizer\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003etransform(new_text)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprediction \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e clf\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003epredict(new_X)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"邏輯迴歸logistic-regression-logreg\"\u003e邏輯迴歸(logistic regression, logreg)\u003c/h3\u003e\n\u003cp\u003e邏輯迴歸是一種二元分類問題的基礎演算法。儘管名稱中有「迴歸」，但實際上是一個分類模型，通過 \u003cstrong\u003esigmoid 函數\u003c/strong\u003e 將線性預測轉換成機率值。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e sklearn.linear_model \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e LogisticRegression\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e numpy \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e np\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 示範數據\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eX \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e np\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003earray([[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e], [\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e], [\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e], [\u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e]])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ey \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e np\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003earray([\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 創建和訓練模型\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emodel \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e LogisticRegression()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emodel\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003efit(X, y)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 預測\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprediction \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e model\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003epredict([[\u003cspan style=\"color:#ae81ff\"\u003e2.5\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3.5\u003c/span\u003e]])\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"早期的神經網路\"\u003e早期的神經網路\u003c/h2\u003e\n\u003cp\u003e1980年代的神經網路發展奠定了現代深度學習的基礎。反向傳播算法的發明是一個重要突破，它提供了一種有效的方法來訓練多層神經網路。\u003c/p\u003e","title":"[AI] 1-2. 機器學習的基礎技術"},{"content":"人工智慧(Artificial Intelligence, 簡稱 AI)，但何謂人工智慧？\n首先我們先探討人工智慧、機器學習、深度學習之間的關係。 一般而言，人工智慧包含了機器學習，然後機器學習包含了深度學習。\n人工智慧 符號式 AI(Symbolic AI) 人工智慧出現在 1950 年代，其簡單定義為「能自動化地執行一般人類的智慧工作」，故包含了機器學習、深度學習，同時也涵蓋了許多不涉及學習的做法。\n在 1980 年代以前，大部分的 AI 科學家都認為，想要讓人工智慧與人類匹敵，需要靠工程師編寫大量的規則來操控人工智慧的行為。這種人工智慧被稱為 Symbolic AI，意即符號式 AI，或稱 Rule-based AI。這種 AI 的形式在流行於 1950 至 1980 年代，隨著專家系統興起而達到顛峰。 Symbolic AI 可以解決規則清楚的問題，如棋盤遊戲、卡牌遊戲，但對於更複雜、更模糊的問題，如影像辨識、語音辨識或語言翻譯，要找出明確規則是相當困難的。故需要新方法來取代 Symbolic AI，那就是 Machine Learning。\n機器學習(Machine Learning) Symbolic AI 需要透過明確的步驟，定義出規則；而機器學習反其道而行：機器根據輸入資料及相應答案，自己找出有哪些規則。換句話說，機器學習系統是透過訓練(training)來學習，而非透過定義規則。\n為了實現機器學習，有三個要素：\n輸入資料 標準答案 判斷好或壞 機器學習將輸入資料轉換成有意義的輸出，並且和輸入資料所附帶的標準答案進行比對修正來學習。因此，機器學習的核心就是要對資料進行有意義的轉換。\n故機器學習通常需要人工特徵工程，適合結構化的數據與較小規模的數據集。 比方說要做手寫數字辨識，可能要透過封閉環的數量、橫向與縱向的直方圖來定義規則，這些形式的規則也許可以得到不錯的結果，但因為仰賴人力來維護，故這種方式很吃力，也可能導致系統非常地脆弱，因為每一個新的樣本，都可能對先前建立好的規則產生致命的影響，因此必須在既有的架構上添加新的資料轉換規則，進而與既存的規則產生影響。\n常用的包含決策樹、SVM、隨機森林、類神經網路(Neural Network)等演算法。\n深度學習(Deep Learning) 既然找出「有意義的轉換方式」是如此痛苦的，科學家便開始嘗試將系統性地將這一過程自動化。\n透過使用卷積類神經網路(Convolutional Neural Network, CNN)，並強調使用連續、多層的學習方式，使表達式更有意義。\n深度指的是一個模型用了多少「層」來處理資料，與機器學習通常 1~2 層的資料表示法相比(有時稱為淺層學習(shallow learning))，深度學習通常涉及數十層，甚至上百層，這樣的學習法被稱為分層或階層表示法的學習(layered representation learning, hierarchical representation learning)。 在深度學習中，所謂「層」會對輸入資料做怎樣的轉換，取決於儲存在該層的權重(weight)，而權重是多個數字組成的，權重也被稱為層的參數(parameters)，而「學習」就是指幫神經網路的每一層找出適當的權重值。\n\\( \\boxed{ \\begin{array}{ccc} \u0026amp;\u0026amp; \\text{輸入資料 X} \u0026amp; \\\\ \u0026amp;\u0026amp; \\downarrow \u0026amp; \\\\ \\red{\\boxed{\\text{權重}}} \u0026amp; \\red{\\rightarrow} \u0026amp; \\boxed{\\text{層(資料轉換)}} \\\\ \u0026amp;\u0026amp; \\downarrow \u0026amp; \\\\ \\red{\\boxed{\\text{權重}}} \u0026amp; \\red{\\rightarrow} \u0026amp; \\boxed{\\text{層(資料轉換)}} \\\\ \u0026amp;\u0026amp; \\downarrow \u0026amp; \\\\ \u0026amp;\u0026amp; \\boxed{\\text{預測 Y\u0026rsquo;}} \u0026amp; \\end{array} } \\)\n為了控制神經網路的輸出，我們需要評估這個輸出與標準答案還相差多少，這個評估的工作稱為神經網路的損失函數(loss function)，也稱為目標函數(objective function)或成本函數(cost function)。\n損失函數會取得神經網路預測結果和標準答案，計算出兩者的損失分數，從而得知神經網路在此次學習中的表現優劣狀況。\n\\( \\boxed{ \\begin{array}{ccccccc} \u0026amp;\u0026amp; \\text{輸入資料 X} \u0026amp; \\\\ \u0026amp;\u0026amp; \\downarrow \u0026amp; \\\\ \\boxed{\\text{權重}} \u0026amp; \\rightarrow \u0026amp; \\boxed{\\text{層(資料轉換)}} \\\\ \u0026amp;\u0026amp; \\downarrow \u0026amp; \\\\ \\boxed{\\text{權重}} \u0026amp; \\rightarrow \u0026amp; \\boxed{\\text{層(資料轉換)}} \\\\ \u0026amp;\u0026amp; \\downarrow \u0026amp; \\\\ \u0026amp;\u0026amp; \\boxed{\\text{預測 Y\u0026rsquo;}}\\red{\\rightarrow} \u0026amp; \\red{\\boxed{\\text{損失函數}}} \u0026amp; \\red{\\leftarrow} \u0026amp; \\red{\\boxed{\\text{標準答案 Y}}} \\\\ \u0026amp;\u0026amp;\u0026amp; \\red{\\downarrow} \u0026amp; \\\\ \u0026amp;\u0026amp;\u0026amp; \\red{\\boxed{\\text{損失分數}}} \\end{array} } \\)\n深度學習的關鍵在於使用損失分數來當作回饋訊號來微調各層的權重，進而逐步降低損失分數。 這樣的技巧稱為優化器(optimizer)，或稱為最佳化函數，它透過反向傳播(Backpropagation) 演算法來實現。\n\\( \\boxed{ \\begin{array}{ccccccc} \u0026amp;\u0026amp; \\text{輸入資料 X} \u0026amp; \\\\ \u0026amp;\u0026amp; \\downarrow \u0026amp; \\\\ \\red{\\boxed{\\text{權重\u0026rsquo;}}} \u0026amp; \\rightarrow \u0026amp; \\boxed{\\text{層(資料轉換)}} \\\\ \\red{\\uparrow} \u0026amp;\u0026amp; \\downarrow \u0026amp; \\\\ \\red{\\boxed{\\text{權重\u0026rsquo;}}} \u0026amp; \\rightarrow \u0026amp; \\boxed{\\text{層(資料轉換)}} \\\\ \u0026amp;\u0026amp; \\downarrow \u0026amp; \\\\ \\red{\\uparrow} \u0026amp;\u0026amp; \\boxed{\\text{預測 Y\u0026rsquo;}}\\rightarrow \u0026amp; \\boxed{\\text{損失函數}} \u0026amp; \\leftarrow \u0026amp; \\boxed{\\text{標準答案 Y}} \\\\ \u0026amp;\u0026amp;\u0026amp; \\downarrow \u0026amp; \\\\ \\red{\\boxed{\\text{優化器}}} \u0026amp;\u0026amp; \\red{\\leftarrow} \u0026amp; \\boxed{\\text{損失分數}} \\end{array} } \\)\n在訓練初期，我們先隨機配置權重值，在經過多次的迭代(iteration) 後，權重會逐步調整，使損失分數開始降低，並預測值漸漸接近標準答案，這樣的迴圈稱為訓練迴圈(training loop)。\n","permalink":"https://intervalrain.github.io/ai/1_1/","summary":"\u003cp\u003e人工智慧(Artificial Intelligence, 簡稱 AI)，但何謂人工智慧？\u003cbr\u003e\n首先我們先探討\u003cstrong\u003e人工智慧\u003c/strong\u003e、\u003cstrong\u003e機器學習\u003c/strong\u003e、\u003cstrong\u003e深度學習\u003c/strong\u003e之間的關係。\n\u003cimg src=\"https://www.researchgate.net/publication/372366661/figure/fig1/AS:11431281178493092@1690937679899/Ov-ervie-w-of-AI-ML-and-DL.ppm\" width=\"400\"\u003e\u003cbr\u003e\n一般而言，人工智慧包含了機器學習，然後機器學習包含了深度學習。\u003c/p\u003e\n\u003ch2 id=\"人工智慧\"\u003e人工智慧\u003c/h2\u003e\n\u003ch3 id=\"符號式-aisymbolic-ai\"\u003e符號式 AI(Symbolic AI)\u003c/h3\u003e\n\u003cp\u003e人工智慧出現在 1950 年代，其簡單定義為「能自動化地執行一般人類的智慧工作」，故包含了機器學習、深度學習，同時也涵蓋了許多不涉及學習的做法。\u003c/p\u003e\n\u003cp\u003e在 1980 年代以前，大部分的 AI 科學家都認為，想要讓人工智慧與人類匹敵，需要靠工程師編寫大量的規則來操控人工智慧的行為。這種人工智慧被稱為 \u003cstrong\u003eSymbolic AI\u003c/strong\u003e，意即符號式 AI，或稱 Rule-based AI。這種 AI 的形式在流行於 1950 至 1980 年代，隨著專家系統興起而達到顛峰。\n\u003cimg alt=\"Allinside\" loading=\"lazy\" src=\"/ai/AI/1_1/AIinside.jpeg\"\u003e\u003c/p\u003e\n\u003cp\u003eSymbolic AI 可以解決規則清楚的問題，如棋盤遊戲、卡牌遊戲，但對於更複雜、更模糊的問題，如影像辨識、語音辨識或語言翻譯，要找出明確規則是相當困難的。故需要新方法來取代 Symbolic AI，那就是 Machine Learning。\u003c/p\u003e\n\u003ch3 id=\"機器學習machine-learning\"\u003e機器學習(Machine Learning)\u003c/h3\u003e\n\u003cp\u003eSymbolic AI 需要透過明確的步驟，定義出規則；而機器學習反其道而行：\u003cstrong\u003e機器根據輸入資料及相應答案，自己找出有哪些規則\u003c/strong\u003e。換句話說，機器學習系統是透過訓練(training)來學習，而非透過定義規則。\u003c/p\u003e\n\u003cp\u003e為了實現機器學習，有三個要素：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e輸入資料\u003c/li\u003e\n\u003cli\u003e標準答案\u003c/li\u003e\n\u003cli\u003e判斷好或壞\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e機器學習將輸入資料轉換成有意義的輸出，並且和輸入資料所附帶的標準答案進行比對修正來學習。因此，機器學習的核心就是要對資料進行\u003cstrong\u003e有意義的轉換\u003c/strong\u003e。\u003cbr\u003e\n故機器學習通常需要人工特徵工程，適合結構化的數據與較小規模的數據集。\n比方說要做手寫數字辨識，可能要透過封閉環的數量、橫向與縱向的直方圖來定義規則，這些形式的規則也許可以得到不錯的結果，但因為仰賴人力來維護，故這種方式很吃力，也可能導致系統非常地脆弱，因為每一個新的樣本，都可能對先前建立好的規則產生致命的影響，因此必須在既有的架構上添加新的資料轉換規則，進而與既存的規則產生影響。\u003c/p\u003e\n\u003cp\u003e常用的包含決策樹、SVM、隨機森林、類神經網路(Neural Network)等演算法。\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"ml\" loading=\"lazy\" src=\"https://edit.wpgdadawant.com/uploads/news_file/blog/2019/355/tinymce/dl.png\"\u003e\u003c/p\u003e\n\u003ch3 id=\"深度學習deep-learning\"\u003e深度學習(Deep Learning)\u003c/h3\u003e\n\u003cp\u003e既然找出「有意義的轉換方式」是如此痛苦的，科學家便開始嘗試將系統性地將這一過程自動化。\u003cbr\u003e\n透過使用卷積類神經網路(Convolutional Neural Network, CNN)，並強調使用連續、多層的學習方式，使表達式更有意義。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e深度指的是一個模型用了多少「層」來處理資料，與機器學習通常 1~2 層的資料表示法相比(有時稱為\u003cstrong\u003e淺層學習(shallow learning)\u003c/strong\u003e)，深度學習通常涉及數十層，甚至上百層，這樣的學習法被稱為分層或階層表示法的學習(layered representation learning, hierarchical representation learning)。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e在深度學習中，所謂「層」會對輸入資料做怎樣的轉換，取決於儲存在該層的\u003cstrong\u003e權重(weight)\u003c/strong\u003e，而權重是多個數字組成的，權重也被稱為層的\u003cstrong\u003e參數(parameters)\u003c/strong\u003e，而「學習」就是指幫神經網路的每一層找出適當的權重值。\u003c/p\u003e\n\u003cp\u003e\\(\n\\boxed{\n\\begin{array}{ccc}\n\u0026amp;\u0026amp; \\text{輸入資料 X} \u0026amp; \\\\\n\u0026amp;\u0026amp; \\downarrow \u0026amp; \\\\\n\\red{\\boxed{\\text{權重}}} \u0026amp; \\red{\\rightarrow} \u0026amp; \\boxed{\\text{層(資料轉換)}} \\\\\n\u0026amp;\u0026amp; \\downarrow \u0026amp; \\\\\n\\red{\\boxed{\\text{權重}}} \u0026amp; \\red{\\rightarrow} \u0026amp; \\boxed{\\text{層(資料轉換)}} \\\\\n\u0026amp;\u0026amp; \\downarrow \u0026amp; \\\\\n\u0026amp;\u0026amp; \\boxed{\\text{預測 Y\u0026rsquo;}} \u0026amp;\n\\end{array}\n}\n\\)\u003c/p\u003e","title":"[AI] 1-1. 何謂人工智慧?"},{"content":"1. 簡介 1-1 何謂人工智慧?\n1-2 機器學習的基礎技術\n1-3 深度學習的發展\n2. 神經網路(CNN) 2-1 初試神經網路-手寫辨識 mnist\n2-2 張量 Tensor\n2-3 優化器 Optimizer\n3. Keras 與 Tensorflow 簡介 3-1 TensorFlow 介紹\n3-2 Keras 介紹\n3-3 使用 TensorFlow 與 Keras 函式庫\n3-4 線性迴歸\n3-5 實作線性分類器\n3-6 Keras API\n4. 分類與迴歸 5. 機器學習(ML) 6. 電腦視覺(CV) 7. 時間序列(Time Series) 8. 自然語言處理(NLP) 9. 生成式 AI(Gen AI) ","permalink":"https://intervalrain.github.io/ai/","summary":"\u003ch3 id=\"1-簡介\"\u003e1. 簡介\u003c/h3\u003e\n\u003cp\u003e\u003ca href=\"/ai/1_1\"\u003e1-1 何謂人工智慧?\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/ai/1_2\"\u003e1-2 機器學習的基礎技術\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/ai/1_3\"\u003e1-3 深度學習的發展\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"2-神經網路cnn\"\u003e2. 神經網路(CNN)\u003c/h3\u003e\n\u003cp\u003e\u003ca href=\"/ai/2_1\"\u003e2-1 初試神經網路-手寫辨識 mnist\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/ai/2_2\"\u003e2-2 張量 Tensor\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/ai/2_3\"\u003e2-3 優化器 Optimizer\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"3-keras-與-tensorflow-簡介\"\u003e3. Keras 與 Tensorflow 簡介\u003c/h3\u003e\n\u003cp\u003e\u003ca href=\"/ai/3_1\"\u003e3-1 TensorFlow 介紹\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/ai/3_2\"\u003e3-2 Keras 介紹\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/ai/3_3\"\u003e3-3 使用 TensorFlow 與 Keras 函式庫\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/ai/3_4\"\u003e3-4 線性迴歸\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/ai/3_5\"\u003e3-5 實作線性分類器\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/ai/3_6\"\u003e3-6 Keras API\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"4-分類與迴歸\"\u003e4. 分類與迴歸\u003c/h3\u003e\n\u003ch3 id=\"5-機器學習ml\"\u003e5. 機器學習(ML)\u003c/h3\u003e\n\u003ch3 id=\"6-電腦視覺cv\"\u003e6. 電腦視覺(CV)\u003c/h3\u003e\n\u003ch3 id=\"7-時間序列time-series\"\u003e7. 時間序列(Time Series)\u003c/h3\u003e\n\u003ch3 id=\"8-自然語言處理nlp\"\u003e8. 自然語言處理(NLP)\u003c/h3\u003e\n\u003ch3 id=\"9-生成式-aigen-ai\"\u003e9. 生成式 AI(Gen AI)\u003c/h3\u003e","title":"[AI] Catalog"},{"content":" 建立專案 npx create-react-app [project-name] --template typescript cd [project-name] 安裝 TailwindCSS 及其相依套件： npm install -D tailwindcss postcss autoprefixer npx tailwindcss init -p 設定 tailwind.config.js： /** @type {import(\u0026#39;tailwindcss\u0026#39;).Config} */ module.exports = { content: [ \u0026#34;./src/**/*.{js,jsx,ts,tsx}\u0026#34;, ], theme: { extend: {}, }, plugins: [], } 在 src/index.css 中加入 Tailwind directives： @tailwind base; @tailwind components; @tailwind utilities; ","permalink":"https://intervalrain.github.io/it/init_react_project/","summary":"\u003col\u003e\n\u003cli\u003e建立專案\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enpx create-react-app \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003eproject-name\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e --template typescript\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecd \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003eproject-name\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"2\"\u003e\n\u003cli\u003e安裝 TailwindCSS 及其相依套件：\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enpm install -D tailwindcss postcss autoprefixer\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enpx tailwindcss init -p\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"3\"\u003e\n\u003cli\u003e設定 tailwind.config.js：\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e/** @type {import(\u0026#39;tailwindcss\u0026#39;).Config} */\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003emodule\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eexports\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003econtent\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e [\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;./src/**/*.{js,jsx,ts,tsx}\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  ],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003etheme\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eextend\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e {},\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  },\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003eplugins\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e [],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"4\"\u003e\n\u003cli\u003e在 src/index.css 中加入 Tailwind directives：\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-css\" data-lang=\"css\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e@\u003cspan style=\"color:#66d9ef\"\u003etailwind\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003ebase\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e@\u003cspan style=\"color:#66d9ef\"\u003etailwind\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003ecomponents\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e@\u003cspan style=\"color:#66d9ef\"\u003etailwind\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003eutilities\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"[IT] 初始 react project (TailwindCSS \u0026 TypeScript \u0026 Context)"},{"content":"台南，有風的日子，23度。\n今天比昨天早些起床，\n或許是因為心中對自由工作的未知充滿期待。\n中午，我決定去品嚐麻豆最有名的牛肉湯——阿榮牛肉湯。\n搭配的肉燥飯，完全不輸專賣店的水準。\n驚覺我竟想不起過去五六年，在公司餐廳吃過了什麼，\n下午到了星巴克，點了一杯香檸蜜柚冷萃。\n175元的價錢提醒著我，自己似乎已經不再是那個\n可以隨意揮霍的身份了。\n坐在那裡，整理著我的 Kanban，\n規劃週末的恆春小旅行，\n完成了記帳的任務，\n還安排了接下來一週的工作計劃。\n我想我會慢慢習慣這樣的節奏。\n晚上接了女友一起去吃飯，\n我們最愛的和津壽司卻沒開門，\n於是隨意找了家壽喜燒店。\n在飲料吧，我頑皮地調了一杯芒果冰沙加可樂，\n瞬間被帶回了一中街多多茶坊的日子。\n飯後，我們去了 Costco。\n正逢 Black Friday，裡頭人山人海。\n女友見到折扣標籤，興奮得像孩子一樣，\n可惜需要的東西都沒有特價，\n結果買了不少不需要的東西。\n果然，這就是 Costco 的魅力吧。\n臨走時，她看到食品區有開心果霜淇淋，\n堅持要買一杯分享給我，\n才發現原來小時候過年吃的那種瓜子的味道，\n今天的 Leetcode 題目很應景，\n正值 Premier 12 中華隊奪冠，\n題目叫做 \u0026ldquo;Find Champion II\u0026rdquo;。\n這是我的解法：\nclass Solution { public: int findChampion(int n, vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; edges) { int winner = 0; int cnt = 0; vector\u0026lt;bool\u0026gt; lose(n, false); for (const auto\u0026amp; e : edges) { int who = e[1]; if (!lose[who]) { lose[who] = true; cnt++; while (winner \u0026lt; n \u0026amp;\u0026amp; lose[winner]) winner++; } } return cnt == n-1 ? winner : -1; } }; 一天的生活，從自由中找尋規律，\n從規律中尋找價值。\n希望未來某一天，\n再次翻閱這篇日記，\n能記起今天的點滴，\n並為自己的成長感到自豪。\n","permalink":"https://intervalrain.github.io/diary/20241126/","summary":"\u003cp\u003e台南，有風的日子，23度。\u003c/p\u003e\n\u003cp\u003e今天比昨天早些起床，\u003cbr\u003e\n或許是因為心中對自由工作的未知充滿期待。\u003c/p\u003e\n\u003cp\u003e中午，我決定去品嚐麻豆最有名的牛肉湯——阿榮牛肉湯。\u003cbr\u003e\n搭配的肉燥飯，完全不輸專賣店的水準。\u003cbr\u003e\n驚覺我竟想不起過去五六年，在公司餐廳吃過了什麼，\u003c/p\u003e\n\u003cp\u003e下午到了星巴克，點了一杯香檸蜜柚冷萃。\u003cbr\u003e\n175元的價錢提醒著我，自己似乎已經不再是那個\u003cbr\u003e\n可以隨意揮霍的身份了。\u003cbr\u003e\n坐在那裡，整理著我的 Kanban，\u003cbr\u003e\n規劃週末的恆春小旅行，\u003cbr\u003e\n完成了記帳的任務，\u003cbr\u003e\n還安排了接下來一週的工作計劃。\u003cbr\u003e\n我想我會慢慢習慣這樣的節奏。\u003c/p\u003e\n\u003cp\u003e晚上接了女友一起去吃飯，\u003cbr\u003e\n我們最愛的和津壽司卻沒開門，\u003cbr\u003e\n於是隨意找了家壽喜燒店。\u003cbr\u003e\n在飲料吧，我頑皮地調了一杯芒果冰沙加可樂，\u003cbr\u003e\n瞬間被帶回了一中街多多茶坊的日子。\u003c/p\u003e\n\u003cp\u003e飯後，我們去了 Costco。\u003cbr\u003e\n正逢 Black Friday，裡頭人山人海。\u003cbr\u003e\n女友見到折扣標籤，興奮得像孩子一樣，\u003cbr\u003e\n可惜需要的東西都沒有特價，\u003cbr\u003e\n結果買了不少不需要的東西。\u003cbr\u003e\n果然，這就是 Costco 的魅力吧。\u003cbr\u003e\n臨走時，她看到食品區有開心果霜淇淋，\u003cbr\u003e\n堅持要買一杯分享給我，\u003cbr\u003e\n才發現原來小時候過年吃的那種瓜子的味道，\u003c/p\u003e\n\u003cp\u003e今天的 Leetcode 題目很應景，\u003cbr\u003e\n正值 Premier 12 中華隊奪冠，\u003cbr\u003e\n題目叫做 \u0026ldquo;Find Champion II\u0026rdquo;。\u003cbr\u003e\n這是我的解法：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSolution\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e findChampion(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n, vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003evector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u0026amp;\u003c/span\u003e edges) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e winner \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e cnt \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003ebool\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e lose(n, false);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eauto\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e e : edges) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e who \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e e[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003elose[who]) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                lose[who] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e true;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                cnt\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (winner \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e n \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e lose[winner]) winner\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e cnt \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e n\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e winner : \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e一天的生活，從自由中找尋規律，\u003cbr\u003e\n從規律中尋找價值。\u003cbr\u003e\n希望未來某一天，\u003cbr\u003e\n再次翻閱這篇日記，\u003cbr\u003e\n能記起今天的點滴，\u003cbr\u003e\n並為自己的成長感到自豪。\u003c/p\u003e","title":"[Diary] 自由的第二天"},{"content":"台南，天氣晴。\n九點醒來，比平時晚了一個小時，沒有因為不需工作就睡到中午。\n滑了手機，仍被中華隊奪冠的喜悅籠罩。\n但身體沒有打算要偷懶，\n早早的洗好我與她的衣服，\n在家做起了家務，\n這是平時我較少分擔的部分。\n邊看著《影后》，\n因為工作而累積的片單，\n直到自由身才有一點喘息的空間可以觀影。\n儘管，大多數劇情，早就在社群媒體上被爆了好幾次雷，\n但自己看到片段時，更清楚劇情的前因後果，來龍去脈時，\n一瞬間，彷彿從旁觀者晉身成了吃瓜群眾，\n多了一絲參與感。\n做完家務後，休息片刻，\n才換好衣物出門覓食。\n今天的台南是個大熱天，\n悠悠的在麻豆市區繞了幾圈，\n繞進一些不曾經過的小巷，\n原來星巴克的周圍已經蓋了好幾排新的房子，\n想當初初來乍到時，\n星巴克還是塊空地。\n我始終還是這塊土地的外來者。\n繞了好久，腦中對今天的午餐還是沒有想法。\n原來我早就被奴化成不用選擇的樣子。\n進公司，隨手從 7-11 的架上拿一樣麵包，\n結帳時向店員點一杯冰美式， 便匆匆回到工作崗位，\n開始社畜的一天。\n最後，在麻豆選擇了有名的阿蘭碗粿，\n雖然我已經來到麻豆兩年了，\n每次都是經過而沒有真正找個位置坐下來享用。\n蒜蓉醬油和著油蔥酥，\n原來這就是麻豆圓環口老是人車搶道的原因啊…\n「要怎麼樣，才能解決這裡的塞車問題呢？」\n沒有多餘的時間讓我思考這些，\n我是一個 freelancer，也是一名失業者。\n我是自願的，也是被迫的。\n自願來自於我心甘情願遞上辭呈。\n被迫來自於我心有不甘，覺得我的身心靈都被奴役到失去了靈魂。\n如果我喜歡寫 App，我應該為自己寫，寫自己喜歡的 App。\n而不是在角落一方，為他人的不合理的需求，埋首苦幹。\n回家，開始盤點這段時間該做的事。\n順便拿自己寫的專案管理網頁，\n記下一些該做的事。\n寫了一題 Leetcode，\n很好，Hard 但是 one pass。 這是我的解法：\nclass Solution { public: unordered_map\u0026lt;int, vector\u0026lt;int\u0026gt;\u0026gt; moves{{0,{1,3}},{1,{0,2,4}},{2,{1,5}},{3,{0,4}},{4,{3,5,1}},{5,{4,2}}}; int slidingPuzzle(vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; b) { string s = to_string(b[0][0]) + to_string(b[0][1]) + to_string(b[0][2]) + to_string(b[1][0]) + to_string(b[1][1]) + to_string(b[1][2]); unordered_set\u0026lt;string\u0026gt; visited({s}); queue\u0026lt;pair\u0026lt;string,int\u0026gt;\u0026gt; q({{s, s.find(\u0026#39;0\u0026#39;)}}); int res = 0; while (!q.empty()) { int sz = q.size(); while (sz--) { auto [curr, pos] = q.front(); q.pop(); if (curr == \u0026#34;123450\u0026#34;) return res; for (const auto\u0026amp; next : moves[pos]) { string str = curr; swap(str[pos], str[next]); if (visited.count(str)) continue; visited.insert(str); q.push({str, next}); } } res++; } return -1; } }; 人生，也許很突然，\n但也可能都是必經之路。\n我想，今天只是個開始，\n希望等到十年過後，\n看到這篇文章，\n我會莞爾一笑吧。\n","permalink":"https://intervalrain.github.io/diary/20241125/","summary":"\u003cp\u003e台南，天氣晴。\u003c/p\u003e\n\u003cp\u003e九點醒來，比平時晚了一個小時，沒有因為不需工作就睡到中午。\u003cbr\u003e\n滑了手機，仍被中華隊奪冠的喜悅籠罩。\u003cbr\u003e\n但身體沒有打算要偷懶，\u003cbr\u003e\n早早的洗好我與她的衣服，\u003cbr\u003e\n在家做起了家務，\u003cbr\u003e\n這是平時我較少分擔的部分。\u003cbr\u003e\n邊看著《影后》，\u003cbr\u003e\n因為工作而累積的片單，\u003cbr\u003e\n直到自由身才有一點喘息的空間可以觀影。\u003cbr\u003e\n儘管，大多數劇情，早就在社群媒體上被爆了好幾次雷，\u003cbr\u003e\n但自己看到片段時，更清楚劇情的前因後果，來龍去脈時，\u003cbr\u003e\n一瞬間，彷彿從旁觀者晉身成了吃瓜群眾，\u003cbr\u003e\n多了一絲參與感。\u003c/p\u003e\n\u003cp\u003e做完家務後，休息片刻，\u003cbr\u003e\n才換好衣物出門覓食。\u003cbr\u003e\n今天的台南是個大熱天，\u003cbr\u003e\n悠悠的在麻豆市區繞了幾圈，\u003cbr\u003e\n繞進一些不曾經過的小巷，\u003cbr\u003e\n原來星巴克的周圍已經蓋了好幾排新的房子，\u003cbr\u003e\n想當初初來乍到時，\u003cbr\u003e\n星巴克還是塊空地。\u003c/p\u003e\n\u003cp\u003e我始終還是這塊土地的外來者。\u003cbr\u003e\n繞了好久，腦中對今天的午餐還是沒有想法。\u003cbr\u003e\n原來我早就被奴化成不用選擇的樣子。\u003c/p\u003e\n\u003cp\u003e進公司，隨手從 7-11 的架上拿一樣麵包，\u003cbr\u003e\n結帳時向店員點一杯冰美式，\n便匆匆回到工作崗位，\u003cbr\u003e\n開始社畜的一天。\u003c/p\u003e\n\u003cp\u003e最後，在麻豆選擇了有名的阿蘭碗粿，\u003cbr\u003e\n雖然我已經來到麻豆兩年了，\u003cbr\u003e\n每次都是經過而沒有真正找個位置坐下來享用。\u003cbr\u003e\n蒜蓉醬油和著油蔥酥，\u003cbr\u003e\n原來這就是麻豆圓環口老是人車搶道的原因啊…\u003cbr\u003e\n「要怎麼樣，才能解決這裡的塞車問題呢？」\u003c/p\u003e\n\u003cp\u003e沒有多餘的時間讓我思考這些，\u003cbr\u003e\n我是一個 freelancer，也是一名失業者。\u003cbr\u003e\n我是自願的，也是被迫的。\u003cbr\u003e\n自願來自於我心甘情願遞上辭呈。\u003cbr\u003e\n被迫來自於我心有不甘，覺得我的身心靈都被奴役到失去了靈魂。\u003cbr\u003e\n如果我喜歡寫 App，我應該為自己寫，寫自己喜歡的 App。\u003cbr\u003e\n而不是在角落一方，為他人的不合理的需求，埋首苦幹。\u003c/p\u003e\n\u003cp\u003e回家，開始盤點這段時間該做的事。\u003cbr\u003e\n順便拿自己寫的專案管理網頁，\u003cbr\u003e\n記下一些該做的事。\u003cbr\u003e\n\u003cimg alt=\"img\" loading=\"lazy\" src=\"https://github.com/intervalrain/MyKanban/blob/main/public/images/Kanban.jpg?raw=true\"\u003e\u003c/p\u003e\n\u003cp\u003e寫了一題 Leetcode，\u003cbr\u003e\n很好，Hard 但是 one pass。\n這是我的解法：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSolution\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    unordered_map\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e, vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e moves{{\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e,{\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e}},{\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e,{\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e}},{\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e,{\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e}},{\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e,{\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e}},{\u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e,{\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e}},{\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e,{\u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e}}};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eslidingPuzzle\u003c/span\u003e(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003evector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u0026amp;\u003c/span\u003e b) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        string s \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e to_string(b[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e][\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e]) \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e to_string(b[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e][\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]) \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e to_string(b[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e][\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e]) \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                   to_string(b[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e][\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e]) \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e to_string(b[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e][\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]) \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e to_string(b[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e][\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        unordered_set\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003estring\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e visited({s});\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        queue\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003epair\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003estring,\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e q({{s, s.find(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;0\u0026#39;\u003c/span\u003e)}});\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e res \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (\u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003eq.empty()) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e sz \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e q.size();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (sz\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003eauto\u003c/span\u003e [curr, pos] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e q.front();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                q.pop();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (curr \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;123450\u0026#34;\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e res;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eauto\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e next : moves[pos]) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    string str \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e curr;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    swap(str[pos], str[next]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (visited.count(str)) \u003cspan style=\"color:#66d9ef\"\u003econtinue\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    visited.insert(str);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    q.push({str, next});\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            res\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e人生，也許很突然，\u003cbr\u003e\n但也可能都是必經之路。\u003c/p\u003e","title":"[Diary] 成為 freelancer 的第一天"},{"content":"Rain Hu / intervalrain / 陣雨 Rain Hu 既是 intervalrain 也是陣雨。\nRain Hu /\n是我的英文名，象徵著我在科技領域不斷探索創新的專業開發者。專注於全端開發、AI整合，是本站中技術文章的作者。\nintervalrain /\n是我的帳號，象徵虛擬世界中的我，寫的可能是我的日常，可能是我的抱負，也可能是我的自喃。\n陣雨 /\n是我的筆名，象徵倘佯在音樂世界的我，在繁忙的生活中，透過詞或曲，或是一首歌，寫下我的牢騷。\nAbout me 本名：胡鎮宇 專長： 全端開發 (C#.NET, C++, React TypeScript, Python) 系統架構設計 (Clean Architecture, CQRS, DDD) AI 整合與開發 (LangChain, RAG) 半導體製程與元件物理 語言能力： 中文（母語） 英文（TOEIC 775/900） 韓文（TOPIK I 180/200） 嗜好： 音樂創作 寫 Leetcode 生日：1991/12/3 血型：O型 星座：射手座 生肖：羊 學歷：國立清華大學 材料工程學系碩士 Resume 職業生涯 現職：資深軟體工程師 @ UMC (2022.08 - 2024.11) 主導開發 UEDA 5.0 跨區域資料分析解決方案 開發 DSM Bot AI 助手，革新半導體製造資訊查詢 設計 BTV 系統，實現 WAT 量測後端良率 開發 ChatGPT 插件，提升產線可視性 前職：半導體元件研發工程師 @ UMC (2018.08 - 2022.08) 創新 NWR Project，提升 28eHV 與 22eHV 良率 開發 Co-cut Project，優化實驗成本 設計 U2C 工具，提升 CAD 開發效率 教育背景 國立清華大學 材料科學工程研究所 (2014-2018) 國立清華大學 材料科學工程學系 (2010-2014) 關於我 一個熱愛技術創新的開發者，在半導體產業中找到結合創意與實用的完美平衡點。\n相信技術能改變世界，但也不忘透過音樂豐富生活。\n喜歡優雅的程式碼，也愛一杯香醇的咖啡。\nCoffeholic，偏好淺中焙，特別鍾情於耶加雪菲與西達摩，最近的新愛是豔夏花荔。\n永遠保持著好奇心，不斷學習新知識。\nMore about me Technical Blog intervalrain.github.io Music: Streetvoice Youtube Development: GitHub Portfolio Contact Email LinkedIn GitHub ","permalink":"https://intervalrain.github.io/aboutme/","summary":"\u003ch1 id=\"rain-hu--intervalrain--陣雨\"\u003eRain Hu / intervalrain / 陣雨\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eRain Hu\u003c/strong\u003e 既是 \u003cstrong\u003eintervalrain\u003c/strong\u003e 也是\u003cstrong\u003e陣雨\u003c/strong\u003e。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003chr\u003e\n\u003cp\u003e\u003cstrong\u003eRain Hu\u003c/strong\u003e /\u003cbr\u003e\n是我的英文名，象徵著我在科技領域不斷探索創新的專業開發者。專注於全端開發、AI整合，是本站中技術文章的作者。\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003e\u003cstrong\u003eintervalrain\u003c/strong\u003e /\u003cbr\u003e\n是我的帳號，象徵虛擬世界中的我，寫的可能是我的日常，可能是我的抱負，也可能是我的自喃。\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003e\u003cstrong\u003e陣雨\u003c/strong\u003e /\u003cbr\u003e\n是我的筆名，象徵倘佯在音樂世界的我，在繁忙的生活中，透過詞或曲，\u003ca href=\"https://streetvoice.com/intervalrain/songs/646909/\"\u003e或是一首歌\u003c/a\u003e，寫下我的牢騷。\u003c/p\u003e\n\u003ch1 id=\"about-me\"\u003eAbout me\u003c/h1\u003e\n\u003cp\u003e\u003cimg alt=\"me\" loading=\"lazy\" src=\"/images/me.jpeg\" title=\"me\"\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e本名：胡鎮宇\u003c/li\u003e\n\u003cli\u003e專長：\n\u003cul\u003e\n\u003cli\u003e全端開發 (C#.NET, C++, React TypeScript, Python)\u003c/li\u003e\n\u003cli\u003e系統架構設計 (Clean Architecture, CQRS, DDD)\u003c/li\u003e\n\u003cli\u003eAI 整合與開發 (LangChain, RAG)\u003c/li\u003e\n\u003cli\u003e半導體製程與元件物理\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e語言能力：\n\u003cul\u003e\n\u003cli\u003e中文（母語）\u003c/li\u003e\n\u003cli\u003e英文（TOEIC 775/900）\u003c/li\u003e\n\u003cli\u003e韓文（TOPIK I 180/200）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e嗜好：\n\u003cul\u003e\n\u003cli\u003e音樂創作\u003c/li\u003e\n\u003cli\u003e寫 Leetcode\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e生日：1991/12/3\u003c/li\u003e\n\u003cli\u003e血型：O型\u003c/li\u003e\n\u003cli\u003e星座：射手座\u003c/li\u003e\n\u003cli\u003e生肖：羊\u003c/li\u003e\n\u003cli\u003e學歷：國立清華大學 材料工程學系碩士\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"../resume202411.pdf\"\u003eResume\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"職業生涯\"\u003e職業生涯\u003c/h2\u003e\n\u003ch3 id=\"現職資深軟體工程師--umc-202208---202411\"\u003e現職：資深軟體工程師 @ UMC (2022.08 - 2024.11)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e主導開發 UEDA 5.0 跨區域資料分析解決方案\u003c/li\u003e\n\u003cli\u003e開發 DSM Bot AI 助手，革新半導體製造資訊查詢\u003c/li\u003e\n\u003cli\u003e設計 BTV 系統，實現 WAT 量測後端良率\u003c/li\u003e\n\u003cli\u003e開發 ChatGPT 插件，提升產線可視性\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"前職半導體元件研發工程師--umc-201808---202208\"\u003e前職：半導體元件研發工程師 @ UMC (2018.08 - 2022.08)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e創新 NWR Project，提升 28eHV 與 22eHV 良率\u003c/li\u003e\n\u003cli\u003e開發 Co-cut Project，優化實驗成本\u003c/li\u003e\n\u003cli\u003e設計 U2C 工具，提升 CAD 開發效率\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"教育背景\"\u003e教育背景\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e國立清華大學 材料科學工程研究所 (2014-2018)\u003c/li\u003e\n\u003cli\u003e國立清華大學 材料科學工程學系 (2010-2014)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"關於我\"\u003e關於我\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003e一個熱愛技術創新的開發者，在半導體產業中找到結合創意與實用的完美平衡點。\u003c/p\u003e","title":"About me"},{"content":" 安裝個離線版 npm i - g create-react-app-offline 改用 crao 初始化 crao -n my-app 如果 node_modules 沒有安裝正常 rm -rf node_modules 重裝 node_modules npm install 重啟 react npm start ","permalink":"https://intervalrain.github.io/it/save_react/","summary":"\u003col\u003e\n\u003cli\u003e安裝個離線版\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003enpm i - g create-react-app-offline\n\u003c/code\u003e\u003c/pre\u003e\u003col start=\"2\"\u003e\n\u003cli\u003e改用 \u003ccode\u003ecrao\u003c/code\u003e 初始化\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ecrao -n my-app\n\u003c/code\u003e\u003c/pre\u003e\u003col start=\"3\"\u003e\n\u003cli\u003e如果 node_modules 沒有安裝正常\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003erm -rf node_modules\n\u003c/code\u003e\u003c/pre\u003e\u003col start=\"4\"\u003e\n\u003cli\u003e重裝 node_modules\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003enpm install\n\u003c/code\u003e\u003c/pre\u003e\u003col start=\"5\"\u003e\n\u003cli\u003e重啟 react\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003enpm start\n\u003c/code\u003e\u003c/pre\u003e","title":"[IT] 拯救 react"},{"content":" 在此為確保程式碼的可執行性，使用了免費的模型，若要求性能，可以使用替代方案。\n完整程式碼\nBasic Moves 1. 載入文件 loader = WebBaseLoader(urls_list) documents = loader.load() 使用 WebBaseLoader 從給定的 URL 列表中載入文件。在這裡可以根據需求替換其它 Loader。 PyPDFLoader 用於 PDF 文件。 TextLoader 用於純文本文件。 2. 分割文件 pythonCopytext_splitter = CharacterTextSplitter.from_tiktoken_encoder(chunk_size=7500, chunk_overlap=100) doc_splits = text_splitter.split_documents(documents) 文件分割是一個關鍵步驟。這裡使用 CharacterTextSplitter 並基於 tiktoken 編碼器進行分割。 參數說明: chunk_size: 定義每個 chunk 的最大 token 數。較大的 chunk 可能包含更多上下文，但可能降低檢索精度。 chunk_overlap: 定義相鄰塊之間的重疊 token 數。增加重疊可以幫助保持上下文連續性，但會增加記憶體需求。 替代方案: RecursiveCharacterTextSplitter: 可以更智能地處理文檔結構。 TokenTextSplitter: 直接基於標記進行分割，可能更準確但速度較慢。 3. 選擇 embedding 模型 pythonCopyembeddings = OllamaEmbeddings(model=\u0026#34;mistral\u0026#34;) 這裡使用 Ollama 的 Mistral 模型生成嵌入。 替代方案: OpenAI HuggingFace Gemini 4. 創建向量資料庫 pythonCopyvector_store = Chroma.from_documents( documents = doc_splits, embedding = embeddings, collection_name = \u0026#34;rag-chroma\u0026#34;, ) 替代方案: FAISS (Meta 的) Milvus Pinecone 5. 建立 Retriever Interface retriever = vector_store.as_retriever() 可以通過設置參數 search_type 與 search_kwargs 來調整檢索行為。 6. 執行 RAG rag_chain = ( {\u0026#34;context\u0026#34;: retriever, \u0026#34;question\u0026#34;: RunnablePassthrough()} | prompt | llm | StrOutputParser() ) 定義 RAG 鏈。可以通過修改 prompt 或使用不同的 LLM 來優化性能。 7. 查詢 return rag_chain.invoke(question) 調用 RAG 鏈針對輸入的問題返回答案。 Advanced Moves 加入 metadata 並進行篩選: loader = WebBaseLoader(urls_list) loader.requests_kwargs = {\u0026#39;verify\u0026#39;:False} docs = loader.load() docs = [Document(page_content=doc.page_content, metadata={\u0026#34;source\u0026#34;: doc.metadata[\u0026#39;source\u0026#39;]}) for doc in docs] # 在檢索時使用 metadata 篩選 retriever = vector_store.as_retriever(search_kwargs={\u0026#34;filter\u0026#34;: {\u0026#34;source\u0026#34;: \u0026#34;特定URL\u0026#34;}}) 加入 pre/post retrieval 處理: from langchain.retrievers import ContextualCompressionRetriever from langchain.retrievers.document_compressors import LLMChainExtractor compressor = LLMChainExtractor.from_llm(llm) compression_retriever = ContextualCompressionRetriever( base_compressor=compressor, base_retriever=retriever ) 加入 rerank 提升回答的加權: from langchain.retrievers import EnsembleRetriever bm25_retriever = BM25Retriever.from_documents(documents) ensemble_retriever = EnsembleRetriever( retrievers=[retriever, bm25_retriever], weights=[0.5, 0.5] ) 改變 naive RAG 為 graph RAG: from langchain.graphs import NetworkxEntityGraph from langchain.indexes import GraphIndexCreator graph_creator = GraphIndexCreator( graph_type=NetworkxEntityGraph, include_embeddings=True ) graph = graph_creator.from_documents(documents) # 使用 graph RAG retrieved_nodes = graph.get_relevant_nodes(query) ","permalink":"https://intervalrain.github.io/genai/naiverag/","summary":"\u003cblockquote\u003e\n\u003cp\u003e在此為確保程式碼的可執行性，使用了免費的模型，若要求性能，可以使用替代方案。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/intervalrain/rag_demo\"\u003e完整程式碼\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"basic-moves\"\u003eBasic Moves\u003c/h2\u003e\n\u003ch3 id=\"1-載入文件\"\u003e1. 載入文件\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eloader \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e WebBaseLoader(urls_list)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edocuments \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e loader\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eload()\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e使用 \u003ccode\u003eWebBaseLoader\u003c/code\u003e 從給定的 URL 列表中載入文件。在這裡可以根據需求替換其它 Loader。\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ePyPDFLoader\u003c/code\u003e 用於 PDF 文件。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eTextLoader\u003c/code\u003e 用於純文本文件。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"2-分割文件\"\u003e2. 分割文件\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epythonCopytext_splitter \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e CharacterTextSplitter\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003efrom_tiktoken_encoder(chunk_size\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e7500\u003c/span\u003e, chunk_overlap\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e100\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edoc_splits \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e text_splitter\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esplit_documents(documents)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e文件分割是一個關鍵步驟。這裡使用 \u003ccode\u003eCharacterTextSplitter\u003c/code\u003e 並基於 \u003ccode\u003etiktoken\u003c/code\u003e 編碼器進行分割。\u003c/li\u003e\n\u003cli\u003e參數說明:\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003echunk_size\u003c/code\u003e: 定義每個 chunk 的最大 token 數。較大的 chunk 可能包含更多上下文，但可能降低檢索精度。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003echunk_overlap\u003c/code\u003e: 定義相鄰塊之間的重疊 token 數。增加重疊可以幫助保持上下文連續性，但會增加記憶體需求。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e替代方案:\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eRecursiveCharacterTextSplitter\u003c/code\u003e: 可以更智能地處理文檔結構。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eTokenTextSplitter\u003c/code\u003e: 直接基於標記進行分割，可能更準確但速度較慢。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"3-選擇-embedding-模型\"\u003e3. 選擇 embedding 模型\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epythonCopyembeddings \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e OllamaEmbeddings(model\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;mistral\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e這裡使用 \u003ccode\u003eOllama\u003c/code\u003e 的 \u003ccode\u003eMistral\u003c/code\u003e 模型生成嵌入。\u003c/li\u003e\n\u003cli\u003e替代方案:\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eOpenAI\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eHuggingFace\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eGemini\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"4-創建向量資料庫\"\u003e4. 創建向量資料庫\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epythonCopyvector_store \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Chroma\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003efrom_documents(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    documents \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e doc_splits,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    embedding \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e embeddings,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    collection_name \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;rag-chroma\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e替代方案:\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eFAISS\u003c/code\u003e (Meta 的)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eMilvus\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ePinecone\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"5-建立-retriever-interface\"\u003e5. 建立 Retriever Interface\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eretriever \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e vector_store\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eas_retriever()\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e可以通過設置參數 \u003ccode\u003esearch_type\u003c/code\u003e 與 \u003ccode\u003esearch_kwargs\u003c/code\u003e 來調整檢索行為。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"6-執行-rag\"\u003e6. 執行 RAG\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003erag_chain \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;context\u0026#34;\u003c/span\u003e: retriever, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;question\u0026#34;\u003c/span\u003e: RunnablePassthrough()}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e prompt\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e llm\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e StrOutputParser()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e定義 RAG 鏈。可以通過修改 prompt 或使用不同的 LLM 來優化性能。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"7-查詢\"\u003e7. 查詢\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e rag_chain\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003einvoke(question)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e調用 RAG 鏈針對輸入的問題返回答案。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"advanced-moves\"\u003eAdvanced Moves\u003c/h2\u003e\n\u003ch3 id=\"加入-metadata-並進行篩選\"\u003e加入 metadata 並進行篩選:\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eloader \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e WebBaseLoader(urls_list)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eloader\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003erequests_kwargs \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;verify\u0026#39;\u003c/span\u003e:\u003cspan style=\"color:#66d9ef\"\u003eFalse\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edocs \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e loader\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eload()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edocs \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e [Document(page_content\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003edoc\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003epage_content, metadata\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e{\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;source\u0026#34;\u003c/span\u003e: doc\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003emetadata[\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;source\u0026#39;\u003c/span\u003e]}) \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e doc \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e docs]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 在檢索時使用 metadata 篩選\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eretriever \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e vector_store\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eas_retriever(search_kwargs\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e{\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;filter\u0026#34;\u003c/span\u003e: {\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;source\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;特定URL\u0026#34;\u003c/span\u003e}})\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"加入-prepost-retrieval-處理\"\u003e加入 pre/post retrieval 處理:\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e langchain.retrievers \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e ContextualCompressionRetriever\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e langchain.retrievers.document_compressors \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e LLMChainExtractor\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecompressor \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e LLMChainExtractor\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003efrom_llm(llm)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecompression_retriever \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e ContextualCompressionRetriever(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    base_compressor\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003ecompressor,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    base_retriever\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eretriever\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"加入-rerank-提升回答的加權\"\u003e加入 rerank 提升回答的加權:\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e langchain.retrievers \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e EnsembleRetriever\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ebm25_retriever \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e BM25Retriever\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003efrom_documents(documents)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eensemble_retriever \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e EnsembleRetriever(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    retrievers\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e[retriever, bm25_retriever],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    weights\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e0.5\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0.5\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"改變-naive-rag-為-graph-rag\"\u003e改變 naive RAG 為 graph RAG:\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e langchain.graphs \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e NetworkxEntityGraph\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e langchain.indexes \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e GraphIndexCreator\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egraph_creator \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e GraphIndexCreator(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    graph_type\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eNetworkxEntityGraph,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    include_embeddings\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eTrue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egraph \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e graph_creator\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003efrom_documents(documents)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# 使用 graph RAG\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eretrieved_nodes \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e graph\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eget_relevant_nodes(query)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"基於 Ollama 和 LangChain 的 Naive RAG 實作(搭配 streamlit UI)"},{"content":"Challenge 1: Card Style struct ContentView: View { var body: some View { ZStack { Color(.systemMint) .ignoresSafeArea() VStack(alignment: .leading, spacing: 20.0){ Image(\u0026#34;eva\u0026#34;) .resizable() .aspectRatio(contentMode: .fit) .cornerRadius(15) .padding(.all) HStack { Text(\u0026#34;Eva Hsu\u0026#34;) .font(.largeTitle) .fontWeight(.semibold) .foregroundColor(.black) .padding() Spacer() VStack { HStack { Image(systemName: \u0026#34;star.fill\u0026#34;) Image(systemName: \u0026#34;star.fill\u0026#34;) Image(systemName: \u0026#34;star.fill\u0026#34;) Image(systemName: \u0026#34;star.fill\u0026#34;) Image(systemName: \u0026#34;star.leadinghalf.fill\u0026#34;) } .foregroundColor(.orange) .font(.caption) Text(\u0026#34;(Reviews 240,152)\u0026#34;) } .padding() } Text(\u0026#34;The best girl in the world.\u0026#34;) .foregroundColor(.primary) .padding(.horizontal) HStack { Spacer() Image(systemName: \u0026#34;binoculars.fill\u0026#34;) Image(systemName: \u0026#34;fork.knife\u0026#34;) } .foregroundColor(.gray) .font(.caption) .padding() } .background(Rectangle() .foregroundColor(.white) .cornerRadius(15) .shadow(radius: 15)) .padding() } } }m ","permalink":"https://intervalrain.github.io/swift/ui_challenge/","summary":"\u003ch2 id=\"challenge-1-card-style\"\u003eChallenge 1: Card Style\u003c/h2\u003e\n\u003cimg src=\"/Swift/images/img1.jpg\" width=\"300\"\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-swift\" data-lang=\"swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eContentView\u003c/span\u003e: View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e body: some View {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        ZStack {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            Color(.systemMint)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                .ignoresSafeArea()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            VStack(alignment: .leading, spacing: \u003cspan style=\"color:#ae81ff\"\u003e20.0\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                Image(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;eva\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    .resizable()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    .aspectRatio(contentMode: .fit)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    .cornerRadius(\u003cspan style=\"color:#ae81ff\"\u003e15\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    .padding(.all)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                HStack {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Eva Hsu\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                        .font(.largeTitle)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                        .fontWeight(.semibold)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                        .foregroundColor(.black)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                        .padding()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    Spacer()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    VStack {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                        HStack {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                            Image(systemName: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;star.fill\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                            Image(systemName: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;star.fill\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                            Image(systemName: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;star.fill\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                            Image(systemName: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;star.fill\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                            Image(systemName: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;star.leadinghalf.fill\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                        .foregroundColor(.orange)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                        .font(.caption)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                        Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;(Reviews 240,152)\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    .padding()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                Text(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;The best girl in the world.\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    .foregroundColor(.primary)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    .padding(.horizontal)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                HStack {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    Spacer()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    Image(systemName: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;binoculars.fill\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    Image(systemName: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;fork.knife\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                .foregroundColor(.gray)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                .font(.caption)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                .padding()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            .background(Rectangle()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                .foregroundColor(.white)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                .cornerRadius(\u003cspan style=\"color:#ae81ff\"\u003e15\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                .shadow(radius: \u003cspan style=\"color:#ae81ff\"\u003e15\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                .padding()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}m\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"[Swift] UI Challenge"},{"content":"React + .Net 一、環境設置 Setup 1. 行前準備 Prerequisites 安裝 Node.js 和 npm node -v npm -v 安裝 .NET SDK dotnet --version 用 vs code 下載 ES7+ React/Redux/React-Native snippets 因為 rafce 很好用, 相當於, typescript 則是 tsrafce import React from \u0026#39;react\u0026#39; const index = () =\u0026gt; { return ( \u0026lt;div\u0026gt;index\u0026lt;/div\u0026gt; ) } export default index 2. 創建 React 安裝 react npm install create-react-app 創建新的 react app (typescript) --template typescript 可指定使用 typescript npx create-react-app {project} --template typescript cd {project} 必要時可能要初始化一個新的 react 項目，確保版本是匹配的。 yarnpkg add --exact react-dom react-scripts 3. 基本結構 函數式元件(Functional Component): const Card: React.FC\u0026lt;Props\u0026gt; = ({ companyName, ticker, price }: Props): JSX.Element =\u0026gt; { ... } Card 是一個函數式元件，使用 TypeScript 和 React。 React.FC\u0026lt;Props\u0026gt; 指定這個元件是接受 Props 作為參數的 React 函數式元件 ({ companyName, ticker, price }) 是從 Props 解構的屬性，這些屬性將會被傳入元件 JSX 標籤: return ( \u0026lt;div className=\u0026#39;card\u0026#39;\u0026gt;...\u0026lt;/div\u0026gt; ) 這是元件返回的 JSX，它描述了元件應該如何渲染。 4. State import React, { useState } from \u0026#39;react\u0026#39; type Props = {} const Button: React.FC\u0026lt;Props\u0026gt; = (props: Props): JSX.Element =\u0026gt; { const [count, setCount] = useState\u0026lt;number\u0026gt;(0); const onClick = (e: any) =\u0026gt; { setCount(count + 1); console.log(e); } return ( \u0026lt;div\u0026gt; \u0026lt;button onClick={(e) =\u0026gt; onClick(e)}\u0026gt;Click me\u0026lt;/button\u0026gt; \u0026lt;p\u0026gt;You clicked {count} times\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; ) } export default Button 引入 React 和 useState Hook: import React, { useState } from \u0026#39;react\u0026#39; 從 React 包中引入 useState Hook，用於函數式元件中添加狀態。 使用 useState Hook 定義狀態 const [count, setCount] = useState\u0026lt;number\u0026gt;(0); 定義一個名為 count 的狀態變量，初始值為 0。 setCount 是用來更新 count 的函數。 useState\u0026lt;number\u0026gt;(0) 指定 count 的類型為 number。 定義 onClick 事件處理函數: const onClick = (e: any) =\u0026gt; { setCount(count + 1); console.log(e); } onClick 是一個事件處理函數，接受一個事件參數 e。 每當按鈕被點擊時， count 會加 1，並且會在控制台輸出事件 e。 any 也可被寫成 MounthEvent 或 SyntheticEvent。 ","permalink":"https://intervalrain.github.io/it/csharp-react/","summary":"\u003ch1 id=\"react--net\"\u003eReact + .Net\u003c/h1\u003e\n\u003ch2 id=\"一環境設置-setup\"\u003e一、環境設置 Setup\u003c/h2\u003e\n\u003ch3 id=\"1-行前準備-prerequisites\"\u003e1. 行前準備 Prerequisites\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e安裝 Node.js 和 npm\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enode -v\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enpm -v\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安裝 .NET SDK\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003edotnet --version\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003e用 vs code 下載 \u003ccode\u003eES7+ React/Redux/React-Native snippets\u003c/code\u003e\n因為 \u003ccode\u003erafce\u003c/code\u003e 很好用, 相當於, typescript 則是 \u003ccode\u003etsrafce\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eReact\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efrom\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;react\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eindex\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e () =\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ediv\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eindex\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e/div\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  )\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eexport\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003edefault\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eindex\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"2-創建-react\"\u003e2. 創建 React\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e安裝 react\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enpm install create-react-app\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e創建新的 react app (typescript)\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e--template typescript\u003c/code\u003e 可指定使用 typescript\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003enpx create-react-app \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003eproject\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e --template typescript\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecd \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003eproject\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e必要時可能要初始化一個新的 react 項目，確保版本是匹配的。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eyarnpkg add --exact react-dom react-scripts\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"3-基本結構\"\u003e3. 基本結構\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e函數式元件(Functional Component):\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-tsx\" data-lang=\"tsx\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eCard\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003eReact.FC\u003c/span\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003eProps\u003c/span\u003e\u0026gt; \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e ({\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ecompanyName\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eticker\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eprice\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eProps\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eJSX\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eElement\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u0026gt;\u003c/span\u003e { ... }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eCard\u003c/code\u003e 是一個函數式元件，使用 TypeScript 和 React。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eReact.FC\u0026lt;Props\u0026gt;\u003c/code\u003e 指定這個元件是接受 \u003ccode\u003eProps\u003c/code\u003e 作為參數的 React 函數式元件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e({ companyName, ticker, price })\u003c/code\u003e 是從 \u003ccode\u003eProps\u003c/code\u003e 解構的屬性，這些屬性將會被傳入元件\u003c/li\u003e\n\u003c/ul\u003e\n\u003col start=\"2\"\u003e\n\u003cli\u003eJSX 標籤:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-tsx\" data-lang=\"tsx\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclassName\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;card\u0026#39;\u003c/span\u003e\u0026gt;...\u0026lt;/\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e這是元件返回的 JSX，它描述了元件應該如何渲染。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"4-state\"\u003e4. State\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-tsx\" data-lang=\"tsx\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eReact\u003c/span\u003e, { \u003cspan style=\"color:#a6e22e\"\u003euseState\u003c/span\u003e } \u003cspan style=\"color:#66d9ef\"\u003efrom\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;react\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eProps\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eButton\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003eReact.FC\u003c/span\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003eProps\u003c/span\u003e\u0026gt; \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003eprops\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003eProps\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eJSX\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eElement\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u0026gt;\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e [\u003cspan style=\"color:#a6e22e\"\u003ecount\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003esetCount\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003euseState\u003c/span\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003enumber\u003c/span\u003e\u0026gt;(\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eonClick\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003ee\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003eany\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e=\u0026gt;\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003esetCount\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ecount\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003econsole\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ee\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u0026lt;\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u0026lt;\u003cspan style=\"color:#f92672\"\u003ebutton\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eonClick\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e{(\u003cspan style=\"color:#a6e22e\"\u003ee\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eonClick\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ee\u003c/span\u003e)}\u0026gt;\u003cspan style=\"color:#a6e22e\"\u003eClick\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eme\u003c/span\u003e\u0026lt;/\u003cspan style=\"color:#f92672\"\u003ebutton\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u0026lt;\u003cspan style=\"color:#f92672\"\u003ep\u003c/span\u003e\u0026gt;\u003cspan style=\"color:#a6e22e\"\u003eYou\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclicked\u003c/span\u003e {\u003cspan style=\"color:#a6e22e\"\u003ecount\u003c/span\u003e} \u003cspan style=\"color:#a6e22e\"\u003etimes\u003c/span\u003e\u0026lt;/\u003cspan style=\"color:#f92672\"\u003ep\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u0026lt;/\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    )\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eexport\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003edefault\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eButton\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col\u003e\n\u003cli\u003e引入 React 和 useState Hook:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-tsx\" data-lang=\"tsx\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eimport\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eReact\u003c/span\u003e, { \u003cspan style=\"color:#a6e22e\"\u003euseState\u003c/span\u003e } \u003cspan style=\"color:#66d9ef\"\u003efrom\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;react\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e從 React 包中引入 \u003ccode\u003euseState\u003c/code\u003e Hook，用於函數式元件中添加狀態。\u003c/li\u003e\n\u003c/ul\u003e\n\u003col start=\"2\"\u003e\n\u003cli\u003e使用 \u003ccode\u003euseState\u003c/code\u003e Hook 定義狀態\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-tsx\" data-lang=\"tsx\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e [\u003cspan style=\"color:#a6e22e\"\u003ecount\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003esetCount\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003euseState\u003c/span\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003enumber\u003c/span\u003e\u0026gt;(\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e定義一個名為 \u003ccode\u003ecount\u003c/code\u003e 的狀態變量，初始值為 0。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esetCount\u003c/code\u003e 是用來更新 \u003ccode\u003ecount\u003c/code\u003e 的函數。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003euseState\u0026lt;number\u0026gt;(0)\u003c/code\u003e 指定 \u003ccode\u003ecount\u003c/code\u003e 的類型為 \u003ccode\u003enumber\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003col start=\"3\"\u003e\n\u003cli\u003e定義 \u003ccode\u003eonClick\u003c/code\u003e 事件處理函數:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-tsx\" data-lang=\"tsx\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eonClick\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003ee\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003eany\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e=\u0026gt;\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003esetCount\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ecount\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003econsole\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ee\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eonClick\u003c/code\u003e 是一個事件處理函數，接受一個事件參數 \u003ccode\u003ee\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e每當按鈕被點擊時， \u003ccode\u003ecount\u003c/code\u003e 會加 1，並且會在控制台輸出事件 \u003ccode\u003ee\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eany\u003c/code\u003e 也可被寫成 \u003ccode\u003eMounthEvent\u003c/code\u003e 或 \u003ccode\u003eSyntheticEvent\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e","title":"[IT] React + .Net"},{"content":"ApiController Atrribute 當我在 API 專案中建立新的 controller 時，它會自帶一個 [ApiController] 屬性的控制器類別，而這個標籤的作用為何呢？\n[ApiController] public class TestController : ControllerBase { } 1. 自動 HTTP 400 回應 它會自動產生一個行為過濾器(action filter)，當 ModelState.IsValid 為 false 時，自動回傳 400 Response。 2. 綁定來源參數推斷 可以更改模型綁定的約定，例如，[FromBody] 是針對複雜類型參數推斷的。 3. Multi/form-data 請求推理 對於標示 [FromForm] 的參數，推斷 Content-Type 為 multipart/form-data。 4. 屬性路由要求 強制要求所有操作都必須通過屬性路由。 使用 ApiController 的情況 數據服務：如果你要提供 JSON 或 XML 格式的數據服務給前端或其他應用程式。 RESTful API：當你需要創建 RESTful API 來處理資源（Create, Read, Update, Delete）。 不使用 ApiController 的情況 傳統 MVC 應用：如果你只是要處理 HTTP 請求並返回 HTML 視圖給用戶端。 ","permalink":"https://intervalrain.github.io/it/apicontroller/","summary":"\u003ch1 id=\"apicontroller-atrribute\"\u003eApiController Atrribute\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e當我在 API 專案中建立新的 controller 時，它會自帶一個 [ApiController] 屬性的控制器類別，而這個標籤的作用為何呢？\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e[ApiController]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eTestController\u003c/span\u003e : ControllerBase\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"1-自動-http-400-回應\"\u003e1. 自動 HTTP 400 回應\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e它會自動產生一個行為過濾器(action filter)，當 \u003ccode\u003eModelState.IsValid\u003c/code\u003e 為 \u003ccode\u003efalse\u003c/code\u003e 時，自動回傳 400 Response。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"2-綁定來源參數推斷\"\u003e2. 綁定來源參數推斷\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e可以更改模型綁定的約定，例如，\u003ccode\u003e[FromBody]\u003c/code\u003e 是針對複雜類型參數推斷的。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"3-multiform-data-請求推理\"\u003e3. Multi/form-data 請求推理\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e對於標示 \u003ccode\u003e[FromForm]\u003c/code\u003e 的參數，推斷 Content-Type 為 \u003ccode\u003emultipart/form-data\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"4-屬性路由要求\"\u003e4. 屬性路由要求\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e強制要求所有操作都必須通過屬性路由。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cstyle type=\"text/css\"\u003e.notice{--root-color:#444;--root-background:#eff;--title-color:#fff;--title-background:#7bd;--warning-title:#c33;--warning-content:#fee;--info-title:#fb7;--info-content:#fec;--note-title:#6be;--note-content:#e7f2fa;--tip-title:#5a5;--tip-content:#efe}@media (prefers-color-scheme:dark){.notice{--root-color:#ddd;--root-background:#eff;--title-color:#fff;--title-background:#7bd;--warning-title:#800;--warning-content:#400;--info-title:#a50;--info-content:#420;--note-title:#069;--note-content:#023;--tip-title:#363;--tip-content:#121}}body.dark .notice{--root-color:#ddd;--root-background:#eff;--title-color:#fff;--title-background:#7bd;--warning-title:#800;--warning-content:#400;--info-title:#a50;--info-content:#420;--note-title:#069;--note-content:#023;--tip-title:#363;--tip-content:#121}.notice{padding:18px;line-height:24px;margin-bottom:24px;border-radius:4px;color:var(--root-color);background:var(--root-background)}.notice p:last-child{margin-bottom:0}.notice-title{margin:-18px -18px 12px;padding:4px 18px;border-radius:4px 4px 0 0;font-weight:700;color:var(--title-color);background:var(--title-background)}.notice.warning .notice-title{background:var(--warning-title)}.notice.warning{background:var(--warning-content)}.notice.info .notice-title{background:var(--info-title)}.notice.info{background:var(--info-content)}.notice.note .notice-title{background:var(--note-title)}.notice.note{background:var(--note-content)}.notice.tip .notice-title{background:var(--tip-title)}.notice.tip{background:var(--tip-content)}.icon-notice{display:inline-flex;align-self:center;margin-right:8px}.icon-notice img,.icon-notice svg{height:1em;width:1em;fill:currentColor}.icon-notice img,.icon-notice.baseline svg{top:.125em;position:relative}\u003c/style\u003e\n\u003cdiv\u003e\u003csvg width=\"0\" height=\"0\" display=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003csymbol id=\"tip-notice\" viewBox=\"0 0 512 512\" preserveAspectRatio=\"xMidYMid meet\"\u003e\u003cpath d=\"M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z\"/\u003e\u003c/symbol\u003e\u003csymbol id=\"note-notice\" viewBox=\"0 0 512 512\" preserveAspectRatio=\"xMidYMid meet\"\u003e\u003cpath d=\"M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z\"/\u003e\u003c/symbol\u003e\u003csymbol id=\"warning-notice\" viewBox=\"0 0 576 512\" preserveAspectRatio=\"xMidYMid meet\"\u003e\u003cpath d=\"M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z\"/\u003e\u003c/symbol\u003e\u003csymbol id=\"info-notice\" viewBox=\"0 0 512 512\" preserveAspectRatio=\"xMidYMid meet\"\u003e\u003cpath d=\"M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z\"/\u003e\u003c/symbol\u003e\u003c/svg\u003e\u003c/div\u003e\u003cdiv class=\"notice info\" \u003e\n\u003cp class=\"first notice-title\"\u003e\u003cspan class=\"icon-notice baseline\"\u003e\u003csvg\u003e\u003cuse href=\"#info-notice\"\u003e\u003c/use\u003e\u003c/svg\u003e\u003c/span\u003e\u003c/p\u003e","title":"[IT] ApiController Atrribute"},{"content":" 可搭配程式碼服用： https://github.com/intervalrain/htmls/tree/main/tutorial 使用者文檔： W3C 官網 MDN W3School 一、HTML 全名：超文本標記語言(HyperText Markup Language, HTML) 現最常使用的是 HTML5，由 W3C \u0026amp; WHATWG 所制定。 將檔案設置為 .html 即可建立一個 html 檔案。 二、HTML 標籤 標籤又稱元素，是 HTML 的基本組成單位。 標籤分為: 雙標籤和單標籤(絕大多數都是雙標籤)。 標籤不區分大小寫，但推薦小寫，因為小寫更規範 雙標籤，\u0026lt;標籤名\u0026gt;標籤體\u0026lt;/標籤名\u0026gt; \u0026lt;marquee\u0026gt;Hello World\u0026lt;/marquee\u0026gt; 單標籤，\u0026lt;標籤名/\u0026gt;，/可省略 \u0026lt;input/\u0026gt; 標籤之間的關係：並列關係、嵌套關係，可以使用 tab 鍵進行縮進。 \u0026lt;marquee\u0026gt; Hello World \u0026lt;input\u0026gt; \u0026lt;/marquee\u0026gt; 三、HTML 標籤屬性 用於給標籤提供附加訊息。 可以寫在: 起始標籤或單標籤中，\u0026lt;標籤名 屬性名=\u0026quot;屬性值\u0026quot; 屬性名=\u0026quot;屬性值\u0026quot;\u0026gt; \u0026lt;marquee loop=\u0026#34;1\u0026#34; bgcolor=\u0026#34;orange\u0026#34;\u0026gt;Hello World\u0026lt;/marquee\u0026gt; \u0026lt;input type=\u0026#34;password\u0026#34;\u0026gt; 有些特殊的屬性，沒有屬性名，只有屬性值： \u0026lt;input disabled\u0026gt; 不同的標籤，有不同的屬性；也有一些通用屬性(在任何標籤內都能寫)。 屬性名、屬性值不能亂寫，都是 W3C 規範的。 屬性名、屬性值，都不區分大小寫，但建議小寫。 單引號與雙引號都可以，甚至不寫也行，但建議雙引號。 標籤中不要出現同名屬性，否則後者失效。 四、HTML 基本結構 在網頁中，使用右鍵「檢查」查看源始碼。 「檢查」與「檢視頁面來源」的差別為： 「查看頁面來源」：開發者使用的源始碼。 「檢查」：經過瀏覽器處理後的源始碼。 網頁的基本結構 想要呈現在網頁的內容寫在 body 標籤中。 head 標籤中的內容不會出現在網頁中。 head 標籤中的 title 標籤可以指定網頁的標題。 \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;我是標題\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Hello World\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 五、HTML 注釋 注釋是由 \u0026lt;!-- 與 --\u0026gt; 配對組成。 在 VS Code 中可以使用 Ctrl+/ 快捷鍵來快速注釋。 六、HTML 文檔聲明 作用：告訴瀏覽器當前網頁的版本 寫法： \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 文檔聲明，必須寫在網頁的第一行，且在 html 標籤的外面。\n七、HTML 文檔編碼 編寫源始碼時用的文檔黨碼要與瀏覽器渲染時用的解碼一致，否則會產生亂碼。 可以通過 meta 標籤配合 charset 屬性指定字符編碼。 通常使用 UTF-8 萬國編碼。 \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt;` 其它常用編碼： ASCII: 大寫字母、小寫字母、數字、一些符號，共計 128 個。 ISO 8859-1: 在 ASCII 基礎上，擴充了一些希臘字符等，共計 256 個。 Big5: 社群最常用的電腦漢字字元集標準，收錄 13060 個漢字。 UTF-8: 包含世界業所有語言，所有文字與符號。 八、HTML 設置語言 主要功能： 讓瀏覽器顯示對應的翻譯提示。 有利於檢索引擎優化(SEO, Search Engine Optimization)。 具體寫法： \u0026lt;html lang=\u0026#34;zh-TW\u0026#34;\u0026gt; 擴展知識： lang 屬性的編寫規則。 第一種寫法(語言-國家/地區)，如： zh-TW: 中文-台灣(繁體中文) zh-CN: 中文-中國(簡體中文) zh: 中文 en-US: 英語-美國 en-GB: 英語-英國 第二種寫法(語言-具體種類)，不建議使用。 zh-Hans: 中文-簡體 zh-Hant: 中文-繁體 W3C 官網說明: 《Language tags in HTML》 九、HTML 網頁圖示 在網頁標題旁可以顯示小圖示，通常稱作 favicon。 可在 head 中加入 \u0026lt;link rel=\u0026quot;icon\u0026quot; type=\u0026quot;image/png\u0026quot; href=\u0026quot;檔案位址 來更變圖示。 \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;HTML 教學\u0026lt;/title\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;icon\u0026#34; type=\u0026#34;image/png\u0026#34; href=\u0026#34;../images/favicon.ico\u0026#34; \u0026lt;/head\u0026gt; ","permalink":"https://intervalrain.github.io/it/html/","summary":"\u003cul\u003e\n\u003cli\u003e可搭配程式碼服用：\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/intervalrain/htmls/tree/main/tutorial\"\u003ehttps://github.com/intervalrain/htmls/tree/main/tutorial\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e使用者文檔：\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.w3.org/\"\u003eW3C 官網\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.mozilla.org/\"\u003eMDN\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.w3schools.com/\"\u003eW3School\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"一html\"\u003e一、HTML\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e全名：超文本標記語言(HyperText Markup Language, HTML)\u003c/li\u003e\n\u003cli\u003e現最常使用的是 HTML5，由 W3C \u0026amp; WHATWG 所制定。\u003c/li\u003e\n\u003cli\u003e將檔案設置為 \u003ccode\u003e.html\u003c/code\u003e 即可建立一個 html 檔案。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"二html-標籤\"\u003e二、HTML 標籤\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003e標籤\u003c/strong\u003e又稱\u003cstrong\u003e元素\u003c/strong\u003e，是 HTML 的基本組成單位。\u003c/li\u003e\n\u003cli\u003e標籤分為: \u003cstrong\u003e雙標籤\u003c/strong\u003e和\u003cstrong\u003e單標籤\u003c/strong\u003e(絕大多數都是雙標籤)。\u003c/li\u003e\n\u003cli\u003e標籤不區分大小寫，但推薦小寫，因為小寫更規範\u003c/li\u003e\n\u003cli\u003e雙標籤，\u003ccode\u003e\u0026lt;標籤名\u0026gt;標籤體\u0026lt;/標籤名\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003emarquee\u003c/span\u003e\u0026gt;Hello World\u0026lt;/\u003cspan style=\"color:#f92672\"\u003emarquee\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"5\"\u003e\n\u003cli\u003e單標籤，\u003ccode\u003e\u0026lt;標籤名/\u0026gt;\u003c/code\u003e，\u003ccode\u003e/\u003c/code\u003e可省略\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003einput\u003c/span\u003e/\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"6\"\u003e\n\u003cli\u003e標籤之間的關係：並列關係、嵌套關係，可以使用 \u003ccode\u003etab\u003c/code\u003e 鍵進行縮進。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003emarquee\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Hello World\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;\u003cspan style=\"color:#f92672\"\u003einput\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;/\u003cspan style=\"color:#f92672\"\u003emarquee\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"三html-標籤屬性\"\u003e三、HTML 標籤屬性\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e用於給標籤提供附加訊息。\u003c/li\u003e\n\u003cli\u003e可以寫在: \u003cstrong\u003e起始標籤\u003c/strong\u003e或\u003cstrong\u003e單標籤\u003c/strong\u003e中，\u003ccode\u003e\u0026lt;標籤名 屬性名=\u0026quot;屬性值\u0026quot; 屬性名=\u0026quot;屬性值\u0026quot;\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003emarquee\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eloop\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;1\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ebgcolor\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;orange\u0026#34;\u003c/span\u003e\u0026gt;Hello World\u0026lt;/\u003cspan style=\"color:#f92672\"\u003emarquee\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003einput\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;password\u0026#34;\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"3\"\u003e\n\u003cli\u003e有些特殊的屬性，沒有屬性名，只有屬性值：\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003einput\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edisabled\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"4\"\u003e\n\u003cli\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cstyle type=\"text/css\"\u003e.notice{--root-color:#444;--root-background:#eff;--title-color:#fff;--title-background:#7bd;--warning-title:#c33;--warning-content:#fee;--info-title:#fb7;--info-content:#fec;--note-title:#6be;--note-content:#e7f2fa;--tip-title:#5a5;--tip-content:#efe}@media (prefers-color-scheme:dark){.notice{--root-color:#ddd;--root-background:#eff;--title-color:#fff;--title-background:#7bd;--warning-title:#800;--warning-content:#400;--info-title:#a50;--info-content:#420;--note-title:#069;--note-content:#023;--tip-title:#363;--tip-content:#121}}body.dark .notice{--root-color:#ddd;--root-background:#eff;--title-color:#fff;--title-background:#7bd;--warning-title:#800;--warning-content:#400;--info-title:#a50;--info-content:#420;--note-title:#069;--note-content:#023;--tip-title:#363;--tip-content:#121}.notice{padding:18px;line-height:24px;margin-bottom:24px;border-radius:4px;color:var(--root-color);background:var(--root-background)}.notice p:last-child{margin-bottom:0}.notice-title{margin:-18px -18px 12px;padding:4px 18px;border-radius:4px 4px 0 0;font-weight:700;color:var(--title-color);background:var(--title-background)}.notice.warning .notice-title{background:var(--warning-title)}.notice.warning{background:var(--warning-content)}.notice.info .notice-title{background:var(--info-title)}.notice.info{background:var(--info-content)}.notice.note .notice-title{background:var(--note-title)}.notice.note{background:var(--note-content)}.notice.tip .notice-title{background:var(--tip-title)}.notice.tip{background:var(--tip-content)}.icon-notice{display:inline-flex;align-self:center;margin-right:8px}.icon-notice img,.icon-notice svg{height:1em;width:1em;fill:currentColor}.icon-notice img,.icon-notice.baseline svg{top:.125em;position:relative}\u003c/style\u003e\n\u003cdiv\u003e\u003csvg width=\"0\" height=\"0\" display=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003csymbol id=\"tip-notice\" viewBox=\"0 0 512 512\" preserveAspectRatio=\"xMidYMid meet\"\u003e\u003cpath d=\"M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z\"/\u003e\u003c/symbol\u003e\u003csymbol id=\"note-notice\" viewBox=\"0 0 512 512\" preserveAspectRatio=\"xMidYMid meet\"\u003e\u003cpath d=\"M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z\"/\u003e\u003c/symbol\u003e\u003csymbol id=\"warning-notice\" viewBox=\"0 0 576 512\" preserveAspectRatio=\"xMidYMid meet\"\u003e\u003cpath d=\"M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z\"/\u003e\u003c/symbol\u003e\u003csymbol id=\"info-notice\" viewBox=\"0 0 512 512\" preserveAspectRatio=\"xMidYMid meet\"\u003e\u003cpath d=\"M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z\"/\u003e\u003c/symbol\u003e\u003c/svg\u003e\u003c/div\u003e\u003cdiv class=\"notice warning\" \u003e\n\u003cp class=\"first notice-title\"\u003e\u003cspan class=\"icon-notice baseline\"\u003e\u003csvg\u003e\u003cuse href=\"#warning-notice\"\u003e\u003c/use\u003e\u003c/svg\u003e\u003c/span\u003e\u003c/p\u003e","title":"[IT] HTML + CSS"},{"content":"前置作業 需安裝以下 Packages\nMicrosoft.EntityFrameworkCore Microsoft.entityFrameworkCore.Design Microsoft.EntityFrameworkCore.Tools 設置好 []DbContext\n範例 public class AppDbContext : DbContext { public DbSet\u0026lt;Reminder\u0026gt; Reminders { get; set; } = null!; public DbSet\u0026lt;User\u0026gt; Users { get; set; } = null!; public AppDbContext() { } protected override void OnConfiguring(DbContextOptionsBuilder options) { options.UseNpgsql(\u0026#34;Host=localhost;Port=5432;Username=********;Password=********;Database=testdb\u0026#34;); } } 若是實作的 DbContext 沒有合適的建構子，是無法進行 migration 的。\n如果 DbContext 採用依賴注入的方式，且程式的 entry 又不在同一個專案底下，則需要覆寫 OnConfiguring() 來提供 Database 的連線資訊。\n建構好對應的 Entity，需包含至少一個帶有 Id 的 property。 由於我們要進行持久化(persistance)的物件通常是聚合根(aggregate root)，可透過繼承以下的抽象物件 Entity來統一 Id property。 又聚合根通常又會作為 DomainEvent 的發起者，透過 EventBus 來進行推播。可參考 EventBus Middleware 的實作。 migration 指令 進行 Migration 初始化 以下指令會產生將 DbContext 遷移至 Database 的 migration codes。 -p 或是 -project 用以指定專案。 dotnet ef migrations add InitialMigration -p src/CleanWebApi.Infrastructure --startup-project 可以指定入口專案，可適用於將 connectionString 以 DependencyInjection 的方式注入於入口專案的情形。 dotnet ef migrations add InitialCreate --startup-project src/CleanWebApi.Api --project src/CleanWebApi.Infrastructure 查詢 Migrations 清單 以下指令可以查詢該專案中有哪些 migration。 dotnet ef migrations list -p src/CleanWebApi.Infrastructure 執行 Migration 以下指令會執行 Migration，實際在 Database 產生對應的 tables。 dotnet ef database update InitialMigration -p src/CleanWebApi.Infrastructure 移除 Migration 在 Database 已進行 Migration 的情況下無法執行，必要時需要先將 Database 清除。 dotnet ef migrations remove -p src/CleanWebApi.Infrastructure 清除 Database dotnet ef database update 0 -p src/CleanWebApi.Infrastructure 此指令會刪除 Database，若有重要資料，需先做好備份。\n補充 抽象物件 Entity 實作 INotification 來自於 MediatR package，透過 Event-EventHandler 的方式來進行方法之間的解耦(decouple)。 public interface IDomainEvent : INotification { } public abstract class Entity { public Guid Id { get; private init; } protected readonly List\u0026lt;IDomainEvent\u0026gt; _domainEvents = new(); public Entity(Guid id) { Id = id; } public List\u0026lt;IDomainEvent\u0026gt; PopDomainEvents() { var copy = _domainEvents.ToList(); _domainEvents.Clear(); return copy; } protected Entity() { } } EventBus Middleware 的實作，用來將聚合根的 DomainEvents 進行推播。 public class EventualConsistencyMiddleware { public const string DomainEventsKey = \u0026#34;DomainEventsKey\u0026#34;; private readonly RequestDelegate _next; public EventualConsistencyMiddleware(RequestDelegate next) { _next = next; } public async Task InvokeAsync(HttpContext context, IPublisher publisher, AppDbContext dbContext) { var transaction = await dbContext.Database.BeginTransactionAsync(); context.Response.OnCompleted(async () =\u0026gt; { try { if (context.Items.TryGetValue(DomainEventsKey, out var value) \u0026amp;\u0026amp; value is Queue\u0026lt;IDomainEvent\u0026gt; domainEvents) { while (domainEvents.TryDequeue(out var @event)) { await publisher.Publish(@event); } } await transaction.CommitAsync(); } catch (Exception) { } finally { await transaction.DisposeAsync(); } }); await _next(context); } } ","permalink":"https://intervalrain.github.io/it/entityframework_command/","summary":"\u003ch2 id=\"前置作業\"\u003e前置作業\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e需安裝以下 Packages\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eMicrosoft.EntityFrameworkCore\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eMicrosoft.entityFrameworkCore.Design\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eMicrosoft.EntityFrameworkCore.Tools\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e設置好 \u003ccode\u003e[]DbContext\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e範例\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eAppDbContext\u003c/span\u003e : DbContext\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e DbSet\u0026lt;Reminder\u0026gt; Reminders { \u003cspan style=\"color:#66d9ef\"\u003eget\u003c/span\u003e; \u003cspan style=\"color:#66d9ef\"\u003eset\u003c/span\u003e; } = \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e!;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e DbSet\u0026lt;User\u0026gt; Users { \u003cspan style=\"color:#66d9ef\"\u003eget\u003c/span\u003e; \u003cspan style=\"color:#66d9ef\"\u003eset\u003c/span\u003e; } = \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e!;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e AppDbContext()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprotected\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eoverride\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e OnConfiguring(DbContextOptionsBuilder options)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        options.UseNpgsql(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Host=localhost;Port=5432;Username=********;Password=********;Database=testdb\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cstyle type=\"text/css\"\u003e.notice{--root-color:#444;--root-background:#eff;--title-color:#fff;--title-background:#7bd;--warning-title:#c33;--warning-content:#fee;--info-title:#fb7;--info-content:#fec;--note-title:#6be;--note-content:#e7f2fa;--tip-title:#5a5;--tip-content:#efe}@media (prefers-color-scheme:dark){.notice{--root-color:#ddd;--root-background:#eff;--title-color:#fff;--title-background:#7bd;--warning-title:#800;--warning-content:#400;--info-title:#a50;--info-content:#420;--note-title:#069;--note-content:#023;--tip-title:#363;--tip-content:#121}}body.dark .notice{--root-color:#ddd;--root-background:#eff;--title-color:#fff;--title-background:#7bd;--warning-title:#800;--warning-content:#400;--info-title:#a50;--info-content:#420;--note-title:#069;--note-content:#023;--tip-title:#363;--tip-content:#121}.notice{padding:18px;line-height:24px;margin-bottom:24px;border-radius:4px;color:var(--root-color);background:var(--root-background)}.notice p:last-child{margin-bottom:0}.notice-title{margin:-18px -18px 12px;padding:4px 18px;border-radius:4px 4px 0 0;font-weight:700;color:var(--title-color);background:var(--title-background)}.notice.warning .notice-title{background:var(--warning-title)}.notice.warning{background:var(--warning-content)}.notice.info .notice-title{background:var(--info-title)}.notice.info{background:var(--info-content)}.notice.note .notice-title{background:var(--note-title)}.notice.note{background:var(--note-content)}.notice.tip .notice-title{background:var(--tip-title)}.notice.tip{background:var(--tip-content)}.icon-notice{display:inline-flex;align-self:center;margin-right:8px}.icon-notice img,.icon-notice svg{height:1em;width:1em;fill:currentColor}.icon-notice img,.icon-notice.baseline svg{top:.125em;position:relative}\u003c/style\u003e\n\u003cdiv\u003e\u003csvg width=\"0\" height=\"0\" display=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003csymbol id=\"tip-notice\" viewBox=\"0 0 512 512\" preserveAspectRatio=\"xMidYMid meet\"\u003e\u003cpath d=\"M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z\"/\u003e\u003c/symbol\u003e\u003csymbol id=\"note-notice\" viewBox=\"0 0 512 512\" preserveAspectRatio=\"xMidYMid meet\"\u003e\u003cpath d=\"M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z\"/\u003e\u003c/symbol\u003e\u003csymbol id=\"warning-notice\" viewBox=\"0 0 576 512\" preserveAspectRatio=\"xMidYMid meet\"\u003e\u003cpath d=\"M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z\"/\u003e\u003c/symbol\u003e\u003csymbol id=\"info-notice\" viewBox=\"0 0 512 512\" preserveAspectRatio=\"xMidYMid meet\"\u003e\u003cpath d=\"M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z\"/\u003e\u003c/symbol\u003e\u003c/svg\u003e\u003c/div\u003e\u003cdiv class=\"notice tip\" \u003e\n\u003cp class=\"first notice-title\"\u003e\u003cspan class=\"icon-notice baseline\"\u003e\u003csvg\u003e\u003cuse href=\"#tip-notice\"\u003e\u003c/use\u003e\u003c/svg\u003e\u003c/span\u003e\u003c/p\u003e","title":"[IT] EntityFramework Commands"},{"content":"系統設計的核心概念 System Design Key Concepts 可擴展性(Scalability) 延遲與吞吐量(Latency vs Throughput) CAP 定理(CAP Theory) ACID 交易(ACID Transactions) ","permalink":"https://intervalrain.github.io/systemdesign/system_design_menu/","summary":"\u003ch1 id=\"系統設計的核心概念-system-design-key-concepts\"\u003e系統設計的核心概念 System Design Key Concepts\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e可擴展性(Scalability)\u003c/li\u003e\n\u003cli\u003e延遲與吞吐量(Latency vs Throughput)\u003c/li\u003e\n\u003cli\u003eCAP 定理(CAP Theory)\u003c/li\u003e\n\u003cli\u003eACID 交易(ACID Transactions)\u003c/li\u003e\n\u003cli\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"[System Design] 系統設計概念與資源 System Design and Resources"},{"content":"Configure C# Solution step by step 開啟 Terminal 新增解決方案 dontet new sln -o MySln 移至方案目錄 cd MySln 根據解決方案 hierarchy 建構專案 dotnet new webapi -o MySln.Api dotnet new classlib -o MySln.Application dotnet new classlib -o MySln.Domain dotnet new classlib -o MySln.Infrastructure dotnet new classlib -o MySln.Contracts 將所有專案加進解決方案 for proj in $(ls -r **/*.csproj) dotnet sln add $proj 建立專案之間的 dependency dotnet add MySln.Api reference MySln.Application MySln.Infrastructure MySln.Contracts dotnet add MySln.Infrastructure reference MySln.Application dotnet add MySln.Application reference MySln.Domain ","permalink":"https://intervalrain.github.io/it/ca_config/","summary":"\u003ch1 id=\"configure-c-solution-step-by-step\"\u003eConfigure C# Solution step by step\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e開啟 Terminal\u003c/li\u003e\n\u003cli\u003e新增解決方案 \u003ccode\u003edontet new sln -o MySln\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e移至方案目錄 \u003ccode\u003ecd MySln\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e根據解決方案 hierarchy 建構專案\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003edotnet new webapi -o MySln.Api\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003edotnet new classlib -o MySln.Application\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003edotnet new classlib -o MySln.Domain\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003edotnet new classlib -o MySln.Infrastructure\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003edotnet new classlib -o MySln.Contracts\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e將所有專案加進解決方案\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e proj in \u003cspan style=\"color:#66d9ef\"\u003e$(\u003c/span\u003els -r **/*.csproj\u003cspan style=\"color:#66d9ef\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    dotnet sln add $proj\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e建立專案之間的 dependency\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003edotnet add MySln.Api reference MySln.Application MySln.Infrastructure MySln.Contracts\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003edotnet add MySln.Infrastructure reference MySln.Application\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003edotnet add MySln.Application reference MySln.Domain\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","title":"[IT] 用 C# 建置 Clean Architecture 專案"},{"content":"程式碼 https://github.com/intervalrain/webapi_ca/\n正文 建置 Solution 首先先參考 Clean Architecture 最經典的同心圓，來確定我們需要將我們的解決方案做哪些分層：\n我將使用 Restful API 做為我們 I/O (Presentation Layer) 並且我需要配備身份驗證的機制 (Presentation Layer) 我使用 PostgresDB 作為我的 (Infrastructure Layer) 我的核心商業邏輯 (Application / Domain Layer) 創建專案\ndotnet new sln -o Mysln 進入專案所在的資料夾 cd Mysln 根據預先的分層建立專案資料夾，並且使用 dotnet 指令建立相對應的專案類型。 Api \u0026ndash;\u0026gt; WebAPI Infrastructure \u0026ndash;\u0026gt; classlib Contracts \u0026ndash;\u0026gt; classlib Application \u0026ndash;\u0026gt; classlib Domain \u0026ndash;\u0026gt; classlib dotnet new webapi -o Mysln.Api dotnet new classlib -o Mysln.Contracts dotnet new classlib -o Mysln.Infrastructure dotnet new classlib -o Mysln.Application dotnet new classlib -o Mysln.Domain 接著我們需要把產生的專案資料夾，加入到我們的 Solution。 dotnet sln add Mysln.Api dotnet sln add Mysln.Application dotnet sln add Mysln.Contracts dotnet sln add Mysln.Domain dotnet sln add Mysln.Infrastructure 接下來按照 Clean Architecture 的依賴原則來設定 dependency，依我的專案來說依賴方向如下。 graph TD; Api--\u003eContracts; Api--\u003eApplication; Infrastructure--\u003eApplication Application--\u003eDomain Api-.-\u003eInfrastructure dotnet add Mysln.Api reference Mysln.Contracts Mysln.Application dotnet add Mysln.Infrastructure reference Mysln.Application dotnet add Mysln.Application reference Mysln.Domain dotnet add Mysln.Api reference Mysln.Infrastructure 至此，已經完成了基本的 hierarchy 建置，接下來要為 Restful Client 做準備。 Login Authentication 作為驗證的需要，我們需要以下三種驗證檔案，包含兩個 Request 與一個 Response public record RegisterRequest( string FirstName, string LastName, string Email, string Password ); public record LoginRequest( string Email, string Password ); public record AuthenticationResponse( Guid Id, string FirstName, string LastName, string Email, string token ); 到 Controller 去設置註冊與登入的兩個路由，並且將之後的服務介面預先注入到其中。 [ApiController] [Route(\u0026#34;auth\u0026#34;)] public class AuthenticationController : ControllerBase { [HttpPost(\u0026#34;register\u0026#34;)] public IActionResult Register(RegisterRequest request) { return Ok(request); } [HttpPost(\u0026#34;login\u0026#34;)] public IActionResult Login(LoginRequest request) { return Ok(request); } } 接著我們創建 Application 中的服務，注意到因為 Application 不依賴於 Contracts，故我們這邊需要創建自己的 DataModel public record AuthenticationResult ( Guid Id, string FirstName, string LastName, string Email, string Token ); 接著我們定義出 Application 的 Service。 public interface IAuthenticationService { AuthenticationResult Register(string firstName, string lastName, string email, string password); AuthenticationResult Login(string email, string password); } 定義好我們的 service interface 之後，就可以到 Presentation 中將我們的 service 注入到 presentation 之中。 [ApiController] [Route(\u0026#34;auth\u0026#34;)] public class AuthenticationController : ControllerBase { private readonly IAuthenticationService _authenticationService; public AuthenticationController(IAuthenticationService authenticationService) { _authenticationService = authenticationService; } [HttpPost(\u0026#34;register\u0026#34;)] public IActionResult Register(RegisterRequest request) { var authResult = _authenticationService.Register( request.FirstName, request.LastName, request.Email, request.Password); var response = new AuthenticationResponse( authResult.Id, authResult.FirstName, authResult.LastName, authResult.Email, authResult.Token); return Ok(response); } [HttpPost(\u0026#34;login\u0026#34;)] public IActionResult Login(LoginRequest request) { var authResult = _authenticationService.Login( request.Email, request.Password); var response = new AuthenticationResponse( authResult.Id, authResult.FirstName, authResult.LastName, authResult.Email, authResult.Token); return Ok(response); } } 我們已經定義好我們的 service 後，便可以到 presentation 的 Program(或是其它入口點，如 Startup.cs 或 MauiProgram.cs)，做 service 的依賴注入。 using BuberDinner.Application.Services.Authentication; var builder = WebApplication.CreateBuilder(args); { builder.Services.AddScoped\u0026lt;IAuthenticationService, AuthenticationService\u0026gt;(); builder.Services.AddControllers(); builder.Services.AddEndpointsApiExplorer(); builder.Services.AddSwaggerGen(); } var app = builder.Build(); { app.UseSwagger(); app.UseSwaggerUI(); app.UseHttpsRedirection(); app.MapControllers(); app.Run(); } 最後，我們先實作一個暫時的 Service，來確認 Api 是可以作業的。 public class AuthenticationService : IAuthenticationService { public AuthenticationResult Register(string firstName, string lastName, string email, string password) { return new AuthenticationResult( Guid.NewGuid(), firstName, lastName, email, \u0026#34;token\u0026#34; ); } public AuthenticationResult Login(string email, string password) { return new AuthenticationResult( Guid.NewGuid(), \u0026#34;firstName\u0026#34;, \u0026#34;lastName\u0026#34;, email, \u0026#34;token\u0026#34; ); } } 執行 dotnet run --project .\\Mysln.Api\\ 在 Swagger 中測試我們實作的 register 與 login API，如果正常工作，會回傳 StatusCode: 200。 Dependency Injection 我們想要每一層都可以自己管理自己的注入，此時我們需要引入 Microsoft.Extensions.DependencyInjection。 接下來實作 Application 的 DependencyInjection。 public static class DependencyInjection { public static IServiceCollection AddApllication(this IServiceCollection services) { services.AddScope\u0026lt;IAuthenticationService, AuthenticationService\u0026gt;(); return services; } } 接下來實作 Infrastructure 的 DependencyInjection。(暫時還沒有注入 repository) public static class DependencyInjection { public static IServiceCollection AddInfrastructure(this IServiceCollection services) { // 未來要注入 repositories return services; } } 接下來我們可以改寫 Program.cs。 using BuberDinner.Application; using BuberDinner.Infrastructure; var builder = WebApplication.CreateBuilder(args); { builder.Services .AddApplication() .AddInfrastructure(); builder.Services.AddControllers(); builder.Services.AddEndpointsApiExplorer(); builder.Services.AddSwaggerGen(); } var app = builder.Build(); { app.UseSwagger(); app.UseSwaggerUI(); app.UseHttpsRedirection(); app.MapControllers(); app.Run(); } 實作 JWT Token Generator 首先先在 Application Layer 創建一個 interface 來做依賴反轉 public interface IJwtTokenGenerator { string GenerateToken(Guid userId, string firstName, string lastName); } 接著我們到 Infrastructure Layer 來實作我們的 JwtTokenGenerator。 首先我們需要 System.IdentityModel.Tokens.Jwt 這個 Package。 接著我們實作 JwtTokenGenerator。 public class JwtTokenGenerator : IJwtTokenGenerator { public string GenerateToken(Guid userId, string firstName, string lastName) { var signingCredentials = new SigningCredentials( new SymmetricSecurityKey( Encoding.UTF8.GetBytes(\u0026#34;super-secret-key\u0026#34;)), SecurityAlgorithms.HmacSha256); var claims = new[] { new Claim(JwtRegisteredClaimNames.Sub, userId.ToString()), new Claim(JwtRegisteredClaimNames.GivenName, firstName), new Claim(JwtRegisteredClaimNames.FamilyName, lastName), new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString()) }; var securityToken = new JwtSecurityToken( issuer: \u0026#34;Mysln\u0026#34;, expires: DateTime.Now.AddDays(1), claims: claims, signingCredentials: signingCredentials); return new JwtSecurityTokenHandler().WriteToken(securityToken); } } 接著我們將之注入到服務中，即大功告成了。 public static class DependencyInjection { public static IServiceCollection AddInfrastructure(this IServiceCollection services) { services.AddSingleton\u0026lt;IJwtTokenGenerator, JwtTokenGenerator\u0026gt;(); return services; } } 使用 Options Pattern 注入 JWT Settings 接下來我們要使用 Options Pattern 將 JWT Settings 注入到 JwtTokenGenerator 中。 首先我們先到 Mysln.Api 的 appsettings.json 中將 options 設置完成。 { \u0026#34;Logging\u0026#34;: { \u0026#34;LogLevel\u0026#34;: { \u0026#34;Default\u0026#34;: \u0026#34;Information\u0026#34;, \u0026#34;Microsoft.AspNetCore\u0026#34;: \u0026#34;Warning\u0026#34; } }, \u0026#34;AllowedHosts\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;JwtSettings\u0026#34;: { \u0026#34;Secret\u0026#34;: \u0026#34;super-secret-key\u0026#34;, \u0026#34;ExpiryMinutes\u0026#34;: 60, \u0026#34;Issuer\u0026#34;: \u0026#34;Mysln\u0026#34;, \u0026#34;Audience:\u0026#34;: \u0026#34;Mysln\u0026#34; } } 由於我們要使用 Options Pattern，我們需要改寫我們的 Program.cs，並且將 ConfigurationManager 注入到 Infrastructure 的 DependencyInjection。 為此我們需要引入套件 Microsoft.Extensions.Configuration 與 Microsoft.Extensions.Options.ConfigurationExtensions。 並且我們需要創建一個 Model。 public class JwtSettings { public const string SectionName = \u0026#34;JwtSettings\u0026#34;; public string Secret { get; init; } = null!; public int ExpiryMinutes { get; init; } public string Issuer { get; init; } = null!; public string Audience { get; init; } = null!; } Program.cs 需改寫成： builder.Services .AddApplication() .AddInfrastructure(builder.Configuration); 將 DependencyInjection 改寫成： public static class DependencyInjection { public static IServiceCollection AddInfrastructure(this IServiceCollection services, ConfigurationManager configuration) { services.Configure\u0026lt;JwtSettings\u0026gt;(configuration.GetSection(JwtSettings.SectionName)); services.AddSingleton\u0026lt;IJwtTokenGenerator, JwtTokenGenerator\u0026gt;(); services.AddSingleton\u0026lt;IDateTimeProvider, DateTimeProvider\u0026gt;(); return services; } } 接下來，我們可以把 JwtTokenGenerator 改寫成： public class JwtTokenGenerator : IJwtTokenGenerator { private readonly JwtSettings _jwtSettings; private readonly IDateTimeProvider _dateTimeProvider; public JwtTokenGenerator(IDateTimeProvider dateTimeProvider, IOptions\u0026lt;JwtSettings\u0026gt; jwtOptions) { _dateTimeProvider = dateTimeProvider; _jwtSettings = jwtOptions.Value; } public string GenerateToken(Guid userId, string firstName, string lastName) { var signingCredentials = new SigningCredentials( new SymmetricSecurityKey( Encoding.UTF8.GetBytes(_jwtSettings.Secret)), SecurityAlgorithms.HmacSha256); var claims = new[] { new Claim(JwtRegisteredClaimNames.Sub, userId.ToString()), new Claim(JwtRegisteredClaimNames.GivenName, firstName), new Claim(JwtRegisteredClaimNames.FamilyName, lastName), new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString()) }; var securityToken = new JwtSecurityToken( issuer: _jwtSettings.Issuer, audience: _jwtSettings.Audience, expires: _dateTimeProvider.UtcNow.AddMinutes(_jwtSettings.ExpiryMinutes), claims: claims, signingCredentials: signingCredentials); return new JwtSecurityTokenHandler().WriteToken(securityToken); } } 以上就大功告成了。 使用 dotnet user-secrets 指令 如果不想要將 Options 中的 secret 儲存在程式(appsettings.json)裡面，可以利用 dotnet user-secrets 將 secret 儲存於環境變數裡面。 透過執行以下的指令來初始化專案的 UserSecretsId dotnet user-secrets init --project Mysln.Api 接著將 UserSecretsId 綁定到我們專案的 JwtSettings:Secret。 dotnet user-secrets set --project Mysln.Api \u0026#34;JwtSettings:Secret\u0026#34; 日後可以經由以下指令查詢。 dotnet user-secrets list --project Mysln.Api Domain Model 先建立一個簡單的 Domain Model(Entity) public class User { public Guid Id { get; set; } = Guid.NewGuid(); public string FirstName { get; set; } = null!; public string LastName { get; set; } = null!; public string Email { get; set; } = null!; public string Password { get; set; } = null!; } Repository Pattern 在 Application Layer 建立 IRepository public interface IUserRepository { User? GetUserByEmail(string email); void Add(User user); } 將 IRepository 注入 Application 的 Service 並用查改存推改寫 Service public class AuthenticationService : IAuthenticationService { private readonly IJwtTokenGenerator _jwtTokenGenerator; private readonly IUserRepository _userRepository; public AuthenticationService(IJwtTokenGenerator jwtTokenGenerator, IUserRepository userRepository) { _jwtTokenGenerator = jwtTokenGenerator; _userRepository = userRepository; } public AuthenticationResult Register(string firstName, string lastName, string email, string password) { // 查 if (_userRepository.GetUserByEmail(email) is not null) { throw new Exception(\u0026#34;User with given email already exists.\u0026#34;); } // 改 var user = new User { FirstName = firstName, LastName = lastName, Email = email, Password = password }; // 存 _userRepository.Add(user); // 推 var token = _jwtTokenGenerator.GenerateToken(user.Id, firstName, lastName); return new AuthenticationResult(user.Id, firstName, lastName, email, token); } public AuthenticationResult Login(string email, string password) { // 查 if (_userRepository.GetUserByEmail(email) is not User user) { throw new Exception(\u0026#34;User with given email does not exist.\u0026#34;); } if (user.Password != password) { throw new Exception(\u0026#34;Invalid password.\u0026#34;); } // 改 var token = _jwtTokenGenerator.GenerateToken(user.Id, user.FirstName, user.LastName); return new AuthenticationResult(user.Id, user.FirstName, user.LastName, email, token); } } 接著我們在 Infrastructure Layer 實作我們的 repository，我們暫時先不接資料庫，所以先做一個 InMemory 版本的 repository 來做測試。 public class UserRepository : IUserRepository { private readonly List\u0026lt;User\u0026gt; _users = new(); public void Add(User user) { _users.Add(user); } public User? GetUserByEmail(string email) { return _users.SingleOrDefault(u =\u0026gt; u.Email.Equals(email)); } } 實作完需要透過 DependencyInjection 注入到我們的 Service Container 內。 public static class DependencyInjection { public static IServiceCollection AddInfrastructure(this IServiceCollection services, ConfigurationManager configuration) { services.Configure\u0026lt;JwtSettings\u0026gt;(configuration.GetSection(JwtSettings.SectionName)); services.AddSingleton\u0026lt;IJwtTokenGenerator, JwtTokenGenerator\u0026gt;(); services.AddSingleton\u0026lt;IDateTimeProvider, DateTimeProvider\u0026gt;(); services.AddSingleton\u0026lt;IUserRepository, UserRepository\u0026gt;(); return services; } } 至此，我們已經完成了一個簡單的身份認證的 API。 ","permalink":"https://intervalrain.github.io/it/clean_arch_configuration/","summary":"\u003ch1 id=\"程式碼\"\u003e程式碼\u003c/h1\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/intervalrain/webapi_ca/\"\u003ehttps://github.com/intervalrain/webapi_ca/\u003c/a\u003e\u003c/p\u003e\n\u003ch1 id=\"正文\"\u003e正文\u003c/h1\u003e\n\u003ch2 id=\"建置-solution\"\u003e建置 Solution\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e首先先參考 Clean Architecture 最經典的同心圓，來確定我們需要將我們的解決方案做哪些分層：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e我將使用 Restful API 做為我們 I/O (Presentation Layer)\u003c/li\u003e\n\u003cli\u003e並且我需要配備身份驗證的機制 (Presentation Layer)\u003c/li\u003e\n\u003cli\u003e我使用 PostgresDB 作為我的 (Infrastructure Layer)\u003c/li\u003e\n\u003cli\u003e我的核心商業邏輯 (Application / Domain Layer)\n\u003cimg src=\"https://herbertograca.files.wordpress.com/2017/04/cleanarchitecture-5c6d7ec787d447a81b708b73abba1680.jpg\" width=\"480\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e創建專案\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-vim\" data-lang=\"vim\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003edotnet\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enew\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esln\u003c/span\u003e -\u003cspan style=\"color:#a6e22e\"\u003eo\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMysln\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e進入專案所在的資料夾\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-vim\" data-lang=\"vim\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003ecd\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMysln\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e根據預先的分層建立專案資料夾，並且使用 dotnet 指令建立相對應的專案類型。\n\u003cul\u003e\n\u003cli\u003eApi \u0026ndash;\u0026gt; WebAPI\u003c/li\u003e\n\u003cli\u003eInfrastructure \u0026ndash;\u0026gt; classlib\u003c/li\u003e\n\u003cli\u003eContracts \u0026ndash;\u0026gt; classlib\u003c/li\u003e\n\u003cli\u003eApplication \u0026ndash;\u0026gt; classlib\u003c/li\u003e\n\u003cli\u003eDomain \u0026ndash;\u0026gt; classlib\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-vim\" data-lang=\"vim\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003edotnet\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enew\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ewebapi\u003c/span\u003e -\u003cspan style=\"color:#a6e22e\"\u003eo\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMysln\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eApi\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003edotnet\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enew\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclasslib\u003c/span\u003e -\u003cspan style=\"color:#a6e22e\"\u003eo\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMysln\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eContracts\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003edotnet\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enew\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclasslib\u003c/span\u003e -\u003cspan style=\"color:#a6e22e\"\u003eo\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMysln\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eInfrastructure\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003edotnet\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enew\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclasslib\u003c/span\u003e -\u003cspan style=\"color:#a6e22e\"\u003eo\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMysln\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eApplication\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003edotnet\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enew\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclasslib\u003c/span\u003e -\u003cspan style=\"color:#a6e22e\"\u003eo\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMysln\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eDomain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e接著我們需要把產生的專案資料夾，加入到我們的 Solution。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-vim\" data-lang=\"vim\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003edotnet\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esln\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eadd\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMysln\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eApi\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003edotnet\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esln\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eadd\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMysln\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eApplication\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003edotnet\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esln\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eadd\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMysln\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eContracts\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003edotnet\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esln\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eadd\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMysln\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eDomain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003edotnet\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esln\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eadd\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMysln\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eInfrastructure\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e接下來按照 Clean Architecture 的依賴原則來設定 dependency，依我的專案來說依賴方向如下。\n\u003cdiv class=\"mermaid\"\u003e\n    \ngraph TD;\n  Api--\u003eContracts;\n  Api--\u003eApplication;\n  Infrastructure--\u003eApplication\n  Application--\u003eDomain\n  Api-.-\u003eInfrastructure\n\n\u003c/div\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-vim\" data-lang=\"vim\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003edotnet\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eadd\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMysln\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eApi\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ereference\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMysln\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eContracts\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMysln\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eApplication\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003edotnet\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eadd\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMysln\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eInfrastructure\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ereference\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMysln\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eApplication\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003edotnet\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eadd\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMysln\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eApplication\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ereference\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMysln\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eDomain\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003edotnet\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eadd\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMysln\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eApi\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ereference\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMysln\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eInfrastructure\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e至此，已經完成了基本的 hierarchy 建置，接下來要為 Restful Client 做準備。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"login-authentication\"\u003eLogin Authentication\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e作為驗證的需要，我們需要以下三種驗證檔案，包含兩個 Request 與一個 Response\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003erecord\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eRegisterRequest\u003c/span\u003e(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e FirstName,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e LastName,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e Email,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e Password\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003erecord\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eLoginRequest\u003c/span\u003e(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e Email,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e Password\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003erecord\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eAuthenticationResponse\u003c/span\u003e(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Guid Id,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e FirstName,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e LastName,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e Email,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e token\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e到 Controller 去設置註冊與登入的兩個路由，並且將之後的服務介面預先注入到其中。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e[ApiController]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e[Route(\u0026#34;auth\u0026#34;)]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eAuthenticationController\u003c/span\u003e : ControllerBase\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e\t[HttpPost(\u0026#34;register\u0026#34;)]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e IActionResult Register(RegisterRequest request)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e Ok(request);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e\t[HttpPost(\u0026#34;login\u0026#34;)]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e IActionResult Login(LoginRequest request)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e Ok(request);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e接著我們創建 Application 中的服務，注意到因為 Application 不依賴於 Contracts，故我們這邊需要創建自己的 DataModel\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003erecord\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eAuthenticationResult\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Guid Id,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e FirstName,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e LastName,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e Email,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e Token\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e接著我們定義出 Application 的 Service。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eIAuthenticationService\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tAuthenticationResult Register(\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e firstName, \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e lastName, \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e email, \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e password);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    AuthenticationResult Login(\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e email, \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e password);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e定義好我們的 service interface 之後，就可以到 Presentation 中將我們的 service 注入到 presentation 之中。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e[ApiController]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e[Route(\u0026#34;auth\u0026#34;)]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eAuthenticationController\u003c/span\u003e : ControllerBase\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ereadonly\u003c/span\u003e IAuthenticationService _authenticationService;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e AuthenticationController(IAuthenticationService authenticationService)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        _authenticationService = authenticationService;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e    [HttpPost(\u0026#34;register\u0026#34;)]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e IActionResult Register(RegisterRequest request)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e authResult = _authenticationService.Register(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\trequest.FirstName,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\trequest.LastName,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\trequest.Email,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\trequest.Password);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e response = \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e AuthenticationResponse(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            authResult.Id,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            authResult.FirstName,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            authResult.LastName,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            authResult.Email,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            authResult.Token);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e Ok(response);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e\t[HttpPost(\u0026#34;login\u0026#34;)]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e IActionResult Login(LoginRequest request)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e authResult = _authenticationService.Login(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            request.Email,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            request.Password);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e response = \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e AuthenticationResponse(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            authResult.Id,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            authResult.FirstName,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            authResult.LastName,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            authResult.Email,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            authResult.Token);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e Ok(response);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e我們已經定義好我們的 service 後，便可以到 presentation 的 Program(或是其它入口點，如 Startup.cs 或 MauiProgram.cs)，做 service 的依賴注入。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eusing\u003c/span\u003e BuberDinner.Application.Services.Authentication;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e builder = WebApplication.CreateBuilder(args);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    builder.Services.AddScoped\u0026lt;IAuthenticationService, AuthenticationService\u0026gt;();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    builder.Services.AddControllers();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    builder.Services.AddEndpointsApiExplorer();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    builder.Services.AddSwaggerGen();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e app = builder.Build();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    app.UseSwagger();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    app.UseSwaggerUI();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    app.UseHttpsRedirection();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    app.MapControllers();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    app.Run();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e最後，我們先實作一個暫時的 Service，來確認 Api 是可以作業的。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eAuthenticationService\u003c/span\u003e : IAuthenticationService\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e AuthenticationResult Register(\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e firstName, \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e lastName, \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e email, \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e password)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e AuthenticationResult(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            Guid.NewGuid(),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            firstName,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            lastName,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            email,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;token\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            );\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e AuthenticationResult Login(\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e email, \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e password)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e AuthenticationResult(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            Guid.NewGuid(),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;firstName\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;lastName\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            email,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;token\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            );\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e執行 \u003ccode\u003edotnet run --project .\\Mysln.Api\\\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e在 Swagger 中測試我們實作的 \u003ccode\u003eregister\u003c/code\u003e 與 \u003ccode\u003elogin\u003c/code\u003e API，如果正常工作，會回傳 StatusCode: 200。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"dependency-injection\"\u003eDependency Injection\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e我們想要每一層都可以自己管理自己的注入，此時我們需要引入 \u003ccode\u003eMicrosoft.Extensions.DependencyInjection\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e接下來實作 Application 的 DependencyInjection。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eDependencyInjection\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e IServiceCollection AddApllication(\u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e IServiceCollection services)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        services.AddScope\u0026lt;IAuthenticationService, AuthenticationService\u0026gt;();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e services;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e接下來實作 Infrastructure 的 DependencyInjection。(暫時還沒有注入 repository)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eDependencyInjection\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e IServiceCollection AddInfrastructure(\u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e IServiceCollection services)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// 未來要注入 repositories\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e services;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e接下來我們可以改寫 \u003ccode\u003eProgram.cs\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eusing\u003c/span\u003e BuberDinner.Application;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eusing\u003c/span\u003e BuberDinner.Infrastructure;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e builder = WebApplication.CreateBuilder(args);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    builder.Services\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        .AddApplication()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        .AddInfrastructure();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    builder.Services.AddControllers();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    builder.Services.AddEndpointsApiExplorer();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    builder.Services.AddSwaggerGen();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e app = builder.Build();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    app.UseSwagger();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    app.UseSwaggerUI();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    app.UseHttpsRedirection();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    app.MapControllers();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    app.Run();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"實作-jwt-token-generator\"\u003e實作 JWT Token Generator\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e首先先在 Application Layer 創建一個 interface 來做依賴反轉\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eIJwtTokenGenerator\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e GenerateToken(Guid userId, \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e firstName, \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e lastName);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e接著我們到 Infrastructure Layer 來實作我們的 JwtTokenGenerator。\u003c/li\u003e\n\u003cli\u003e首先我們需要 \u003ccode\u003eSystem.IdentityModel.Tokens.Jwt\u003c/code\u003e 這個 Package。\u003c/li\u003e\n\u003cli\u003e接著我們實作 \u003ccode\u003eJwtTokenGenerator\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eJwtTokenGenerator\u003c/span\u003e : IJwtTokenGenerator\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e GenerateToken(Guid userId, \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e firstName, \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e lastName)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e signingCredentials = \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e SigningCredentials(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e SymmetricSecurityKey(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                Encoding.UTF8.GetBytes(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;super-secret-key\u0026#34;\u003c/span\u003e)),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            SecurityAlgorithms.HmacSha256);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e claims = \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e[]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e Claim(JwtRegisteredClaimNames.Sub, userId.ToString()),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e Claim(JwtRegisteredClaimNames.GivenName, firstName),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e Claim(JwtRegisteredClaimNames.FamilyName, lastName),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        };\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e securityToken = \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e JwtSecurityToken(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            issuer: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Mysln\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            expires: DateTime.Now.AddDays(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            claims: claims,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            signingCredentials: signingCredentials);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e JwtSecurityTokenHandler().WriteToken(securityToken);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e接著我們將之注入到服務中，即大功告成了。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eDependencyInjection\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e IServiceCollection AddInfrastructure(\u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e IServiceCollection services)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        services.AddSingleton\u0026lt;IJwtTokenGenerator, JwtTokenGenerator\u0026gt;();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e services;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"使用-options-pattern-注入-jwt-settings\"\u003e使用 Options Pattern 注入 JWT Settings\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e接下來我們要使用 Options Pattern 將 JWT Settings 注入到 JwtTokenGenerator 中。\u003c/li\u003e\n\u003cli\u003e首先我們先到 \u003ccode\u003eMysln.Api\u003c/code\u003e 的 \u003ccode\u003eappsettings.json\u003c/code\u003e 中將 options 設置完成。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-json\" data-lang=\"json\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003e\u0026#34;Logging\u0026#34;\u003c/span\u003e: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026#34;LogLevel\u0026#34;\u003c/span\u003e: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#f92672\"\u003e\u0026#34;Default\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Information\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#f92672\"\u003e\u0026#34;Microsoft.AspNetCore\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Warning\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  },\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003e\u0026#34;AllowedHosts\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;*\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026#34;JwtSettings\u0026#34;\u003c/span\u003e: {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026#34;Secret\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;super-secret-key\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026#34;ExpiryMinutes\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e60\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026#34;Issuer\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Mysln\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026#34;Audience:\u0026#34;\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Mysln\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e由於我們要使用 Options Pattern，我們需要改寫我們的 \u003ccode\u003eProgram.cs\u003c/code\u003e，並且將 ConfigurationManager 注入到 Infrastructure 的 DependencyInjection。\u003c/li\u003e\n\u003cli\u003e為此我們需要引入套件 \u003ccode\u003eMicrosoft.Extensions.Configuration\u003c/code\u003e 與 \u003ccode\u003eMicrosoft.Extensions.Options.ConfigurationExtensions\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e並且我們需要創建一個 Model。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eJwtSettings\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e SectionName = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;JwtSettings\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e Secret { \u003cspan style=\"color:#66d9ef\"\u003eget\u003c/span\u003e; \u003cspan style=\"color:#66d9ef\"\u003einit\u003c/span\u003e; } = \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e!;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e ExpiryMinutes { \u003cspan style=\"color:#66d9ef\"\u003eget\u003c/span\u003e; \u003cspan style=\"color:#66d9ef\"\u003einit\u003c/span\u003e; }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e Issuer { \u003cspan style=\"color:#66d9ef\"\u003eget\u003c/span\u003e; \u003cspan style=\"color:#66d9ef\"\u003einit\u003c/span\u003e; } = \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e!;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e Audience { \u003cspan style=\"color:#66d9ef\"\u003eget\u003c/span\u003e; \u003cspan style=\"color:#66d9ef\"\u003einit\u003c/span\u003e; } = \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e!;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eProgram.cs\u003c/code\u003e 需改寫成：\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ebuilder.Services\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        .AddApplication()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        .AddInfrastructure(builder.Configuration);\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e將 \u003ccode\u003eDependencyInjection\u003c/code\u003e 改寫成：\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eDependencyInjection\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e IServiceCollection AddInfrastructure(\u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e IServiceCollection services, ConfigurationManager configuration)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        services.Configure\u0026lt;JwtSettings\u0026gt;(configuration.GetSection(JwtSettings.SectionName));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        services.AddSingleton\u0026lt;IJwtTokenGenerator, JwtTokenGenerator\u0026gt;();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        services.AddSingleton\u0026lt;IDateTimeProvider, DateTimeProvider\u0026gt;();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e services;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e接下來，我們可以把 JwtTokenGenerator 改寫成：\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eJwtTokenGenerator\u003c/span\u003e : IJwtTokenGenerator\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ereadonly\u003c/span\u003e JwtSettings _jwtSettings;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ereadonly\u003c/span\u003e IDateTimeProvider _dateTimeProvider;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e JwtTokenGenerator(IDateTimeProvider dateTimeProvider, IOptions\u0026lt;JwtSettings\u0026gt; jwtOptions)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        _dateTimeProvider = dateTimeProvider;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        _jwtSettings = jwtOptions.Value;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e GenerateToken(Guid userId, \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e firstName, \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e lastName)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e signingCredentials = \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e SigningCredentials(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e SymmetricSecurityKey(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                Encoding.UTF8.GetBytes(_jwtSettings.Secret)),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            SecurityAlgorithms.HmacSha256);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e claims = \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e[]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e Claim(JwtRegisteredClaimNames.Sub, userId.ToString()),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e Claim(JwtRegisteredClaimNames.GivenName, firstName),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e Claim(JwtRegisteredClaimNames.FamilyName, lastName),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        };\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e securityToken = \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e JwtSecurityToken(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            issuer: _jwtSettings.Issuer,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            audience: _jwtSettings.Audience,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            expires: _dateTimeProvider.UtcNow.AddMinutes(_jwtSettings.ExpiryMinutes),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            claims: claims,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            signingCredentials: signingCredentials);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e JwtSecurityTokenHandler().WriteToken(securityToken);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e以上就大功告成了。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"使用-dotnet-user-secrets-指令\"\u003e使用 \u003ccode\u003edotnet user-secrets\u003c/code\u003e 指令\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e如果不想要將 Options 中的 secret 儲存在程式(appsettings.json)裡面，可以利用 \u003ccode\u003edotnet user-secrets\u003c/code\u003e 將 secret 儲存於環境變數裡面。\u003c/li\u003e\n\u003cli\u003e透過執行以下的指令來初始化專案的 \u003ccode\u003eUserSecretsId\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-vim\" data-lang=\"vim\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003edotnet\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003euser\u003c/span\u003e-\u003cspan style=\"color:#a6e22e\"\u003esecrets\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003einit\u003c/span\u003e --\u003cspan style=\"color:#a6e22e\"\u003eproject\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMysln\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eApi\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e接著將 \u003ccode\u003eUserSecretsId\u003c/code\u003e 綁定到我們專案的 \u003ccode\u003eJwtSettings:Secret\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-vim\" data-lang=\"vim\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003edotnet\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003euser\u003c/span\u003e-\u003cspan style=\"color:#a6e22e\"\u003esecrets\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eset\u003c/span\u003e --\u003cspan style=\"color:#a6e22e\"\u003eproject\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMysln\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eApi\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;JwtSettings:Secret\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e日後可以經由以下指令查詢。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-vim\" data-lang=\"vim\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003edotnet\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003euser\u003c/span\u003e-\u003cspan style=\"color:#a6e22e\"\u003esecrets\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elist\u003c/span\u003e --\u003cspan style=\"color:#a6e22e\"\u003eproject\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMysln\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eApi\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"domain-model\"\u003eDomain Model\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e先建立一個簡單的 Domain Model(Entity)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eUser\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e Guid Id { \u003cspan style=\"color:#66d9ef\"\u003eget\u003c/span\u003e; \u003cspan style=\"color:#66d9ef\"\u003eset\u003c/span\u003e; } = Guid.NewGuid();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e FirstName { \u003cspan style=\"color:#66d9ef\"\u003eget\u003c/span\u003e; \u003cspan style=\"color:#66d9ef\"\u003eset\u003c/span\u003e; } = \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e!;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e LastName { \u003cspan style=\"color:#66d9ef\"\u003eget\u003c/span\u003e; \u003cspan style=\"color:#66d9ef\"\u003eset\u003c/span\u003e; } = \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e!;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e Email { \u003cspan style=\"color:#66d9ef\"\u003eget\u003c/span\u003e; \u003cspan style=\"color:#66d9ef\"\u003eset\u003c/span\u003e; } = \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e!;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e Password { \u003cspan style=\"color:#66d9ef\"\u003eget\u003c/span\u003e; \u003cspan style=\"color:#66d9ef\"\u003eset\u003c/span\u003e; } = \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e!;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"repository-pattern\"\u003eRepository Pattern\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e在 Application Layer 建立 IRepository\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eIUserRepository\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    User? GetUserByEmail(\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e email);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e Add(User user);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e將 IRepository 注入 Application 的 Service\u003c/li\u003e\n\u003cli\u003e並用查改存推改寫 Service\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eAuthenticationService\u003c/span\u003e : IAuthenticationService\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ereadonly\u003c/span\u003e IJwtTokenGenerator _jwtTokenGenerator;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ereadonly\u003c/span\u003e IUserRepository _userRepository;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e AuthenticationService(IJwtTokenGenerator jwtTokenGenerator, IUserRepository userRepository)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        _jwtTokenGenerator = jwtTokenGenerator;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        _userRepository = userRepository;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e AuthenticationResult Register(\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e firstName, \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e lastName, \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e email, \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e password)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// 查\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (_userRepository.GetUserByEmail(email) \u003cspan style=\"color:#66d9ef\"\u003eis\u003c/span\u003e not \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ethrow\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e Exception(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;User with given email already exists.\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// 改\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e user = \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e User\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            FirstName = firstName,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            LastName = lastName,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            Email = email,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            Password = password\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        };\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// 存\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        _userRepository.Add(user);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// 推\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e token = _jwtTokenGenerator.GenerateToken(user.Id, firstName, lastName);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e AuthenticationResult(user.Id, firstName, lastName, email, token);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e AuthenticationResult Login(\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e email, \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e password)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// 查\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (_userRepository.GetUserByEmail(email) \u003cspan style=\"color:#66d9ef\"\u003eis\u003c/span\u003e not User user)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ethrow\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e Exception(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;User with given email does not exist.\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (user.Password != password)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ethrow\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e Exception(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Invalid password.\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// 改\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e token = _jwtTokenGenerator.GenerateToken(user.Id, user.FirstName, user.LastName);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e AuthenticationResult(user.Id, user.FirstName, user.LastName, email, token);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e接著我們在 Infrastructure Layer 實作我們的 repository，我們暫時先不接資料庫，所以先做一個 InMemory 版本的 repository 來做測試。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eUserRepository\u003c/span\u003e : IUserRepository\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ereadonly\u003c/span\u003e List\u0026lt;User\u0026gt; _users = \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e Add(User user)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        _users.Add(user);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e User? GetUserByEmail(\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e email)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e _users.SingleOrDefault(u =\u0026gt; u.Email.Equals(email));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e實作完需要透過 DependencyInjection 注入到我們的 Service Container 內。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eDependencyInjection\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e IServiceCollection AddInfrastructure(\u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e IServiceCollection services, ConfigurationManager configuration)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        services.Configure\u0026lt;JwtSettings\u0026gt;(configuration.GetSection(JwtSettings.SectionName));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        services.AddSingleton\u0026lt;IJwtTokenGenerator, JwtTokenGenerator\u0026gt;();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        services.AddSingleton\u0026lt;IDateTimeProvider, DateTimeProvider\u0026gt;();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        services.AddSingleton\u0026lt;IUserRepository, UserRepository\u0026gt;();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e services;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e至此，我們已經完成了一個簡單的身份認證的 API。\u003c/li\u003e\n\u003c/ul\u003e","title":"[IT] 使用 Clean Architecture + DDD 建置 Restful API"},{"content":"建構模型 Dense(units, activation) units 為 output_size，keras 已經處理好自動計算 input_size 的部分。 activation function relu: Rectified Linear Unit, ReLU softmax: 對陣列中所有元素做自然對數取值後，在做 normalize，目的是放大最大權重的元素，並且將所有值換成 0~1 的值，意義類似機率。 model.keras.Sequential([ Dense(32, activation=\u0026#34;relu\u0026#34;), Dense(64, activation=\u0026#34;relu\u0026#34;), Dense(32, activation=\u0026#34;relu\u0026#34;), Dense(10, activation=\u0026#34;softmax\u0026#34;), ]) 編譯 損失函數(目標函數) loss function CategoricalCrossentropy SparseCategoricalCrossentropy BinaryCrossentropy MeanSquareError KLDivergence CosineSimilarity \u0026hellip; 優化器 optimizer SGD (可搭配 momemtum) RMSprop Adam Adagrad \u0026hellip; 評量指標 metrics CategoricalAccuracy SparseCategoricalAccuracy BinaryAccuracy AUC Precision Recall \u0026hellip; 以下範例兩種型式都可以。其中物件的用法可以使用客製化的條件。\nmodel.compile(optimizer=\u0026#34;rmsprop\u0026#34;, loss=\u0026#34;mean_square_error\u0026#34;, metics=[\u0026#34;accuracy\u0026#34;]) model.compile(optimizer=keras.optimizers.RMSprop(learning_rate=1e-4), loss=keras.meanSquaredError(), metrics=[keras.metrics.BinaryAccuracy]) 洗牌 收集完資料之後，我們目的並非只在訓練資料上取得良好的模型，而是要取得在大部分狀況下都表現良好的模型。 故我們需要將收集完的資料分成訓練集與驗證集。 以下透過 np.random.permutation() ，與 slice 來對資料做抽樣。 indices_permutation = np.random.permutation(len(data)) shuffled_inputs = data[indices_permutation] shuffled_targets = labels[indices_permutation] num_validation_samples = int(0.3 * len(data)) val_inputs = shuffled_inputs[:num_validation_samples] val_targets = shuffled_targets[:num_validation_samples] training_inputs = shuffled_inputs[num_validation_samples:] training_targets = shuffled_targets[num_validation_samples:] model.fit( training_inputs, training_targets, epochs=5, batch_size=16, validation_data=(val_inputs, val_targets) ) ","permalink":"https://intervalrain.github.io/ml/optimizer/","summary":"\u003ch3 id=\"建構模型\"\u003e建構模型\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eDense(units, activation)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eunits 為 output_size，keras 已經處理好自動計算 input_size 的部分。\u003c/li\u003e\n\u003cli\u003eactivation function\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erelu\u003c/code\u003e: Rectified Linear Unit, ReLU\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esoftmax\u003c/code\u003e: 對陣列中所有元素做自然對數取值後，在做 normalize，目的是放大最大權重的元素，並且將所有值換成 0~1 的值，意義類似機率。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003emodel.keras.Sequential([\n    Dense(32, activation=\u0026#34;relu\u0026#34;),\n    Dense(64, activation=\u0026#34;relu\u0026#34;),\n    Dense(32, activation=\u0026#34;relu\u0026#34;),\n    Dense(10, activation=\u0026#34;softmax\u0026#34;),\n])\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"編譯\"\u003e編譯\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e損失函數(目標函數) loss function\n\u003cul\u003e\n\u003cli\u003eCategoricalCrossentropy\u003c/li\u003e\n\u003cli\u003eSparseCategoricalCrossentropy\u003c/li\u003e\n\u003cli\u003eBinaryCrossentropy\u003c/li\u003e\n\u003cli\u003eMeanSquareError\u003c/li\u003e\n\u003cli\u003eKLDivergence\u003c/li\u003e\n\u003cli\u003eCosineSimilarity\u003c/li\u003e\n\u003cli\u003e\u0026hellip;\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e優化器 optimizer\n\u003cul\u003e\n\u003cli\u003eSGD (可搭配 momemtum)\u003c/li\u003e\n\u003cli\u003eRMSprop\u003c/li\u003e\n\u003cli\u003eAdam\u003c/li\u003e\n\u003cli\u003eAdagrad\u003c/li\u003e\n\u003cli\u003e\u0026hellip;\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e評量指標 metrics\n\u003cul\u003e\n\u003cli\u003eCategoricalAccuracy\u003c/li\u003e\n\u003cli\u003eSparseCategoricalAccuracy\u003c/li\u003e\n\u003cli\u003eBinaryAccuracy\u003c/li\u003e\n\u003cli\u003eAUC\u003c/li\u003e\n\u003cli\u003ePrecision\u003c/li\u003e\n\u003cli\u003eRecall\u003c/li\u003e\n\u003cli\u003e\u0026hellip;\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e以下範例兩種型式都可以。其中物件的用法可以使用客製化的條件。\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003emodel.compile(optimizer=\u0026#34;rmsprop\u0026#34;,\n              loss=\u0026#34;mean_square_error\u0026#34;,\n              metics=[\u0026#34;accuracy\u0026#34;])\n\nmodel.compile(optimizer=keras.optimizers.RMSprop(learning_rate=1e-4),\n              loss=keras.meanSquaredError(),\n              metrics=[keras.metrics.BinaryAccuracy])\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"洗牌\"\u003e洗牌\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e收集完資料之後，我們目的並非只在\u003cstrong\u003e訓練資料\u003c/strong\u003e上取得良好的模型，而是要取得在\u003cstrong\u003e大部分狀況下\u003c/strong\u003e都表現良好的模型。\u003c/li\u003e\n\u003cli\u003e故我們需要將收集完的資料分成\u003cstrong\u003e訓練集\u003c/strong\u003e與\u003cstrong\u003e驗證集\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e以下透過 \u003ccode\u003enp.random.permutation()\u003c/code\u003e ，與 \u003ccode\u003eslice\u003c/code\u003e 來對資料做抽樣。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eindices_permutation = np.random.permutation(len(data))\nshuffled_inputs = data[indices_permutation]\nshuffled_targets = labels[indices_permutation]\n\nnum_validation_samples = int(0.3 * len(data))\nval_inputs = shuffled_inputs[:num_validation_samples]\nval_targets = shuffled_targets[:num_validation_samples]\ntraining_inputs = shuffled_inputs[num_validation_samples:]\ntraining_targets = shuffled_targets[num_validation_samples:]\n\nmodel.fit(\n    training_inputs,\n    training_targets,\n    epochs=5,\n    batch_size=16,\n    validation_data=(val_inputs, val_targets)\n)\n\u003c/code\u003e\u003c/pre\u003e","title":"[ML] 選擇 loss function/ optimizer/ metrics"},{"content":".NET Maui .NET Maui 是一個跨平台的桌面與手機應用開發框架，它支援 iOS、Android、macOS、Windows。 不同於 Xamarin，.NET Maui 只需要一個專案便可以導向不同的平台。 架構 一個 .NET Maui 專案底下，預設會有幾個資料夾與檔案，其關係如下圖： /Platforms 底下的各個資料夾為不同平台的入口，不同的平台各有一個 Program.cs。 各個 Program.cs 內又會透過注入該 namespace 底下的 AppDelegate ，將入口指向 MauiProgram 的 CreateMauiApp()，就此將不同平台路由到 MauiProgram.cs 這個統一的入口。 public class Program { static void Main(string[] args) { UIApplication.Main(args, null, typeof(AppDelegate)); } } [Register(\u0026#34;AppDelegate\u0026#34;)] public class AppDelegate : MauiUIApplicationDelegate { protected override MauiApp CreateMauiApp() =\u0026gt; MauiProgram.CreateMauiApp(); } 關係如下圖： graph TD; iOS--\u003eMauiProgram.cs; Android--\u003eMauiProgram.cs; Windows--\u003eMauiProgram.cs; macOS--\u003eMauiProgram.cs; MauiProgram.cs--\u003eApp; App--\u003eAppShell; AppShell-.-\u003ePage1; AppShell-.-\u003ePage2; AppShell-.-\u003ePage3; AppShell-.-\u003ePage4; public static class MauiProgram { public static MauiApp CreateMauiApp() { var builder = MauiApp.CreateBuilder(); builder .UseMauiApp\u0026lt;App\u0026gt;() .ConfigureFonts(fonts =\u0026gt; { fonts.AddFont(\u0026#34;OpenSans-Regular.ttf\u0026#34;, \u0026#34;OpenSansRegular\u0026#34;); fonts.AddFont(\u0026#34;OpenSans-Semibold.ttf\u0026#34;, \u0026#34;OpenSansSemibold\u0026#34;); }); return builder.Build(); } } public partial class App : Application { public App() { InitializeComponent(); MainPage = new AppShell(); } } 從上面兩段程式 MauiProgram.cs 與 App.xaml.cs 可以看出，這個統一的進入點會開啟 App，並將 AppShell 作為 MainPage 開放。 Router 在此可以發現 AppShell 作為一個 Controller 的功能，用來引導頁面的路由。 我們可以透過 RegisterRoute 來注冊要顯示的頁面。 public partial class AppShell : Shell { public AppShell() { InitializeComponent(); Routing.RegisterRoute(nameof(Page1), typeof(Page1)); Routing.RegisterRoute(nameof(Page2), typeof(Page2)); Routing.RegisterRoute(nameof(Page3), typeof(Page3)); } } xaml 上述的頁面可以透過新增 xaml 檔來建立： 以下為一個 xaml 檔的 sample x:class=\u0026quot;MoneyTrack.AppShell\u0026quot; 表示該檔案的路徑為 MoneyTrack.AppShell mlns 關鍵字很像是 using： xmlns:views=\u0026quot;clr-namespace:MoneyTrack.Views\u0026quot;: 代表將 MoneyTrack.Views 這個路徑命名成 views。 ShellContent 內代表是首頁要導引至的頁面，如下例會導向 view:MoneyTackPage \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; ?\u0026gt; \u0026lt;Shell x:Class=\u0026#34;MoneyTrack.AppShell\u0026#34; xmlns=\u0026#34;http://schemas.microsoft.com/dotnet/2021/maui\u0026#34; xmlns:x=\u0026#34;http://schemas.microsoft.com/winfx/2009/xaml\u0026#34; xmlns:local=\u0026#34;clr-namespace:MoneyTrack\u0026#34; xmlns:views=\u0026#34;clr-namespace:MoneyTrack.Views\u0026#34; Shell.FlyoutBehavior=\u0026#34;Disabled\u0026#34; Title=\u0026#34;MoneyTrack\u0026#34;\u0026gt; \u0026lt;ShellContent Title=\u0026#34;Home\u0026#34; ContentTemplate=\u0026#34;{DataTemplate views:MoneyTackPage}\u0026#34; Route=\u0026#34;MoneyTackPage\u0026#34; /\u0026gt; \u0026lt;/Shell\u0026gt; \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34; ?\u0026gt; \u0026lt;ContentPage xmlns=\u0026#34;http://schemas.microsoft.com/dotnet/2021/maui\u0026#34; xmlns:x=\u0026#34;http://schemas.microsoft.com/winfx/2009/xaml\u0026#34; x:Class=\u0026#34;MoneyTrack.Views.ContactsPage\u0026#34; Title=\u0026#34;Contacts\u0026#34;\u0026gt; \u0026lt;VerticalStackLayout Spacing=\u0026#34;5\u0026#34;\u0026gt; \u0026lt;Label Text=\u0026#34;Welcome to .NET MAUI!\u0026#34; VerticalOptions=\u0026#34;Center\u0026#34; HorizontalOptions=\u0026#34;Center\u0026#34; /\u0026gt; \u0026lt;Button x:Name=\u0026#34;btn1\u0026#34; Clicked=\u0026#34;btn1_Clicked\u0026#34; Text=\u0026#34;click1\u0026#34;\u0026gt;\u0026lt;/Button\u0026gt; \u0026lt;Button x:Name=\u0026#34;btn2\u0026#34; Clicked=\u0026#34;btn2_Clicked\u0026#34; Text=\u0026#34;click2\u0026#34;\u0026gt;\u0026lt;/Button\u0026gt; \u0026lt;/VerticalStackLayout\u0026gt; \u0026lt;/ContentPage\u0026gt; Shell 接著我們可以透過 Shell 來控制面版上要顯示的頁面： public void btnPage1_Clicked() { Shell.Current.GoToAsync(nameof(Page1)); } GoToAsync Shell 本身是一個 View，也是一個 Layout GoToAsync 可以用來切換頁面 void btnPage1_Clicked(object sender, EvertArgs e) { Shell.Current.GoToAsync($\u0026#34;{nameof(Page1)}\u0026#34;); // 前往 Page1 } void btnCancel_Clicked(object sender, EvertArgs e) { Shell.Current.GoToAsync($\u0026#34;//{nameof(MainPage)}\u0026#34;); // 回到 MainPage } void btnCancel_Clicked(object sender, EvertArgs e) { Shell.Current.GoToAsync($\u0026#34;..\u0026#34;); // 回到上一頁 } QueryProperty 透過 QueryPropertyAttribute 可以達到如 http method 裡的 get 的方法。 以下範例等同於實現 page1?Id=1，在路由到 page1 的同時，將 property: Id 賦值。 [QueryProperty(nameof(PageId), \u0026#34;Id\u0026#34;)] public partial class Page1 : ContentPage { public EditContactPage() { InitializeComponent(); } public string ContactId { set { lblName.Text = Id; } } } ","permalink":"https://intervalrain.github.io/it/maui/","summary":"\u003ch1 id=\"net-maui\"\u003e.NET Maui\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e.NET Maui 是一個跨平台的桌面與手機應用開發框架，它支援 iOS、Android、macOS、Windows。\u003c/li\u003e\n\u003cli\u003e不同於 Xamarin，.NET Maui 只需要一個專案便可以導向不同的平台。\n\u003cimg src=\"/IT/img/maui.jpg\" width=\"300\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"架構\"\u003e架構\u003c/h2\u003e\n\u003cimg src=\"/IT/img/maui_hierarchy.jpg\" width=\"300\"\u003e\n\u003cul\u003e\n\u003cli\u003e一個 .NET Maui 專案底下，預設會有幾個資料夾與檔案，其關係如下圖：\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e/Platforms\u003c/code\u003e 底下的各個資料夾為不同平台的入口，不同的平台各有一個 \u003ccode\u003eProgram.cs\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e各個 \u003ccode\u003eProgram.cs\u003c/code\u003e 內又會透過注入該 namespace 底下的 \u003ccode\u003eAppDelegate\u003c/code\u003e ，將入口指向 \u003ccode\u003eMauiProgram\u003c/code\u003e 的 \u003ccode\u003eCreateMauiApp()\u003c/code\u003e，就此將不同平台路由到 \u003ccode\u003eMauiProgram.cs\u003c/code\u003e 這個統一的入口。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Csharp\" data-lang=\"Csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eProgram\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e Main(\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e[] args)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        UIApplication.Main(args, \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003etypeof\u003c/span\u003e(AppDelegate));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e[Register(\u0026#34;AppDelegate\u0026#34;)]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eAppDelegate\u003c/span\u003e : MauiUIApplicationDelegate\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprotected\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eoverride\u003c/span\u003e MauiApp CreateMauiApp() =\u0026gt; MauiProgram.CreateMauiApp();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e關係如下圖：\n\u003cdiv class=\"mermaid\"\u003e\n    \ngraph TD;\n  iOS--\u003eMauiProgram.cs;\n  Android--\u003eMauiProgram.cs;\n  Windows--\u003eMauiProgram.cs;\n  macOS--\u003eMauiProgram.cs;\n  MauiProgram.cs--\u003eApp;\n  App--\u003eAppShell;\n  AppShell-.-\u003ePage1;\n  AppShell-.-\u003ePage2;\n  AppShell-.-\u003ePage3;\n  AppShell-.-\u003ePage4;\n\n\u003c/div\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Csharp\" data-lang=\"Csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMauiProgram\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e MauiApp CreateMauiApp()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e builder = MauiApp.CreateBuilder();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        builder\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            .UseMauiApp\u0026lt;App\u0026gt;()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            .ConfigureFonts(fonts =\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                fonts.AddFont(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;OpenSans-Regular.ttf\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;OpenSansRegular\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\tfonts.AddFont(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;OpenSans-Semibold.ttf\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;OpenSansSemibold\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            });\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e builder.Build();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003epartial\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eApp\u003c/span\u003e : Application\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e App()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        InitializeComponent();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        MainPage = \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e AppShell();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e從上面兩段程式 \u003ccode\u003eMauiProgram.cs\u003c/code\u003e 與 \u003ccode\u003eApp.xaml.cs\u003c/code\u003e 可以看出，這個統一的進入點會開啟 App，並將 \u003ccode\u003eAppShell\u003c/code\u003e 作為 MainPage 開放。\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"router\"\u003eRouter\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e在此可以發現 \u003ccode\u003eAppShell\u003c/code\u003e 作為一個 Controller 的功能，用來引導頁面的路由。\u003c/li\u003e\n\u003cli\u003e我們可以透過 \u003ccode\u003eRegisterRoute\u003c/code\u003e 來注冊要顯示的頁面。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Csharp\" data-lang=\"Csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003epartial\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eAppShell\u003c/span\u003e : Shell\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e AppShell()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        InitializeComponent();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Routing.RegisterRoute(nameof(Page1), \u003cspan style=\"color:#66d9ef\"\u003etypeof\u003c/span\u003e(Page1));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Routing.RegisterRoute(nameof(Page2), \u003cspan style=\"color:#66d9ef\"\u003etypeof\u003c/span\u003e(Page2));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Routing.RegisterRoute(nameof(Page3), \u003cspan style=\"color:#66d9ef\"\u003etypeof\u003c/span\u003e(Page3));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch2 id=\"xaml\"\u003examl\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e上述的頁面可以透過新增 \u003ccode\u003examl\u003c/code\u003e 檔來建立：\u003c/li\u003e\n\u003cli\u003e以下為一個 \u003ccode\u003examl\u003c/code\u003e 檔的 sample\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ex:class=\u0026quot;MoneyTrack.AppShell\u0026quot;\u003c/code\u003e 表示該檔案的路徑為 \u003ccode\u003eMoneyTrack.AppShell\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emlns\u003c/code\u003e 關鍵字很像是 \u003ccode\u003eusing\u003c/code\u003e：\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003exmlns:views=\u0026quot;clr-namespace:MoneyTrack.Views\u0026quot;\u003c/code\u003e: 代表將 \u003ccode\u003eMoneyTrack.Views\u003c/code\u003e 這個路徑命名成 \u003ccode\u003eviews\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eShellContent 內代表是首頁要導引至的頁面，如下例會導向 \u003ccode\u003eview:MoneyTackPage\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; ?\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003eShell\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003ex:Class\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;MoneyTrack.AppShell\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003exmlns\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;http://schemas.microsoft.com/dotnet/2021/maui\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003exmlns:x\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;http://schemas.microsoft.com/winfx/2009/xaml\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003exmlns:local\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;clr-namespace:MoneyTrack\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003exmlns:views\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;clr-namespace:MoneyTrack.Views\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eShell\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eFlyoutBehavior\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Disabled\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eTitle\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;MoneyTrack\u0026#34;\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;\u003cspan style=\"color:#f92672\"\u003eShellContent\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003eTitle\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Home\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003eContentTemplate\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;{DataTemplate views:MoneyTackPage}\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003eRoute\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;MoneyTackPage\u0026#34;\u003c/span\u003e /\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;/\u003cspan style=\"color:#f92672\"\u003eShell\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34; ?\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003eContentPage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003exmlns\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;http://schemas.microsoft.com/dotnet/2021/maui\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e             \u003cspan style=\"color:#a6e22e\"\u003exmlns:x\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;http://schemas.microsoft.com/winfx/2009/xaml\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e             \u003cspan style=\"color:#a6e22e\"\u003ex:Class\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;MoneyTrack.Views.ContactsPage\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e             \u003cspan style=\"color:#a6e22e\"\u003eTitle\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Contacts\u0026#34;\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;\u003cspan style=\"color:#f92672\"\u003eVerticalStackLayout\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSpacing\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;5\u0026#34;\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u0026lt;\u003cspan style=\"color:#f92672\"\u003eLabel\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eText\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Welcome to .NET MAUI!\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eVerticalOptions\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Center\u0026#34;\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eHorizontalOptions\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Center\u0026#34;\u003c/span\u003e /\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u0026lt;\u003cspan style=\"color:#f92672\"\u003eButton\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ex:Name\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;btn1\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eClicked\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;btn1_Clicked\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eText\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;click1\u0026#34;\u003c/span\u003e\u0026gt;\u0026lt;/\u003cspan style=\"color:#f92672\"\u003eButton\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u0026lt;\u003cspan style=\"color:#f92672\"\u003eButton\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ex:Name\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;btn2\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eClicked\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;btn2_Clicked\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eText\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;click2\u0026#34;\u003c/span\u003e\u0026gt;\u0026lt;/\u003cspan style=\"color:#f92672\"\u003eButton\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u0026lt;/\u003cspan style=\"color:#f92672\"\u003eVerticalStackLayout\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;/\u003cspan style=\"color:#f92672\"\u003eContentPage\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"shell\"\u003eShell\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e接著我們可以透過 \u003ccode\u003eShell\u003c/code\u003e 來控制面版上要顯示的頁面：\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Csharp\" data-lang=\"Csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e btnPage1_Clicked()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Shell.Current.GoToAsync(nameof(Page1));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"gotoasync\"\u003eGoToAsync\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eShell 本身是一個 View，也是一個 Layout\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eGoToAsync\u003c/code\u003e 可以用來切換頁面\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Csharp\" data-lang=\"Csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e btnPage1_Clicked(\u003cspan style=\"color:#66d9ef\"\u003eobject\u003c/span\u003e sender, EvertArgs e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Shell.Current.GoToAsync(\u003cspan style=\"color:#e6db74\"\u003e$\u0026#34;{nameof(Page1)}\u0026#34;\u003c/span\u003e);  \u003cspan style=\"color:#75715e\"\u003e// 前往 Page1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e btnCancel_Clicked(\u003cspan style=\"color:#66d9ef\"\u003eobject\u003c/span\u003e sender, EvertArgs e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Shell.Current.GoToAsync(\u003cspan style=\"color:#e6db74\"\u003e$\u0026#34;//{nameof(MainPage)}\u0026#34;\u003c/span\u003e);  \u003cspan style=\"color:#75715e\"\u003e// 回到 MainPage\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e btnCancel_Clicked(\u003cspan style=\"color:#66d9ef\"\u003eobject\u003c/span\u003e sender, EvertArgs e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Shell.Current.GoToAsync(\u003cspan style=\"color:#e6db74\"\u003e$\u0026#34;..\u0026#34;\u003c/span\u003e);  \u003cspan style=\"color:#75715e\"\u003e// 回到上一頁\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"queryproperty\"\u003eQueryProperty\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e透過 \u003ccode\u003eQueryPropertyAttribute\u003c/code\u003e 可以達到如 http method 裡的 get 的方法。\u003c/li\u003e\n\u003cli\u003e以下範例等同於實現 \u003ccode\u003epage1?Id=1\u003c/code\u003e，在路由到 page1 的同時，將 property: Id 賦值。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Csharp\" data-lang=\"Csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e[QueryProperty(nameof(PageId), \u0026#34;Id\u0026#34;)]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003epartial\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePage1\u003c/span\u003e : ContentPage\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e EditContactPage()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tInitializeComponent();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e ContactId\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eset\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            lblName.Text = Id;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"[IT] .NET Maui"},{"content":"Shortcodes 介紹 Shortcodes 是內容檔案中的一個簡單片段，Hugo將使用預先定義的範本對其進行呈現。 除了更乾淨的 Markdown 外，Shortcodes 還可以隨時更新新的技術或標準。 Notice shortcodes 將以下程式碼加入到 Hugo 專案底下的 layouts/shortcodes/notice.html {{/* Available notice types: warning, info, note, tip */}} {{- $noticeType := .Get 0 | default \u0026#34;note\u0026#34; -}} {{/* Workaround markdownify inconsistency for single/multiple paragraphs */}} {{- $raw := (markdownify .Inner | chomp) -}} {{- $block := findRE \u0026#34;(?is)^\u0026lt;(?:address|article|aside|blockquote|canvas|dd|div|dl|dt|fieldset|figcaption|figure|footer|form|h(?:1|2|3|4|5|6)|header|hgroup|hr|li|main|nav|noscript|ol|output|p|pre|section|table|tfoot|ul|video)\\\\b\u0026#34; $raw 1 -}} {{/* Count how many times we\u0026#39;ve called this shortcode and load the css if it\u0026#39;s the first time */}} {{- if not ($.Page.Scratch.Get \u0026#34;noticecount\u0026#34;) -}} \u0026lt;style type=\u0026#34;text/css\u0026#34;\u0026gt;.notice{--root-color:#444;--root-background:#eff;--title-color:#fff;--title-background:#7bd;--warning-title:#c33;--warning-content:#fee;--info-title:#fb7;--info-content:#fec;--note-title:#6be;--note-content:#e7f2fa;--tip-title:#5a5;--tip-content:#efe}@media (prefers-color-scheme:dark){.notice{--root-color:#ddd;--root-background:#eff;--title-color:#fff;--title-background:#7bd;--warning-title:#800;--warning-content:#400;--info-title:#a50;--info-content:#420;--note-title:#069;--note-content:#023;--tip-title:#363;--tip-content:#121}}body.dark .notice{--root-color:#ddd;--root-background:#eff;--title-color:#fff;--title-background:#7bd;--warning-title:#800;--warning-content:#400;--info-title:#a50;--info-content:#420;--note-title:#069;--note-content:#023;--tip-title:#363;--tip-content:#121}.notice{padding:18px;line-height:24px;margin-bottom:24px;border-radius:4px;color:var(--root-color);background:var(--root-background)}.notice p:last-child{margin-bottom:0}.notice-title{margin:-18px -18px 12px;padding:4px 18px;border-radius:4px 4px 0 0;font-weight:700;color:var(--title-color);background:var(--title-background)}.notice.warning .notice-title{background:var(--warning-title)}.notice.warning{background:var(--warning-content)}.notice.info .notice-title{background:var(--info-title)}.notice.info{background:var(--info-content)}.notice.note .notice-title{background:var(--note-title)}.notice.note{background:var(--note-content)}.notice.tip .notice-title{background:var(--tip-title)}.notice.tip{background:var(--tip-content)}.icon-notice{display:inline-flex;align-self:center;margin-right:8px}.icon-notice img,.icon-notice svg{height:1em;width:1em;fill:currentColor}.icon-notice img,.icon-notice.baseline svg{top:.125em;position:relative}\u0026lt;/style\u0026gt; \u0026lt;div\u0026gt;\u0026lt;svg width=\u0026#34;0\u0026#34; height=\u0026#34;0\u0026#34; display=\u0026#34;none\u0026#34; xmlns=\u0026#34;http://www.w3.org/2000/svg\u0026#34;\u0026gt;\u0026lt;symbol id=\u0026#34;tip-notice\u0026#34; viewBox=\u0026#34;0 0 512 512\u0026#34; preserveAspectRatio=\u0026#34;xMidYMid meet\u0026#34;\u0026gt;\u0026lt;path d=\u0026#34;M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z\u0026#34;/\u0026gt;\u0026lt;/symbol\u0026gt;\u0026lt;symbol id=\u0026#34;note-notice\u0026#34; viewBox=\u0026#34;0 0 512 512\u0026#34; preserveAspectRatio=\u0026#34;xMidYMid meet\u0026#34;\u0026gt;\u0026lt;path d=\u0026#34;M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z\u0026#34;/\u0026gt;\u0026lt;/symbol\u0026gt;\u0026lt;symbol id=\u0026#34;warning-notice\u0026#34; viewBox=\u0026#34;0 0 576 512\u0026#34; preserveAspectRatio=\u0026#34;xMidYMid meet\u0026#34;\u0026gt;\u0026lt;path d=\u0026#34;M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z\u0026#34;/\u0026gt;\u0026lt;/symbol\u0026gt;\u0026lt;symbol id=\u0026#34;info-notice\u0026#34; viewBox=\u0026#34;0 0 512 512\u0026#34; preserveAspectRatio=\u0026#34;xMidYMid meet\u0026#34;\u0026gt;\u0026lt;path d=\u0026#34;M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z\u0026#34;/\u0026gt;\u0026lt;/symbol\u0026gt;\u0026lt;/svg\u0026gt;\u0026lt;/div\u0026gt; {{- end -}} {{- $.Page.Scratch.Add \u0026#34;noticecount\u0026#34; 1 -}} \u0026lt;div class=\u0026#34;notice {{ $noticeType }}\u0026#34; {{ if len .Params | eq 2 }} id=\u0026#34;{{ .Get 1 }}\u0026#34; {{ end }}\u0026gt; \u0026lt;p class=\u0026#34;first notice-title\u0026#34;\u0026gt;\u0026lt;span class=\u0026#34;icon-notice baseline\u0026#34;\u0026gt;\u0026lt;svg\u0026gt;\u0026lt;use href=\u0026#34;#{{- $noticeType -}}-notice\u0026#34;\u0026gt;\u0026lt;/use\u0026gt;\u0026lt;/svg\u0026gt;\u0026lt;/span\u0026gt;{{- i18n $noticeType -}}\u0026lt;/p\u0026gt; {{- if or $block (not $raw) }}{{ $raw }}{{ else }}\u0026lt;p\u0026gt;{{ $raw }}\u0026lt;/p\u0026gt;{{ end -}} \u0026lt;/div\u0026gt; Classes 警告 {{\u0026lt; notice warning \u0026gt;}} 這是警告(warning) {{\u0026lt; /notice \u0026gt;}} 這是警告(warning)\n引言 {{\u0026lt; notice info \u0026gt;}} 這是引言(info) {{\u0026lt; /notice \u0026gt;}} 這是引言(info)\n提示 {{\u0026lt; notice tip \u0026gt;}} 這是提示(tip) {{\u0026lt; /notice \u0026gt;}} 這是提示(tip)\n筆記 {{\u0026lt; notice note \u0026gt;}} 這是筆記(note) {{\u0026lt; /notice \u0026gt;}} 這是筆記(note)\n","permalink":"https://intervalrain.github.io/hugo/notice/","summary":"\u003ch2 id=\"shortcodes-介紹\"\u003eShortcodes 介紹\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eShortcodes 是內容檔案中的一個簡單片段，Hugo將使用預先定義的範本對其進行呈現。\u003c/li\u003e\n\u003cli\u003e除了更乾淨的 Markdown 外，Shortcodes 還可以隨時更新新的技術或標準。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"notice-shortcodes\"\u003eNotice shortcodes\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e將以下程式碼加入到 Hugo 專案底下的 \u003ccode\u003elayouts/shortcodes/notice.html\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{{/* Available notice types: warning, info, note, tip */}}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{{- $noticeType := .Get 0 | default \u0026#34;note\u0026#34; -}}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{{/* Workaround markdownify inconsistency for single/multiple paragraphs */}}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{{- $raw := (markdownify .Inner | chomp) -}}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{{- $block := findRE \u0026#34;(?is)^\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u0026lt;\u003c/span\u003e(?:address|article|aside|blockquote|canvas|dd|div|dl|dt|fieldset|figcaption|figure|footer|form|h(?:1|2|3|4|5|6)|header|hgroup|hr|li|main|nav|noscript|ol|output|p|pre|section|table|tfoot|ul|video)\\\\b\u0026#34; $raw 1 -}}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{{/* Count how many times we\u0026#39;ve called this shortcode and load the css if it\u0026#39;s the first time */}}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{{- if not ($.Page.Scratch.Get \u0026#34;noticecount\u0026#34;) -}}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003estyle\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;text/css\u0026#34;\u003c/span\u003e\u0026gt;.\u003cspan style=\"color:#a6e22e\"\u003enotice\u003c/span\u003e{--root-color:\u003cspan style=\"color:#ae81ff\"\u003e#444\u003c/span\u003e;--root-background:\u003cspan style=\"color:#ae81ff\"\u003e#eff\u003c/span\u003e;--title-color:\u003cspan style=\"color:#ae81ff\"\u003e#fff\u003c/span\u003e;--title-background:\u003cspan style=\"color:#ae81ff\"\u003e#7bd\u003c/span\u003e;--warning-title:\u003cspan style=\"color:#ae81ff\"\u003e#c33\u003c/span\u003e;--warning-content:\u003cspan style=\"color:#ae81ff\"\u003e#fee\u003c/span\u003e;--info-title:\u003cspan style=\"color:#ae81ff\"\u003e#fb7\u003c/span\u003e;--info-content:\u003cspan style=\"color:#ae81ff\"\u003e#fec\u003c/span\u003e;--note-title:\u003cspan style=\"color:#ae81ff\"\u003e#6be\u003c/span\u003e;--note-content:\u003cspan style=\"color:#ae81ff\"\u003e#e7f2fa\u003c/span\u003e;--tip-title:\u003cspan style=\"color:#ae81ff\"\u003e#5a5\u003c/span\u003e;--tip-content:\u003cspan style=\"color:#ae81ff\"\u003e#efe\u003c/span\u003e}@\u003cspan style=\"color:#66d9ef\"\u003emedia\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003eprefers-color-scheme\u003c/span\u003e:\u003cspan style=\"color:#a6e22e\"\u003edark\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e{.\u003cspan style=\"color:#a6e22e\"\u003enotice\u003c/span\u003e{--root-color:\u003cspan style=\"color:#ae81ff\"\u003e#ddd\u003c/span\u003e;--root-background:\u003cspan style=\"color:#ae81ff\"\u003e#eff\u003c/span\u003e;--title-color:\u003cspan style=\"color:#ae81ff\"\u003e#fff\u003c/span\u003e;--title-background:\u003cspan style=\"color:#ae81ff\"\u003e#7bd\u003c/span\u003e;--warning-title:\u003cspan style=\"color:#ae81ff\"\u003e#800\u003c/span\u003e;--warning-content:\u003cspan style=\"color:#ae81ff\"\u003e#400\u003c/span\u003e;--info-title:\u003cspan style=\"color:#ae81ff\"\u003e#a50\u003c/span\u003e;--info-content:\u003cspan style=\"color:#ae81ff\"\u003e#420\u003c/span\u003e;--note-title:\u003cspan style=\"color:#ae81ff\"\u003e#069\u003c/span\u003e;--note-content:\u003cspan style=\"color:#ae81ff\"\u003e#023\u003c/span\u003e;--tip-title:\u003cspan style=\"color:#ae81ff\"\u003e#363\u003c/span\u003e;--tip-content:\u003cspan style=\"color:#ae81ff\"\u003e#121\u003c/span\u003e}}\u003cspan style=\"color:#f92672\"\u003ebody\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003edark\u003c/span\u003e .\u003cspan style=\"color:#a6e22e\"\u003enotice\u003c/span\u003e{--root-color:\u003cspan style=\"color:#ae81ff\"\u003e#ddd\u003c/span\u003e;--root-background:\u003cspan style=\"color:#ae81ff\"\u003e#eff\u003c/span\u003e;--title-color:\u003cspan style=\"color:#ae81ff\"\u003e#fff\u003c/span\u003e;--title-background:\u003cspan style=\"color:#ae81ff\"\u003e#7bd\u003c/span\u003e;--warning-title:\u003cspan style=\"color:#ae81ff\"\u003e#800\u003c/span\u003e;--warning-content:\u003cspan style=\"color:#ae81ff\"\u003e#400\u003c/span\u003e;--info-title:\u003cspan style=\"color:#ae81ff\"\u003e#a50\u003c/span\u003e;--info-content:\u003cspan style=\"color:#ae81ff\"\u003e#420\u003c/span\u003e;--note-title:\u003cspan style=\"color:#ae81ff\"\u003e#069\u003c/span\u003e;--note-content:\u003cspan style=\"color:#ae81ff\"\u003e#023\u003c/span\u003e;--tip-title:\u003cspan style=\"color:#ae81ff\"\u003e#363\u003c/span\u003e;--tip-content:\u003cspan style=\"color:#ae81ff\"\u003e#121\u003c/span\u003e}.\u003cspan style=\"color:#a6e22e\"\u003enotice\u003c/span\u003e{\u003cspan style=\"color:#66d9ef\"\u003epadding\u003c/span\u003e:\u003cspan style=\"color:#ae81ff\"\u003e18\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003epx\u003c/span\u003e;\u003cspan style=\"color:#66d9ef\"\u003eline-height\u003c/span\u003e:\u003cspan style=\"color:#ae81ff\"\u003e24\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003epx\u003c/span\u003e;\u003cspan style=\"color:#66d9ef\"\u003emargin-bottom\u003c/span\u003e:\u003cspan style=\"color:#ae81ff\"\u003e24\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003epx\u003c/span\u003e;\u003cspan style=\"color:#66d9ef\"\u003eborder-radius\u003c/span\u003e:\u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003epx\u003c/span\u003e;\u003cspan style=\"color:#66d9ef\"\u003ecolor\u003c/span\u003e:\u003cspan style=\"color:#a6e22e\"\u003evar\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003eroot\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003ecolor\u003c/span\u003e);\u003cspan style=\"color:#66d9ef\"\u003ebackground\u003c/span\u003e:\u003cspan style=\"color:#a6e22e\"\u003evar\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003eroot\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003ebackground)}.\u003cspan style=\"color:#a6e22e\"\u003enotice\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003ep\u003c/span\u003e:\u003cspan style=\"color:#a6e22e\"\u003elast-child\u003c/span\u003e{\u003cspan style=\"color:#66d9ef\"\u003emargin-bottom\u003c/span\u003e:\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e}.\u003cspan style=\"color:#a6e22e\"\u003enotice-title\u003c/span\u003e{\u003cspan style=\"color:#66d9ef\"\u003emargin\u003c/span\u003e:\u003cspan style=\"color:#ae81ff\"\u003e-18\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003epx\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e-18\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003epx\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e12\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003epx\u003c/span\u003e;\u003cspan style=\"color:#66d9ef\"\u003epadding\u003c/span\u003e:\u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003epx\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e18\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003epx\u003c/span\u003e;\u003cspan style=\"color:#66d9ef\"\u003eborder-radius\u003c/span\u003e:\u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003epx\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003epx\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\u003cspan style=\"color:#66d9ef\"\u003efont-weight\u003c/span\u003e:\u003cspan style=\"color:#ae81ff\"\u003e700\u003c/span\u003e;\u003cspan style=\"color:#66d9ef\"\u003ecolor\u003c/span\u003e:\u003cspan style=\"color:#a6e22e\"\u003evar\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003etitle\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003ecolor\u003c/span\u003e);\u003cspan style=\"color:#66d9ef\"\u003ebackground\u003c/span\u003e:\u003cspan style=\"color:#a6e22e\"\u003evar\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003etitle\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003ebackground)}.\u003cspan style=\"color:#a6e22e\"\u003enotice\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ewarning\u003c/span\u003e .\u003cspan style=\"color:#a6e22e\"\u003enotice-title\u003c/span\u003e{\u003cspan style=\"color:#66d9ef\"\u003ebackground\u003c/span\u003e:\u003cspan style=\"color:#a6e22e\"\u003evar\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003ewarning\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003etitle)}.\u003cspan style=\"color:#a6e22e\"\u003enotice\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ewarning\u003c/span\u003e{\u003cspan style=\"color:#66d9ef\"\u003ebackground\u003c/span\u003e:\u003cspan style=\"color:#a6e22e\"\u003evar\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003ewarning\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003econtent)}.\u003cspan style=\"color:#a6e22e\"\u003enotice\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003einfo\u003c/span\u003e .\u003cspan style=\"color:#a6e22e\"\u003enotice-title\u003c/span\u003e{\u003cspan style=\"color:#66d9ef\"\u003ebackground\u003c/span\u003e:\u003cspan style=\"color:#a6e22e\"\u003evar\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003einfo\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003etitle)}.\u003cspan style=\"color:#a6e22e\"\u003enotice\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003einfo\u003c/span\u003e{\u003cspan style=\"color:#66d9ef\"\u003ebackground\u003c/span\u003e:\u003cspan style=\"color:#a6e22e\"\u003evar\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003einfo\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003econtent)}.\u003cspan style=\"color:#a6e22e\"\u003enotice\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003enote\u003c/span\u003e .\u003cspan style=\"color:#a6e22e\"\u003enotice-title\u003c/span\u003e{\u003cspan style=\"color:#66d9ef\"\u003ebackground\u003c/span\u003e:\u003cspan style=\"color:#a6e22e\"\u003evar\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003enote\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003etitle)}.\u003cspan style=\"color:#a6e22e\"\u003enotice\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003enote\u003c/span\u003e{\u003cspan style=\"color:#66d9ef\"\u003ebackground\u003c/span\u003e:\u003cspan style=\"color:#a6e22e\"\u003evar\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003enote\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003econtent)}.\u003cspan style=\"color:#a6e22e\"\u003enotice\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003etip\u003c/span\u003e .\u003cspan style=\"color:#a6e22e\"\u003enotice-title\u003c/span\u003e{\u003cspan style=\"color:#66d9ef\"\u003ebackground\u003c/span\u003e:\u003cspan style=\"color:#a6e22e\"\u003evar\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003etip\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003etitle)}.\u003cspan style=\"color:#a6e22e\"\u003enotice\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003etip\u003c/span\u003e{\u003cspan style=\"color:#66d9ef\"\u003ebackground\u003c/span\u003e:\u003cspan style=\"color:#a6e22e\"\u003evar\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003etip\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003econtent)}.\u003cspan style=\"color:#a6e22e\"\u003eicon-notice\u003c/span\u003e{\u003cspan style=\"color:#66d9ef\"\u003edisplay\u003c/span\u003e:\u003cspan style=\"color:#66d9ef\"\u003einline-flex\u003c/span\u003e;\u003cspan style=\"color:#66d9ef\"\u003ealign-self\u003c/span\u003e:\u003cspan style=\"color:#66d9ef\"\u003ecenter\u003c/span\u003e;\u003cspan style=\"color:#66d9ef\"\u003emargin-right\u003c/span\u003e:\u003cspan style=\"color:#ae81ff\"\u003e8\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003epx\u003c/span\u003e}.\u003cspan style=\"color:#a6e22e\"\u003eicon-notice\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003eimg\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e,\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eicon-notice\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003esvg\u003c/span\u003e{\u003cspan style=\"color:#66d9ef\"\u003eheight\u003c/span\u003e:\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eem\u003c/span\u003e;\u003cspan style=\"color:#66d9ef\"\u003ewidth\u003c/span\u003e:\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eem\u003c/span\u003e;fill:\u003cspan style=\"color:#66d9ef\"\u003ecurrentColor\u003c/span\u003e}.\u003cspan style=\"color:#a6e22e\"\u003eicon-notice\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003eimg\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e,\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eicon-notice\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ebaseline\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003esvg\u003c/span\u003e{\u003cspan style=\"color:#66d9ef\"\u003etop\u003c/span\u003e:\u003cspan style=\"color:#ae81ff\"\u003e.125\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eem\u003c/span\u003e;\u003cspan style=\"color:#66d9ef\"\u003eposition\u003c/span\u003e:\u003cspan style=\"color:#66d9ef\"\u003erelative\u003c/span\u003e}\u0026lt;/\u003cspan style=\"color:#f92672\"\u003estyle\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e\u0026gt;\u0026lt;\u003cspan style=\"color:#f92672\"\u003esvg\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ewidth\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;0\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eheight\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;0\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edisplay\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;none\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003exmlns\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;http://www.w3.org/2000/svg\u0026#34;\u003c/span\u003e\u0026gt;\u0026lt;\u003cspan style=\"color:#f92672\"\u003esymbol\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;tip-notice\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eviewBox\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;0 0 512 512\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003epreserveAspectRatio\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;xMidYMid meet\u0026#34;\u003c/span\u003e\u0026gt;\u0026lt;\u003cspan style=\"color:#f92672\"\u003epath\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ed\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z\u0026#34;\u003c/span\u003e/\u0026gt;\u0026lt;/\u003cspan style=\"color:#f92672\"\u003esymbol\u003c/span\u003e\u0026gt;\u0026lt;\u003cspan style=\"color:#f92672\"\u003esymbol\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;note-notice\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eviewBox\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;0 0 512 512\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003epreserveAspectRatio\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;xMidYMid meet\u0026#34;\u003c/span\u003e\u0026gt;\u0026lt;\u003cspan style=\"color:#f92672\"\u003epath\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ed\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z\u0026#34;\u003c/span\u003e/\u0026gt;\u0026lt;/\u003cspan style=\"color:#f92672\"\u003esymbol\u003c/span\u003e\u0026gt;\u0026lt;\u003cspan style=\"color:#f92672\"\u003esymbol\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;warning-notice\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eviewBox\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;0 0 576 512\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003epreserveAspectRatio\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;xMidYMid meet\u0026#34;\u003c/span\u003e\u0026gt;\u0026lt;\u003cspan style=\"color:#f92672\"\u003epath\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ed\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z\u0026#34;\u003c/span\u003e/\u0026gt;\u0026lt;/\u003cspan style=\"color:#f92672\"\u003esymbol\u003c/span\u003e\u0026gt;\u0026lt;\u003cspan style=\"color:#f92672\"\u003esymbol\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;info-notice\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eviewBox\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;0 0 512 512\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003epreserveAspectRatio\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;xMidYMid meet\u0026#34;\u003c/span\u003e\u0026gt;\u0026lt;\u003cspan style=\"color:#f92672\"\u003epath\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ed\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z\u0026#34;\u003c/span\u003e/\u0026gt;\u0026lt;/\u003cspan style=\"color:#f92672\"\u003esymbol\u003c/span\u003e\u0026gt;\u0026lt;/\u003cspan style=\"color:#f92672\"\u003esvg\u003c/span\u003e\u0026gt;\u0026lt;/\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{{- end -}}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{{- $.Page.Scratch.Add \u0026#34;noticecount\u0026#34; 1 -}}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclass\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;notice {{ $noticeType }}\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e{{\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elen\u003c/span\u003e \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eParams\u003c/span\u003e \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e|\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eeq\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e2\u003c/span\u003e \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e}}\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;{{ .Get 1 }}\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e{{\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eend\u003c/span\u003e \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e}}\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003ep\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclass\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;first notice-title\u0026#34;\u003c/span\u003e\u0026gt;\u0026lt;\u003cspan style=\"color:#f92672\"\u003espan\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclass\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;icon-notice baseline\u0026#34;\u003c/span\u003e\u0026gt;\u0026lt;\u003cspan style=\"color:#f92672\"\u003esvg\u003c/span\u003e\u0026gt;\u0026lt;\u003cspan style=\"color:#f92672\"\u003euse\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehref\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;#{{- $noticeType -}}-notice\u0026#34;\u003c/span\u003e\u0026gt;\u0026lt;/\u003cspan style=\"color:#f92672\"\u003euse\u003c/span\u003e\u0026gt;\u0026lt;/\u003cspan style=\"color:#f92672\"\u003esvg\u003c/span\u003e\u0026gt;\u0026lt;/\u003cspan style=\"color:#f92672\"\u003espan\u003c/span\u003e\u0026gt;{{- i18n $noticeType -}}\u0026lt;/\u003cspan style=\"color:#f92672\"\u003ep\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{{- if or $block (not $raw) }}{{ $raw }}{{ else }}\u0026lt;\u003cspan style=\"color:#f92672\"\u003ep\u003c/span\u003e\u0026gt;{{ $raw }}\u0026lt;/\u003cspan style=\"color:#f92672\"\u003ep\u003c/span\u003e\u0026gt;{{ end -}}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;/\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"classes\"\u003eClasses\u003c/h2\u003e\n\u003ch3 id=\"警告\"\u003e警告\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-markdown\" data-lang=\"markdown\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{{\u0026lt; \u003cspan style=\"color:#f92672\"\u003enotice\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ewarning\u003c/span\u003e \u0026gt;}}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e這是警告(warning)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{{\u0026lt; /\u003cspan style=\"color:#f92672\"\u003enotice\u003c/span\u003e \u0026gt;}}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cstyle type=\"text/css\"\u003e.notice{--root-color:#444;--root-background:#eff;--title-color:#fff;--title-background:#7bd;--warning-title:#c33;--warning-content:#fee;--info-title:#fb7;--info-content:#fec;--note-title:#6be;--note-content:#e7f2fa;--tip-title:#5a5;--tip-content:#efe}@media (prefers-color-scheme:dark){.notice{--root-color:#ddd;--root-background:#eff;--title-color:#fff;--title-background:#7bd;--warning-title:#800;--warning-content:#400;--info-title:#a50;--info-content:#420;--note-title:#069;--note-content:#023;--tip-title:#363;--tip-content:#121}}body.dark .notice{--root-color:#ddd;--root-background:#eff;--title-color:#fff;--title-background:#7bd;--warning-title:#800;--warning-content:#400;--info-title:#a50;--info-content:#420;--note-title:#069;--note-content:#023;--tip-title:#363;--tip-content:#121}.notice{padding:18px;line-height:24px;margin-bottom:24px;border-radius:4px;color:var(--root-color);background:var(--root-background)}.notice p:last-child{margin-bottom:0}.notice-title{margin:-18px -18px 12px;padding:4px 18px;border-radius:4px 4px 0 0;font-weight:700;color:var(--title-color);background:var(--title-background)}.notice.warning .notice-title{background:var(--warning-title)}.notice.warning{background:var(--warning-content)}.notice.info .notice-title{background:var(--info-title)}.notice.info{background:var(--info-content)}.notice.note .notice-title{background:var(--note-title)}.notice.note{background:var(--note-content)}.notice.tip .notice-title{background:var(--tip-title)}.notice.tip{background:var(--tip-content)}.icon-notice{display:inline-flex;align-self:center;margin-right:8px}.icon-notice img,.icon-notice svg{height:1em;width:1em;fill:currentColor}.icon-notice img,.icon-notice.baseline svg{top:.125em;position:relative}\u003c/style\u003e\n\u003cdiv\u003e\u003csvg width=\"0\" height=\"0\" display=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003csymbol id=\"tip-notice\" viewBox=\"0 0 512 512\" preserveAspectRatio=\"xMidYMid meet\"\u003e\u003cpath d=\"M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z\"/\u003e\u003c/symbol\u003e\u003csymbol id=\"note-notice\" viewBox=\"0 0 512 512\" preserveAspectRatio=\"xMidYMid meet\"\u003e\u003cpath d=\"M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z\"/\u003e\u003c/symbol\u003e\u003csymbol id=\"warning-notice\" viewBox=\"0 0 576 512\" preserveAspectRatio=\"xMidYMid meet\"\u003e\u003cpath d=\"M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z\"/\u003e\u003c/symbol\u003e\u003csymbol id=\"info-notice\" viewBox=\"0 0 512 512\" preserveAspectRatio=\"xMidYMid meet\"\u003e\u003cpath d=\"M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z\"/\u003e\u003c/symbol\u003e\u003c/svg\u003e\u003c/div\u003e\u003cdiv class=\"notice warning\" \u003e\n\u003cp class=\"first notice-title\"\u003e\u003cspan class=\"icon-notice baseline\"\u003e\u003csvg\u003e\u003cuse href=\"#warning-notice\"\u003e\u003c/use\u003e\u003c/svg\u003e\u003c/span\u003e\u003c/p\u003e","title":"[Hugo] 使用 Hugo-notice"},{"content":"TL;DR CORS (Cross-Origin Resource Sharing)\n是一個支援安全跨源請求和資料傳輸的機制，用於在瀏覽器和伺服器之間進行跨源請求。\n這是一個 W3C 標準，可讓伺服器放寬相同原始來源原則。 不是安全性功能，CORS 會放寬安全性。 允許 CORS 並不會增強 API 的安全性。CORS 的運作方式 允許伺服器明確允許某些跨原始來源要求，同時拒絕其他要求。 比舊版技術 (例如：JSONP) 更安全且更有彈性。 何謂相同原始來源 如果兩個 URL 具有相同的配置、主機和連接埠，則其原始來源相同 (RFC 6454)。 這兩個 URL 具有相同的原始來源： https://example.com/foo.html https://example.com/bar.html 這些 URL 的原始來源與前兩個 URL 不同： https://example.net：不同的網域 https://www.example.com/foo.html：不同的子網域 http://example.com/foo.html：不同的配置 https://example.com:9000/foo.html：不同的連接埠 如何啟動 CORS 有三種方式可以啟用 CORS：\n在中介軟體中，使用具名原則或預設原則。 使用端點路由。 使用 [EnableCors] 屬性。 搭配具名原則使用 [EnableCors] 屬性能夠以最精細的程度來控制對於支援 CORS 之端點的限制。 必須以正確的順序呼叫 UseCors。例如，在使用 UseResponseCaching 時，必須先呼叫 UseCors，再呼叫 UseResponseCaching。\n具有具名原則和中介軟體的 CORS var MyAllowSpecificOrigins = \u0026#34;_myAllowSpecificOrigins\u0026#34;; var builder = WebApplication.CreateBuilder(args); builder.Services.AddCors(options =\u0026gt; { options.AddPolicy(name: MyAllowSpecificOrigins, policy =\u0026gt; { policy.WithOrigins(\u0026#34;http://example.com\u0026#34;, \u0026#34;http://www.contoso.com\u0026#34;); // policy.WithOrigins(\u0026#34;http://example.com\u0026#34;, \u0026#34;http://www.contoso.com\u0026#34;) // .AllowAnyHeader() // .AllowAnyMethod(); ### policyBuilder 可以鏈結 ### }); }); // services.AddResponseCaching(); builder.Services.AddControllers(); var app = builder.Build(); app.UseHttpsRedirection(); app.UseStaticFiles(); app.UseRouting(); app.UseCors(MyAllowSpecificOrigins); app.UseAuthorization(); app.MapControllers(); app.Run(); 上述 程式碼：\n將原則名稱設定為 _myAllowSpecificOrigins。原則名稱可以為任意值。 呼叫 UseCors 擴充方法，並指定 _myAllowSpecificOrigins CORS 原則。UseCors 會新增 CORS 中介軟體。對 UseCors 的呼叫必須放在 UseRouting 之後、UseAuthorization 之前。 使用 Lambda 運算式呼叫 AddCors。 Lambda 會採用 CorsPolicyBuilder 物件。本文稍後會說明組態選項，例如：WithOrigins。 為所有控制器端點啟用 _myAllowSpecificOrigins CORS 原則。 使回應快取中介軟體時，請先呼叫 UseCors，再呼叫 UseResponseCaching。 使用端點路由時，CORS 中介軟體必須設定為在呼叫 UseRouting 和 UseEndpoints 之間執行。\nAddCors 方法呼叫會將 CORS 服務新增至應用程式的服務容器：\n注意：指定的 URL 不得包含尾端斜線 (/)。 如果 URL 以 / 終止，則比較會傳回 false，而且不會傳回任何標頭。\nUseCors 和 UseStaticFiles 順序 一般而言，會先呼叫 UseStaticFiles，再呼叫 UseCors。 使用 JavaScript 來擷取跨網站靜態檔案的應用程式必須先呼叫 UseCors，再呼叫 UseStaticFiles。 具有預設原則和中介軟體的 CORS var builder = WebApplication.CreateBuilder(args); builder.Services.AddCors(options =\u0026gt; { options.AddDefaultPolicy( policy =\u0026gt; { policy.WithOrigins(\u0026#34;http://example.com\u0026#34;, \u0026#34;http://www.contoso.com\u0026#34;); }); }); builder.Services.AddControllers(); var app = builder.Build(); app.UseHttpsRedirection(); app.UseStaticFiles(); app.UseRouting(); app.UseCors(); app.UseAuthorization(); app.MapControllers(); app.Run(); 上述程式碼會將預設 CORS 原則套用至所有控制器端點。\n使用端點路由啟用 CORS 使用端點路由時，可以使用一組 RequiredCors 擴充方法，逐個端點啟用 CORS：\nvar MyAllowSpecificOrigins = \u0026#34;_myAllowSpecificOrigins\u0026#34;; var builder = WebApplication.CreateBuilder(args); builder.Services.AddCors(options =\u0026gt; { options.AddPolicy(name: MyAllowSpecificOrigins, policy =\u0026gt; { policy.WithOrigins(\u0026#34;http://example.com\u0026#34;, \u0026#34;http://www.contoso.com\u0026#34;); }); }); builder.Services.AddControllers(); builder.Services.AddRazorPages(); var app = builder.Build(); app.UseHttpsRedirection(); app.UseStaticFiles(); app.UseRouting(); app.UseCors(); app.UseAuthorization(); app.UseEndpoints(endpoints =\u0026gt; { endpoints.MapGet(\u0026#34;/echo\u0026#34;, context =\u0026gt; context.Response.WriteAsync(\u0026#34;echo\u0026#34;)) .RequireCors(MyAllowSpecificOrigins); endpoints.MapControllers() .RequireCors(MyAllowSpecificOrigins); endpoints.MapGet(\u0026#34;/echo2\u0026#34;, context =\u0026gt; context.Response.WriteAsync(\u0026#34;echo2\u0026#34;)); endpoints.MapRazorPages(); }); app.Run(); 在上述程式碼中：\napp.UseCors 會啟用 CORS 中介軟體。 因為尚未設定預設原則，因此單獨的 app.UseCors() 不會啟用 CORS。 /echo 和控制器端點允許使用指定的原則進行跨原始來源要求。 /echo2 和 Razor Pages 端點不允許跨原始來源要求，因為未指定預設原則。 如果 CORS 是由端點路由透過 RequireCors 所啟用的，則 [DisableCors] 屬性無法停用 CORS。 使用屬性啟用 CORS 使用[EnableCors]屬性啟用 CORS，並將具名原則套用至只需要 CORS 的端點，這樣才能提供最精細的控制。 [EnableCors] 屬性提供全域套用 CORS 的替代方案。[EnableCors] 屬性會啟用所選端點的 CORS，而不是所有端點：\n[EnableCors] 指定預設原則。 [EnableCors(\u0026quot;{Policy String}\u0026quot;)] 指定具名原則。 [EnableCors] 屬性可以套用至：\nRazor Page PageModel 控制器 控制器動作方法 透過 [EnableCors] 屬性，可以將不同的原則套用至控制器、頁面模型或動作方法。 當 [EnableCors] 屬性套用至控制器、頁面模型或動作方法，並在中介軟體中啟用 CORS 時，兩個原則都會被套用。 不建議進行原則合併。 使用 [EnableCors] 屬性或中介軟體，而不是在同一個應用程式中。 下列程式碼會將不同的原則套用至每個方法：\n[Route(\u0026#34;api/[controller]\u0026#34;)] [ApiController] public class WidgetController : ControllerBase { // GET api/values [EnableCors(\u0026#34;AnotherPolicy\u0026#34;)] [HttpGet] public ActionResult\u0026lt;IEnumerable\u0026lt;string\u0026gt;\u0026gt; Get() { return new string[] { \u0026#34;green widget\u0026#34;, \u0026#34;red widget\u0026#34; }; } // GET api/values/5 [EnableCors(\u0026#34;Policy1\u0026#34;)] [HttpGet(\u0026#34;{id}\u0026#34;)] public ActionResult\u0026lt;string\u0026gt; Get(int id) { return id switch { 1 =\u0026gt; \u0026#34;green widget\u0026#34;, 2 =\u0026gt; \u0026#34;red widget\u0026#34;, _ =\u0026gt; NotFound(), }; } } 下列程式碼會建立兩個 CORS 原則：\nvar builder = WebApplication.CreateBuilder(args); builder.Services.AddCors(options =\u0026gt; { options.AddPolicy(\u0026#34;Policy1\u0026#34;, policy =\u0026gt; { policy.WithOrigins(\u0026#34;http://example.com\u0026#34;, \u0026#34;http://www.contoso.com\u0026#34;); }); options.AddPolicy(\u0026#34;AnotherPolicy\u0026#34;, policy =\u0026gt; { policy.WithOrigins(\u0026#34;http://www.contoso.com\u0026#34;) .AllowAnyHeader() .AllowAnyMethod(); }); }); builder.Services.AddControllers(); var app = builder.Build(); app.UseHttpsRedirection(); app.UseRouting(); app.UseCors(); app.UseAuthorization(); app.MapControllers(); app.Run(); 如需對 CORS 要求限制進行最精細的控制：\n搭配具名原則使用 [EnableCors(\u0026quot;MyPolicy\u0026quot;)]。\n不要定義預設原則。 不要使用端點路由。 下一節中的程式碼符合上述清單。 停用 CORS 如果 CORS 是由端點路由所啟用的，則 [DisableCors] 屬性無法停用 CORS。\n下列程式碼會定義 CORS 原則 \u0026quot;MyPolicy\u0026quot;：\nvar MyAllowSpecificOrigins = \u0026#34;_myAllowSpecificOrigins\u0026#34;; var builder = WebApplication.CreateBuilder(args); builder.Services.AddCors(options =\u0026gt; { options.AddPolicy(name: \u0026#34;MyPolicy\u0026#34;, policy =\u0026gt; { policy.WithOrigins(\u0026#34;http://example.com\u0026#34;, \u0026#34;http://www.contoso.com\u0026#34;) .WithMethods(\u0026#34;PUT\u0026#34;, \u0026#34;DELETE\u0026#34;, \u0026#34;GET\u0026#34;); }); }); builder.Services.AddControllers(); builder.Services.AddRazorPages(); var app = builder.Build(); app.UseHttpsRedirection(); app.UseStaticFiles(); app.UseRouting(); app.UseCors(); app.UseAuthorization(); app.UseEndpoints(endpoints =\u0026gt; { endpoints.MapControllers(); endpoints.MapRazorPages(); }); app.Run(); 下列程式碼會停用 GetValues2 動作的 CORS：\n[EnableCors(\u0026#34;MyPolicy\u0026#34;)] [Route(\u0026#34;api/[controller]\u0026#34;)] [ApiController] public class ValuesController : ControllerBase { // GET api/values [HttpGet] public IActionResult Get() =\u0026gt; ControllerContext.MyDisplayRouteInfo(); // GET api/values/5 [HttpGet(\u0026#34;{id}\u0026#34;)] public IActionResult Get(int id) =\u0026gt; ControllerContext.MyDisplayRouteInfo(id); // PUT api/values/5 [HttpPut(\u0026#34;{id}\u0026#34;)] public IActionResult Put(int id) =\u0026gt; ControllerContext.MyDisplayRouteInfo(id); // GET: api/values/GetValues2 [DisableCors] [HttpGet(\u0026#34;{action}\u0026#34;)] public IActionResult GetValues2() =\u0026gt; ControllerContext.MyDisplayRouteInfo(); } 上述程式碼：\n不會透過端點路由啟用 CORS。 不會定義預設 CORS 原則。 使用 [EnableCors(\u0026ldquo;MyPolicy\u0026rdquo;)] 來針對控制器啟用 \u0026quot;MyPolicy\u0026quot; CORS 原則。 針對 GetValues2 方法停用 CORS。 ","permalink":"https://intervalrain.github.io/it/cors/","summary":"\u003ch2 id=\"tldr\"\u003eTL;DR\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003eCORS (Cross-Origin Resource Sharing)\u003cbr\u003e\n是一個支援安全跨源請求和資料傳輸的機制，用於在瀏覽器和伺服器之間進行跨源請求。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e這是一個 W3C 標準，可讓伺服器放寬相同原始來源原則。\u003c/li\u003e\n\u003cli\u003e不是安全性功能，CORS 會放寬安全性。 允許 CORS 並不會增強 API 的安全性。\u003ca href=\"https://learn.microsoft.com/zh-tw/aspnet/core/security/cors?view=aspnetcore-8.0#how-cors\"\u003eCORS 的運作方式\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e允許伺服器明確允許某些跨原始來源要求，同時拒絕其他要求。\u003c/li\u003e\n\u003cli\u003e比舊版技術 (例如：\u003ca href=\"https://learn.microsoft.com/zh-tw/dotnet/framework/wcf/samples/jsonp\"\u003eJSONP\u003c/a\u003e) 更安全且更有彈性。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"何謂相同原始來源\"\u003e何謂相同原始來源\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e如果兩個 URL 具有相同的配置、主機和連接埠，則其原始來源相同 (\u003ca href=\"https://tools.ietf.org/html/rfc6454\"\u003eRFC 6454\u003c/a\u003e)。\n\u003cul\u003e\n\u003cli\u003e這兩個 URL 具有相同的原始來源：\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ehttps://example.com/foo.html\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ehttps://example.com/bar.html\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e這些 URL 的原始來源與前兩個 URL 不同：\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ehttps://example.net：不同的\u003c/code\u003e網域\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ehttps://www.example.com/foo.html\u003c/code\u003e：不同的子網域\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ehttp://example.com/foo.html\u003c/code\u003e：不同的配置\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ehttps://example.com:9000/foo.html\u003c/code\u003e：不同的連接埠\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"如何啟動-cors\"\u003e如何啟動 CORS\u003c/h2\u003e\n\u003cp\u003e有三種方式可以啟用 CORS：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e在中介軟體中，使用\u003cstrong\u003e具名原則\u003c/strong\u003e或\u003cstrong\u003e預設原則\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e使用\u003cstrong\u003e端點路由\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e使用 \u003cstrong\u003e[EnableCors]\u003c/strong\u003e 屬性。\n搭配具名原則使用 [EnableCors] 屬性能夠以最精細的程度來控制對於支援 CORS 之端點的限制。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cstyle type=\"text/css\"\u003e.notice{--root-color:#444;--root-background:#eff;--title-color:#fff;--title-background:#7bd;--warning-title:#c33;--warning-content:#fee;--info-title:#fb7;--info-content:#fec;--note-title:#6be;--note-content:#e7f2fa;--tip-title:#5a5;--tip-content:#efe}@media (prefers-color-scheme:dark){.notice{--root-color:#ddd;--root-background:#eff;--title-color:#fff;--title-background:#7bd;--warning-title:#800;--warning-content:#400;--info-title:#a50;--info-content:#420;--note-title:#069;--note-content:#023;--tip-title:#363;--tip-content:#121}}body.dark .notice{--root-color:#ddd;--root-background:#eff;--title-color:#fff;--title-background:#7bd;--warning-title:#800;--warning-content:#400;--info-title:#a50;--info-content:#420;--note-title:#069;--note-content:#023;--tip-title:#363;--tip-content:#121}.notice{padding:18px;line-height:24px;margin-bottom:24px;border-radius:4px;color:var(--root-color);background:var(--root-background)}.notice p:last-child{margin-bottom:0}.notice-title{margin:-18px -18px 12px;padding:4px 18px;border-radius:4px 4px 0 0;font-weight:700;color:var(--title-color);background:var(--title-background)}.notice.warning .notice-title{background:var(--warning-title)}.notice.warning{background:var(--warning-content)}.notice.info .notice-title{background:var(--info-title)}.notice.info{background:var(--info-content)}.notice.note .notice-title{background:var(--note-title)}.notice.note{background:var(--note-content)}.notice.tip .notice-title{background:var(--tip-title)}.notice.tip{background:var(--tip-content)}.icon-notice{display:inline-flex;align-self:center;margin-right:8px}.icon-notice img,.icon-notice svg{height:1em;width:1em;fill:currentColor}.icon-notice img,.icon-notice.baseline svg{top:.125em;position:relative}\u003c/style\u003e\n\u003cdiv\u003e\u003csvg width=\"0\" height=\"0\" display=\"none\" xmlns=\"http://www.w3.org/2000/svg\"\u003e\u003csymbol id=\"tip-notice\" viewBox=\"0 0 512 512\" preserveAspectRatio=\"xMidYMid meet\"\u003e\u003cpath d=\"M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z\"/\u003e\u003c/symbol\u003e\u003csymbol id=\"note-notice\" viewBox=\"0 0 512 512\" preserveAspectRatio=\"xMidYMid meet\"\u003e\u003cpath d=\"M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z\"/\u003e\u003c/symbol\u003e\u003csymbol id=\"warning-notice\" viewBox=\"0 0 576 512\" preserveAspectRatio=\"xMidYMid meet\"\u003e\u003cpath d=\"M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z\"/\u003e\u003c/symbol\u003e\u003csymbol id=\"info-notice\" viewBox=\"0 0 512 512\" preserveAspectRatio=\"xMidYMid meet\"\u003e\u003cpath d=\"M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z\"/\u003e\u003c/symbol\u003e\u003c/svg\u003e\u003c/div\u003e\u003cdiv class=\"notice warning\" \u003e\n\u003cp class=\"first notice-title\"\u003e\u003cspan class=\"icon-notice baseline\"\u003e\u003csvg\u003e\u003cuse href=\"#warning-notice\"\u003e\u003c/use\u003e\u003c/svg\u003e\u003c/span\u003e\u003c/p\u003e","title":"[IT] CORS 跨原始來源要求"},{"content":" Loss on training data large: model bias -\u0026gt; add features optimization -\u0026gt; change optimization methods small: loss on testing data large: overfitting: (1) more training data, data augmentation (2) make model simpler small: mismatch ","permalink":"https://intervalrain.github.io/ml/general_guide/","summary":"\u003cul\u003e\n\u003cli\u003eLoss on training data\n\u003cul\u003e\n\u003cli\u003elarge:\n\u003cul\u003e\n\u003cli\u003emodel bias -\u0026gt; add features\u003c/li\u003e\n\u003cli\u003eoptimization -\u0026gt; change optimization methods\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003esmall:\n\u003cul\u003e\n\u003cli\u003eloss on testing data\n\u003cul\u003e\n\u003cli\u003elarge:\n\u003cul\u003e\n\u003cli\u003eoverfitting:\n\u003cul\u003e\n\u003cli\u003e(1) more training data, data augmentation\u003c/li\u003e\n\u003cli\u003e(2) make model simpler\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003esmall:\n\u003cul\u003e\n\u003cli\u003emismatch\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","title":"[ML] General guide on ML"},{"content":"Given \\(\\sigma_a\\) and \\(\\sigma_b\\), Ask for \\(\\sigma\\) 1. 簡化 \\(\\sigma\\) 將 \\(\\sigma\\) 乘開 \\(\\sigma = \\sqrt{\\frac{\\sum{(x_i-\\bar x)^2}}{n}}\\) \\(\\sigma = \\sqrt{\\frac{\\sum{x_i^2-2\\bar x\\sum{x_i}+n\\bar x^2}}{n}}\\) 平均等於總和除以個數 \\(\\frac{\\sum x_i}{n}=\\bar x\\)，故 \\(\\sigma = \\sqrt{\\frac{\\sum x_i^2}{n}-\\frac{2\\bar x\\sum x_i}{n}+\\frac{n\\bar x^2}{n}}\\) \\(\\sigma = \\sqrt{\\frac{\\sum x_i^2}{n}-2\\bar x^2+\\bar x^2}\\) 得 \\(\\boxed{\\sigma = \\sqrt{\\frac{\\sum x_i^2}{n}-\\bar x^2}}-(1)\\) 2. 求個別平方和 由\\((1)\\)式可推得各別的標準差為 \\(\\boxed{\\sigma_a = \\sqrt{\\frac{\\sum x_{ai}^2}{n_a}-\\bar x_a^2}}-(2)\\) 且 \\(\\boxed{n = n_a+n_b}-(3)\\) \\(\\boxed{\\sum x_i^2=\\sum x_{ai}^2+\\sum x_{bi}^2}-(4)\\) 欲求 \\(\\sum x_{ai}^2\\)，我們將\\((2)\\)式展開 \\(\\sigma_a^2 = \\frac{\\sum x_{ai}^2}{n_a}-\\bar x_a^2\\) \\(\\sigma_a^2+\\bar x_a^2= \\frac{\\sum x_{ai}^2}{n_a}\\) 得\\(\\boxed{\\sum x_{ai}^2=n_a(\\sigma_a^2+\\bar x_a^2)}-(5)\\) 3. 求總體標準差 由\\((1)\\)式展開 得 \\(\\boxed{\\sigma = \\sqrt{\\frac{(\\sum x_{ai}^2+\\sum x_{bi}^2)}{n}-\\bar x^2}}-(6)\\) 將\\((5)\\)代入\\((6)\\) \\(\\boxed{\\sigma=\\sqrt{\\frac{n_a(\\sigma_a^2+\\bar x_a^2)+n_b(\\sigma_b^2+\\bar x_n^2)}{n}-\\bar x^2}}-(7)\\) 其中 \\(\\boxed{\\bar x=\\frac{n_a\\bar x_a + n_b\\bar x_b}{n}}-(8)\\) 故我們可以從上式輾轉得通式： \\(\\boxed{\\sigma=\\sqrt{\\frac{\\sum(n_i(\\sigma_i^2+\\bar x_i^2))}{n}-\\bar x^2}}-(9)\\) 或寫成 \\(\\boxed{\\sigma=\\sqrt{\\frac{\\sum(n_i(\\sigma_i^2+\\bar x_i^2))-\\sum n_i\\bar x_i}{n}}}-(9)\\) summary 個數 \\(\\boxed{n=n_a+n_b=\\sum n_i}\\) 平均數 \\(\\boxed{\\bar x=\\frac{n_a\\bar x_a+n_b\\bar x_b}{n_a+n_b}=\\frac{\\sum{n_i\\bar x_i}}{\\sum{n_i}}}\\) 標準差 \\(\\boxed{\\sigma=\\sqrt{\\frac{n_{ai}(\\sigma_{ai}^2+\\bar x_{ai}^2)+n_{bi}(\\sigma_{bi}^2+\\bar x_{bi}^2)-(n_a\\bar x_a+n_b\\bar x_b)}{n_a+n_b}}=\\sqrt{\\frac{\\sum(n_i(\\sigma_i^2+\\bar x_i^2))-\\sum n_i\\bar x_i}{\\sum n_i}}}\\) 4. sql 現有一 table 存有 avg_value std_value site_count with stats as ( select ... sum(site_count*avg_value)/sum(site_count) as avg_value, sqrt((sum(site_count*(square(std_value)+square(avg_value)))-sum(site_count*avg_value))/sum(site_count)) as std_value, sum(site_count) as site_count from data where ... group by ... ) select * from stats ","permalink":"https://intervalrain.github.io/statistics/sigma/","summary":"\u003ch1 id=\"given-sigma_a-and-sigma_b-ask-for-sigma\"\u003eGiven \\(\\sigma_a\\) and \\(\\sigma_b\\), Ask for \\(\\sigma\\)\u003c/h1\u003e\n\u003ch2 id=\"1-簡化-sigma\"\u003e1. 簡化 \\(\\sigma\\)\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e將 \\(\\sigma\\) 乘開\n\u003cul\u003e\n\u003cli\u003e\\(\\sigma = \\sqrt{\\frac{\\sum{(x_i-\\bar x)^2}}{n}}\\)\u003c/li\u003e\n\u003cli\u003e\\(\\sigma = \\sqrt{\\frac{\\sum{x_i^2-2\\bar x\\sum{x_i}+n\\bar x^2}}{n}}\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e平均等於總和除以個數 \\(\\frac{\\sum x_i}{n}=\\bar x\\)，故\n\u003cul\u003e\n\u003cli\u003e\\(\\sigma = \\sqrt{\\frac{\\sum x_i^2}{n}-\\frac{2\\bar x\\sum x_i}{n}+\\frac{n\\bar x^2}{n}}\\)\u003c/li\u003e\n\u003cli\u003e\\(\\sigma = \\sqrt{\\frac{\\sum x_i^2}{n}-2\\bar x^2+\\bar x^2}\\)\u003c/li\u003e\n\u003cli\u003e得 \\(\\boxed{\\sigma = \\sqrt{\\frac{\\sum x_i^2}{n}-\\bar x^2}}-(1)\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"2-求個別平方和\"\u003e2. 求個別平方和\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e由\\((1)\\)式可推得各別的標準差為\n\u003cul\u003e\n\u003cli\u003e\\(\\boxed{\\sigma_a = \\sqrt{\\frac{\\sum x_{ai}^2}{n_a}-\\bar x_a^2}}-(2)\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e且\n\u003cul\u003e\n\u003cli\u003e\\(\\boxed{n = n_a+n_b}-(3)\\)\u003c/li\u003e\n\u003cli\u003e\\(\\boxed{\\sum x_i^2=\\sum x_{ai}^2+\\sum x_{bi}^2}-(4)\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e欲求 \\(\\sum x_{ai}^2\\)，我們將\\((2)\\)式展開\n\u003cul\u003e\n\u003cli\u003e\\(\\sigma_a^2 = \\frac{\\sum x_{ai}^2}{n_a}-\\bar x_a^2\\)\u003c/li\u003e\n\u003cli\u003e\\(\\sigma_a^2+\\bar x_a^2= \\frac{\\sum x_{ai}^2}{n_a}\\)\u003c/li\u003e\n\u003cli\u003e得\\(\\boxed{\\sum x_{ai}^2=n_a(\\sigma_a^2+\\bar x_a^2)}-(5)\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"3-求總體標準差\"\u003e3. 求總體標準差\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e由\\((1)\\)式展開\n\u003cul\u003e\n\u003cli\u003e得 \\(\\boxed{\\sigma = \\sqrt{\\frac{(\\sum x_{ai}^2+\\sum x_{bi}^2)}{n}-\\bar x^2}}-(6)\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e將\\((5)\\)代入\\((6)\\)\n\u003cul\u003e\n\u003cli\u003e\\(\\boxed{\\sigma=\\sqrt{\\frac{n_a(\\sigma_a^2+\\bar x_a^2)+n_b(\\sigma_b^2+\\bar x_n^2)}{n}-\\bar x^2}}-(7)\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e其中 \\(\\boxed{\\bar x=\\frac{n_a\\bar x_a + n_b\\bar x_b}{n}}-(8)\\)\u003c/li\u003e\n\u003cli\u003e故我們可以從上式輾轉得通式：\n\u003cul\u003e\n\u003cli\u003e\\(\\boxed{\\sigma=\\sqrt{\\frac{\\sum(n_i(\\sigma_i^2+\\bar x_i^2))}{n}-\\bar x^2}}-(9)\\)\u003c/li\u003e\n\u003cli\u003e或寫成\u003c/li\u003e\n\u003cli\u003e\\(\\boxed{\\sigma=\\sqrt{\\frac{\\sum(n_i(\\sigma_i^2+\\bar x_i^2))-\\sum n_i\\bar x_i}{n}}}-(9)\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"summary\"\u003esummary\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e個數\n\u003cul\u003e\n\u003cli\u003e\\(\\boxed{n=n_a+n_b=\\sum n_i}\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e平均數\n\u003cul\u003e\n\u003cli\u003e\\(\\boxed{\\bar x=\\frac{n_a\\bar x_a+n_b\\bar x_b}{n_a+n_b}=\\frac{\\sum{n_i\\bar x_i}}{\\sum{n_i}}}\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e標準差\n\u003cul\u003e\n\u003cli\u003e\\(\\boxed{\\sigma=\\sqrt{\\frac{n_{ai}(\\sigma_{ai}^2+\\bar x_{ai}^2)+n_{bi}(\\sigma_{bi}^2+\\bar x_{bi}^2)-(n_a\\bar x_a+n_b\\bar x_b)}{n_a+n_b}}=\\sqrt{\\frac{\\sum(n_i(\\sigma_i^2+\\bar x_i^2))-\\sum n_i\\bar x_i}{\\sum n_i}}}\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"4-sql\"\u003e4. sql\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e現有一 table 存有\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eavg_value\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003estd_value\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003esite_count\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003ewith\u003c/span\u003e stats \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eselect\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        ...\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003esum\u003c/span\u003e(site_count\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003eavg_value)\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003esum\u003c/span\u003e(site_count) \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e avg_value,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        sqrt((\u003cspan style=\"color:#66d9ef\"\u003esum\u003c/span\u003e(site_count\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e(square(std_value)\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003esquare(avg_value)))\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003esum\u003c/span\u003e(site_count\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003eavg_value))\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003esum\u003c/span\u003e(site_count)) \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e std_value,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003esum\u003c/span\u003e(site_count) \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e site_count\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efrom\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003edata\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ewhere\u003c/span\u003e ...\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003egroup\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eby\u003c/span\u003e ...\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eselect\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efrom\u003c/span\u003e stats\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"[Statistics] a群體與b群體各別標準差求整體標準差"},{"content":"#include \u0026lt;iostream\u0026gt; #include \u0026lt;string\u0026gt; #include \u0026lt;vector\u0026gt; using namespace std; class Solution { public: string shortestCommonSupersequence(string a, string b) { int m = a.size(); int n = b.size(); vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; dp(m+1, vector\u0026lt;int\u0026gt;(n+1, 0)); for (int i = 0; i \u0026lt;= m; i++) { for (int j = 0; j \u0026lt;= n; j++) { if (i == 0 || j == 0) continue; if (a[i-1] == b[j-1]) { dp[i][j] = dp[i-1][j-1] + 1; } else { dp[i][j] = max(dp[i-1][j], dp[i][j-1]); } } } int i = m; int j = n; string res; while (i \u0026gt; 0 \u0026amp;\u0026amp; j \u0026gt; 0) { if (a[i-1] == b[j-1]) { res += a[i-1]; --i; --j; } else { if (dp[i-1][j] \u0026lt; dp[i][j-1]) { res += b[--j]; } else { res += a[--i]; } } } while (i \u0026gt; 0) res += a[--i]; while (j \u0026gt; 0) res += b[--j]; reverse(res.begin(), res.end()); return res; } string shortestCommonSupersequencePlus(vector\u0026lt;string\u0026gt;\u0026amp; strs) { string res = strs[0]; for (int i = 1; i \u0026lt; strs.size(); i++) { res = shortestCommonSupersequence(res, strs[i]); } return res; } string trans(string\u0026amp; a, string\u0026amp; pattern) { int i = 0; int j = 0; int m = a.size(); int n = pattern.size(); string res; while (i \u0026lt; m \u0026amp;\u0026amp; j \u0026lt; n) { if (a[i] != pattern[j]) { res.push_back(\u0026#39; \u0026#39;); j++; } else { res.push_back(a[i]); i++; j++; } } return res; } }; int main() { int n; vector\u0026lt;string\u0026gt; strs = { \u0026#34;ABCDEH\u0026#34;, \u0026#34;ACDEFBH\u0026#34;, \u0026#34;ADEHG\u0026#34; }; Solution* sol = new Solution(); string res = sol-\u0026gt;shortestCommonSupersequencePlus(strs); cout \u0026lt;\u0026lt; res \u0026lt;\u0026lt; endl; cout \u0026lt;\u0026lt; sol-\u0026gt;trans(strs[0], res) \u0026lt;\u0026lt; endl; cout \u0026lt;\u0026lt; sol-\u0026gt;trans(strs[1], res) \u0026lt;\u0026lt; endl; cout \u0026lt;\u0026lt; sol-\u0026gt;trans(strs[2], res) \u0026lt;\u0026lt; endl; return 0; } 結果 input: ABCDEH ACDEFBH ADEHG ========= output: ABCDEFBHG ABCDE H A CDEFBH A DE HG ","permalink":"https://intervalrain.github.io/algo/timeline/","summary":"\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Cpp\" data-lang=\"Cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;string\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;vector\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eusing\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enamespace\u003c/span\u003e std;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSolution\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    string shortestCommonSupersequence(string a, string b) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e m \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e a.size();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e b.size();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003evector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e dp(m\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e(n\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e m; i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e j \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; j \u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e n; j\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (i \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e||\u003c/span\u003e j \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003econtinue\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (a[i\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e b[j\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    dp[i][j] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e dp[i\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e][j\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    dp[i][j] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e max(dp[i\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e][j], dp[i][j\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e m;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e j \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e n;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        string res;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (i \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e j \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (a[i\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e b[j\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                res \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e a[i\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003ei;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003ej;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (dp[i\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e][j] \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e dp[i][j\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    res \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e b[\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003ej];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    res \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e a[\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003ei];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (i \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e) res \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e a[\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003ei];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (j \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e) res \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e b[\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003ej];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        reverse(res.begin(), res.end());\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e res;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    string \u003cspan style=\"color:#a6e22e\"\u003eshortestCommonSupersequencePlus\u003c/span\u003e(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003estring\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e strs) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        string res \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e strs[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e strs.size(); i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            res \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e shortestCommonSupersequence(res, strs[i]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e res;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    string \u003cspan style=\"color:#a6e22e\"\u003etrans\u003c/span\u003e(string\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e a, string\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e pattern) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e j \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e m \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e a.size();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e pattern.size();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        string res;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e m \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e j \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e n) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (a[i] \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e pattern[j]) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                res.push_back(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39; \u0026#39;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                j\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                res.push_back(a[i]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                j\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e res;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003estring\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e strs \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;ABCDEH\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;ACDEFBH\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;ADEHG\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    };\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Solution\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e sol \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e Solution();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    string res \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e sol\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eshortestCommonSupersequencePlus(strs);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e res \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e endl;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e sol\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003etrans(strs[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e], res) \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e endl;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e sol\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003etrans(strs[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e], res) \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e endl;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e sol\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003etrans(strs[\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e], res) \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e endl;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e結果\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Cpp\" data-lang=\"Cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003einput:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eABCDEH\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eACDEFBH\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eADEHG\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e=========\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eoutput:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eABCDEFBHG\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eABCDE  H\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eA CDEFBH\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eA  DE  HG\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"[algo] timeline algorithm"},{"content":"本文是介紹我如何將 DDD, Hexagonal, Onion, Clean, CQRS Architecture 等架構概念整合在一起，我將它命名為 Explicit Architecture。上述的概念基本上都是通過了市場的試驗，並在許多高要求的平台上被應用。\n系統的基本組件 首先回顧 EBI 與 Ports \u0026amp; Adapter 架構。這兩種架構都明確區分了哪些程式碼是應用程式的內部，哪些是外部，以及哪些是連接內部和外部的程式碼。\nPorts \u0026amp; Adapters 明確地定義出了系統的三個部分：\n使用者介面 (User Interface, UI) 商業邏輯(business logic)、應用程式核心(application core) 基礎設施(Infrastructure)，如 DB、搜尋引擎或第三方API等工具。 我們真正應該關心的是應用程式的核心，這是讓我們的程式碼能夠完成其應有功能的程式碼。它可能會使用多種 UI（網頁、手機、CLI、API 等等），但實際執行工作的程式碼是相同的，並位於應用程式的核心，觸發它的 UI 實際上並不重要。\n一個典型的應用程式流程從 UI 的程式碼開始，經過應用程式核心到基礎設施程式碼，再回到應用程式核心，最後將回應傳遞給 UI。\n工具 Tools 工具指的是那些遠離我們系統核心程式碼，但為我們應用程式所用的工具，例如，DB、搜尋引擎、網頁伺服器或 CLI 控制台（儘管後兩者也是交付機制）。 雖然將 CLI 與 DB 分類在一起可能有些奇怪，儘管它們有不同的目的，但實際上它們都是應用程式使用的工具。關鍵的區別在於，CLI 和網頁服務器用於告訴我們的應用程式做些什麼，而 DB 則由我們的應用程式告訴它做些什麼。這是一個非常重要的區別，因為它對我們如何建構連接這些工具與應用程式核心的程式碼有著強烈的影響。\n將工具和傳遞機制連接到應用程式核心 連接工具與應用程式核心的程式碼單元被稱為適配器（Ports \u0026amp; Adapters Architecture），適配器實現了將業務邏輯與特定工具進行通訊。\n告知我們應用程式應該做什麼事的適配器稱為 Primary 或 Driving Adapters；\n被我們應用程式告知應該做什麼事的適配器稱為 Secondary or Driven Adapters。\n埠 Ports 然而，這些適配器並非隨機創建的，它們是為了適應應用程式核心的一個非常特定的入口點，也就是埠。埠不過是一種規範，說明工具如何使用應用程式核心，或者說明它如何被應用程式核心使用。在大多數語言中，以其最簡單的形式，這種規範，或埠，即是一個介面(interface)，但實際上可能由多個介面和 DTO 組成。\n需要注意的是，埠(介面)屬於業務邏輯內部，而適配器則屬於外部。要讓這種模式正常運作，最重要的是要根據應用核心的需求來創建埠，而不僅僅是模仿工具的 API。\n主要適配器 Primary or Driving Adapters 主要或驅動適配器包裹在一個埠上，並使用它來指示應用程式核心該做什麼。他們將來自傳遞機制的任何內容轉換為應用程式核心中的方法調用。 換句話說，我們的驅動適配器是控制器或控制台命令，它們在建構子中注入了一些物件，這些物件的類別實現了控制器或控制台命令所需的介面（埠）。\n在一個更具體的例子中，埠可以是控制器所需的服務介面或儲存庫介面。然後，將服務、儲存庫或查詢的具體實現注入並在控制器中使用。\n或者，一個埠可以是命令總線或查詢總線介面，在這種情況下，命令或查詢總線的具體實現將被注入到控制器中，然後控制器構建一個命令或查詢並將其傳遞給相關的總線。\n次級適配器 Secondary or Driven Adapters 與 Driver Adapters 不同的是，Driven Adapters 實現了一個埠、一個介面，然後被注入到應用核心中，無論該埠在何處被需要（類型提示）。Driven Adapter 是包裹在埠周圍的。 例如，假設我們有一個需要持久化數據的初級應用程式。因此，我們創建了一個符合其需求的持久化介面，該介面有一個用於保存數據陣列的方法，以及一個根據ID刪除表中行的方法。從那時起，無論我們的應用程式何時需要保存或刪除數據，我們都會在其構造器中需要一個實現我們定義的持久化介面的物件。\n現在我們將創建一個專門針對 MySQL 的適配器，該適配器將實現該介面，它將具有保存陣列和在表中刪除一行的方法，我們將在需要持久化介面的任何地方注入它。\n如果我們在某一點決定更換 DB vendor，比如說改用 PostgreSQL 或 MongoDB，我們只需要創建一個實現持久性介面並專門針對 PostgreSQL 的新適配器，並將新適配器取代舊的適配器即可。\n控制反轉 Inversion of control 關於這種模式的特點是，適配器依賴於特定的工具和特定的端口（通過實現一個介面）。但是，我們的業務邏輯只依賴於端口（介面），該介面被設計來滿足業務邏輯的需求，所以它並不依賴於特定的適配器或工具。\n這意味著依賴性的方向是朝向中心，這是在架構層面上的控制反轉原則。\n儘管如此，再次強調，最重要的是要根據應用程式核心的需求來創建端口，而不僅僅是模仿工具的API。\n應用核心組織 洋蔥架構採用了DDD層並將其融入到Ports \u0026amp; Adapters架構中。這些層旨在為業務邏輯，即Ports \u0026amp; Adapters“六邊形”的內部，帶來一些組織。就像在Ports \u0026amp; Adapters中一樣，依賴方向是朝向中心。\n應用層 Application Layer 使用案例(Usecases)是我們的應用程式核心中可以由一個或多個使用者介面觸發的流程。例如，在CMS中，我們可能有實際的應用程式UI供一般用戶使用，另一個獨立的UI供CMS管理員使用，另一個CLI UI，以及一個網路API。這些UI（應用程式）可以觸發特定於其中一個或由多個重複使用的使用案例。\n使用案例是在應用層中定義的，這是由DDD提供並被洋蔥架構使用的第一層。\n這一層包含了應用服務（及其介面）作為門面，但它也包含了端口和適配器介面（端口），其中包括 ORM、搜尋引擎介面、訊息介面等等。在我們使用命令總線和/或查詢總線的情況下，這一層就是命令和查詢的相應處理器所在的地方。\n應用服務和/或命令處理器包含了展開用例、業務流程的邏輯。通常，他們的角色是：\n使用資料庫來尋找一個或多個實體； 告訴那些實體去做一些領域邏輯; 並利用資料庫再次保存實體，有效地儲存了數據變更。 (口訣：查改存推) 命令處理器可以用兩種不同的方式來使用：\n他們可以包含實際的邏輯來執行用例； 他們可以被用作我們架構中的純粹線路部分，接收一個指令並觸發存在於應用服務中的邏輯。 選擇使用哪種方法取決於情境，例如：\n我們是否已經有了應用服務，並且現在正在添加命令總線？ 命令總線是否允許指定任何類別/方法作為處理器，或者它們需要擴展或實現現有的類別或介面？ 這一層也包含了應用程式事件的觸發，這些事件代表了某個用例的結果。這些事件會觸發一些側效應邏輯，例如發送電子郵件、通知第三方API、發送推送通知，甚至開始屬於應用程式不同組件的另一個用例。\n領域層 Domain Layer 更深入地，我們有領域層。這一層的對象包含數據以及操作該數據的邏輯，這些都是特定於領域本身的，並且它們獨立於觸發該邏輯的業務流程，它們是獨立的，並且完全不知道應用層的存在。\n領域服務 Domain Service 如我上述所提，應用服務的角色是：\n使用資料庫來尋找一個或多個實體 告訴那些實體去做一些領域邏輯； 並利用資料庫再次保存實體，有效地儲存了數據變更。 然而，有時我們會遇到涉及不同實體的一些領域邏輯，無論是相同類型與否，我們覺得這些領域邏輯並不屬於實體本身，我們認為這些邏輯並非他們的直接責任。\n所以，我們的第一反應可能是將該邏輯放在實體之外，放在應用服務中。然而，這意味著該領域邏輯將無法在其他用例中重複使用：領域邏輯應該遠離應用層！\n解決方案是創建一個領域服務，其角色是接收一組實體並對其執行一些業務邏輯。領域服務屬於領域層，因此它對應用層中的類別一無所知，例如應用服務或存儲庫。另一方面，它可以使用其他領域服務，當然，也可以使用領域模型對象。\n領域模型 Domain Model 位於最中心的，不依賴於其外的任何事物，就是領域模型，其中包含代表領域中某些事物的業務物件。這些物件的例子首先是實體，但也包括價值物件、枚舉以及在領域模型中使用的任何物件。\n領域模型也是領域事件的所在地。當特定的數據集發生變化時，這些事件就會被觸發，並且它們會攜帶這些變化。換句話說，當實體發生變化時，就會觸發一個領域事件，並且它會攜帶變化屬性的新值。例如，這些事件非常適合用於事件源。\n組件 Components 到目前為止，我們一直在根據層次對程式碼進行分離，但這只是細粒度的程式碼分離。粗粒度的程式碼分離至少同樣重要，它涉及到根據子域和有界上下文對程式碼進行分離，遵循 Robert C. Martin 在尖叫架構中表達的想法。這通常被稱為「按功能打包」或「按組件打包」，與「按層打包」相對，Simon Brown 在他的部落格文章「按組件打包和與架構對齊的測試」中對此解釋得相當清楚。\n根據 Simon Brown 關於按組件打包的圖表，將其改為以下內容：\n這些程式碼部分是橫跨我們之前描述的各層，它們是我們應用程式的組件。組件的例子可以是身份驗證、授權、計費、用戶、評論或帳戶等，但它們總是與領域相關。像授權和/或身份驗證這樣的有界上下文應被視為我們創建適配器並隱藏在某種端口後的外部工具。\n解耦組件 就像細緻的程式碼單元（類別、介面、特性、混入等），粗粒度的程式碼單元（組件）也從低耦合和高內聚中獲益。\n為了解耦類別，我們利用依賴注入，將依賴性注入到類別中，而不是在類別內實例化它們，並且透過依賴反轉，讓類別依賴於抽象（介面和/或抽象類別）而非具體類別。這意味著依賴類別對它將要使用的具體類別一無所知，它對其所依賴的類別的完全限定類別名稱沒有任何參考。\n同樣地，完全解耦的組件意味著一個組件對任何其他組件沒有直接的認識。換句話說，它對來自其他組件的任何細粒度代碼單元都沒有參考，甚至連介面都沒有！這意味著依賴注入和依賴反轉不足以解耦組件，我們將需要某種形式的架構構造。我們可能需要事件，共享內核，最終一致性，甚至是一個發現服務！\n觸發其它組件中的邏輯 當我們的其中一個組件（組件B）需要在另一個組件（組件A）發生某事時做些什麼，我們不能簡單地從組件A直接呼叫組件B中的類別/方法，因為這樣會使A與B產生耦合。\n然而，我們可以讓A使用事件分發器來分發一個應用程序事件，該事件將被傳遞給任何正在監聽它的組件，包括B，並且B中的事件監聽器將觸發所需的動作。這意味著組件A將依賴於一個事件分發器，但它將與B解耦。\n然而，如果事件本身“存在於”A，這意味著B知道A的存在，它與A有所連結。為了消除這種依賴性，我們可以創建一個包含一套應用程式核心功能的庫，這些功能將在所有組件之間共享，這就是所謂的共享核心。這意味著，各組件都將依賴於共享核心，但它們將彼此解耦。共享核心將包含如應用程式和領域事件等功能，但它也可以包含規範對象，以及任何有意義的共享內容，但要記住，它應盡可能地保持最小，因為對共享核心的任何更改都將影響應用程式的所有組件。此外，如果我們有一個多語系統，比如說一個由不同語言編寫的微服務生態系統，那麼共享核心需要是語言無關的，以便所有組件都能理解，無論它們是用什麼語言編寫的。例如，共享核心將不包含事件類，而是包含事件描述（即。 名稱、屬性，甚至可能是方法（雖然這些在規範對象中可能更有用）在一種不可知的語言如JSON中，以便所有組件/微服務都可以解釋它，甚至可能自動生成他們自己的具體實現。在我的後續文章中閱讀更多關於這個的信息：不僅僅是同心層。\n這種方法適用於單體應用程式和分散式應用程式，如微服務生態系統。然而，當事件只能異步傳遞時，對於需要立即觸發其他組件邏輯的情境，這種方法將不足夠！組件A將需要直接對組件B進行HTTP呼叫。在這種情況下，為了讓組件解耦，我們將需要一個發現服務，A將詢問它應該將請求發送到哪裡以觸發所需的動作，或者將請求發送到發現服務，該服務可以將其代理到相關服務，並最終將回應返回給請求者。這種方法將使組件與發現服務耦合，但將使它們彼此解耦。\n從其它組件獲取數據 在我看來，一個組件是不被允許改變它並不“擁有”的數據，但它可以查詢和使用任何數據。\n組件間共享的數據儲存 當一個組件需要使用屬於另一個組件的數據時，例如，計費組件需要使用屬於帳戶組件的客戶名稱，計費組件將包含一個查詢對象，該對象將查詢數據存儲以獲取該數據。這僅僅意味著計費組件可以知道任何數據集，但它必須將其並不“擁有”的數據作為只讀方式，通過查詢來使用。\n根據組件分離的數據儲存 在這種情況下，相同的模式仍然適用，但我們在數據存儲層面上有更多的複雜性。擁有自己數據存儲的組件意味著每個數據存儲包含：\n一組數據，它擁有並且是唯一被允許更改的，使其成為唯一的真理來源； 一組數據，這是其他組件數據的副本，它無法自行變更，但對於組件功能來說是必要的，並且每當在擁有者組件中變更時，都需要進行更新。 每個組件都會從其他組件中創建所需數據的本地副本，以便在需要時使用。當擁有該數據的組件中的數據發生變化時，該擁有者組件將觸發一個攜帶數據變化的域事件。持有該數據副本的組件將會監聽該域事件，並相應地更新他們的本地副本。\n控制流程 如我上述所說，控制流程當然是從使用者進入應用核心，再到基礎設施工具，回到應用核心，最後回到使用者手中。但是，類別又是如何組合在一起的呢？哪些類別依賴於哪些類別？我們又該如何組成它們呢？\n遵循 Uncle Bob 在他的關於乾淨架構的文章中，我將嘗試用UML風格的圖表來解釋控制流程..\nWithout a Command/Query Bus 如果我們不使用命令總線，控制器將依賴於應用服務或查詢物件。\n在上述圖表中，我們為應用服務使用了一個介面，儘管我們可能會辯論說它實際上並不真正需要，因為應用服務是我們應用程式碼的一部分，我們並不希望將其替換為另一種實現方式，儘管我們可能會對其進行全面的重構。\n查詢物件將包含一個優化的查詢，該查詢將簡單地返回一些原始數據以供用戶查看。該數據將在一個DTO中返回，並將注入到一個ViewModel中。這個ViewModel可能包含一些視圖邏輯，並將用於填充視圖。\n另一方面，應用服務將包含用例邏輯，也就是我們想在系統中做些什麼時會觸發的邏輯，而不僅僅是查看一些數據。應用服務依賴於 repository，repository 將返回包含需要觸發的邏輯的實體。它也可能依賴於一個領域服務來協調在多個實體中的領域過程，但這種情況幾乎從未發生。\n在展開使用案例後，應用服務可能希望通知整個系統該使用案例已經發生，此時它也將依賴事件分派器來觸發事件。\n值得注意的是，我們在持久性引擎和 repositories 上都設置了介面。雖然這可能看起來有些多餘，但它們具有不同的目的：\n持久性介面是一種在物件關聯對映（ORM）之上的抽象層，因此我們可以在不更改應用程式核心的情況下，更換正在使用的ORM。\nrepository interface 是對持久性引擎本身的抽象。假設我們想從MySQL切換到MongoDB。持久性介面可以保持一樣，而且，如果我們想繼續使用相同的ORM，甚至持久性適配器也將保持不變。然而，查詢語言完全不同，所以我們可以創建新的 repository，使用相同的持久性機制，實現相同的 repository interface，但是使用MongoDB查詢語言來構建查詢，而不是SQL。\nWith a Command/Query Bus 在我們的應用程式使用命令/查詢總線的情況下，圖表基本上保持不變，唯一的例外是控制器現在依賴於總線以及一個命令或查詢。它將實例化命令或查詢，並將其傳遞給總線，總線將找到適當的處理器來接收並處理該命令。\n在下面的圖表中，命令處理器會使用應用服務。但是，這並不總是必要的，事實上，在大多數情況下，處理器將包含所有用例的邏輯。我們只需要在需要在另一個處理器中重用相同邏輯時，才將邏輯從處理器中提取到一個獨立的應用服務中。\n您可能已經注意到，Bus與Command、Query以及Handlers之間並無依賴關係。這是因為他們實際上應該對彼此一無所知，以便提供良好的解耦。Bus將如何知道哪個Handler應該處理哪個Command或Query，應該僅通過配置來設定。\n如您所見，在兩種情況下，所有跨越應用程式核心邊界的箭頭，也就是依賴性，都指向內部。如先前所述，這是Ports \u0026amp; Adapters架構、洋蔥架構以及乾淨架構的基本規則。\nConclusion 結論 如往常一樣，我們的目標是擁有一個低耦合、高內聚的程式碼庫，以便我們能夠輕鬆、快速且安全地進行變更。\nPlans are worthless, but planning is everything. - Eisenhower 計劃本身毫無價值，但規劃過程卻是一切的關鍵。 - 艾森豪威爾\n這張資訊圖表是一個概念圖。了解並理解所有這些概念將有助於我們規劃健康的架構，以及健康的應用程式。\n然而：\n*The map is not the territory. - Alfred Korzybski * 地圖並非領土。 - 阿爾弗雷德·科爾日布斯基\n這些只是指導方針！應用程序就是領域，現實，我們需要應用我們知識的具體用例，這將決定實際架構的外觀！ 我們需要理解所有這些模式，但我們也總是需要思考並準確理解我們的應用程式需要什麼，為了解耦和內聚性我們應該走多遠。這個決定可以依賴許多因素，從項目的功能需求開始，但也可以包括像是建立應用程式的時間範圍，應用程式的壽命，開發團隊的經驗等等因素。\n就是這樣，這就是我如何理解所有的事情。這就是我在腦海中如何合理化它。\n我在後續的文章中進一步擴展了這些想法：不僅僅是同心層。\n然而，我們該如何在程式碼庫中明確地呈現所有這些內容呢？這將是我接下來的文章主題之一：如何在程式碼中反映架構和領域。\n","permalink":"https://intervalrain.github.io/hgraca/explicit-architecture-01-ddd-hexagonal-onion-clean-cqrs-how-i-put-it-all-together/","summary":"\u003cp\u003e本文是介紹我如何將 DDD, Hexagonal, Onion, Clean, CQRS Architecture 等架構概念整合在一起，我將它命名為 \u003cstrong\u003eExplicit Architecture\u003c/strong\u003e。上述的概念基本上都是通過了市場的試驗，並在許多高要求的平台上被應用。\u003c/p\u003e\n\u003ch1 id=\"系統的基本組件\"\u003e系統的基本組件\u003c/h1\u003e\n\u003cp\u003e首先回顧 \u003cstrong\u003e\u003ca href=\"../ebi-architecture\"\u003eEBI\u003c/a\u003e\u003c/strong\u003e 與 \u003cstrong\u003e\u003ca href=\"../ports-adapters-architecture\"\u003ePorts \u0026amp; Adapter\u003c/a\u003e\u003c/strong\u003e 架構。這兩種架構都明確區分了哪些程式碼是應用程式的內部，哪些是外部，以及哪些是連接內部和外部的程式碼。\u003c/p\u003e\n\u003cp\u003ePorts \u0026amp; Adapters 明確地定義出了系統的三個部分：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e使用者介面\u003c/strong\u003e (User Interface, UI)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e商業邏輯\u003c/strong\u003e(business logic)、\u003cstrong\u003e應用程式核心\u003c/strong\u003e(application core)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e基礎設施\u003c/strong\u003e(Infrastructure)，如 DB、搜尋引擎或第三方API等工具。\n\u003cimg alt=\"ea1\" loading=\"lazy\" src=\"https://herbertograca.files.wordpress.com/2018/11/000-explicit-architecture-svg.png?w=1024\u0026h=700\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e我們真正應該關心的是應用程式的核心，這是讓我們的程式碼能夠完成其應有功能的程式碼。它可能會使用多種 UI（網頁、手機、CLI、API 等等），但實際執行工作的程式碼是相同的，並位於應用程式的核心，觸發它的 UI 實際上並不重要。\u003c/p\u003e\n\u003cp\u003e一個典型的應用程式流程從 UI 的程式碼開始，經過應用程式核心到基礎設施程式碼，再回到應用程式核心，最後將回應傳遞給 UI。\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"ea2\" loading=\"lazy\" src=\"https://herbertograca.files.wordpress.com/2018/11/010-explicit-architecture-svg.png?w=1024\u0026h=700\"\u003e\u003c/p\u003e\n\u003ch1 id=\"工具-tools\"\u003e工具 Tools\u003c/h1\u003e\n\u003cp\u003e工具指的是那些遠離我們系統核心程式碼，但為我們應用程式所用的工具，例如，DB、搜尋引擎、網頁伺服器或 CLI 控制台（儘管後兩者也是交付機制）。\n\u003cimg alt=\"ea3\" loading=\"lazy\" src=\"https://herbertograca.files.wordpress.com/2018/11/020-explicit-architecture-svg.png?w=1024\u0026h=700\"\u003e\u003c/p\u003e\n\u003cp\u003e雖然將 CLI 與 DB 分類在一起可能有些奇怪，儘管它們有不同的目的，但實際上它們都是應用程式使用的工具。關鍵的區別在於，CLI 和網頁服務器用於告訴我們的應用程式做些什麼，而 DB 則由我們的應用程式告訴它做些什麼。這是一個非常重要的區別，因為它對我們如何建構連接這些工具與應用程式核心的程式碼有著強烈的影響。\u003c/p\u003e\n\u003ch1 id=\"將工具和傳遞機制連接到應用程式核心\"\u003e將工具和傳遞機制連接到應用程式核心\u003c/h1\u003e\n\u003cp\u003e連接工具與應用程式核心的程式碼單元被稱為適配器（Ports \u0026amp; Adapters Architecture），適配器實現了將業務邏輯與特定工具進行通訊。\u003c/p\u003e\n\u003cp\u003e告知我們應用程式應該做什麼事的適配器稱為 \u003cstrong\u003ePrimary 或 Driving Adapters\u003c/strong\u003e；\u003cbr\u003e\n被我們應用程式告知應該做什麼事的適配器稱為 \u003cstrong\u003eSecondary or Driven Adapters\u003c/strong\u003e。\u003c/p\u003e\n\u003ch2 id=\"埠-ports\"\u003e埠 Ports\u003c/h2\u003e\n\u003cp\u003e然而，這些適配器並非隨機創建的，它們是為了適應應用程式核心的一個非常特定的入口點，也就是埠。埠不過是一種規範，說明工具如何使用應用程式核心，或者說明它如何被應用程式核心使用。在大多數語言中，以其最簡單的形式，這種規範，或埠，即是一個介面(interface)，但實際上可能由多個介面和 DTO 組成。\u003c/p\u003e","title":"[IT] DDD, Hexagonal, Onion, Clean, CQRS 大整合"},{"content":"The SOA Style has been around since the late 1980s and has its origins in ideas introduced by CORBA, DCOM, DCE and others. Much has been said about SOA, and there are a few different implementation patterns but, in essence, SOA focuses on only a few concepts and doesn’t give any prescription on how to implement them: SOA風格自 1980 年代晚期便一直存在，其起源於 CORBA、DCOM、DCE 等等。關於 SOA 已經有很多討論，且有許多不同的實作，但本質上，SOA 只關注少數幾個概念，而且指引我們如何去實作：\n使用者導向的應用程式。 可重複使用的商業服務。 獨立的技術堆。 自治性(獨立演進、可擴展性與可部署性) SOA 是一最獨立於任何技術或產品的架構原則，就像多態與封裝一樣。\n通用物件請求代理架構 CORBA - Common Object Request Broker Architecture 在 1980 年代，由於日漸成長的企業網路與客戶端/伺服器架構，人們需要一種方式讓軟體可以用不同的技術來建構且能被執行在不同的作業系統上。CORBA 就是為了這樣的需求而開發的，它是自 1980 年代開始發展，直至 1991 年才趨於成熟的一種分散式計算的標準。\nCORBA 的準則包含：\n平台中立遠端程序呼叫 Platform neutral Remote Procedure Call 交易 Transactions 安全性 Security 事件 Events 程式語言獨立 Programming language independence 作業系統獨立 OS independence 硬軟體立 Hardware independence 獨立於數據傳輸/通訊細節 Isolation from data-transfer/communication details 透過介面定義語言進行數據輸入 Data typing through an Interface Definition Language (IDL). 至此，CORBA 仍被用於異質運算，舉例來說，它目前仍是 JAVA EE 的一部分，儘管從 JAVA 9 開始，它被作為一個單獨的模塊進行打包。\n值得注意的是，我並不認為 CORBA 是 SOA 模式（儘管我認為 CORBA 和 SOA 模式都屬於分散式計算的範疇）。我選擇在這裡介紹它，是因為我認為它的不足導致了 SOA 的興起。\nCORBA 是如何運作的 首先，我們需要獲得一個符合 CORBA 規範的物件請求代理器（Object Request Broker, ORB），它由供應商提供，並使用語言映射器(language mappers)在客戶端的程式碼中生成存根(stubs)和骨架(skeletons)。使用該 ORB 和使用 IDL（類似於 WSDL）定義的介面定義。\n在用戶端，我們生成可以遠程調用的真實類的存根類。 在伺服器端，我們生成可以處理傳入請求並將調用傳遞給真實目標物架的骨架類。 The caller calls a local procedure implemented by the stub;\n呼叫者呼叫由存根實現的本地程序； The stub validates the call and creates a request message that passes to the ORB;\n該存根驗證呼叫並創建一個請求訊息，該訊息會傳遞給ORB； The client ORB sends the message over the network to the server and blocks the current execution thread;\n客戶端ORB將訊息透過網路傳送到伺服器，並阻塞當前的執行線程； The server ORB receives the request message and instantiates the skeleton;\n伺服器的ORB接收請求訊息並實例化骨架； The skeleton executes the procedure on the called object;\n骨架在被呼叫的物件上執行程序 The called object performs a computation and returns the result;\n被呼叫的對象執行計算並返回結果; The skeleton packs the output arguments into a response message and passes it to the ORB;\n骨架將輸出參數打包成一個回應訊息，並將其傳遞給ORB； The ORB sends the message over the network back to the client;\nORB將訊息透過網路傳回給客戶端 The client ORB receives the response message, unpacks it and delivers it to the stub;\n客戶端ORB接收到回應訊息，解開它並將其傳遞給存根； The stub passes output arguments to the caller, releases execution thread and the caller continues in execution.\n存根將輸出參數傳遞給呼叫者，釋放執行線程，然後呼叫者繼續執行。 優點 獨立技術堆（ORB實作除外）。 從數據傳輸/通訊細節中分離。 缺點 位置透明性：客戶端程式碼不知道呼叫是本地還是遠程，這聽起來像是一件好事，然而，延遲和失敗的類型卻大不相同，這取決於它是本地呼叫還是遠程呼叫。不知道呼叫的類型，使得應用程式無法選擇適當的策略來處理方法呼叫，並最終在迴圈內進行遠程呼叫，因此大大地減慢了整個系統的速度。 複雜、冗餘且模糊的規範：該規範是由多個現有供應商版本混合創建的，因此（在當時）它既模糊又冗餘，使得實施變得困難。 阻塞的通訊管道：它使用TCP/IP上的特定協議和特定端口，甚至是隨機端口。但企業的安全規則和防火牆通常只允許通過端口80進行HTTP通訊，有效地阻塞了CORBA通訊。 網路服務 Web Services 雖然CORBA現今仍有其使用情境，我們了解到我們需要減少遠端通訊以提高系統的效能，我們需要一個可靠的通訊管道，並且我們需要一個更簡單的通訊規範。\n因此，在1990年代末，網路服務開始出現，目的是解決上述提到的問題：\n我們需要一條可靠的通訊管道，所以：\n透過 port 80 的 HTTP 是預設的通訊管道。 使用一種跨平台的通訊語言（如XML或JSON）。 我們需要減少遠程通訊，所以：\n我們有明確的遠程通訊，所以我們確切知道何時進行遠程通話。 我們進行了粗粒度的遠程呼叫，也就是說，我們並不經常呼叫遠程對象，而是較少地呼叫遠程服務。 我們需要一個更簡單的通訊規範，所以：\nSOAP 於1998年有了初版，並在2003年達到了W3C的推薦，使其實質上成為一種標準。它體現了CORBA的一些理念，如處理通信的層和使用Web服務描述語言（Web Service Description Language, WSDL）定義介面的「文檔」。 REST 於2000年由Roy Fielding在他的博士論文《Architectural Styles and the Design of Network-based Software Architectures》中定義，它比SOAP規範簡單得多，這使得它比稍微老一點的SOAP規範更快地獲得了更高的採用率。 GraphQL 是由 Facebook 在 2012 年開發並於 2015 年向公眾發布的。它是一種 API 查詢語言，允許客戶端準確指定伺服器應返回的數據，而不是一種特定的負載，從而避免了數據的過度和不足的提取。 [Web] Services can be published, discovered and used in a technology neutral, standard form. - Microsoft 2004, Understanding Service-Oriented Architecture\n[網頁] 服務可以以技術中立、標準形式進行發布、發現和使用。 - Microsoft 2004，理解服務導向架構 透過網路服務，SOA從遠程調用物件方法（CORBA）的範疇轉變為在服務之間傳遞訊息的範疇。\n我們需要理解，在SOA的大旗下，網路服務並不僅僅是一個通用的API，它並不只是透過HTTP提供對其數據庫的CRUD訪問。雖然在某些情況下，這種實現可能是有用的，但它要求用戶理解底層模型並遵守業務規則，以確保您的數據完整性得到保護。SOA意味著網路服務被設計為業務子域的有界上下文，將實現從它們提供的概念服務中抽象出來。\nSOA is not just an architecture of services seen from a technology perspective, but the policies, practices, and frameworks by which we ensure the right services are provided and consumed. - Microsoft 2004, Understanding Service-Oriented Architecture\nSOA不僅僅是從技術角度看的服務架構，而是我們確保提供和使用正確服務的政策、實踐和框架。 - Microsoft 2004，理解服務導向架構\n優點 獨立技術堆、獨立的服務部署與獨立的擴展性。 常見的、簡單且可靠的通訊管道（透過HTTP的文字，port 80）。 優化的通訊。 穩定的通訊規範。 領域內容(domain contexts)的隔離。 缺點 由於使用不同的通訊語言，使得不同網路服務的整合變得困難，例如，兩個使用不同JSON表示相同概念的網路服務。 同步通訊可能會導致系統過載。 訊息佇列 Message Queue 核心理念是讓多個應用程式之間進行異步通訊，使用不可知的訊息。訊息隊列提供了更好的可擴展性和更高的應用程式解耦，因為它們不需要知道其他應用程式的位置，數量，甚至是它們是誰。儘管如此，他們都需要使用相同的通訊語言，即一種預定的文字格式來表示數據。\n訊息佇列使用訊息代理軟體（例如 RabbitMQ、Beanstalkd、Kafka等）作為基礎設施工具，並可以以不同方式設置以實現應用程序之間的通信：\nRequest/Reply 客戶端向訊息佇列發送一條訊息，其中包含一個「對話」參考。該訊息被送達到特定的節點，該節點將以另一條訊息回覆原始發送者，並包含相同的對話參考，以便接收者知道該訊息參考的是哪個對話，並可以繼續進行該過程。對於中長期的業務流程（故事）來說，這非常有用。 Publish/Subscribe List-Based\n它維護已發布主題和這些主題的訂閱者的列表。當它收到某個主題的訊息時，它會將該訊息放入相應的主題列表中。將訊息與主題匹配可以通過訊息類型或者一組更複雜的預定標準來完成，這些標準可以包括訊息內容本身。 Broadcast-Based 基於廣播的\n當它接收到訊息時，會將它們廣播給所有正在監聽隊列的節點。每個監聽節點都負責過濾和處理它所感興趣的訊息。 所有這些模式都可以設定為 pull 或 push 方式：\n在 pull 情境中，客戶端會每隔X時間就向佇列請求一條訊息。這樣做的好處是客戶端能夠控制其負載，但也可能帶來延遲的缺點，即當佇列中有訊息，而客戶端並未處理訊息，只是等待著下一個時機來 pull 新的訊息。 在 push 情境中，佇列會在收到訊息後立即將其推送給客戶端。這樣的優點是沒有延遲，但客戶端無法自我管理他們的負載。 優點 獨立技術堆，獨立的部署性與擴展性。 常見的、簡單且可靠的通訊管道（透過HTTP的文字，port 80）。 優化的通訊。 穩定的通訊規範。 領域內容(domain contexts)的隔離。 輕鬆附加和拆除服務。 非同步通訊有助於管理系統的負載。 缺點 由於不同的通訊語言，使得不同網路服務的整合變得困難，例如，兩個使用不同JSON表示相同概念的網路服務。 企業服務總線 (ESB) 在1990年代，當網路服務正在演進的同時，企業服務總線已經開始利用它們（也許有些實現最初甚至使用了CORBA？）。\nESB在一個背景下誕生，那就是公司有自己的獨立應用程式，比如一個用於財務的應用程式，另一個用於人力資源，另一個用於庫存管理等等，他們需要讓這些應用程式彼此溝通，需要將它們整合起來。但是，這些應用程式並未考慮到整合的問題，並沒有一種共通的語言格式讓應用程式進行溝通（就像今天也沒有）。因此，合理的解決方案是讓應用程式供應商創建端點，以特定格式發送和接收數據。客戶公司則需要通過建立通信管道並將一種應用程式語言的訊息轉換成另一種語言來整合應用程式。\n訊息佇列可能有助於解決這個問題，但它仍然無法解決應用程式具有不同語言格式的問題。然而，將訊息佇列從一個笨拙的通訊頻道轉變為一個處理訊息傳遞和將其轉換為接收者期望的語言/格式的中介軟體，這是一個小步驟。企業服務匯流排是更簡單的訊息佇列的自然演進。\n在這種架構類型中，我們有組合應用程式，通常面向使用者，透過聯繫網路服務來執行某些操作。這些網路服務反過來也可以聯繫其他網路服務，最終，它們可能會將一些數據返回給組合應用程式。然而，無論是組合應用程式還是後端服務，都對彼此的細節一無所知，即它們的位置或通訊協議。他們所知道的是他們需要什麼服務以及服務總線的位置。\n因此，客戶端應用程式（無論是服務或是複合應用程式）將其請求發送到服務總線，服務總線再將訊息轉換成目的地所期待的格式，並將請求路由到目的地。值得注意的是，所有的通訊都通過ESB，這意味著如果ESB停機，所有的通訊都會中斷，所有的系統都將無法運作。最後，ESB就像是一個中介軟體，其中發生了許多事情，使其成為一個高度複雜的產物。\n這當然只是對ESB架構的基本解釋。此外，雖然ESB是這種架構中的主要元件，但也可能涉及其他元件，如領域經紀人、數據服務、流程編排服務或規則引擎。這種架構模式也可以在聯邦設計中設置，其中系統被劃分為業務領域，每個領域都有自己的ESB設置，並且所有這些設置都相互連接。這有助於提高性能並減輕單點故障的問題，即如果一個ESB失敗，只會影響其業務領域。\nfederated_esb\n一個ESB的主要職責是：\n監控並控制服務間訊息交換的路由。 解決服務組件間通訊的訊息翻譯問題。 控制服務的部署和版本管理。 元帥使用多餘的服務。 提供商品服務，如事件處理、數據轉換和映射、消息和事件排隊和排序、安全或異常處理、協議轉換以及強制實施適當的通信服務品質。 When building communication structures between different processes, we’ve seen many products and approaches that stress putting significant smarts into the communication mechanism itself. A good example of this is the Enterprise Service Bus (ESB), where ESB products often include sophisticated facilities for message routing, choreography, transformation, and applying business rules. - Martin Fowler 2014, Microservices\n在建立不同流程間的通訊結構時，我們看到許多產品和方法都強調要在通訊機制本身中投入大量的智慧。一個很好的例子就是企業服務總線（ESB），ESB產品通常包含了訊息路由、編排、轉換和應用業務規則等複雜的設施。 - 馬丁·福勒 2014，微服務\n這種架構模式有其優點，但我發現如果我們並非「擁有」網路服務，因此需要一種中介軟體來轉譯它們之間的訊息，協調涉及多個網路服務的業務流程等，那麼它尤其有用。\n我們也應該記住，ESB的實現已經進化，現在我們甚至可以使用簡單的拖放界面來配置ESB，以滿足大多數使用情況。\n優點 獨立技術堆，獨立的部署性與擴展性。 常見的、簡單且可靠的通訊管道（透過HTTP的文字，port 80）。 優化的通訊。 穩定的通訊規範。 領域內容(domain contexts)的隔離。 輕鬆附加和拆除服務。 非同步通訊有助於管理系統的負載。 版本控制和翻譯管理的單一點。 Cons 缺點 較慢的通訊速度，尤其是對於那些已經相容的服務。 集中邏輯。 可能導致企業所有通訊中斷的單一故障點。 高配置與維護複雜性。 隨著時間的推移，ESB可能最終會包含業務規則。 由於其複雜性，最終將需要一個團隊來管理它 服務變得高度依賴於ESB。 微服務 Microservices 微服務架構的基礎建立在SOA概念上，並與ESB共享相同的全球目標：從多個特定的業務領域應用程序中創建一個全球性的企業應用程序。\n關鍵的差異在於，ESB誕生於需要整合的獨立應用程式的情境中，以實現企業範圍的分散式應用程式，而微服務架構則誕生於快速變化且不斷創新的業務情境中，這些業務（大部分）從零開始創建自己的雲應用程式。\n換句話說，起點是不同的。在ESB的情況下，我們從我們並不「擁有」的現有應用程式開始，因此我們無法改變它們。但是對於微服務，我們對應用程序（不代表系統中不能涉及任何第三方網絡服務）有完全的控制權。\n微服務的建構/設計方式避免了對整合的高度需求。微服務應該針對特定的商業概念，對於有限的上下文，它們應該保持自己的狀態，以便不直接依賴於其他微服務，因此需要較少的整合。換句話說，微服務提供的低耦合和高內聚性有一個好的副作用，那就是減少了對整合的需求。\n[Microservices are] Small autonomous services that work together, modelled around a business domain. - Sam Newman 2015, Principles Of Microservices\n[微服務是] 一種圍繞業務領域模型的小型自主服務，它們共同協作。 - Sam Newman 2015，微服務原則\n由於ESB架構的最大缺點是所有其他應用程序都必須依賴的非常複雜且中心化的應用程式，微服務架構通過幾乎完全移除它來解決這個問題。\n仍然有一些元素貫穿於整個微服務生態系統，但它們的責任並不像企業服務總線(ESB)那麼多。例如，仍然有一個訊息佇列用於微服務之間的異步通訊，但它僅僅是一個訊息管道，沒有其他責任。另一個例子是微服務生態系統的門戶，所有與外界的通訊都是通過這個門戶進行的。\nSam Newman，「建構微服務」一書的作者，確定了微服務架構的八大原則：\nServices are modelled around business domains 服務是根據業務領域來建模的\nBecause it can give us stable interfaces around a business concept, very cohesive and decoupled units of code and clearly identified bounded contexts\n因為它能為我們提供圍繞商業概念的穩定介面，非常有凝聚力且解耦的程式碼單元，以及清晰識別的邊界上下文; Culture of automation 自動化文化\nBecause we will have a lot more moving parts and deployable units;\n因為我們將會有更多的移動部件和可部署單位 Hide implementation details 隱藏實作細節\nTo allow one service to evolve independently of another;\n讓一項服務能夠獨立於另一項服務進行演進; Decentralise all the things 將所有事物去中心化\nDecentralise the decision making power and the architectural concepts, giving autonomy to the teams so that the organisation transforms itself into a Complex Adaptative System who can quickly adapt to change;\n將決策權力和建築概念分散，賦予團隊自主權，使組織轉變為一個能夠迅速適應變化的複雜適應系統； Deploy independently 獨立部署\nSo that we can deploy a new version of a service without the need to change anything else;\n這樣我們就可以部署新版本的服務，而無需改變其他任何事物 Consumer first 以消費者為先\nA service should be easy to consume, easy to be used by other services;\n一項服務應該易於使用，且能輕鬆地被其他服務所使用； Isolate failure 隔離失敗 So that even if one service fails, the others continue to operate, giving the overall system a high resilience to failure; 因此，即使有一項服務失效，其他服務仍會繼續運作，使整體系統對於失效具有高度的抵抗力 Highly observable 高度可觀察的\nDue to the system high number of parts, it is more difficult to understand everything that is going on, so we need sophisticated monitoring tools that allow us to know what is going on in every corner of the system and understand any chain reactions. 由於系統的組件數量龐大，要完全理解所有運作情況變得更為困難，因此我們需要精密的監控工具，讓我們能夠了解系統每一個角落的狀況，並理解任何鏈式反應。 2010 - Microservices The microservice community favours an alternative approach: smart endpoints and dumb pipes. Applications built from microservices aim to be as decoupled and as cohesive as possible – they own their own domain logic and act more as filters in the classical Unix sense – receiving a request, applying logic as appropriate and producing a response. These are choreographed using simple RESTish protocols rather than complex protocols such as WS-Choreography or BPEL or orchestration by a central tool. - Martin Fowler 2014, Microservices\n微服務社區偏好另一種方法：智能端點和簡單管道。由微服務構建的應用程序旨在盡可能地解耦和凝聚 - 它們擁有自己的領域邏輯，並更多地作為經典Unix意義上的過濾器 - 接收請求，適當地應用邏輯並產生響應。這些使用簡單的REST風格協議進行編排，而不是使用如WS-Choreography或BPEL等複雜協議，或由中央工具進行編排。 - 馬丁·福勒 2014，微服務\n優點 獨立技術堆，獨立的部署性和獨立的擴展性。 常見的、簡單且可靠的通訊管道（透過HTTP的文字，port 80）。 優化的通訊。 穩定的通訊規範。 隔離領域上下文。 輕鬆附加和拆除服務。 非同步通訊有助於管理系統的負載。 同步通訊有助於管理系統的性能。 真正獨立且自主的服務。 服務之外無商業邏輯。 具有將組織轉變為複雜適應系統的潛力，該系統由多個能夠快速適應業務變化的小型自主部分/團隊組成。 缺點 高度的操作複雜性。 需要大量投資以建立強大的DevOps文化。 使用大量的技術和庫可能會變得難以控制。 輸入和輸出API的變更必須謹慎管理，因為會有軟體依賴這些介面。 使用最終一致性的做法在開發應用程式時，從後端到使用者體驗層面，都有重大的影響需要被處理。 隨著介面變更，測試變得更為複雜，因為這可能會對其他服務產生無法預測的後果。 Anti-Pattern: Ravioli Architecture 反模式：義大利餛飩架構 「Ravioli架構」是常用來指稱微服務架構的反模式的名稱。當我們創建了一個微服務的生態系統，其中的服務過多、過小，且無法自身代表領域概念時，就會發生這種情況。\nConclusion 結論 在過去的幾十年中，SOA已經進化了許多，並且由於實施解決方案的不足以及技術的進步，我們已經達到了微服務架構。\n這整個演變背後的理念一直都是解決複雜問題的常用策略：將問題分解成較小、可解決的部分。\n解決代碼複雜性也可以在我們有一個單體的情況下，以相同的方式進行，將其分解為解耦的領域組件（有界上下文）。但是，隨著團隊和代碼庫的增長，對於獨立演化、可擴展性和可部署性的需求也在增加。SOA為這種獨立性提供了工具，強制在有界上下文之間設定更嚴格的邊界。\n再一次，這是關於低耦合和高內聚，這次的粒度比以前更粗。同樣，我們需要實事求是地分析我們的需求：只有在真正需要時才使用SOA，因為它會為混合帶來很多複雜性，如果我們真的需要使用SOA，那麼讓我們創建真正適合我們需求的大小和數量的微服務，不多也不少。\n","permalink":"https://intervalrain.github.io/hgraca/service-oriented-architecture-soa/","summary":"\u003cp\u003eThe SOA Style has been around since the late 1980s and has its origins in ideas introduced by CORBA, DCOM, DCE and others. Much has been said about SOA, and there are a few different implementation patterns but, in essence, SOA focuses on only a few concepts and doesn’t give any prescription on how to implement them:\nSOA風格自 1980 年代晚期便一直存在，其起源於 CORBA、DCOM、DCE 等等。關於 SOA 已經有很多討論，且有許多不同的實作，但本質上，SOA 只關注少數幾個概念，而且指引我們如何去實作：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e使用者導向的應用程式。\u003c/li\u003e\n\u003cli\u003e可重複使用的商業服務。\u003c/li\u003e\n\u003cli\u003e獨立的技術堆。\u003c/li\u003e\n\u003cli\u003e自治性(獨立演進、可擴展性與可部署性)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSOA 是一最獨立於任何技術或產品的架構原則，就像多態與封裝一樣。\u003c/p\u003e","title":"[IT] 服務導向的架構 Service Oriented Architecture (SOA)"},{"content":"當我們有一個以數據為中心的應用程式，即只實現基本的 CRUD 操作，並將業務流程（即要更改的數據和更改的順序）留給用戶時，好處是用戶可以在不需要更改應用程式的情況下更改業務流程。另一方面，這意味著所有用戶都需要知道所有可以使用該應用程式執行業務流程的所有細節，這在沒有明確的規範且有大量人員參與其中時，將會是一個大問題。\n在一個以數據為中心的應用程式中，該應用程式對業務流程一無所知，因此該 domain 無法擁有任何「動詞」，也就是說，應用程式本身無法做出除了改變原始數據以外的任何事情。它變成了數據模型(data model)的高度抽象。這些流程只存在於應用程式用戶的腦海中，或者甚至存在於釘在電腦螢幕上的便利貼中。\n一個非凡且實用的應用程式旨在減輕使用者的「流程」負擔，透過捕捉他們的意圖，使其成為一個能夠處理行為的應用程式，而不僅僅是儲存數據。\nCQRS is the result of an evolution of several technical concepts that work together to help provide the application with an accurate reflection of the domain, while overcoming common technical limitations. CQRS 是許多技術概念演變的結果，這些概念使應用程式能準確地反映領域(domain)，並同時克服常見的技術限制。\n命令查詢分離 Command Query Separation 正如 Martin Fowler 所述，「命令查詢分離」這個術語是由 Bertrand Meyer 在他的《物件導向軟體建構(Object Oriented Software Construction)》（1988年）中首次提出的 - 這本書被認為是物件導向早期最具影響力的書籍之一。\n梅爾認為，作為一個原則，我們不應該有既改變數據又返回數據的方法。因此，我們有兩種類型的方法：\nQueries(查詢)：返回數據但不更改數據，因此沒有副作用； Commands(指令)：更改數據，但不返回數據。 換句話說，提問不應改變答案，而行動也不應回饋答案，這同時也有助於尊重單一責任原則。\n然而，有些模式是這條規則的例外，傳統的佇列和堆疊會彈出在佇列或堆疊中的元素，既改變了佇列或堆疊，也返回了從中移除的元素。\n命令模式 Command Pattern 命令模式的主要概念是將我們從資料中心的應用程式轉移到以流程為中心的應用程式，具有領域知識和應用程式流程知識。\n在實際操作中，這意味著我們不再讓使用者執行 CreateUser, ActivateUser 和 SendUserCreatedEmail 這三個動作，而是讓使用者直接執行一個 RegisterUser 的指令，這個指令將會執行前述的三個動作，作為一個封裝的業務流程。\n一個更生動的例子是當我們有一個表單用來更改客戶資料，假設該表單允許我們更改客戶的名稱、地址、電話號碼，以及他是否為優先客戶，並且只有當客戶付清賬單後才能成為優先客戶。在一個 CRUD 應用程式中，我們會接收資料，檢查客戶是否已經付清賬單，然後接受或拒絕資料更改請求。然而，這裡我們有兩個不同的業務流程：即使客戶沒有付清賬單，更改客戶的名稱、地址和電話號碼也應該成功。使用命令模式，我們可以在程式碼中清楚地區分這兩種情況，通過創建兩個代表兩種不同業務流程的命令：一個用於更改客戶資料，另一個用於將客戶升級為優先狀態，兩種流程都由同一個 UI 觸發。\nProvide us with the right level of granularity and intent when modifying data. That’s what commands are all about. - Udi Dahan 2009, Clarified CQRS\n在修改數據時，為我們提供適當的細節程度和意圖，這就是命令的意義。 - Udi Dahan 2009，闡述了CQRS\n然而，這並不意味著不能有一個簡單的 CreateUser 命令。CRUD 用例可以完美地與帶有意圖的用例共存，這些用例代表著複雜的業務流程，但切勿將它們混淆。\n從技術上來說，如同《Head First Design Patterns》所述，命令模式封裝執行某些動作或動作序列所需的所有內容。當我們有多種不同的業務流程（命令）需要在同一地點以相同的方式運行時，這尤其有用，因此它們需要有相同的介面。例如，所有命令都將具有相同的方法 execute()，以便在某個時候，任何命令都可以獨立被觸發而無關乎它是什麼命令，這將允許任何業務流程（命令）被同步或異步執行。\n在《Head First Design Patterns》一書中，給出的例子是一個家中燈光的遙控器。我將使用相同的例子，並指出我認為它的不足的地方。\n那麼，假設我們有一個可以控制家中燈光的遙控器，上面有一個按鈕可以開啟廚房的燈，另一個按鈕可以關閉這些燈，這些按鈕各自代表我們可以對家中燈光系統發出的命令。\n那麼系統可以依下面這種方式設計： 這是一種天真的設計，它甚至沒有考慮到 DIC，也沒有使用適當的 UML，但我希望它能達到目的，所以讓我們來看看上面的圖表：作為對某種交付機制的輸入的反應，LightController 會以 CommandInvoker 作為建構子提共參數實例化，並觸發特定的控制器動作，即 kitchenLightOnAction。這個動作將實例化適當的燈，即 KitchenLight，並且也將實例化適當的命令，即 KitchenLightOnCommand，並將燈物件作為建構子參數傳遞給它，然後將命令交給 CommandInvoker，它將在某個時候執行它。要關掉燈，我們將創建另一個動作和另一個命令，但設計基本上會是相同的。\n所以我們有一個命令來開燈，另一個命令來關燈。如果我們需要將燈光設定為 50% 的功率呢？我們需要創建另一個命令！如果我們需要將它們設定為 25% 和 75% 呢？我們需要創建更多的命令！如果，我們有一個調光器，而不是按鈕，可以將燈光設定為幾乎任何值呢？我們不可能創建無窮無盡的命令！！！\n在此階段，實作的問題是，指令中的邏輯將會是相同的，但數據(功率)每次都會不同。因此，我們應該創建一個具有相同邏輯並可以套用不同數據來執行的指令。但接下來我們遇到另一個問題：介面的 execute() 方法不接受參數。如果它接受參數，那將會破壞 Command 的整個技術概念(封裝執行某些業務流程所需的所有內容，而不必確切知道將要執行什麼)。\n當然，我們可以透過在建構子中傳遞數據來解決這個問題，但這並不優雅。實際上，這將是一種駭客行為，因為該數據並非物件存在的必要條件，而是它執行某些邏輯所需的東西，所以該數據是方法的依賴，而非物件的依賴。\n命令總線 Command Bus 可參考我的實作: EventBus\n我們可以做的，以解決前述的命令模式限制，就是應用物件導向中最古老的原則之一：將變動的與不變動的分開。\n在這種情況下，改變的是數據，而不變的是命令中執行的邏輯，所以我們可以將它們分成兩個類別：一個將是用一個簡單的 DTO 來保存數據（我們將其稱為 command），另一個要保留要執行的邏輯（我們將其稱為 handler），它將有一個觸發邏輯執行的方法，即 execute。我們還將使命令調用者(command invoker)進化成能夠接收命令並找出哪個處理器可以處理它的東西。我們將其稱為命令總線(command bus)。\n此外，透過稍微改變使用者介面模式，許多指令不需要立即處理，它們可以被排隊並異步執行，這具有一些優點，使系統更為穩健：\n因為我們並未立即處理指令，所以對使用者的回應能更快地送回。 如果是因為系統缺陷，例如軟體的錯誤或者資料庫離線，導致命令執行失敗，使用者甚至可能完全不會察覺。當問題解決後，這個命令可以簡單地再次執行。 擁有一個集中的地方來觸發我們需要運行的邏輯（也就是觸發處理器的地方），也讓我們有一個地方可以添加將在所有處理器之前和/或之後執行的邏輯。例如，我們可以在將命令數據傳遞給處理器之前進行驗證，或者我們可以將處理器的執行包裹在一個數據庫事務中，或者我們可以讓命令總線支持複雜的佇列操作和異步命令/處理器執行。\n命令總線通常達成這個目標的方式是使用裝飾器(Decorators)，這些裝飾器會包裹在命令總線周圍（或已經裝飾它的裝飾器上），形成一種類似俄羅斯套娃的結構。 這讓我們可以創建自己的裝飾器，並配置（可能是第三方的）命令總線，由任何裝飾器組成，按任何順序，將我們的自定義功能添加到命令總線中。如果我們需要命令隊列，我們添加一個裝飾器來管理命令的隊列。如果我們不使用事務型數據庫，我們就不需要一個裝飾器來將處理器執行包裹在數據庫事務中，等等。\n命令查詢責任分離 Command Query Responsibility Segregation 透過整合CQS、命令、查詢和命令總線的概念，我們終於達到了CQRS。CQRS可以以不同的方式和不同的層次來實現，也許只有命令方面，或者可能不使用命令總線。為了完整性，這是一個圖表，代表我如何看待一個完整的CQRS實現：\n查詢端 Query side 遵循 CQS，查詢端只會返回數據，而不會對其進行任何更改。由於我們並不打算對該數據執行業務流程，因此我們不需要業務物件（即實體），所以我們不需要 ORM 為我們填充實體，也不需要獲取所有需要填充實體的數據，我們只需要查詢原始數據給用戶，並且只需要查詢那些真正需要的數據！\n這就是一種效能的提升：在查詢資料時，我們不需要經過業務邏輯層來獲取，我們只做並獲取我們確實需要的東西。\n由於這種分離，另一種可能的優化是將數據儲存完全分離成兩個獨立的數據儲存：一個專門寫入優化，另一個專為讀取優化。例如，如果我們正在使用 RDBMS(關聯式數據庫管理系統)：\n讀取操作不需要進行任何數據完整性驗證，也不需要任何外鍵約束，因為數據完整性驗證是在寫入數據儲存時完成的。因此，我們可以從讀取數據庫中移除數據完整性約束。 我們也可以在每個模板中使用具有我們需要的確切數據的 DB 視圖，使查詢變得簡單，因此更快（儘管我們需要將視圖與模板變更保持同步，增加了系統的複雜性）。 在這個階段，如果我們為每個模板都有一個專門的 DB 視圖，這使得查詢變得簡單，那我們為什麼還需要一個 RDBMS 來讀取呢？也許我們可以使用像 Mongo DB 或者甚至是Redis 這樣的文件儲存來讀取，這些都更快。也許可以，也許不行，我只是說如果應用程式在讀取方面有性能問題，那麼考慮一下這個問題可能是值得的。\n查詢本身可以使用一個查詢物件來完成，該物件返回一個數據數組以在模板中使用，或者我們可以使用更為高級的東西，例如 query bus。舉例來說，它接收一個模板名稱，使用查詢物件來查詢數據，並返回模板所需的 ViewModel 實例。\n這種方法可以解決 Greg Young 所指出的幾個問題：\n儲存庫上的大量讀取方法通常也包含分頁或排序資訊。 為了建立資料傳輸物件，暴露了領域物件內部狀態的 getters。 在讀取用例上使用預取路徑，因為他們需要 ORM 加載更多的數據。 載入多個聚合根以建立 DTO 會導致對數據模型的查詢不夠理想。另一方面，由於 DTO 建立操作，聚合邊界可能會變得混亂。 然而，最大的問題是查詢的優化極度困難：因為查詢是在物件模型上運行，然後由 ORM 可能轉換為數據模型，因此優化這些查詢可能非常困難。 指揮端 Command side 如前所述，我們透過使用指令，將應用程式從資料中心設計轉變為行為設計，這與領域驅動設計相符。\n通過從處理命令的代碼中，從領域中移除讀取操作，Greg Young 所指出的問題就會消失：\n領域物件不再需要暴露內部狀態。 除了 GetById 之外，儲存庫幾乎沒有或根本沒有任何查詢方法 我們可以在專注於聚合邊界上的行為。 「一對多」和「多對多」的實體關係可能會對 ORM 性能產生嚴重影響。但好險我們在處理命令時很少需要這些關係，它們主要用於查詢，而我們剛剛將查詢從命令處理中移走，所以我們可以刪除這些實體關係。我在這裡談的不是關係型數據庫管理系統中表之間的關係，那些外鍵約束應該仍然存在於寫入數據庫中，我談的是在 ORM 級別配置的實體之間的連接。\nDo we really need a collection of orders on the customer entity? In what command would we need to navigate that collection? In fact, what kind of command would need any one-to-many relationship? And if that’s the case for one-to-many, many-to-many would definitely be out as well. I mean, most commands only contain one or two IDs in them anyway. - Udi Dahan 2009, Clarified CQRS\n我們真的需要在客戶實體上收集訂單嗎？在什麼命令中我們需要導航該集合？實際上，什麼樣的命令會需要任何一對多的關係？如果對於一對多的情況就是這樣，那麼多對多肯定也會被排除。我的意思是，大多數命令中只包含一兩個ID。 - Udi Dahan 2009，闡述了CQRS\n與查詢端的思考方式相同，如果寫入端並未用於複雜的查詢，我們是否可以將 RDBMS 替換為帶有序列化實體的文件或鍵值儲存？可能可以，也可能不行，但在應用程式在寫入端遇到性能問題，這可能值得思考。\n商業流程事件 Business process events 在一個指令被處理之後，如果成功地被處理，處理器會觸發一個事件，通知應用程式的其餘部分發生了什麼。這些事件應該以觸發它的指令來命名，但是，按照事件的規則，它應該使用過去式。\nConclusion 結論 透過使用 CQRS，我們可以完全將讀取模型與寫入模型分開，讓我們能夠擁有最佳化的讀取和寫入操作。這不僅提升了性能，也增加了程式碼庫的清晰度和簡單性，使程式碼庫能夠反映出領域，並提高了程式碼庫的可維護性。\n再次強調，這全都關於封裝、低耦合、高內聚，以及單一責任原則。\n儘管如此，我們仍需記住，雖然CQRS提供了一種設計風格和多種技術解決方案，可以使應用程式非常強大，但這並不意味著所有的應用程式都應該這樣建立：我們應該在需要的時候，使用我們需要的東西。\n","permalink":"https://intervalrain.github.io/hgraca/from-cqs-to-cqrs/","summary":"\u003cp\u003e當我們有一個以數據為中心的應用程式，即只實現基本的 CRUD 操作，並將業務流程（即要更改的數據和更改的順序）留給用戶時，好處是用戶可以在不需要更改應用程式的情況下更改業務流程。另一方面，這意味著所有用戶都需要知道所有可以使用該應用程式執行業務流程的所有細節，這在沒有明確的規範且有大量人員參與其中時，將會是一個大問題。\u003c/p\u003e\n\u003cp\u003e在一個以數據為中心的應用程式中，該應用程式對業務流程一無所知，因此該 domain 無法擁有任何「動詞」，也就是說，應用程式本身無法做出除了改變原始數據以外的任何事情。它變成了數據模型(data model)的高度抽象。這些流程只存在於應用程式用戶的腦海中，或者甚至存在於釘在電腦螢幕上的便利貼中。\u003c/p\u003e\n\u003cp\u003e一個非凡且實用的應用程式旨在減輕使用者的「流程」負擔，透過捕捉他們的意圖，使其成為一個能夠處理行為的應用程式，而不僅僅是儲存數據。\u003c/p\u003e\n\u003cp\u003eCQRS is the result of an evolution of several technical concepts that work together to help provide the application with an accurate reflection of the domain, while overcoming common technical limitations.\nCQRS 是許多技術概念演變的結果，這些概念使應用程式能準確地反映領域(domain)，並同時克服常見的技術限制。\u003c/p\u003e\n\u003ch1 id=\"命令查詢分離-command-query-separation\"\u003e命令查詢分離 Command Query Separation\u003c/h1\u003e\n\u003cp\u003e正如 Martin Fowler 所述，「命令查詢分離」這個術語是由 Bertrand Meyer 在他的《物件導向軟體建構(Object Oriented Software Construction)》（1988年）中首次提出的 - 這本書被認為是物件導向早期最具影響力的書籍之一。\u003c/p\u003e\n\u003cp\u003e梅爾認為，作為一個原則，我們不應該有\u003cstrong\u003e既改變數據又返回數據\u003c/strong\u003e的方法。因此，我們有兩種類型的方法：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eQueries(查詢)：返回數據但不更改數據，因此沒有副作用；\u003c/li\u003e\n\u003cli\u003eCommands(指令)：更改數據，但不返回數據。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e換句話說，\u003cem\u003e提問不應改變答案，而行動也不應回饋答案\u003c/em\u003e，這同時也有助於尊重單一責任原則。\u003c/p\u003e\n\u003cp\u003e然而，有些模式是這條規則的例外，傳統的佇列和堆疊會彈出在佇列或堆疊中的元素，既改變了佇列或堆疊，也返回了從中移除的元素。\u003c/p\u003e\n\u003ch1 id=\"命令模式-command-pattern\"\u003e命令模式 Command Pattern\u003c/h1\u003e\n\u003cp\u003e命令模式的主要概念是將我們從資料中心的應用程式轉移到以流程為中心的應用程式，具有領域知識和應用程式流程知識。\u003c/p\u003e\n\u003cp\u003e在實際操作中，這意味著我們不再讓使用者執行 \u003ccode\u003eCreateUser\u003c/code\u003e, \u003ccode\u003eActivateUser\u003c/code\u003e 和 \u003ccode\u003eSendUserCreatedEmail\u003c/code\u003e 這三個動作，而是讓使用者直接執行一個 \u003ccode\u003eRegisterUser\u003c/code\u003e 的指令，這個指令將會執行前述的三個動作，作為一個封裝的業務流程。\u003c/p\u003e","title":"[IT] 從 CQS 到 CQRS"},{"content":"利用事件來設計應用程式似乎是 80年代後期開始的一種做法，我們可以在使用事件在前端或後端任何地方使用事件，當按下一個按鈕，涉及某些數據變更，或是執行某些後端動作時。\nWhat/When/Why 就像類別(classes)一樣，組件(components)之間應該保持低耦合，但在內部應保持高內聚。當組件需要協作時，比如說組件A需要觸發組件B中的某些邏輯，自然的做法就是讓組件A調用組件B中一個物件的方法。然而，如果A知道B的存在，那麼它們就是耦合的，A依賴於B，這使得系統更難改變和維護，事件可以用來防止耦合。\n如果我們有一個團隊只專注於組件B的工作，它可以改變組件B對組件A邏輯的反應，甚至不需要與負責組件A的團隊溝通。組件可以獨立進化：我們的應用程式變得更有機(organic)。\n即使在同一個組件中，有時我們會需要執行程式碼作為一個行動的結果，但它並不需要立即執行，也就是說，當事件的結果互不影響的情境下，我們可以採用 異步(async) 的策略執行程式。\n然而，這樣做也存在危險，如果我們不加選擇地使用事件，可能會使一個概念上高度內聚的邏輯被解耦。換句話說，本應在一起的程式碼被強行分開，變得很難追蹤、理解(類似goto語句)，最後使得它變成：speghetti code！\n為了防止我們的程式碼變成一堆混亂的 speghetti code，我們應該清楚的限制事件的使用規則。根據我的經驗，有三種情況下應該使用事件：\n解耦元件。 執行異步任務。 追蹤狀態變更 (audit log) 1. 解耦元件 當元件A執行需要觸發元件B邏輯的動作時，我們可以選擇不直接呼叫它，而是將一個事件發送到事件調度器(dispatcher)中。元件B將會在調度器中監聽該特定事件，並在事件發生時作出反應。\n這意味著A和B都將依賴於調度器和事件，但他們將對彼此一無所知，也就是說他們是解耦的。\n理想情況下，調度器和事件都不應存在於任何組件中：\n調度器應該是一個與我們的應用程式完全獨立的庫，因此應該使用依賴性管理系統安裝在一個通用的位置。在PHP世界中，我們會使用 Composer 將之安裝在 vendor 的資料夾。(C# 可以參考我 EventBus 的文章) 這個事件雖然是我們應用程式的一部分，但應該存在於兩個組件之外，以保持它們對彼此一無所知。該事件在組件之間共享，並且是應用程式核心的一部分。事件是 DDD 所稱的 共享核心(Shared Kernel) 的一部分。這樣，兩個組件將依賴於共享核心，但將對彼此保持不知情。然而，在單體應用程式中，為了方便，可以將其放置在觸發事件的組件中。 Shared Kernel\n共享核心\n[…] Designate with an explicit boundary some subset of the domain model that the teams agree to share. Keep this kernel small. […] This explicitly shared stuff has special status, and shouldn’t be changed without consultation with the other team. - Eric Evans 2014, Domain-Driven Design Reference\n[…] 指定一個團隊同意共享的領域模型的子集，並明確劃定其範疇。保持這個核心部分的規模小。[…] 這些明確共享的內容具有特殊的地位，不應在未與其他團隊諮詢的情況下進行更改。 - 艾瑞克·埃文斯 2014，領域驅動設計參考資料\n2. 執行異步任務 有時候，我們有一段邏輯需要執行，但可能需要花費相當長的時間來執行，我們並不希望讓使用者等待它完成。在這種情況下，我們希望將其設定為異步任務，並立即向使用者返回一條消息，告知他的請求將在稍後異步執行。\n例如，您可以同步地在網店下訂單，但發送電子郵件通知用戶可以異步完成。\n在這種情況下，我們可以做的是觸發一個將被排隊的事件，並將其留在隊列中，直到有工作人員可以接手並在系統有資源時執行它。\n在這些情況下，相關邏輯是否在同一個有界上下文中並不真正重要，因為無論如何：邏輯都是解耦的。\n3. 追蹤狀態變更(audit log) 在傳統的數據儲存方式中，我們利用一些實體(entities)來保存數據。當這些實體中的數據發生變化時，我們只需要更新 DB 表格的一行，以反映這個變化。\n問題是，我們並未記錄發生了什麼事與何時發生。\n我們可以將經歷變更的事件儲存在 audit log 的結構中。\n更仔細的內容會在底下的 Event Sourcing 說明。\nListeners V.S. Subscribers 在實施事件驅動架構時，常見的討論是應該使用事件監聽器(listeners)還是事件訂閱者(subscribers)：\n事件監聽器(Event Listeners)只對一種事件作出反應，並可以有多種方法對其作出反應。因此，我們應該根據事件名稱來命名監聽器，例如，如果我們有一個UserRegisteredEvent，我們將有一個UserRegisteredEventListener，這將使我們能夠輕易知道，即使不看文件內容，該監聽器正在監聽哪個事件。對事件的方法（反應）應該反映該方法實際上的作用，例如notifyNewUserAboutHisAccount()和notifyAdminThatNewUserHasRegistered()。這應該是大多數情況下的常規做法，因為它使監聽器保持小巧並專注於對特定事件的反應。此外，如果我們有一個組件化的架構，每個組件(如果需要)都會有自己的監聽器來監聽可能從多個位置觸發的事件。\n事件訂閱者(Event Subscribers)會對多個事件作出反應，並有多種方法對它們作出反應。訂閱者的命名較為困難，因為它不能隨意命名，然而，訂閱者仍應遵守單一責任原則，因此訂閱者的名稱需要反映其單一的意圖。使用事件訂閱者應該是一種較少見的方法，尤其是在組件中，因為它很容易打破單一責任原則。一個事件訂閱者的好用例是管理交易(transaction)，更具體地說，我們可以有一個名為RequestTransactionSubscriber的事件訂閱者，對RequestReceivedEvent、ResponseSentEvent和KernelExceptionEvent等事件作出反應，並分別在它們的方法中綁定開始(start)、提交(commit)和回滾交易(rollback)，例如startTransaction()、finishTransaction()和rollbackTransaction()。這將是一個對多個事件作出反應，但仍專注於管理請求交易的單一責任的訂閱者。\nPatterns 模式 Martin Fowler 提出三種不同的事件模式：\nEvent Notification 活動通知 Event-Carried State Transfer 事件攜帶狀態轉移 Event-Sourcing 事件源 所有這些模式都擁有相同的關鍵概念：\n事件傳達了某事已經發生(它們在某事之後發生)。 事件會被推播到任何正在監聽的程式碼（多個程式碼單元可以對事件作出反應）。 活動通知 Event Notification 假設我們有一個應用程式核心，其中的組件都有明確的定義。理想情況下，這些組件彼此完全解耦，但是，它們的某些功能需要在其他組件中執行一些邏輯。\n如我們之前所描述的，最典型的情況：當組件A執行需要觸發組件B邏輯的邏輯時，並不直接呼叫它，而是觸發一個事件並將其發送到事件分派器。組件B將在分派器中監聽該特定事件，並在事件發生時採取行動。\n值得注意的是，這種模式的一個特點是事件攜帶的數據極少。它只攜帶足夠的數據讓監聽者知道發生了什麼事情並執行他們的代碼，通常只有實體ID和可能的事件創建日期和時間。\n優點 如果事件被排隊，即使由於錯誤而無法立即執行次要邏輯，原始組件也可以執行其邏輯（由於它們已在佇例中，因此可以在修復錯誤後稍後執行），這樣可以提高韌性。 降低延遲，如果事件已經在佇列中，使用者就無需等待該邏輯被執行。 團隊可以獨立地發展各個組件，使他們的工作更為輕鬆、快速，少出問題，且更具有機性； 缺點 如果沒有準則地使用，它有可能將程式碼變成 speghetti code。 事件攜帶狀態轉移 Event-Carried State Transfer 讓我們再次考慮前面的一個例子，一個應用程式核心有明確定義的組件。這次，對於他們的某些功能，他們需要從其他組件獲取數據。獲取這些數據的最自然方式是向其他組件詢問，但這意味著查詢的組件將知道被查詢的組件之間會有耦合。\n分享這些數據的另一種方式是使用在擁有數據的組件更改它時觸發的事件，該事件將攜帶數據的全新版本。對該數據感興趣的組件將會監聽這些事件，並通過儲存該數據的本地副本來對它們做出反應。這樣，當他們需要該外部數據時，他們將在本地擁有它，不需要向其他組件查詢它。\n優點 更強的韌性，因為即使被查詢的組件變得無法使用（無論是因為有錯誤或遠程服務器無法連接），查詢組件仍能正常運作。 降低延遲，因為無需進行遠程呼叫（當查詢的組件是遠程的）來訪問數據。 我們不必擔心被查詢組件的負載，以滿足所有查詢組件（尤其是遠程組件）的查詢。 缺點 將會有多份的副本。 查詢組件的複雜性較高，因為它需要維護外部數據的本地副本的邏輯。 也許如果兩個組件在同一個進程(progress)中執行，這種模式就不必要了，因為這樣可以使組件之間的通信更快，但即便如此，為了解耦、維護性或微服務架構，我們仍可將這些組件解耦作為微服務的準備。這完全取決於我們目前、或未來的需求，以及我們希望/需要解耦到何種程度。\n事件源處理 Event Sourcing 讓我們假設一個實體在其初始狀態。作為一個實體，它有自己的 id，它是應用程式正在模擬現實世界中的特定事物。在其生命週期中，實體數據會變化，傳統上，實體的當前狀態僅作為一行數據儲存在 DB 中。\n交易記錄 Transaction log 這在大多數情況下都是可以的，但如果我們需要知道實體是如何達到那種狀態的（即我們想知道我們銀行帳戶的借記和貸記）該怎麼辦？但這是不可能的，因為我們只儲存了當前的狀態！\n我們使用事件源，而不是儲存實體狀態，我們專注於儲存實體狀態的變化並從這些變化中計算實體狀態。每一個狀態變化都是一個事件，儲存在事件流中（即在關聯式數據庫管理系統的表中）。當我們需要一個實體的當前狀態時，我們會從事件流中的所有事件計算出來。\nThe event store becomes the principal source of truth, and the system state is purely derived from it. For programmers, the best example of this is a version-control system. The log of all the commits is the event store and the working copy of the source tree is the system state. - Greg Young 2010, CQRS Documents\n事件儲存庫成為了主要的真實來源，而系統狀態完全由其衍生。對於程式設計師來說，最好的例子就是版本控制系統。所有提交的日誌就是事件儲存庫，而源碼樹的工作副本就是系統狀態。 - 葛瑞格·楊 2010，CQRS 文件\n刪除 Deletions 如果我們有一個狀態變更（事件）是錯誤的，我們不能簡單地刪除該事件，因為這將改變狀態變更的歷史，並且這將違反進行事件源的整個理念。相反，我們在事件流中創建一個事件，該事件反轉我們希望刪除的事件。這個過程被稱為反轉交易，不僅將實體帶回到所需的狀態，而且還留下一條痕跡，顯示該對象在某個時間點曾處於該狀態。\nThere are also architectural benefits to not deleting data. The storage system becomes an additive only architecture, it is well known that append-only architectures distribute more easily than updating architectures because there are far fewer locks to deal with. - Greg Young 2010, CQRS Documents\n不刪除數據也有其架構上的好處。儲存系統變成了一種「只增不減(append-only)」的架構，眾所周知，「只增不減」的架構比「更新(update)」的架構更容易分發，因為要處理的鎖(lock)遠少得多。 - 葛瑞格·楊 2010，CQRS 文件\n快照 Snapshots 然而，當我們在事件流中有許多事件時，計算實體狀態將會耗費大量資源，並且效能不佳。為了解決這個問題，我們將在每X數量的事件後創建該時點的實體狀態快照。這樣，當我們需要實體狀態時，我們只需要計算到最後一個快照為止。甚至，我們可以保持一個永久更新的實體狀態快照，這樣我們就能兼得兩全其美。 2006 - 2 - Event Sourcing\n預測 Projections 在事件源中，我們也有預測的概念，這是從特定時刻到特定時刻的事件流的計算。這意味著快照，或者實體的當前狀態，符合預測的定義。但在預測概念中最有價值的想法是，我們可以分析實體在特定時間段的行為(behavior)，這使我們能夠對未來做出有根據的猜測（例如，如果在過去的5年中，一個實體在八月份的活動增加，那麼下一個八月份可能會發生同樣的情況），這對於業務來說可能是一項極其有價值的能力。\n優點與缺點 事件源可以對商業和開發過程都非常有用：\n我們查詢這些事件，對於業務和開發都很有用，以理解用戶和系統行為（除錯）; 我們也可以利用事件日誌來重建過去的狀態，這對業務和開發都非常有用 自動調整狀態以應對追溯變更，對商業來說非常有利 透過在重播時注入假設事件來探索替代歷史，對商業來說真是太棒了。 但並非所有事情都是好消息，請注意隱藏的問題：\n外部更新 External updates 當我們的活動在外部系統中觸發更新時，我們不希望在重播活動以創建投影時重新觸發那些活動。在這個時候，我們可以簡單地在「重播模式」下禁用外部更新，也許可以將該邏輯封裝在一個閘道(gateway)中。 另一種解決方案，取決於實際問題，可能是將更新至外部系統的資訊進行緩衝，並在一定的時間後執行，當可以安全地假設事件不會被重播時。\n外部查詢 External Queries 當我們的活動使用查詢到外部系統，例如獲取股票債券評級，我們在重播事件以創建預創時會發生什麼？我們可能希望獲得與首次運行事件時（可能是幾年前）使用的相同評級。因此，遠程應用程式可以給我們這些值，或者我們需要將它們儲存在我們的系統中，以便我們可以模擬遠程查詢，再次，通過在閘道中封裝該邏輯。\n程式碼變更 Code Changes Martin Fowler 提出了三種類型的程式碼變更：\n新功能 錯誤修復 時間邏輯 真正的問題來自於重播應該在不同時間點使用不同業務邏輯規則的事件，例如，去年的稅收計算與今年的不同。通常，可以使用條件邏輯，但這會變得混亂，所以建議使用策略模式代替。\n所以，我建議要謹慎，並且我儘可能地遵循以下規則：\n保持事件的簡單，只知道狀態的變化，而不知道如何做出決定。這樣我們可以安全地重播任何事件，並期望即使業務規則在此期間已經改變，結果仍然相同（儘管我們需要保留舊的業務規則，以便在重播過去的事件時應用它們）。 與外部系統的互動不應依賴這些事件，這樣我們可以安全地重播事件，而不會有重新觸發外部邏輯的危險，我們也不需要確保來自外部系統的回應與原始播放事件時相同。 當然，就像其他任何模式一樣，我們不需要在所有地方都使用它，我們應該在它有意義的地方，它能為我們帶來優勢並解決比它創造的問題更多的問題的地方使用它。\n結論 再次提醒，本文主要在說明封裝、低耦合和高內聚。\n事件可以為程式碼庫的維護性、性能和成長帶來巨大的好處，但是，透過事件源，也可以提高系統數據的可靠性和所能提供的信息。\n然而，這條路徑有其自身的危險，因為概念和技術的複雜性都在增加，而任何一方的誤用都可能導致災難性的結果。\n","permalink":"https://intervalrain.github.io/hgraca/event-driven-architecture/","summary":"\u003cp\u003e利用事件來設計應用程式似乎是 80年代後期開始的一種做法，我們可以在使用事件在前端或後端任何地方使用事件，當按下一個按鈕，涉及某些數據變更，或是執行某些後端動作時。\u003c/p\u003e\n\u003ch1 id=\"whatwhenwhy\"\u003eWhat/When/Why\u003c/h1\u003e\n\u003cp\u003e就像類別(classes)一樣，組件(components)之間應該保持低耦合，但在內部應保持高內聚。當組件需要協作時，比如說組件A需要觸發組件B中的某些邏輯，自然的做法就是讓組件A調用組件B中一個物件的方法。然而，如果A知道B的存在，那麼它們就是耦合的，A依賴於B，這使得系統更難改變和維護，事件可以用來\u003cstrong\u003e防止耦合\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e如果我們有一個團隊只專注於組件B的工作，它可以改變組件B對組件A邏輯的反應，甚至不需要與負責組件A的團隊溝通。組件可以獨立進化：\u003cstrong\u003e我們的應用程式變得更有機(organic)\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e即使在同一個組件中，有時我們會需要執行程式碼作為一個行動的結果，但它並不需要立即執行，也就是說，當事件的結果互不影響的情境下，我們可以採用 \u003cstrong\u003e異步(async)\u003c/strong\u003e 的策略執行程式。\u003c/p\u003e\n\u003cp\u003e然而，這樣做也存在危險，如果我們不加選擇地使用事件，可能會使一個概念上高度內聚的邏輯被解耦。換句話說，本應在一起的程式碼被強行分開，變得很難追蹤、理解(類似\u003ccode\u003egoto\u003c/code\u003e語句)，最後使得它變成：speghetti code！\u003c/p\u003e\n\u003cp\u003e為了防止我們的程式碼變成一堆混亂的 speghetti code，我們應該清楚的限制事件的使用規則。根據我的經驗，有三種情況下應該使用事件：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e解耦元件。\u003c/li\u003e\n\u003cli\u003e執行異步任務。\u003c/li\u003e\n\u003cli\u003e追蹤狀態變更 (audit log)\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"1-解耦元件\"\u003e1. 解耦元件\u003c/h2\u003e\n\u003cp\u003e當元件A執行需要觸發元件B邏輯的動作時，我們可以選擇不直接呼叫它，而是將一個事件發送到事件調度器(dispatcher)中。元件B將會在調度器中監聽該特定事件，並在事件發生時作出反應。\u003c/p\u003e\n\u003cp\u003e這意味著A和B都將依賴於調度器和事件，但他們將對彼此一無所知，也就是說他們是解耦的。\u003c/p\u003e\n\u003cp\u003e理想情況下，調度器和事件都不應存在於任何組件中：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e調度器應該是一個與我們的應用程式完全獨立的庫，因此應該使用依賴性管理系統安裝在一個通用的位置。在PHP世界中，我們會使用 \u003cstrong\u003eComposer\u003c/strong\u003e 將之安裝在 \u003cem\u003evendor\u003c/em\u003e 的資料夾。(C# 可以參考我 \u003ca href=\"../../it/eventbus/\"\u003eEventBus 的文章\u003c/a\u003e)\u003c/li\u003e\n\u003cli\u003e這個事件雖然是我們應用程式的一部分，但應該存在於兩個組件之外，以保持它們對彼此一無所知。該事件在組件之間共享，並且是應用程式核心的一部分。事件是 DDD 所稱的 \u003cstrong\u003e共享核心(Shared Kernel)\u003c/strong\u003e 的一部分。這樣，兩個組件將依賴於共享核心，但將對彼此保持不知情。然而，在單體應用程式中，為了方便，可以將其放置在觸發事件的組件中。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eShared Kernel\u003c/strong\u003e\u003cbr\u003e\n\u003cstrong\u003e共享核心\u003c/strong\u003e\u003cbr\u003e\n\u003cem\u003e[…] Designate with an explicit boundary some subset of the domain model that the teams agree to share. Keep this kernel small. […] This explicitly shared stuff has special status, and shouldn’t be changed without consultation with the other team.\u003c/em\u003e - \u003cem\u003e\u003cstrong\u003eEric Evans 2014, Domain-Driven Design Reference\u003c/strong\u003e\u003c/em\u003e\u003cbr\u003e\n\u003cem\u003e[…] 指定一個團隊同意共享的領域模型的子集，並明確劃定其範疇。保持這個核心部分的規模小。[…] 這些明確共享的內容具有特殊的地位，不應在未與其他團隊諮詢的情況下進行更改。\u003c/em\u003e - \u003cem\u003e\u003cstrong\u003e艾瑞克·埃文斯 2014，領域驅動設計參考資料\u003c/strong\u003e\u003c/em\u003e\u003c/p\u003e","title":"[IT] 事件驅動架構 Event-Driven Architecture"},{"content":"Robert C. Martin (aka Uncle Bob) 在 2012 年在他的部落格上發表了他對於乾淨架構的想法，並在幾個會議上進行了關於乾淨架構的演講。\n乾淨架構套用了許多為人熟知的概念、規則和模式，並解釋如何將它們組合在一起，以提出一種標準化的應用程式建構方式。\n站在 EBI, Ports \u0026amp; Adapters 與洋蔥架構的肩膀上 乾淨架構背後的核心目標與 Ports \u0026amp; Adapters(六邊形)和洋蔥架構的目標是相同的：\n工具的獨立性。 交付機制的獨立性。 獨立測試的可行性。 在發布有關乾淨架構的文章中，這是用來解釋整體概念的一張圖： 正如 Uncle Bob 在他的文章中所說，上面這張圖嘗試將最新的架構思想整合成一個可行的概念。\n讓我們將乾淨架構的圖表與用來解釋六角架構和洋蔥架構的圖表進行比較，看看它們在哪些地方相符：\n工具和交付機制的外部化 六角形架構專注於將工具和交付機制從應用程式中外部化，使用介面(ports))和適配器(adapters)。這也是洋蔥架構的核心價值之一，如圖所見，UI、基礎設施和測試都在圖表的最外層。乾淨的架構具有完全相同的特性，將 UI、Web、DB 等都放在最外層。最後，所有應用程式核心程式碼都是與框架、庫獨立的。\n依賴方向 在六角架構中，我們並沒有任何明確的指示告訴我們依賴性的方向。然而，我們可以輕易地推斷出來：應用程式有一個埠(或介面)，必須由一個適配器來實現或使用。因此，適配器依賴於介面，它依賴於位於中心的應用程式。外部的東西依賴於內部的東西，依賴性的方向是朝向中心。在洋蔥架構圖中，我們也沒有任何明確的指示告訴我們依賴性的方向，然而，在他的第二篇文章中，Jeffrey Palermo 非常清楚地說明所有的依賴性都是朝向中心。乾淨架構則是非常明確地指出依賴性方向是朝向中心。他們都在架構層面引入了依賴反轉原則。內圈中的任何東西都不能知道外圈中的任何東西。此外，當我們跨越邊界傳遞數據時，它總是以對內圈來說最方便的形式存在。\n分層 六角形架構圖只顯示了兩層：應用程式的內部和外部。然而，洋蔥架構則將 DDD 中 application layer 融入其中：application service 持有用例邏輯(use case logic)；domain service 封裝不屬於實體或價值對象的領域邏輯。與洋蔥架構相比，乾淨架構保留了 application layer(use case)和 entities layer，但似乎忽略了 domain service layer。然而，閱讀 Uncle Bob 的文章後，我們意識到他認為一個 entity 不僅是 DDD 意義上的 entity，而且是任何 domain object：「一個實體可以是一個帶有方法的物件，或者可以是一組數據結構和函數。」實際上，他合併了這兩個最內層的層級以簡化圖表。\n獨立測試性 在所有三種架構風格中，他們遵循的規則為應用程式和領域邏輯提供了隔離。這意味著在所有情況下，我們都可以簡單地模擬外部工具和傳遞機制，並在隔離中測試應用程式程式碼，而無需使用任何數據庫或 HTTP request。\n如我們所見，乾淨架構結合了六角架構和洋蔥架構的規則。到目前為止，乾淨架構並未增加任何新元素。然而，在乾淨架構圖的右下角，我們可以看到一個小的額外圖表\u0026hellip;\n站在 MVC 和 EBI 的肩膀上 在乾淨架構右下角的這個圖表解釋了控制流程的運作方式，Robert C. Martin 在部落格上的文章與演講中對這個主題進行了更深入的閘述： 在上圖中，左側是 MVC 的視圖和控制器。黑色雙線內/之間的東西代表 MVC 中的模型。該模型也代表 EBI 架構(我們可以清楚地看到 bounary, interactor 和 entities)，六角形架構中的Application，洋蔥架構中的Application Core，以及上述乾淨架構圖中的Entities和Use Cases層。\n根據控制流程，我們有一個 HTTP request 會到達控制器。然後，控制器將會：\n解析請求(request)。 根據相關數據創建一個 Request Model。 在 Interactor 中執行方法(該方法是透過 Interactor 的介面，即 Bounary，注入到 Controller 中)，並將 Request Model 傳遞給它。 Interactor： 使用 Entity Gateway 的實作(透過 Entity Gateway 介面注入到 Interactor 中) 來找到相關 Entities。 協調 Entities 間的互動。 根據動作的結果創建一個 Response Model。 將 Response Model 回傳給 Presenter。 將 Presenter 回傳給 Controller。 使用 Presenter 來產生 ViewModel。 將 ViewModel 綁定到 View 上。 將 View 返回給 Client。 在此我與 Uncle Bob 的作法有些許不同，特別是在 Presenter 的使用，我寧願讓 Interactor 以某種 DTO 的形式返回數據，而不是注入一個被數據填充的物件。\n我通常做的是 MVP 的實作，其中 Controller 負責接收並回應客戶端。\n結論 我不會說乾淨架構是革命性的，因為它實際上並未帶來任何新的突破性概念或模式。\n然而，乾淨架構的出現仍是至關重要的。\n它提醒了我們一些被遺忘的概念、規則和模式。 它闡明了有用且重要的概念、規則和模式。 它告訴我們，所有這些概念、規則和模式如何結合在一起，為我們提供了一種標準化的方式來構建複雜的應用程式，並且考慮到可維護性。 ","permalink":"https://intervalrain.github.io/hgraca/clean-architecture/","summary":"\u003cp\u003eRobert C. Martin (aka Uncle Bob) 在 2012 年在他的\u003ca href=\"https://blog.cleancoder.com/uncle-bob/2011/11/22/Clean-Architecture.html\"\u003e部落格\u003c/a\u003e上發表了他對於\u003cstrong\u003e乾淨架構\u003c/strong\u003e的想法，並在幾個會議上進行了關於乾淨架構的演講。\u003c/p\u003e\n\u003cp\u003e乾淨架構套用了許多為人熟知的概念、規則和模式，並解釋如何將它們組合在一起，以提出一種標準化的應用程式建構方式。\u003c/p\u003e\n\u003ch1 id=\"站在-ebi-ports--adapters-與洋蔥架構的肩膀上\"\u003e站在 EBI, Ports \u0026amp; Adapters 與洋蔥架構的肩膀上\u003c/h1\u003e\n\u003cp\u003e乾淨架構背後的核心目標與 Ports \u0026amp; Adapters(六邊形)和洋蔥架構的目標是相同的：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e工具的獨立性。\u003c/li\u003e\n\u003cli\u003e交付機制的獨立性。\u003c/li\u003e\n\u003cli\u003e獨立測試的可行性。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e在發布有關乾淨架構的文章中，這是用來解釋整體概念的一張圖：\n\u003cimg alt=\"clean_arch\" loading=\"lazy\" src=\"https://herbertograca.files.wordpress.com/2017/04/cleanarchitecture-5c6d7ec787d447a81b708b73abba1680.jpg\"\u003e\u003c/p\u003e\n\u003cp\u003e正如 Uncle Bob 在他的文章中所說，上面這張圖嘗試將最新的架構思想整合成一個可行的概念。\u003c/p\u003e\n\u003cp\u003e讓我們將乾淨架構的圖表與用來解釋六角架構和洋蔥架構的圖表進行比較，看看它們在哪些地方相符：\u003c/p\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003e\u003c/th\u003e\n          \u003cth\u003e\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003cimg src=\"https://herbertograca.files.wordpress.com/2017/04/hexagonal_original.gif\" width=\"360\"\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003cimg src=\"https://herbertograca.files.wordpress.com/2017/04/4ioq9.png\" width=\"360\"\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"工具和交付機制的外部化\"\u003e工具和交付機制的外部化\u003c/h2\u003e\n\u003cp\u003e六角形架構專注於將工具和交付機制從應用程式中外部化，使用介面(ports))和適配器(adapters)。這也是洋蔥架構的核心價值之一，如圖所見，UI、基礎設施和測試都在圖表的最外層。乾淨的架構具有完全相同的特性，將 UI、Web、DB 等都放在最外層。最後，所有應用程式核心程式碼都是與框架、庫獨立的。\u003c/p\u003e\n\u003ch2 id=\"依賴方向\"\u003e依賴方向\u003c/h2\u003e\n\u003cp\u003e在六角架構中，我們並沒有任何明確的指示告訴我們依賴性的方向。然而，我們可以輕易地推斷出來：應用程式有一個埠(或介面)，必須由一個適配器來實現或使用。因此，適配器依賴於介面，它依賴於位於中心的應用程式。外部的東西依賴於內部的東西，依賴性的方向是朝向中心。在洋蔥架構圖中，我們也沒有任何明確的指示告訴我們依賴性的方向，然而，在他的第二篇文章中，Jeffrey Palermo 非常清楚地說明所有的依賴性都是朝向中心。乾淨架構則是非常明確地指出依賴性方向是朝向中心。他們都在架構層面引入了依賴反轉原則。內圈中的任何東西都不能知道外圈中的任何東西。此外，當我們跨越邊界傳遞數據時，它總是以對內圈來說最方便的形式存在。\u003c/p\u003e\n\u003ch2 id=\"分層\"\u003e分層\u003c/h2\u003e\n\u003cp\u003e六角形架構圖只顯示了兩層：應用程式的內部和外部。然而，洋蔥架構則將 DDD 中 application layer 融入其中：application service 持有用例邏輯(use case logic)；domain service 封裝不屬於實體或價值對象的領域邏輯。與洋蔥架構相比，乾淨架構保留了 application layer(use case)和 entities layer，但似乎忽略了 domain service layer。然而，閱讀 Uncle Bob 的文章後，我們意識到他認為一個 entity 不僅是 DDD 意義上的 entity，而且是任何 domain object：「一個實體可以是一個帶有方法的物件，或者可以是一組數據結構和函數。」實際上，他合併了這兩個最內層的層級以簡化圖表。\u003c/p\u003e","title":"[IT] 乾淨架構 Clean Architecture"},{"content":"洋蔥架構 洋蔥架構是由 Jeffrey Palermo 在 2008 年提出的。在我看來，它是基於 Ports \u0026amp; Adapters 架構的構念，將領域(domain)放在應用程式的中心，將交付機制(UI)和系統使用的基礎設施(infrastructure, ex.ORM，搜索引擎，第三方API等)。差別是，它對內部進行了分層。\n我們從分層架構學習到最基本的分層通常有：\nPresentation 呈現層 Application 應用層 Domain 領域層 Persistence 持久層 而 Ports \u0026amp; Adapters 架構隱含了兩個同心層：\n外部：傳遞機制(delivery mechanisms)與基礎設施(infrastructure) 內部：業務邏輯 Ports \u0026amp; Adapters 和 Onion Architecture 同時擁有一個概念，那就是通過編寫適配器(adapter)，將應用程式的核心與基礎設施隔離，以防止基礎設施滲透到應用程式核心中(意思是應用程式核心直接對基礎設施產生依賴)。這使得抽換應用程式使用的工具和交付機制變得更容易，提供了一些對技術、工具和供應商鎖定的保護。\n這也賦予應用程式一種愉快的能力，即無需真實的基礎設施或交付機制就能運行，因為它們可以被模擬物件所替換，這易於進行程式碼的測試。\n然而，洋蔥架構也告訴我們，在企業應用中，我們將不只有內部與外部這樣簡單的分層，在內部，也就是業務邏輯中，我們會增加一些我們從領域驅動設計(DDD)認識的一些層： 此外，它明確地闡述了 Ports \u0026amp; Adapters 架構中關於依賴方向的隱含概念：\n外層依賴於內層， 內層對外層一無所知。 這意味著耦合的方向是朝向中心，為我們提供了一個獨立的物件模型(domain model)，其核心不依賴任何東西。我們有足夠的靈活性可以改變外層，而不影響內層，更重要的層面。它在架構層面上運用了依賴反轉原則。\n洋蔥架構的主要原則： 應用程式是建立在一個獨立的物件模型周圍。 內層定義介面，外層實現介面。 耦合的方向是朝向中心。 所有應用程式的核心代碼都可以獨立於基礎設施進行編譯和運行 此外，任何外層都可以直接呼叫任何內層，這不會破壞耦合方向，並避免創建僅包含無業務邏輯的 proxy methods，甚至是 proxy classes，僅為了符合某種分層方案。這也符合 Martin Fowler 所表達的。\n[…] the layers above can use any layer beneath them, not just the layer immediately beneath. - Jeffrey Palermo 2008, The Onion Architecture: part 3\n[\u0026hellip;] 上層的層次可以使用任何位於其下的層次，而不僅僅是直接下方的那一層。 - 傑弗里‧巴勒莫 2008，洋蔥架構：第三部分\n結論 洋蔥架構是建立在 Ports \u0026amp; Adapters 架構的基礎上，根據一些領域驅動設計的概念，為應用程序的業務邏輯增加了一些內部分層。\n旨在進一步區分了責任，提供了低耦合和高內聚，並同時提供了更好的可測試性(testability) 和 可維護性(maintainability)。\n","permalink":"https://intervalrain.github.io/hgraca/onion-architecture/","summary":"\u003ch1 id=\"洋蔥架構\"\u003e洋蔥架構\u003c/h1\u003e\n\u003cp\u003e洋蔥架構是由 Jeffrey Palermo 在 2008 年提出的。在我看來，它是基於 Ports \u0026amp; Adapters 架構的構念，將領域(domain)放在應用程式的中心，將交付機制(UI)和系統使用的基礎設施(infrastructure, ex.ORM，搜索引擎，第三方API等)。差別是，它對內部進行了分層。\u003c/p\u003e\n\u003cp\u003e我們從分層架構學習到最基本的分層通常有：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ePresentation 呈現層\u003c/li\u003e\n\u003cli\u003eApplication 應用層\u003c/li\u003e\n\u003cli\u003eDomain 領域層\u003c/li\u003e\n\u003cli\u003ePersistence 持久層\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e而 Ports \u0026amp; Adapters 架構隱含了兩個同心層：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e外部：傳遞機制(delivery mechanisms)與基礎設施(infrastructure)\u003c/li\u003e\n\u003cli\u003e內部：業務邏輯\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003ePorts \u0026amp; Adapters 和 Onion Architecture 同時擁有一個概念，那就是通過編寫適配器(adapter)，將應用程式的核心與基礎設施隔離，以防止基礎設施滲透到應用程式核心中(意思是應用程式核心直接對基礎設施產生依賴)。這使得抽換應用程式使用的工具和交付機制變得更容易，提供了一些對技術、工具和供應商鎖定的保護。\u003c/p\u003e\n\u003cp\u003e這也賦予應用程式一種愉快的能力，即無需真實的基礎設施或交付機制就能運行，因為它們可以被模擬物件所替換，這易於進行程式碼的測試。\u003c/p\u003e\n\u003cp\u003e然而，洋蔥架構也告訴我們，在企業應用中，我們將不只有內部與外部這樣簡單的分層，在內部，也就是業務邏輯中，我們會增加一些我們從領域驅動設計(DDD)認識的一些層：\n\u003cimg alt=\"onion\" loading=\"lazy\" src=\"https://herbertograca.files.wordpress.com/2017/03/2008-onion-architecture5.png\"\u003e\u003c/p\u003e\n\u003cp\u003e此外，它明確地闡述了 Ports \u0026amp; Adapters 架構中關於依賴方向的隱含概念：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e外層依賴於內層，\u003c/li\u003e\n\u003cli\u003e內層對外層一無所知。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e這意味著耦合的方向是朝向中心，為我們提供了一個獨立的物件模型(domain model)，其核心不依賴任何東西。我們有足夠的靈活性可以改變外層，而不影響內層，更重要的層面。它在架構層面上運用了依賴反轉原則。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e洋蔥架構的主要原則：\n\u003cul\u003e\n\u003cli\u003e應用程式是建立在一個獨立的物件模型周圍。\u003c/li\u003e\n\u003cli\u003e內層定義介面，外層實現介面。\u003c/li\u003e\n\u003cli\u003e耦合的方向是朝向中心。\u003c/li\u003e\n\u003cli\u003e所有應用程式的核心代碼都可以獨立於基礎設施進行編譯和運行\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e此外，任何外層都可以直接呼叫任何內層，這不會破壞耦合方向，並避免創建僅包含無業務邏輯的 proxy methods，甚至是 proxy classes，僅為了符合某種分層方案。這也符合 Martin Fowler 所表達的。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e[…] the layers above can use any layer beneath them, not just the layer immediately beneath. - \u003cem\u003e\u003cstrong\u003eJeffrey Palermo 2008, The Onion Architecture: part 3\u003c/strong\u003e\u003c/em\u003e\u003cbr\u003e\n[\u0026hellip;] 上層的層次可以使用任何位於其下的層次，而不僅僅是直接下方的那一層。 - \u003cem\u003e\u003cstrong\u003e傑弗里‧巴勒莫 2008，洋蔥架構：第三部分\u003c/strong\u003e\u003c/em\u003e\u003c/p\u003e","title":"[IT] 洋蔥架構 Onion Architecture"},{"content":"MNIST NIST(National Insitute of Standards and Technology) 是美國國家標準與技術研究院，MNIST 是由 NIST 所提供的一組經典的機器學習測資，可以想成是深度學習中的「Hello World!」，它由 60000張 訓練圖片與 10000 張測試圖片所組成，為手寫數字的灰階圖片，大小為 28 * 28 像素，分類 0 到 9 共 10 個數字。\n可透過 keras 模組直接取得資料 \u0026gt;\u0026gt;\u0026gt; from tensorflow.keras.datasets import mnist 輸入 mnist.load_data() 可取得 mnist 資料集，回傳值為 2*2 的 tuple of ndarray。 \u0026gt;\u0026gt;\u0026gt; (train_images, train_labels), (test_images, test_labels) = mnist.load_data() tuple 裡面裝載的是 NumPy 的 ndarray 物件，我們可以利用 o.shape 來取得 ndarray 的屬性 len(o) 來取得陣列的個數 \u0026gt;\u0026gt;\u0026gt; train_images.shape (60000, 28, 28) # 3 軸陣列，其大小為 60000 * 28 * 28 \u0026gt;\u0026gt;\u0026gt; test_images.shape (10000, 28, 28) # 3 軸陣列，其大小為 10000 * 28 * 28 \u0026gt;\u0026gt;\u0026gt; len(train_labels), len(test_labels) (60000, 10000) # 訓練集與測試集各有 60000 與 10000 筆 labels \u0026gt;\u0026gt;\u0026gt; train_labels array([5, 0, 4, ..., 5, 6, 8], dtype=uint8) # train_labels 裝 60000 筆資料對應的解答(0-9 的數字) 我們可以利用 matlabplot 把圖片印出來看看 plt.matshow(train_images[0], cmap = plt.get_cmap(\u0026#39;gray\u0026#39;)) plt.show() 用 Dense 層建構神經網路 首先我們需要建立神經網路架構，層(layer)是組成神經網路的基本元件，一個層就是一個資料處理的模組。具體而言，每一層都會從資料中萃取出特定的轉換或表示法，經過數層的資料萃取(data distillation)後，將資料「過瀘」成最後特定的轉換或表達(representation)。\n我們將會使用兩個密集層1(Dense Layers)緊密連接。Dense() 函式中的第一個參數代表層的寬度，亦即神經元單元的個數，第二個參數代表使用的 activation function，是在模型中使用的數學方程式(可參考 這篇文章lhy)。\nfrom tensorflow import keras from tensorflow.keras import layers model = keras.Sequential([ layers.Dense(512, activation=\u0026#39;relu\u0026#39;), layers.Dense(10, activation=\u0026#39;softmax\u0026#39;) ]) 編譯神經網路，並指定 optimizer, loss, metrics 為了讓神經網路進行訓練，我們還需要準備 3 個元件才可能進行編譯：\n損失函數(loss function): 用以衡量神經網路在訓練資料上的表現，以及引導網路朝正確的方向修正。 優化器(optimizer): 神經網路根據訓練資料及損失函數值來自行更新權重滿數的機制。 評量指標(metrics): 我們關心的議題，例如 MNIST 資料集，我們關心的是辨識數字的準確度。 model.compile(optimizer=\u0026#39;rmsprop\u0026#39;, loss=\u0026#39;sparse_categorical_crossentropy\u0026#39;, metrics=[\u0026#39;accuracy\u0026#39;]) 預處理 我們需要把 (60000, 28, 28) 且灰階像素為 [0, 255] 的陣列轉換成 (60000, 28*28) 且灰階像素為 [0, 1] 的陣列，我們會使用到兩個 NumPy 的函式：\nreshape(): 將 3 軸陣列轉成 2 軸陣列 astype(): 用於轉型 train_images = train_images.reshape(60000, 28*28) train_images = train_iamges.astype(\u0026#39;float32\u0026#39;)/255 test_images = test_images.reshape(10000, 28*28) test_images = test_images.astype(\u0026#39;float32\u0026#39;)/255 訓練模型 使用 fit() 函式進行模型訓練，其中我們可以指定 epoch 的數量，與 batch_size。 \u0026gt;\u0026gt;\u0026gt; model.fit(train_images, train_labels, epochs=10, batch_size=256) 我們可以從 terminal 上看到模型迭代的狀況：\nloss 代表損失值，accuracy 代表準確度。 Epoch 1/10 235/235 [==============================] - 1s 2ms/step - loss: 0.3111 - accuracy: 0.9099 Epoch 2/10 235/235 [==============================] - 1s 2ms/step - loss: 0.1309 - accuracy: 0.9617 Epoch 3/10 235/235 [==============================] - 1s 2ms/step - loss: 0.0862 - accuracy: 0.9744 Epoch 4/10 235/235 [==============================] - 1s 2ms/step - loss: 0.0626 - accuracy: 0.9817 Epoch 5/10 235/235 [==============================] - 1s 2ms/step - loss: 0.0476 - accuracy: 0.9864 Epoch 6/10 235/235 [==============================] - 1s 2ms/step - loss: 0.0363 - accuracy: 0.9893 Epoch 7/10 235/235 [==============================] - 1s 2ms/step - loss: 0.0288 - accuracy: 0.9917 Epoch 8/10 235/235 [==============================] - 1s 2ms/step - loss: 0.0221 - accuracy: 0.9940 Epoch 9/10 235/235 [==============================] - 1s 2ms/step - loss: 0.0175 - accuracy: 0.9952 Epoch 10/10 235/235 [==============================] - 1s 2ms/step - loss: 0.0138 - accuracy: 0.9966 預測 模型訓練好後，我們要將測試集的資料拿來做預測，我們會使用到函式 predict。\npredict() 會接受測資，並回傳一組陣列，以本例來說會回傳一組 (10000, 10) 的陣列，第一個值代表第幾筆資料，第二個值代表對應到 0-9 數字的機率。 \u0026gt;\u0026gt;\u0026gt; pred = model.predict(test_images) \u0026gt;\u0026gt;\u0026gt; pred.shape (10000, 10) \u0026gt;\u0026gt;\u0026gt; pred[0] array([8.2497134e-11, # 數字為 0 的機率 4.1868242e-11, # 數字為 1 的機率 3.5524021e-08, # 數字為 2 的機率 2.0555583e-05, # 數字為 3 的機率 3.8774672e-13, # 數字為 4 的機率 8.9763769e-10, # 數字為 5 的機率 2.1514412e-16, # 數字為 6 的機率 9.9997938e-01, # 數字為 7 的機率 2.2517939e-09, # 數字為 8 的機率 8.8137547e-08 # 數字為 9 的機率 ], dtype=float32) 我們可以用 NumPy 提供的函式來找出所有測試集對應到最大機率的索引值： argmax() 可以回傳陣列中的最大值，指定 axis 可以指定對哪一軸進行搜尋。 \u0026gt;\u0026gt;\u0026gt; pred[0].argmax() 7 \u0026gt;\u0026gt;\u0026gt; ans = pred.argmax(axis=1) array([7, 2, 1, ..., 4, 5, 6]) \u0026gt;\u0026gt;\u0026gt; test_labels array([7, 2, 1, ..., 4, 5, 6], dtype=uint8) 評估 最後，我們想要知道我們模型的準確度，我們可以使用函式 evaluate，並放入我們的測資與解答。\n結果顯示，我們的準確度為 0.9810，與我們測試集的準確度 0.9966，中間存在的差距為過度配適(overfitting)，這會在未來在專題進行討論。 \u0026gt;\u0026gt;\u0026gt; test_loss, test_acc = model.evaluate(test_images, test_labels) 313/313 [==============================] - 0s 411us/step - loss: 0.0676 - accuracy: 0.9810 密集層又稱全連接神經層(fully connected)，代表前一層的單元會將訊號傳給後一層的所有單元。\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://intervalrain.github.io/ml/ex1/","summary":"\u003ch1 id=\"mnist\"\u003eMNIST\u003c/h1\u003e\n\u003cp\u003eNIST(National Insitute of Standards and Technology) 是美國國家標準與技術研究院，MNIST 是由 NIST 所提供的一組經典的機器學習測資，可以想成是深度學習中的「Hello World!」，它由 60000張 訓練圖片與 10000 張測試圖片所組成，為手寫數字的灰階圖片，大小為 28 * 28 像素，分類 0 到 9 共 10 個數字。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e可透過 keras 模組直接取得資料\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e tensorflow.keras.datasets \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e mnist\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e輸入 \u003ccode\u003emnist.load_data()\u003c/code\u003e 可取得 mnist 資料集，回傳值為 2*2 的 tuple of ndarray。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e (train_images, train_labels), (test_images, test_labels) \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e mnist\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eload_data()\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003etuple 裡面裝載的是 NumPy 的 ndarray 物件，我們可以利用\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eo.shape\u003c/code\u003e 來取得 ndarray 的屬性\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003elen(o)\u003c/code\u003e 來取得陣列的個數\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e train_images\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eshape\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e(\u003cspan style=\"color:#ae81ff\"\u003e60000\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e28\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e28\u003c/span\u003e)                             \u003cspan style=\"color:#75715e\"\u003e# 3 軸陣列，其大小為 60000 * 28 * 28\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e test_images\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eshape\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e(\u003cspan style=\"color:#ae81ff\"\u003e10000\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e28\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e28\u003c/span\u003e)                             \u003cspan style=\"color:#75715e\"\u003e# 3 軸陣列，其大小為 10000 * 28 * 28\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e len(train_labels), len(test_labels)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e(\u003cspan style=\"color:#ae81ff\"\u003e60000\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e10000\u003c/span\u003e)                              \u003cspan style=\"color:#75715e\"\u003e# 訓練集與測試集各有 60000 與 10000 筆 labels\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e train_labels\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003earray([\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e, \u003cspan style=\"color:#f92672\"\u003e...\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e8\u003c/span\u003e], dtype\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003euint8) \u003cspan style=\"color:#75715e\"\u003e# train_labels 裝 60000 筆資料對應的解答(0-9 的數字)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e我們可以利用 \u003ccode\u003ematlabplot\u003c/code\u003e 把圖片印出來看看\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eplt\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ematshow(train_images[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e], cmap \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e plt\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eget_cmap(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;gray\u0026#39;\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eplt\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eshow()\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cimg src=\"/ML/images/mnist_0.png\" width=\"360\"\u003e\n\u003ch1 id=\"用-dense-層建構神經網路\"\u003e用 Dense 層建構神經網路\u003c/h1\u003e\n\u003cp\u003e首先我們需要建立神經網路架構，層(layer)是組成神經網路的基本元件，一個層就是一個資料處理的模組。具體而言，每一層都會從資料中萃取出特定的轉換或表示法，經過數層的資料萃取(data distillation)後，將資料「過瀘」成最後特定的轉換或表達(representation)。\u003c/p\u003e","title":"[ML] sample1 - 手寫數字辨識"},{"content":"埠與適配器架構（又稱為六角架構）是由 Alistair Cockburn 所構想，並在 2005 年於他的部落格中寫下。這是他用一句話定義其目標的方式：\nAllow an application to equally be driven by users, programs, automated test or batch scripts, and to be developed and tested in isolation from its eventual run-time devices and databases. - Alistair Cockburn 2005, Ports and Adapters\n允許一個應用程式能夠同等地由用戶、程式、自動化測試或批次腳本驅動，並且能夠在與其最終運行時間設備和數據庫隔離的情況下進行開發和測試。 - 艾利斯特·科本 2005，端口與適配器\n我看過一些討論「Ports \u0026amp; Adapters 架構」的文章，其中大量提到了分層(layers)。然而，在原始的 Alistair Cockburn 的文章中，我並未讀到任何關於分層的內容。\nPorts \u0026amp; Adapters 架構的思想是將我們的應用程式視為系統的中心產物，所有的輸入和輸出都通過一個端口進入/離開應用程式，該端口將應用程式與外部工具、技術和交付機制隔離。應用程式應該對誰/什麼正在發送輸入或接收其輸出一無所知。這旨在提供一些保護，以防止技術和業務需求的演變，促使產品在開發完成後不久就因為技術/供應商的封鎖而變得過時。\n在這篇文章中，我們將深入探討以下主題：\n傳統方法的問題 傳統的方法在前後兩端都可能帶來問題。\n在前端方面，我們最終會有業務邏輯滲透到 UI 中（例如，當我們在控制器或視圖中放置用例邏輯，使其在其他 UI 中無法重用）或甚至是 UI 滲透到業務邏輯中（例如，由於我們在模板中需要一些邏輯，因此我們在我們的實體中創建方法）。\n在後端方面，我們可能會有外部庫和技術滲透到業務邏輯中，因為我們可能會透過類型提示、子類別化，甚至在我們的業務邏輯內實例化庫類別來直接引用它們。\n從分層架構演變而來 到了 2005 年，多虧了 EBI 和 DDD，我們已經知道在系統中真正重要的是內部層。這些層是所有業務邏輯之所在，它們是我們與競爭對手的真正差異，是應用程式中價值的核心。\nAlistair Cockburn 意識到，頂層和底層其實只是應用程式的入口與出口，雖然它們實際上是不同的，但它們的目標非常相似，設計上也呈現出對稱性。因此，如果我們想要隔離我們的應用程式內部層，我們可以用類似的方式利用這些入口與出口來實現。\n為了避開典型的分層圖表，我們將以左右來代表系統的兩面，而非上下。\n雖然我們可以識別出應用程式的兩個對稱面，但每一面都可能有多個進出點。例如，API 和 UI 是我們應用程式左側的兩個不同進出點，而 ORM 和搜尋引擎則是我們應用程式右側的兩個不同進出點。為了表示我們的應用程式有多個進出點，我們將以多邊形來繪製我們的應用程式圖表。這個圖表可以是任何有多個邊的多邊形，但最終選擇了六邊形。因此，這就是「六邊形架構」的名稱由來。 Ports \u0026amp; Adapters 架構透過使用一個抽象層，實現為一個端口和一個適配器，解決了前面提到的問題。\n什麼是埠(port)？ 埠是一個對消費者無差別的應用程式的出入口。在許多語言中，它是一個介面。例如，它可以是用於在搜索引擎中進行搜索介面。在我們的應用程式中，我們將使用這個介面作為進出點，而不需要了解實作的細節。\n什麼是適配器(adapter)？ 適配器，又稱轉接器，是一種能將介面轉換（適應）成另一種介面的類別。\n例如，一個適配器實現了介面A並注入了介面B。當適配器被實例化時，它在其建構子中注入了一個實現介面B的物件。然後，這個適配器被注入到需要介面A的任何地方，並接收方法請求，將其轉換並代理給內部實現介面B的物件。\n兩種不同類型的適配器 位於左側的適配器，代表著 UI，被稱為主要(primary)或驅動(driving)適配器，因為它們是開始對應用程式進行某些操作的元件。而位於右側的適配器，代表著與後端工具的連接，被稱為次要(secondary)或被驅動(driven)適配器，因為它們總是對主要適配器的操作做出反應。\n埠/適配器的差異：\n在左側，適配器依賴於埠，並注入埠的具體實現，其中包含了用例。在這一側，埠及其具體實現（即用例）都屬於應用程序內部。 在右側，適配器是埠的具體實現，並被注入到我們的業務邏輯中，儘管我們的業務邏輯只知道介面。在這一側，埠屬於應用程序內部，但其具體實現屬於外部，並且它包裹著一些外部工具。 有哪些好處？ 利用此埠/適配器設計，將我們的應用程式置於系統的中心，使我們能夠將應用程式與實作細節（如短暫的技術、工具和交付機制）隔離，從而使測試變得更容易、更快，並創建可重用的概念驗證。\n實施與技術隔離 Context 我們有一個應用程式，該程式使用SOLR作為搜索引擎，並使用開源庫來連接並執行搜索。\n傳統方法 採用傳統的方法，我們將直接在我們的程式碼基礎中使用該函式庫類別，作為我們實作的類型提示、實例和/或父類別。\n埠與適配器方法 使用埠和適配器，我們將創建一個介面，我們稱之為 UserSearchInterface，我們將在需要時在我們的程式碼中使用它作為類型提示。我們還將為 SOLR 創建適配器，該適配器將實現該介面，我們將其命名為 UserSearchSolrAdapter。這個實現是SOLR庫的包裝器，所以它將庫注入並使用它來實現介面中指定的方法。\n問題 在某些時候，我們希望從SOLR切換到Elasticsearch。此外，對於相同的搜索，有時我們想使用SOLR，有時我們想使用Elasticsearch，這個決定是在運行時做出的。\n如果我們採用傳統的方法，我們將必須尋找並替換SOLR庫的使用為Elasticsearch庫。然而，這並不是一個簡單的查找和替換：這些庫有不同的使用方式，不同的方法有不同的輸入和輸出，所以替換庫並不會是一個簡單的任務。而且，在運行時使用一個庫而不是另一個庫甚至是不可能的。\n然而，如果我們使用了Ports \u0026amp; Adapters，我們只需要創建一個新的適配器，我們可以叫它UserSearchElasticsearchAdapter，並將它取代SOLR適配器，也許只需要在DIC中更改一個配置。為了在運行時注入不同的實現，我們可以使用工廠來決定注入哪個適配器。\n交付機制的隔離 與前一個例子相似，假設我們有一個應用程式需要網頁 GUI、CLI 以及網頁 API。我們也有一些功能想要在所有三種使用者介面中都能使用，我們稱這個功能為UserProfileUpdate。\n使用Ports \u0026amp; Adapters，我們會在應用服務方法中實現這個功能，並將其視為一個使用案例。這個服務將實現一個介面，指定方法、輸入和輸出。\n每個UI版本都將有一個控制器（或控制台命令），該控制器將使用該介面來觸發所需的邏輯，並將注入服務的具體實現。在這裡，適配器實際上就是控制器（或CLI命令）。\n我們可以完全改變 UI，並確知這不會影響業務邏輯。\n測試 在前述的兩個例子中，採用埠和適配器架構使得測試變得更為容易。在第一個例子中，我們可以模擬或替換介面（端口），而不需要使用SOLR或Elasticsearch來測試我們的應用程式。\n在第二個例子中，我們可以將所有的 UI 與我們的應用程式分開來測試，並且只需簡單地給我們的服務一些輸入並確認結果，就可以將我們的使用情境與 UI 分開來測試。\n結論 在我看來，Ports \u0026amp; Adapters 架構只有一個目標：將業務邏輯與系統使用的交付機制和工具隔離。而它是通過使用一種常見的程式語言結構來實現的：介面。\n在 UI（驅動適配器）方面，我們創建了使用我們的應用程式介面，即控制器(controllers)的適配器。\n在基礎設施方面（驅動適配器），我們創建了實現我們應用程式埠的適配器，即儲存庫(repositories)。\n然而，值得注意的是，這個相同的想法在13年前就已經發表過，儘管並未明確強調將工具和傳遞機制與應用程式的核心隔離的目標。\n系統與 actor 的任何互動都會透過邊界物件(boundary object)進行。正如Jacobson所描述的，actor可以是像客戶或管理員（操作員）這樣的人類使用者，但也可能是像警報器或打印機這樣的非人類“使用者”，這對應於Ports \u0026amp; Adapters Architecture的驅動適配器和被驅動適配器。\n","permalink":"https://intervalrain.github.io/hgraca/ports-adapters-architecture/","summary":"\u003cp\u003e埠與適配器架構（又稱為六角架構）是由 Alistair Cockburn 所構想，並在 2005 年於他的部落格中寫下。這是他用一句話定義其目標的方式：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cem\u003eAllow an application to equally be driven by users, programs, automated test or batch scripts, and to be developed and tested in isolation from its eventual run-time devices and databases.\u003c/em\u003e - \u003cem\u003e\u003cstrong\u003eAlistair Cockburn 2005, Ports and Adapters\u003c/strong\u003e\u003c/em\u003e\u003cbr\u003e\n\u003cem\u003e允許一個應用程式能夠同等地由用戶、程式、自動化測試或批次腳本驅動，並且能夠在與其最終運行時間設備和數據庫隔離的情況下進行開發和測試。\u003c/em\u003e - \u003cem\u003e\u003cstrong\u003e艾利斯特·科本 2005，端口與適配器\u003c/strong\u003e\u003c/em\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e我看過一些討論「Ports \u0026amp; Adapters 架構」的文章，其中大量提到了分層(layers)。然而，在原始的 Alistair Cockburn 的文章中，我並未讀到任何關於分層的內容。\u003c/p\u003e\n\u003cp\u003ePorts \u0026amp; Adapters 架構的思想是將我們的應用程式視為系統的中心產物，所有的輸入和輸出都通過一個端口進入/離開應用程式，該端口將應用程式與外部工具、技術和交付機制隔離。應用程式應該對誰/什麼正在發送輸入或接收其輸出一無所知。這旨在提供一些保護，以防止技術和業務需求的演變，促使產品在開發完成後不久就因為技術/供應商的封鎖而變得過時。\u003c/p\u003e\n\u003cp\u003e在這篇文章中，我們將深入探討以下主題：\u003c/p\u003e\n\u003ch1 id=\"傳統方法的問題\"\u003e傳統方法的問題\u003c/h1\u003e\n\u003cp\u003e傳統的方法在前後兩端都可能帶來問題。\u003c/p\u003e\n\u003cp\u003e在前端方面，我們最終會有業務邏輯滲透到 UI 中（例如，當我們在控制器或視圖中放置用例邏輯，使其在其他 UI 中無法重用）或甚至是 UI 滲透到業務邏輯中（例如，由於我們在模板中需要一些邏輯，因此我們在我們的實體中創建方法）。\u003c/p\u003e\n\u003cp\u003e在後端方面，我們可能會有外部庫和技術滲透到業務邏輯中，因為我們可能會透過類型提示、子類別化，甚至在我們的業務邏輯內實例化庫類別來直接引用它們。\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"port\u0026amp;adapter\" loading=\"lazy\" src=\"https://herbertograca.files.wordpress.com/2017/03/hexagonal-arch-5-traditional2.png?w=415\u0026h=313\"\u003e\u003c/p\u003e","title":"[IT] 埠與適配器架構 Ports \u0026 Adapters Architecture aka 六邊形架構 Hexagonal Architecture"},{"content":"「領域驅動設計」這個詞是在 Eric Evans 在他的著作《領域驅動設計：解決軟體核心的複雜性(Domain-Driven Design: Tackling complexity in the Heart of Software, 2003)》中所提出的，書中正式地提出了許多軟體開發的概念。\n我無法用一篇文章就概括 DDD，與 DDD 相關的重要概念實在太多了。以下列出我認為一些重要的 DDD 概成，包含：\nUbiquitous Language Layers Bounded Contexts Anti-Corruption Layer Shared Kernel Generic Subdomain 通用語言 Ubiquitous Language 在軟體開發中，一個常見的問題是怎麼理解程式碼，它是什麼，它能做什麼，它如何做，它為什麼這樣做…如果程式碼使用的術語與領域專家使用的術語不同，理解程式碼便變得更加複雜。例如，如果領域專家談論的是 elder users，而程式碼中提到的是 supervisors，那麼名詞可能就會造成在討論應用程式時造成混淆。然而，大部分的模糊性可以透過適當地命名類別和方法來解決，讓類別的命名明確地表達出物件是什麼，讓方法的命名明確地表達出方法在領域上下文中做了什麼事。\n使用通用語言的主要概念是將應用程式與商業邏輯對齊，這是通過在程式碼中採用業務與技術之間的共同語言所實現的。該語言的來源是公司的業務部門，它們擁有需要實施的概念，但術語則與公司的技術部門協商(這意味著業務部門並不總是選擇最佳命名)以創建一種業務與程式開發人員共通且不會發生歧義的共同語言。包含程式碼、類別、方法、屬性和模組的命名都最重與通用語言對齊。\n層 Layers 我在之前的文章中已經談過分層的概念，但我認為此刻重提由DDD所識別的各層是很重要的\nUser Interface 使用者介面 負責繪製用戶與應用程式互動的螢幕，並將用戶的輸入轉換為應用程式命令。值得注意的是，「用戶」可以是人類，但也可以是連接到我們API的其他應用程式，這完全對應於EBI架構中的邊界對象。\nApplication Layer 應用層 協調領域對象以執行用戶所需的任務：用例。它不包含業務邏輯。這與EBI架構中的互動者相關，只是互動者是與UI或實體無關的任何對象，而在這種情況下，應用層只包含與用例相關的對象。這一層是應用服務所屬的地方，因為它們是用例協調發生的容器，使用存儲庫、領域服務、實體、價值對象或任何其他領域對象。\nDomain Layer 領域層 這是包含所有業務邏輯的層，包括領域服務、實體、事件以及任何其他包含業務邏輯的對象類型。顯然，它與EBI的實體對象類型有關。這是系統的核心。領域服務將包含不完全適合於實體的領域邏輯，通常在完成某些領域動作時協調多個實體。\nInfrastructure 基礎建設 支援上層的技術能力，即持久性或訊息傳遞。 有界上下文 在企業應用中，模型可能會大幅增長，同時進行程式碼開發的團隊規模也可能會擴大。這帶來了兩個問題：\n開發人員必須處理的程式碼庫越大，認知負荷就越大，理解程式碼的難度也就越高，因此可能會引入更多的錯誤和判斷失誤， 越多的開發人員在同一個程式碼庫上工作，就愈難協調對應用程式的共同技術與領域視野。 換句話說，手頭的問題變得過於龐大。\n對於大問題的常見解決方案是將其分解成較小的部分，這正是「有界上下文」發揮作用的地方。\nTwo subsystems commonly serve very different user communities - Eric Evans 2014, Domain-Driven Design Reference\n兩個子系統通常服務於截然不同的用戶群體 - Eric Evans 2014，領域驅動設計參考\n有界上下文定義了模型的一個獨立部分適用的範疇。這種隔離可以通過解耦技術邏輯、程式碼庫分離、數據庫模式分離，以及在團隊組織方面來實現。我們隔離有界上下文的程度，如同往常一樣，取決於實際情況：我們所需和可能的情況。\n有趣的是，這並非一個全新的概念。早在1992年，也就是Eric Evans之前的十一年，Ivar Jacobson就在他的書中寫到了子系統(subsystems)的概念！\n早在那時，他對這個主題已經有了相當多非常具體的想法：\n因此，該系統由多個子系統組成，這些子系統可以包含自身的子系統。在這種階層結構的底部是分析對象。因此，子系統是為了進一步開發和維護系統的一種結構方式。 子系統的任務是將物件打包，以降低複雜性。 所有與特定功能部分相關的對象將被放置在同一個子系統中 目標是在子系統內擁有強大的功能性耦合，並在子系統之間擁有弱耦合（現今被稱為低耦合和高內聚） [一個子系統]因此最好只與一個行動者連接，因為變化通常由行動者引起 […] 首先將控制對象放入一個子系統中，然後將強烈耦合的實體對象和介面對象放在同一個子系統中 所有具有強烈相互功能聯繫的物件將被放置在同一個子系統中[…] 一個物件的變化會導致另一個物件的變化嗎？（這現在被稱為共同封閉原則 - 一起變化的類別會被一起打包 - 由羅伯特·C·馬丁在他的論文“Granularity粒度”中發表，該論文於1996年發表，比伊瓦·雅各布森的書晚了4年） 他們是否與同一個 actor 進行溝通？ 他們兩者是否都依賴於第三個物件，例如介面物件或實體物件？ 一個物件是否對另一個物件執行多個操作？（這現在被稱為共享重用原則 - 一起使用的類別將一起打包 - 由Robert C. Martin在他的論文“粒度”中提出，該論文於1996年發表，比Ivar Jacobson的書晚了4年） 另一個劃分的準則是，不同子系統之間的溝通應盡可能少（低耦合） 對於大型項目，因此可能有其他的子系統劃分標準，例如： 不同的開發團隊擁有不同的能力或資源，因此可能需要相應地分配開發工作（這些團隊也可能在地理上相互分隔） 在分散式環境中，每個邏輯節點（SOA，網路服務和微服務）可能都需要一個子系統 如果現有的產品可以在此系統中使用，則可能被視為一個子系統（我們的系統依賴的庫，即一個 ORM）。 Anti-Corruption Layer 反腐層 反腐層基本上是兩個子系統之間的中介軟體。它被用來隔離兩個子系統，使它們依賴於反腐層，而不是直接依賴於彼此。這樣，如果我們重構或完全替換其中一個子系統，我們只需要更新反腐層，而不需要觸及另一個子系統。\n這尤其在我們需要將一個新系統與舊有系統整合時非常有用。為了不讓舊有結構主導我們設計新系統的方式，我們會創建一個防腐層，該層將適應舊有子系統的API以滿足新子系統的需求。\n它主要有三個關注點：\n將子系統的API調整以符合客戶子系統的需求; 在子系統之間轉譯數據和命令; 根據需要，建立一個或多個方向的溝通 這是一種技術，當我們無法控制一個或所有子系統時，使用它更具邏輯性，但即使我們控制所有涉及的子系統，即使它們設計得很好，但模型卻大相徑庭，我們希望防止一個模型對另一個模型的影響（改變一個子系統以符合另一個子系統的需求），使用它也可能是有意義的。\n共享核心 Shared Kernel 在某些情況下，儘管我們希望完全隔離和解耦的組件，但對於一些領域程式碼來說，被多個組件共享是有意義的。\n這將讓各個組件能夠保持彼此的解耦，儘管它們都與同一個共享程式碼，也就是共享核心，有所連結。\n例如，這就是一個情況，一個組件觸發的事件被另一個或多個組件監聽。但這也可能是服務介面甚至實體的情況。\n儘管如此，我們應該保持共享核心的規模小，並在更改它時要非常小心，以免無意間破壞其他使用它的程式碼。確保在未經其他使用該共享核心的開發團隊諮詢的情況下，不更改共享核心中的代碼是非常重要的。\n通用子網域 Generic Subdomain 子網域是網域中非常獨立的一部分。一個通用子網域並非專為我們的應用程式設計，它可以用於任何類似的應用程式。\n所以，如果我們有一個應用程式，其中一部分涉及到金融，或許我們可以在我們的應用程式中使用現有的金融庫。但無論如何，即使我們不能使用現有的庫並需要自己建立，如果它是一個通用的子領域，那麼它並不是我們的核心業務，我們應該將其視為必要但不是關鍵的。它並不是我們應用程式的最重要部分，所以我們最好的專家不應該專注於此，甚至應該清楚地將其置於主源代碼之外，可能需要使用依賴性管理工具進行安裝。\nConclusion 結論 我選擇在此處談論的DDD概念，再次，主要是關於單一職責，低耦合，高內聚，隔離邏輯，使我們的應用程序變得更加一致，更容易且更快地改變和適應業務需求。\n","permalink":"https://intervalrain.github.io/hgraca/domain-driven-design/","summary":"\u003cp\u003e「領域驅動設計」這個詞是在 Eric Evans 在他的著作《領域驅動設計：解決軟體核心的複雜性(Domain-Driven Design: Tackling complexity in the Heart of Software, 2003)》中所提出的，書中正式地提出了許多軟體開發的概念。\u003c/p\u003e\n\u003cp\u003e我無法用一篇文章就概括 DDD，與 DDD 相關的重要概念實在太多了。以下列出我認為一些重要的 DDD 概成，包含：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eUbiquitous Language\u003c/li\u003e\n\u003cli\u003eLayers\u003c/li\u003e\n\u003cli\u003eBounded Contexts\u003c/li\u003e\n\u003cli\u003eAnti-Corruption Layer\u003c/li\u003e\n\u003cli\u003eShared Kernel\u003c/li\u003e\n\u003cli\u003eGeneric Subdomain\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"通用語言-ubiquitous-language\"\u003e通用語言 Ubiquitous Language\u003c/h1\u003e\n\u003cp\u003e在軟體開發中，一個常見的問題是怎麼理解程式碼，它是什麼，它能做什麼，它如何做，它為什麼這樣做…如果程式碼使用的術語與領域專家使用的術語不同，理解程式碼便變得更加複雜。例如，如果領域專家談論的是 \u003cem\u003eelder users\u003c/em\u003e，而程式碼中提到的是 \u003cem\u003esupervisors\u003c/em\u003e，那麼名詞可能就會造成在討論應用程式時造成混淆。然而，大部分的模糊性可以透過適當地命名類別和方法來解決，讓類別的命名明確地表達出物件是什麼，讓方法的命名明確地表達出方法在領域上下文中做了什麼事。\u003c/p\u003e\n\u003cp\u003e使用通用語言的主要概念是將應用程式與商業邏輯對齊，這是通過在程式碼中採用業務與技術之間的共同語言所實現的。該語言的來源是公司的業務部門，它們擁有需要實施的概念，但術語則與公司的技術部門\u003cstrong\u003e協商\u003c/strong\u003e(這意味著業務部門並不總是選擇最佳命名)\u003cstrong\u003e以創建一種業務與程式開發人員共通且不會發生歧義的共同語言\u003c/strong\u003e。包含程式碼、類別、方法、屬性和模組的命名都最重與通用語言對齊。\u003c/p\u003e\n\u003ch1 id=\"層-layers\"\u003e層 Layers\u003c/h1\u003e\n\u003cp\u003e我在之前的文章中已經談過分層的概念，但我認為此刻重提由DDD所識別的各層是很重要的\u003c/p\u003e\n\u003ch2 id=\"user-interface-使用者介面\"\u003eUser Interface 使用者介面\u003c/h2\u003e\n\u003cp\u003e負責繪製用戶與應用程式互動的螢幕，並將用戶的輸入轉換為應用程式命令。值得注意的是，「用戶」可以是人類，但也可以是連接到我們API的其他應用程式，這完全對應於EBI架構中的邊界對象。\u003c/p\u003e\n\u003ch2 id=\"application-layer-應用層\"\u003eApplication Layer 應用層\u003c/h2\u003e\n\u003cp\u003e協調領域對象以執行用戶所需的任務：用例。它不包含業務邏輯。這與EBI架構中的互動者相關，只是互動者是與UI或實體無關的任何對象，而在這種情況下，應用層只包含與用例相關的對象。這一層是應用服務所屬的地方，因為它們是用例協調發生的容器，使用存儲庫、領域服務、實體、價值對象或任何其他領域對象。\u003c/p\u003e\n\u003ch2 id=\"domain-layer-領域層\"\u003eDomain Layer 領域層\u003c/h2\u003e\n\u003cp\u003e這是包含所有業務邏輯的層，包括領域服務、實體、事件以及任何其他包含業務邏輯的對象類型。顯然，它與EBI的實體對象類型有關。這是系統的核心。領域服務將包含不完全適合於實體的領域邏輯，通常在完成某些領域動作時協調多個實體。\u003c/p\u003e\n\u003ch2 id=\"infrastructure-基礎建設\"\u003eInfrastructure 基礎建設\u003c/h2\u003e\n\u003cp\u003e支援上層的技術能力，即持久性或訊息傳遞。\n\u003cimg alt=\"ddd\" loading=\"lazy\" src=\"https://herbertograca.files.wordpress.com/2017/04/ddd_layers.png?w=345\u0026h=330\"\u003e\u003c/p\u003e\n\u003ch1 id=\"有界上下文\"\u003e有界上下文\u003c/h1\u003e\n\u003cp\u003e在企業應用中，模型可能會大幅增長，同時進行程式碼開發的團隊規模也可能會擴大。這帶來了兩個問題：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e開發人員必須處理的程式碼庫越大，認知負荷就越大，理解程式碼的難度也就越高，因此可能會引入更多的錯誤和判斷失誤，\u003c/li\u003e\n\u003cli\u003e越多的開發人員在同一個程式碼庫上工作，就愈難協調對應用程式的共同技術與領域視野。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e換句話說，手頭的問題變得過於龐大。\u003c/p\u003e\n\u003cp\u003e對於大問題的常見解決方案是將其分解成較小的部分，這正是「有界上下文」發揮作用的地方。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eTwo subsystems commonly serve very different user communities - \u003cem\u003e\u003cstrong\u003eEric Evans 2014, Domain-Driven Design Reference\u003c/strong\u003e\u003c/em\u003e\u003cbr\u003e\n兩個子系統通常服務於截然不同的用戶群體 - \u003cem\u003e\u003cstrong\u003eEric Evans 2014，領域驅動設計參考\u003c/strong\u003e\u003c/em\u003e\u003c/p\u003e","title":"[IT] 領域驅動設計 Domain-Driven Design"},{"content":"系統的架構是該系統的高層視圖、大局觀，以粗略的筆觸描繪的系統設計。架構決策是系統中的結構性決策，影響整個程式庫的決策，也是定義其他所有元素將在其上建立的決策。\n架構決定系統的許多元素，包含：\n組件 Components 組件之間的關係 Relationships between components 指導組件與組件間關係如何設計與如何演化 Principles guiding the design and evolution of components and relationships 換句話說，這些是隨著系統演進更難改變的設計決策，它們是支撐功能開發的基礎。\n義大利麵架構 Spaghetti Architecture 有些專案，結構隨機，既不反映架構，也不反映領域。如果我問「我應該把這個 value object 放在哪裡？」結果得到「把它放在 src 資料夾的某個地方」這樣的回答；如果我問「執行這個邏輯的 service 在哪裡？」卻得到「用你的 IDE 進行搜索」這樣的回答。這意味著專案沒有經過組織，這樣鬆散的結構就稱為義大利麵架構(Spaghetti Architecture)。\n這是一個大問題，因為這意味著沒有套件模組化，高階的程式碼關係和流程並沒有可以遵循的邏輯結構，導致模組之間高度耦合且低內聚，實際上可能代表根本沒有模組，應該屬於模組的程式碼散佈在整個程式碼庫中。\n可維護的程式碼庫 擁有一個可維護的程式庫意味著我們可以變更最少的程式碼來實現最大的概念變更。換句話說，當我們需要對一個程式碼單元進行變更時，我們應該盡可能少地對其他程式碼單元進行變更。\n這樣帶來的優點有：\n程式碼的修改變得簡單，因為它們對較少的程式碼產生影響。 程式碼的修改會更快，因為需要修改的程式碼較少。 因為修改的程式碼變少，出現錯誤的可能性也更低。 封裝(encapsulation)、**低耦合(low coupling)和高內聚(high cohesion)**是使程式碼隔離的核心原則，使得我們能夠擁有可維護的程式碼基礎。\n封裝 Encapsulation 這是隱藏類別的內部訊息與實作的過程。\n也就是說，它對外隱藏了實作的方式，使得一個類別的內部結構可以自由變更，而不會影響使用這個特定類別的其他類別。\n低耦合 Low coupling 耦合是指一個程式碼單元與另一個程式碼單元的關係。如果對一個模組的更改將導致對另一個模組的更改，則該模組被認為與另一個模組高度耦合。而如果一個模組獨立於任何其他模組，則該模組被認為是低耦合的。這可以通過擁有一個穩定的介面來實現，有效地隱藏了對其他模組的實現。\n低耦合的好處 可維護性(maintainability) - 變更僅限於單一模組 可測試性(testability) - 可以將單元測試涉及的模塊限制到最小 可讀性(readability) - 需要分析的類別被保持在最小範圍內 高內聚 High Cohesion 內聚性是指一個模塊的功能之間的緊密相關程度的衡量。低內聚是指模組間具有許多不相關的職責；高內聚是指模組間有類似的概念。\n高內聚的好處 可讀性(readability) - 相關的功能都包含在單一模塊中 可維護性(maintainability) - bug 通常會被限制在單一模組中 重用性(reusability) - 專注於類別的功能，不被無用的功能污染 結構上的影響 前述的原則通常與類別相關，然而，它們對於類別群組也同樣適用。類別群組在一般情況下被稱為套件(package)，但如果它們具有純粹的功能性目標(例如 ORM)，我們可以更具體地稱呼它們為模組(module)；如果它們具有領域目標(例如 AccountManagement)，我們可以稱呼它們為組件(components)。這與 Bass, Clements 和 Kazman 在他們的書《實踐軟體架構(Software Architecture in Practice)》中解釋的定義是一致的。\n我們應該擁有低耦合和高內聚的套件，因為這將使我們能夠：\n更改一個套件而不影響其他套件，這有助於減少錯誤的出現。 更改一個套件而無需更改其他套件，這有助於提高交付速度。 擁有專門針對特定套件的團隊，這使得變更更快速、更少出錯，並且設計更佳 團隊可以在減少相互依賴和衝突的情況下進行發展，從而提高生產力。 對組件間的關係有更好的聯繫，這將使我們能夠更好地對整個應用程式建模，提高系統的品質。 概念封裝 Conceptual encapsulation 我認為，以一種既反映架構又反映領域的方式來組織我們的項目，將大大提高我們的程式碼的可維護性。實際上，我甚至敢斷言，這是唯一的方式(當我們處理中大型企業應用時)。\n在一個組織良好的程式碼庫中，特定的程式碼單元只會有一個可能的位置存在。我們可能甚至不知道那個位置在哪裡，但只會有一條邏輯路徑引導我們找到它。\n套件的定義\nBy grouping classes into packages we can reason about the design at a higher level of abstraction. The goal is to partition the classes in your application according to some criteria, and then allocate those partitions to packages. The relationships between those packages expresses the high level organization of the application. - Robert C. Martin 1996, Granularity pp. 3\n透過將類別分組到套件中，我們可以在更高層次的抽象化中理解設計。目標是根據某些標準將您的應用程式中的類別進行分區，然後將這些分區分配到套件中。這些套件之間的關係表達了應用程式的高層次的組織。 - 羅伯特 C. 馬丁 1996年, 《細緻度》pp. 3\n我們需要致力於定義概念上相關的程式碼套件。這些套件很重要，因為它們定義了概念上相關的程式碼單元，這些單元應該與其他套件隔離，並且定義了幾個套件之間的關係。\n這是為了：\n理解程式碼單元之間的關係。 維護程式碼之間的邏輯關係。 擁有低耦合和高內聚的程式碼套件。 重構程式碼套件時，對應用程式產生最小的影響。 改變程式碼套件的實作時，對應用程式有最小的影響。 封裝原則 Packagin Principles 我們可以透過遵循 Robert C. Martin 於 1996 年和 1997 年發布的封裝原則來實現這一點，主要包括 CCP(Common Closure Principle), CRP(Common Reuse Principle) 和 SDP（Stable Dependencies Principle) 等原則。\n封裝原則 by Robert C. Martin: Package Cohesion Principles 套件內聚原則 REP – The Release Reuse Equivalency Principle\nREP - 釋放重用等效原則\nThe granule of reuse is the granule of release\n重複使用的顆粒，就是釋放的顆粒\nCCP – The Common Closure Principle\nCCP – 共同封閉原則\nClasses that change together are packaged together\n一起變動的類別會一起打包\nCRP – The Common Reuse Principle\nCRP - 共享重用原則\nClasses that are used together are packaged together\n一起使用的類別會一起打包\nPackage Coupling Principles 套件耦合原則 ADP – The Acyclic Dependencies Principle\nADP - 非循環依賴原則\nThe dependency graph of packages must have no cycles\n套件的依賴關係圖必須沒有循環\nSDP – The Stable Dependencies Principle SDP - 穩定依賴原則\nDepend in the direction of stability\n依賴於穩定的方向\nSAP – The Stable Abstractions Principle SAP - 穩定抽象原則\nAbstractness increases with stability\n抽象性隨穩定性增加\n要正確使用 SDP，我們應該定義程式碼的概念單元（組件）和組件的層(layers)，這樣我們就知道哪些組件應該了解(依賴)其他組件。\n然而，如果那些元件的邊界不明確，我們最終會混淆應該互不知曉的程式碼單元，將它們耦合起來，讓它們變成混亂的程式碼，最終變成無法維護的程式碼。\n為了明確劃定這些邊界，我們需要將概念上相關的類別組合到套件中，就像我們將概念上相關的方法組合到類別中一樣。在套件的層級上，我們只能使用具有概念性名稱的資料夾來實現，這些名稱在領域中有一定的意義(例如：用戶管理、訂單、付款，\u0026hellip;)。只有在結構的最後一層，也就是其葉子節點，我們才能根據需要將類別按功能角色分開(例如：entity, factory, repository, \u0026hellip;)。\n要設計出良好解耦的組件，對以下事項進行反思會有所幫助：\n“if I would want to remove this business concept, by deleting its component root folder would all of the business concept code be removed and would the remaining application not break?”\n“如果我想要移除這個商業概念，通過刪除其組件根資料夾，是否所有的商業概念代碼都會被移除，並且剩餘的應用程式不會出現故障？”\n如果答案是肯定的，那麼我們就有一個解耦合得很好的組件。\n例如，在 Command Bus Architecture 中，command 和 handler 是無法分割的，他們在概念上和功能上都緊密相連，因此如果我們需要移除該邏輯，我們將一併移除它們。如果他們位於同一個位置，我們只需移除一個資料夾（我們試圖解決的問題並非關於刪除代碼，而是關於擁有解耦和內聚的程式碼，但這樣思考有助於理解）。因此，為了遵循 CCP 和 CRP，command 應該與其 handler 在同一個資料夾中。\n任何程式碼單元都應只存在於一個邏輯位置，即使是項目中的新手或初級開發人員也能明顯看出。這將避免不一致性、丟失的程式碼、重複的程式碼和開發人員的挫折感。如果我們需要尋找程式碼，因為我們不知道它應該在哪裡，和/或如果很難理解我們正在處理的程式碼相關的程式碼\u0026hellip;那麼我們就有一個糟糕的項目結構，或者更糟，一個糟糕的架構。\nScreaming Architecture \u0026ldquo;Screaming Architecture\u0026rdquo; 是由 Robert C. Martin 提出的，基本上，它認為項目應該非常清楚地告訴我們系統的主要領域是什麼。因此，源資料夾中首先出現的資料夾應該與領域概念相關，即頂級的有界上下文（例如：病人，醫生，預約等）。它們不應該關於系統使用的工具（例如：Doctrine, MySQL, Symfony, Redis等），也不應該關於系統的功能部分（例如，repositories, views, controllers），也不應該關於交付機制（http, consoles, \u0026hellip;）。\nYour architectures should tell readers about the system, not about the frameworks you used in your system. If you are building a health-care system, then when new programmers look at the source repository, their first impression should be: “Oh, this is a heath-care system”. - Robert C. Martin 2011, Screaming Architecture\n您的架構應該向讀者介紹系統，而不是您在系統中使用的框架。如果您正在建立一個醫療保健系統，那麼當新的程式設計師查看源代碼庫時，他們的第一印象應該是：“哦，這是一個醫療保健系統”。 - 羅伯特·C·馬丁 2011，尖叫的架構\n這實際上是一種更簡單的思考方式，他在 15 年前發表的封裝原則，我在上面已經陳述過了。這種包裝風格也被稱為 \u0026ldquo;Package by feature\u0026rdquo;。\n","permalink":"https://intervalrain.github.io/hgraca/packaging-code/","summary":"\u003cp\u003e系統的架構是該系統的高層視圖、大局觀，以粗略的筆觸描繪的系統設計。架構決策是系統中的結構性決策，影響整個程式庫的決策，也是定義其他所有元素將在其上建立的決策。\u003c/p\u003e\n\u003cp\u003e架構決定系統的許多元素，包含：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e組件 Components\u003c/li\u003e\n\u003cli\u003e組件之間的關係 Relationships between components\u003c/li\u003e\n\u003cli\u003e指導組件與組件間關係如何設計與如何演化 Principles guiding the design and evolution of components and relationships\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e換句話說，這些是隨著系統演進更難改變的設計決策，它們是支撐功能開發的基礎。\u003c/p\u003e\n\u003ch1 id=\"義大利麵架構-spaghetti-architecture\"\u003e義大利麵架構 Spaghetti Architecture\u003c/h1\u003e\n\u003cp\u003e有些專案，結構隨機，既不反映架構，也不反映領域。如果我問「我應該把這個 value object 放在哪裡？」結果得到「把它放在 src 資料夾的某個地方」這樣的回答；如果我問「執行這個邏輯的 service 在哪裡？」卻得到「用你的 IDE 進行搜索」這樣的回答。這意味著專案沒有經過組織，這樣鬆散的結構就稱為義大利麵架構(Spaghetti Architecture)。\u003c/p\u003e\n\u003cp\u003e這是一個大問題，因為這意味著沒有套件模組化，高階的程式碼關係和流程並沒有可以遵循的邏輯結構，導致模組之間高度耦合且低內聚，實際上可能代表根本沒有模組，應該屬於模組的程式碼散佈在整個程式碼庫中。\u003c/p\u003e\n\u003ch1 id=\"可維護的程式碼庫\"\u003e可維護的程式碼庫\u003c/h1\u003e\n\u003cp\u003e擁有一個可維護的程式庫意味著我們可以變更最少的程式碼來實現最大的概念變更。換句話說，當我們需要對一個程式碼單元進行變更時，我們應該盡可能少地對其他程式碼單元進行變更。\u003c/p\u003e\n\u003cp\u003e這樣帶來的優點有：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e程式碼的修改變得簡單，因為它們對較少的程式碼產生影響。\u003c/li\u003e\n\u003cli\u003e程式碼的修改會更快，因為需要修改的程式碼較少。\u003c/li\u003e\n\u003cli\u003e因為修改的程式碼變少，出現錯誤的可能性也更低。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003e封裝(encapsulation)\u003c/strong\u003e、**低耦合(low coupling)\u003cstrong\u003e和\u003c/strong\u003e高內聚(high cohesion)**是使程式碼隔離的核心原則，使得我們能夠擁有可維護的程式碼基礎。\u003c/p\u003e\n\u003ch2 id=\"封裝-encapsulation\"\u003e封裝 Encapsulation\u003c/h2\u003e\n\u003cp\u003e這是隱藏類別的內部訊息與實作的過程。\u003c/p\u003e\n\u003cp\u003e也就是說，它對外隱藏了實作的方式，使得一個類別的內部結構可以自由變更，而不會影響使用這個特定類別的其他類別。\u003c/p\u003e\n\u003ch2 id=\"低耦合-low-coupling\"\u003e低耦合 Low coupling\u003c/h2\u003e\n\u003cp\u003e耦合是指一個程式碼單元與另一個程式碼單元的關係。如果對一個模組的更改將導致對另一個模組的更改，則該模組被認為與另一個模組高度耦合。而如果一個模組獨立於任何其他模組，則該模組被認為是低耦合的。這可以通過擁有一個穩定的介面來實現，有效地隱藏了對其他模組的實現。\u003c/p\u003e\n\u003ch3 id=\"低耦合的好處\"\u003e低耦合的好處\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e可維護性(maintainability) - 變更僅限於單一模組\u003c/li\u003e\n\u003cli\u003e可測試性(testability) - 可以將單元測試涉及的模塊限制到最小\u003c/li\u003e\n\u003cli\u003e可讀性(readability) - 需要分析的類別被保持在最小範圍內\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"高內聚-high-cohesion\"\u003e高內聚 High Cohesion\u003c/h2\u003e\n\u003cp\u003e內聚性是指一個模塊的功能之間的緊密相關程度的衡量。低內聚是指模組間具有許多不相關的職責；高內聚是指模組間有類似的概念。\u003c/p\u003e\n\u003ch3 id=\"高內聚的好處\"\u003e高內聚的好處\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e可讀性(readability) - 相關的功能都包含在單一模塊中\u003c/li\u003e\n\u003cli\u003e可維護性(maintainability) - bug 通常會被限制在單一模組中\u003c/li\u003e\n\u003cli\u003e重用性(reusability) - 專注於類別的功能，不被無用的功能污染\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"結構上的影響\"\u003e結構上的影響\u003c/h1\u003e\n\u003cp\u003e前述的原則通常與類別相關，然而，它們對於類別群組也同樣適用。類別群組在一般情況下被稱為套件(package)，但如果它們具有純粹的功能性目標(例如 ORM)，我們可以更具體地稱呼它們為模組(module)；如果它們具有領域目標(例如 AccountManagement)，我們可以稱呼它們為組件(components)。這與 Bass, Clements 和 Kazman 在他們的書《實踐軟體架構(Software Architecture in Practice)》中解釋的定義是一致的。\u003c/p\u003e","title":"[IT] 套件與命名空間 packaging \u0026 namespacing"},{"content":"EBI 架構全名是 Entity-Boundary-Interactor Architecture，第一次由 Robert C. Martin 在他乾淨架構(Clean Architecture)中的演講中提到。\n然而，EBI 架構正式的發布是來自 Ivar Jacobson 在 1992 年所出版的 《物件導向的軟體工程：用例驅動方法(Object-Oriented Software Engineering: A use case driven approach)》。當時，Jacobson 實際上稱之為 Entity-Interface-Control，爾後才進行更名，為了避免將 Interface 與程式語言中的 Interface 或 User Interface 混淆；也避免將 Control 與 MVC 中的 Controller 混淆。\nEntity 實體 Entity objects 持有所有系統使用的數據且持有所有與數據耦合的行為。每個 Entity object 代表一個與問題領域相關的概念，同時具備身份(identity)與永久性(persistence)。Jacobson 告訴我們，Entity object 應該要包含那些會因 entity 自身變化而變化的邏輯，也就是說，如果它持有的數據結構改變，則對該數據的操作也將需要變化，因此它們應該位於 entity中。\n值得注意的是，Jacobson在1992年就已經發出了一個警告：\nBeginners may sometime only use entity object as data carriers and place all dynamic behaviour in control objects […]. This should, however be avoided. […] Instead, quite a lot of behaviour should be placed in the entity objects. - Ivar Jacobson 1992, pp. 134\n初學者有時可能只將實體物件用作數據載體，並將所有動態行為放在控制物件中[\u0026hellip;]。然而，這樣的做法應該避免[\u0026hellip;]。相反，應該將相當多的行為放在實體物件中。 - 伊瓦爾‧雅各布森 1992, pp. 134\n這是對我們現在所知的「貧血實體(anaemic enetities)」的警告。\nBoundary 邊界 邊界物件模擬系統的介面。\n[…] everything concerning the interface of the system is placed in an interface object - Ivar Jacobson 1992, pp. 134\n[\u0026hellip;] 有關系統介面的所有事物都被放置在一個介面物件中 - 伊瓦爾‧雅各布森 1992, pp. 134\n所有依賴於系統環境（工具和交付機制）的功能都應該存在於邊界物件中。\nsystem 與 actor 的任何互動都會透過邊界物件進行。正如雅各布森所描述的，actor 可以是像客戶或管理員（操作員）這樣的人類使用者，但也可能是像警報器、打印機或第三方 API 這樣的非人類使用者。 反思這個邊界的概念，並看著上圖，並想像它有 6 個邊界而不是 4 個，它是不是與 13 年後(2005) 發表的 Ports \u0026amp; Adapters Architecture 有一曲同工之妙呢？\nInteractor 互動器 互動器物件將保有那些並非自然地綁定於其他類型物件的行為(behavior)。\n此些行為通常包含對多個實體的操作，並在返回某些結果給邊界物件時告終。\nBehaviour that remains after the Interface objects and Entity objects have obtained their parts will be placed in the control objects - Ivar Jacobson 1992, pp. 134\n在介面物件和實體物件獲得其部分之後仍然存在的行為將被放置在控制物件中 - 伊瓦爾‧雅各布森 1992, pp. 134\n這意味著所有不符合邊界或實體的行為，將被放置在一個或多個控制物件中。\n因此，Jacobson 不僅將控制物件視為協調用例的物件，也將其視為對用例有相關行為的物件，但並非邊界或實體。\n以我的經驗，我會將 interactors 比擬為 Application Services(或 use cases)與 Domain Services(包含 domain behavior 但非 entities)。\n這些 interactor objects 之所以重要，是因為如果我們不使用它們，我們將會把特定的使用案例邏輯放在 entities 中。然而，entities 在多個使用案例中被使用，因此具有通用性。將特定的使用案例邏輯放在 entities 中，使得其在多個邊界中可用，這可能導致它被當作通用邏輯來使用，我們可能最終會因為改變它而不慎改變了另一個邊界，增加其複雜性並增加破壞其他使用它的使用案例的機會。\nWhy 3 object types? 當時，雅各布森表示，其他的物件導向方法論會將所有這些責任都放在 entities 本身，然而，他（及其合作者）更傾向於將這些責任分隔成三種物件類型，因為這樣可以使系統更能適應變化。\n[…] all systems will change. Therefore stability will occur in the sense that all changes will be local, that is, affect (preferably) only one object in the system.- Ivar Jacobson 1992, pp. 135\n[…] 所有系統都將會變化。因此，穩定性將在某種程度上出現，即所有的變化都將是局部的，也就是說，它們（最好）只影響系統中的一個物件。- Ivar Jacobson 1992, pp. 135\n因此，目標是通過封裝責任來實現系統變化的局部性。如果我們深思熟慮，Jacobson 其實隱含地談到了單一職責原則，這個原則是在 10 年後由 Robert C. Martin 在他的《敏捷軟體開發，原則，模式，和實踐(Agile Software Development, Principles, Patterns, and Practices)》中發表的。\n結論 在 MVC 模式中，模型代表整個後端，包括所有的實體、服務及其關係，EBI 模式將邊界視為與外界的一個完整連接，而不僅僅是一個視圖、控制器或介面（語言構造）。邊界代表整個呈現層，這在 MVC 中對應於視圖和控制器。EBI 中的實體代表實際持有數據及其相關行為的實體，而互動者物件則建立呈現層與實體之間的連接，它們是我所稱的應用服務和領域服務。\nEBI 模式對於後端來說，就如同 MVC 對於前端一樣。它們並非彼此的替代品，而是相互補充。如果我們將它們結合成一個單一的模式，我們可以稱之為類似於View-Controller-Interactor-Entity(視圖-控制器-互動器-實體)的東西。\n","permalink":"https://intervalrain.github.io/hgraca/ebi-architecture/","summary":"\u003cp\u003eEBI 架構全名是 Entity-Boundary-Interactor Architecture，第一次由 Robert C. Martin 在他乾淨架構(Clean Architecture)中的演講中提到。\u003c/p\u003e\n\u003cp\u003e然而，EBI 架構正式的發布是來自 Ivar Jacobson 在 1992 年所出版的 \u003cem\u003e\u003cstrong\u003e《物件導向的軟體工程：用例驅動方法(Object-Oriented Software Engineering: A use case driven approach)》\u003c/strong\u003e\u003c/em\u003e。當時，Jacobson 實際上稱之為 Entity-Interface-Control，爾後才進行更名，為了避免將 Interface 與程式語言中的 Interface 或 User Interface 混淆；也避免將 Control 與 MVC 中的 Controller 混淆。\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"EBI\" loading=\"lazy\" src=\"https://herbertograca.files.wordpress.com/2017/04/fig_7_12_entity_interface_control.jpg\"\u003e\u003c/p\u003e\n\u003ch1 id=\"entity-實體\"\u003eEntity 實體\u003c/h1\u003e\n\u003cp\u003eEntity objects 持有所有系統使用的數據且持有所有與數據耦合的行為。每個 Entity object 代表一個與問題領域相關的概念，同時具備身份(identity)與永久性(persistence)。Jacobson 告訴我們，Entity object 應該要包含那些會因 entity 自身變化而變化的邏輯，也就是說，如果它持有的數據結構改變，則對該數據的操作也將需要變化，因此它們應該位於 entity中。\u003c/p\u003e\n\u003cp\u003e值得注意的是，Jacobson在1992年就已經發出了一個警告：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cem\u003eBeginners may sometime only use entity object as data carriers and place all dynamic behaviour in control objects […]. This should, however be avoided. […] Instead, quite a lot of behaviour should be placed in the entity objects.\u003c/em\u003e - \u003cem\u003e\u003cstrong\u003eIvar Jacobson 1992, pp. 134\u003c/strong\u003e\u003c/em\u003e\u003cbr\u003e\n\u003cem\u003e初學者有時可能只將實體物件用作數據載體，並將所有動態行為放在控制物件中[\u0026hellip;]。然而，這樣的做法應該避免[\u0026hellip;]。相反，應該將相當多的行為放在實體物件中。\u003c/em\u003e - \u003cem\u003e\u003cstrong\u003e伊瓦爾‧雅各布森 1992, pp. 134\u003c/strong\u003e\u003c/em\u003e\u003c/p\u003e","title":"[IT] EBI 架構"},{"content":"Java Server Pages (JSP) 是一種技術，這種腳本語言與 PHP、ASP，甚至 Python 相當，用於創建由 JVM 解釋的伺服器端頁面，並可以使用 Java 物件。\n首次由 Sun Microsystems 於 1998 年發布的 JSP 規範，定義了兩種結構化應用程式的方式，使得呈現邏輯能與業務邏輯，甚至是在 HTTP 請求/回應範疇中的使用案例，進行解耦。\n有些人認為這些\u0026quot;Model1\u0026quot;和\u0026quot;Model2\u0026quot;是首次嘗試將原本為桌面軟體開發環境而設計的 MVC 模式，適配到網路 HTTP 請求/回應範疇的嘗試。\nModel1 JSP 規範 v0.92 的首次提議，是將 JSP 作為唯一的呈現工具，其中包含所有的呈現和用例邏輯。 這種方法對當時的大多數使用情況可能已經足夠好，因為當時的網路大部分是由簡單的動態頁面組成，而不是我們今天所熟知的複雜的網路企業應用程式。\nModel2 關於如何使用 JSP 的第二個建議，當時是針對被視為複雜的網路應用程式而設計的。然而，請記住，如今的網路應用程式的規模和複雜度已經更高了。 在“Model2”中，一個 HTTP 請求會到達一個 servlet，該 servlet 會解釋 HTTP 請求，使用 Java 物件和 EJBs（repositories）執行一些用例邏輯，收集結果數據，並將該數據傳遞給一個 JSP，該 JSP 再渲染頁面，並發送回客戶端。在“Model2”中，JSPs 僅作為模板引擎使用。\n在1999年，Govind Seshadri 發表了一篇文章，其中他將\u0026quot;Model2\u0026quot;對應到 MVC：\nservelet 是 Controller，它控制應如何處理用戶的請求。 JSP 是 View，它決定了顯示給使用者的內容。 在 MVC 和\u0026quot;Model2\u0026quot;中，Model 指的都是一整個領域模型(domain model)。 我的看法 這兩種方法至今只能說是堪用，但對今日的網路企業應用程式而言，我們需要更好的東西，因為這兩種模式都不遵守單一職責原則(Single Respoinsibility Pinciple, RSP)。\nModel1 的問題很明顯：模板邏輯(templating logic)與用例邏輯(usecase logic)會混在一起。\n至於 Model2，我認為視圖(view)與控制器(controller)都屬於呈現層(presentation layer)，儘管 Govind Seshadri 明確地說了，Model2 架構的所有處理邏輯集中在 controller servlet 中，儘管領域邏輯在外部，位於 Java objects 與 EJBs 中。\n這意味著 Model2 控制器包含了用例邏輯(usecase logic)，但它應該要屬於應用層(application layer)，而非呈現層(presentation layer)。\n例如，如果我們想要從一個事件觸發一個已存在的用例，我們將需要在事件監聽器中複製用例邏輯（已存在於控制器中），這是一個大忌，因為它導致維護變得更困難，並可能在整個應用程序中產生不一致性（bugs）。\n","permalink":"https://intervalrain.github.io/hgraca/model-1-model-2/","summary":"\u003cp\u003eJava Server Pages (JSP) 是一種技術，這種腳本語言與 PHP、ASP，甚至 Python 相當，用於創建由 JVM 解釋的伺服器端頁面，並可以使用 Java 物件。\u003c/p\u003e\n\u003cp\u003e首次由 Sun Microsystems 於 1998 年發布的 JSP 規範，定義了兩種結構化應用程式的方式，使得呈現邏輯能與業務邏輯，甚至是在 HTTP 請求/回應範疇中的使用案例，進行解耦。\u003c/p\u003e\n\u003cp\u003e有些人認為這些\u0026quot;Model1\u0026quot;和\u0026quot;Model2\u0026quot;是首次嘗試將原本為桌面軟體開發環境而設計的 MVC 模式，適配到網路 HTTP 請求/回應範疇的嘗試。\u003c/p\u003e\n\u003ch1 id=\"model1\"\u003eModel1\u003c/h1\u003e\n\u003cp\u003eJSP 規範 v0.92 的首次提議，是將 JSP 作為唯一的呈現工具，其中包含所有的呈現和用例邏輯。\n\u003cimg alt=\"model1\" loading=\"lazy\" src=\"https://herbertograca.files.wordpress.com/2018/08/beans.jpg\"\u003e\n這種方法對當時的大多數使用情況可能已經足夠好，因為當時的網路大部分是由簡單的動態頁面組成，而不是我們今天所熟知的複雜的網路企業應用程式。\u003c/p\u003e\n\u003ch1 id=\"model2\"\u003eModel2\u003c/h1\u003e\n\u003cp\u003e關於如何使用 JSP 的第二個建議，當時是針對被視為複雜的網路應用程式而設計的。然而，請記住，如今的網路應用程式的規模和複雜度已經更高了。\n\u003cimg alt=\"model2\" loading=\"lazy\" src=\"https://herbertograca.files.wordpress.com/2018/08/scenario2.jpg\"\u003e\n在“Model2”中，一個 HTTP 請求會到達一個 servlet，該 servlet 會解釋 HTTP 請求，使用 Java 物件和 EJBs（repositories）執行一些用例邏輯，收集結果數據，並將該數據傳遞給一個 JSP，該 JSP 再渲染頁面，並發送回客戶端。在“Model2”中，JSPs 僅作為模板引擎使用。\u003c/p\u003e\n\u003cp\u003e在1999年，Govind Seshadri 發表了一篇文章，其中他將\u0026quot;Model2\u0026quot;對應到 MVC：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eservelet 是 Controller，它控制應如何處理用戶的請求。\u003c/li\u003e\n\u003cli\u003eJSP 是 View，它決定了顯示給使用者的內容。\u003c/li\u003e\n\u003cli\u003e在 MVC 和\u0026quot;Model2\u0026quot;中，Model 指的都是一整個領域模型(domain model)。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"我的看法\"\u003e我的看法\u003c/h1\u003e\n\u003cp\u003e這兩種方法至今只能說是堪用，但對今日的網路企業應用程式而言，我們需要更好的東西，因為這兩種模式都不遵守單一職責原則(Single Respoinsibility Pinciple, RSP)。\u003c/p\u003e","title":"[IT] Model1 \u0026 Model2"},{"content":"這篇文章將討論 MVC 的另一種變體：由 Paul M. Jones 創建的 Action-Domain-Responder。\n2014 – Action-Domain-Responder(ADR) ADR 模式是由 Paul M. Jones 於 2014 年創建的，其想法就像 RMR 一樣，是為了將 MVC 調整到網路 REST APIs的 情境中。ADR 的原始解釋非常簡單明瞭，我實在無法更好地改述它，所以我將在這裡複製/貼上部分內容，並只添加一些更多的評論。\nAction 行動 Is the logic to connect the Domain and Responder. It invokes the Domain with inputs collected from the HTTP request, then invokes the Responder with the data it needs to build an HTTP response. 這是連接 domain 和 responder 的邏輯，它會用從 HTTP 收集來的請求來觸發 domain，接著使用需要構建 HTTP 響應的數據來調用 responder。\n\u0026lt;?php namespace Pmjones\\Adr\\Web\\Blog\\Add; use Pmjones\\Adr\\Domain\\Blog\\BlogService; use Psr\\Http\\Message\\ResponseInterface as Response; use Psr\\Http\\Message\\ServerRequestInterface as Request; class BlogAddAction { protected $domain; protected $responder; public function __construct( BlogService $domain, BlogAddResponder $responder ) { $this-\u0026gt;domain = $domain; $this-\u0026gt;responder = $responder; } public function __invoke(Request $request) : Response { $payload = $this-\u0026gt;domain-\u0026gt;newPost(); return $this-\u0026gt;responder-\u0026gt;__invoke($request, $payload); } } Domain 領域 Is an entry point to the domain logic forming the core of the application, modifying state and persistence as needed. This may be a Transaction Script, Service Layer, Application Service, or something similar. 應用程式核心 domain 邏輯的進入點，根據需求修改狀態和持久性，也可能是交易腳本、服務層、應用服務，或類似的東西。\n\u0026lt;?php namespace Pmjones\\Adr\\Domain\\Blog; use Pmjones\\Adr\\DataSource\\Blog\\BlogMapper; use Pmjones\\Adr\\Domain\\ApplicationService; use Pmjones\\Adr\\Domain\\Payload; use Exception; class BlogService extends ApplicationService { protected $mapper; protected $filter; public function __construct( BlogMapper $mapper, BlogFilter $filter ) { $this-\u0026gt;mapper = $mapper; $this-\u0026gt;filter = $filter; } protected function fetchPage(int $page = 1, int $paging = 10) : Payload { $blogs = $this-\u0026gt;mapper-\u0026gt;selectAllByPage($page, $paging); return $this-\u0026gt;newPayload(Payload::STATUS_FOUND, [ \u0026#39;blogs\u0026#39; =\u0026gt; $blogs, ]); } protected function fetchPost(int $id) : Payload { $blog = $this-\u0026gt;mapper-\u0026gt;selectOneById($id); if ($blog === null) { return $this-\u0026gt;newPayload(Payload::STATUS_NOT_FOUND, [ \u0026#39;id\u0026#39; =\u0026gt; $id ]); } return $this-\u0026gt;newPayload(Payload::STATUS_FOUND, [ \u0026#39;blog\u0026#39; =\u0026gt; $blog ]); } protected function newPost(array $data = []) : Payload { return $this-\u0026gt;newPayload(Payload::STATUS_NEW, [ \u0026#39;blog\u0026#39; =\u0026gt; $this-\u0026gt;mapper-\u0026gt;newRecord($data) ]); } protected function addPost(array $data) : Payload { // instantiate a new record $blog = $this-\u0026gt;mapper-\u0026gt;newRecord($data); // validate the record if (! $this-\u0026gt;filter-\u0026gt;forInsert($blog)) { return $this-\u0026gt;newPayload(Payload::STATUS_NOT_VALID, [ \u0026#39;blog\u0026#39; =\u0026gt; $blog, \u0026#39;messages\u0026#39; =\u0026gt; $this-\u0026gt;filter-\u0026gt;getMessages() ]); } // insert the record $this-\u0026gt;mapper-\u0026gt;insert($blog); return $this-\u0026gt;newPayload(Payload::STATUS_CREATED, [ \u0026#39;blog\u0026#39; =\u0026gt; $blog, ]); } protected function editPost(int $id, array $data) : Payload { // fetch the record $blog = $this-\u0026gt;mapper-\u0026gt;selectOneById($id); if ($blog === null) { return $this-\u0026gt;newPayload(Payload::STATUS_NOT_FOUND, [ \u0026#39;id\u0026#39; =\u0026gt; $id ]); } // set data in the record; do not overwrite existing $id unset($data[\u0026#39;id\u0026#39;]); $blog-\u0026gt;setData($data); // validate the record if (! $this-\u0026gt;filter-\u0026gt;forUpdate($blog)) { return $this-\u0026gt;newPayload(Payload::STATUS_NOT_VALID, [ \u0026#39;blog\u0026#39; =\u0026gt; $blog, \u0026#39;messages\u0026#39; =\u0026gt; $this-\u0026gt;filter-\u0026gt;getMessages() ]); } // update the record $this-\u0026gt;mapper-\u0026gt;update($blog); return $this-\u0026gt;newPayload(Payload::STATUS_UPDATED, [ \u0026#39;blog\u0026#39; =\u0026gt; $blog, ]); } protected function deletePost(int $id) : Payload { // fetch the record $blog = $this-\u0026gt;mapper-\u0026gt;selectOneById($id); if (! $blog) { return $this-\u0026gt;newPayload(Payload::STATUS_NOT_FOUND, [ \u0026#39;id\u0026#39; =\u0026gt; $id ]); } // delete the record $this-\u0026gt;mapper-\u0026gt;delete($blog); return $this-\u0026gt;newPayload(Payload::STATUS_DELETED, [ \u0026#39;blog\u0026#39; =\u0026gt; $blog, ]); } } Responder 響應器 Is the presentation logic to build an HTTP response from the data it receives from the Action. It deals with status codes, headers and cookies, content, formatting and transformation, templates and views, and so on. 根據從動作中收到的數據來構建 HTTP 響應的呈現邏輯。包含處理狀態碼、headers 和 cookies、內容、格式化和轉換、模板和視圖等等。\n\u0026lt;?php namespace Pmjones\\Adr\\Web\\Blog\\Add; use Pmjones\\Adr\\Web\\Blog\\BlogResponder; class BlogAddResponder extends BlogResponder { protected function new() : void { $this-\u0026gt;renderTemplate(\u0026#39;add\u0026#39;); } } 如何運作 網路處理器(web handler)接收一個 HTTP 請求，並將其分派給一個動作(action)。 動作(action)調用領域(domain)，從 HTTP 請求中收集 inputs 給領域(domain)。 接著動作(action)會調用響應器(responder)，並提供建立 HTTP 響應所需的數據（通常是HTTP request 和 domain results，如果有的話）。 響應器(responder)使用動作(action)提供的數據來構建 HTTP 響應(response)； The Action returns the HTTP response to the web handler sends the HTTP response. 活動(action)返回 HTTP 響應(response) 給網頁處理器(web handler)。 HTTP 響應是由 Responder 透過解析和理解 domain response 來建立的，這反過來又取決於動作方法的使用案例。這意味著每個動作方法都需要一個特定的 Responder。如果我們將所有的資源方法都放在同一個控制器中，我們將需要實例化並注入所有的 Responders，但在一個 HTTP request 中我們只會使用一個，這作法顯然不夠好。因此，解決方案是讓每個控制器中只有一個方法，這個控制器及其唯一的動作方法就是 ADR 中所指的 Action。\n由於 Action 只有一種方法，所以該方法的名稱可以是像 run、execute 這樣的通用名稱，或者在 PHP 的情況下，可以是 __invoke ，使該類別成為可調用的。然而，由於我們的想法是將 MVC 模式適配到 HTTP REST API 的情境中，所以 Action（controller）的名稱被映射到HTTP request 方法，因此我們將有名為 Get、Post、Put、Delete 等的 Actions，明確指出每種 HTTP request 類型調用哪個控制器。作為一種組織模式，一個 resource 上的所有 Actions 都應該被分組在一個以該 resource 命名的資料夾下。\n對 ADR 的誤解 Anthony Ferrara 將 ADR 與 RMR 進行比較，他認為這是「相同的模式，只是調整了一些細節」。\n我不同意，我其實認為 Anthony Ferrara 的理解錯了：\nResource 等於 Domain\n在 RMR 中，resource 並非是 domain，它是一個 domain object，是一個 domain entity，而在 ADR 中的 domain 指的是整個 domain objects，所有的 entities 及其它們整體的關係。 Representation 等於 Responder 在 RMR 中，Representation 是發送回客戶端的回應，在 ADR 中，Responder 是一個物件，其職責是根據一些內容和一些模板來創建回應(response)。 “it shares RMRs coupling to HTTP that it becomes difficult to make a non-HTTP interface” 它將 RMRs 與 HTTP 進行耦合，進而使創建一個 non-HTTP 的介面變得困難。\n由於 ADR 將 domain 視為一個整體，而非一個 entity，因此 action 並不在單一個 domain object 內，它將是簡單地對 domain objects 要求進行一些業務邏輯，所以 domain 並未與 UI 耦合，我們可以創建一個 CLI 命令，使用 domain objects 來執行某些任務。 我的看法 在我寫這篇文章的時候，我覺得 ADR 是將 MVC 適配到 HTTP request/response 範疇的最佳方式，因為它清楚地將 HTTP 的 request 和 response 適配到 domain 的 request 和 response，同時仍然保持 domain 與 presentation layer 解耦。\nHTTP 請求方法（對資源的期望動作）與接收 HTTP 請求的程式碼明確地連接，因為每個 HTTP 方法都直接映射到控制器方法名稱。這具有額外的好處，即產生清晰、明確且可預測的程式碼組織，而不是擁有大量動作的控制器，這些動作往往無關，往往命名不當，因此無法預測，往往做著極其相似的事情。換句話說，它防止了控制器和動作的混亂造成大泥球(或義大利麵結構)。\n此外，它在解耦與互動本身（invoke domain）相關的程式碼與理解互動結果（domain response）並將其轉譯給客戶端的程式碼方面也做得非常出色。\n然而，有一些要點需要考慮：\n這種模式是專為 REST APIs 而設想的，所以在這種形式下，它還不夠精煉，無法用於具有 HTML 介面的網路應用程式（即在創建 resource 之前，顯示表單的動作該怎麼命名？）\n每個控制器只有一種方法使得這種模式更為冗長，例如，我們不再是有一個擁有 4 個動作（公開方法）的控制器（類別），而是有四個控制器和四個動作；\n為每個活動(action)創建響應器(responder_也會增加模式的冗長性。如果將 domain response 轉換為 HTTP response 的邏輯很簡單，我們應該考慮是否有需要使用響應器(responder)。不使用響應器意味著我們能夠在一個控制器中有多個方法，每個方法仍然對應到一個HTTP 方法。\n考慮到第二點和第三點，Paul M. Jones自己也承認並同意，在某些情況下，使用該模式的簡化版本雖然不夠優雅，但對於手頭的情境來說可能已經足夠。\n關於第一點，我認為這種模式可以輕易地擴展，使其能夠完全適用於 HTML 介面：我們可以模擬一些額外的 HTTP 方法，專門處理 REST API 無法處理的 HTML 請求。例如，在 REST API 中，我們可以使用 PUT 或 POST 來創建和/或更新資源，然而，對於 HTML 介面，我們需要在發送 POST 或 PUT 請求之前顯示一個表單，但是沒有 HTTP 方法指定客戶端請求創建資源的表單，也沒有指定編輯資源的表單。然而，我們可以通過使用帶有 create 或 edit 標頭的 GET 請求來模擬這一點，前端控制器可以解釋並將請求轉發到相應的名為 Create 或 Edit 的Action，然後回覆相應的 HTML 表單。然而，我們需要非常小心，並對我們創建的額外自定義 HTTP 方法保持極度的簡約……否則，這可能導致我們有大量的自定義 HTTP 方法，並且與行為緊密相連的自定義 HTTP 方法變得混亂！所以，對於我最後的這個建議，請謹慎行事。\n","permalink":"https://intervalrain.github.io/hgraca/action-domain-responder/","summary":"\u003cp\u003e這篇文章將討論 MVC 的另一種變體：由 Paul M. Jones 創建的 Action-Domain-Responder。\u003c/p\u003e\n\u003ch1 id=\"2014--action-domain-responderadr\"\u003e2014 – Action-Domain-Responder(ADR)\u003c/h1\u003e\n\u003cp\u003eADR 模式是由 Paul M. Jones 於 2014 年創建的，其想法就像 RMR 一樣，是為了將 MVC 調整到網路 REST APIs的 情境中。ADR 的原始解釋非常簡單明瞭，我實在無法更好地改述它，所以我將在這裡複製/貼上部分內容，並只添加一些更多的評論。\u003c/p\u003e\n\u003cp\u003e\u003cimg alt=\"ADR\" loading=\"lazy\" src=\"https://herbertograca.files.wordpress.com/2018/09/adr-22.png\"\u003e\u003c/p\u003e\n\u003ch2 id=\"action-行動\"\u003eAction 行動\u003c/h2\u003e\n\u003cp\u003eIs the logic to connect the Domain and Responder. It invokes the Domain with inputs collected from the HTTP request, then invokes the Responder with the data it needs to build an HTTP response.\n這是連接 domain 和 responder 的邏輯，它會用從 HTTP 收集來的請求來觸發 domain，接著使用需要構建 HTTP 響應的數據來調用 responder。\u003c/p\u003e","title":"[IT] Action-Domain-Responder(ADR) 架構"},{"content":"MVC 於 1979 年在桌面應用程式與 CLI 使用者介面的背景下出現，這意味著如果資料庫因使用者以外的某些因素發生變化，則使用者介面將自動更改。同樣的模式後來在具有 GUI 的桌面應用程式上也完全可用。\n然而，其在網路應用程式中的使用一直都是一種調適，因為大多數的網路應用程式並不會因為伺服器端的變更而改變使用者介面，使用者介面總是會呼叫伺服器端要求更新畫面。\n我之前已經談過 MVC 模式的變體，這篇文章將討論另一種變體：Resource-Method-Representation。\n我覺得有必要談論這個議題，是因為我曾對它產生誤解，認為它與 ADR 模式一樣，而我很快就會寫到這一點。\n2008 – Resource-Method-Representation(RMR) RMR 模式是由 Paul James 在 2008 年創建的，它將 MVC 模式適配到 REST APIs 的情境中。\nResource 資源 The idea is that the Entities are modelled as REST resources (the first R in the pattern name), with its only public methods mapping to an HTTP method: 這個概念是將實體模型化為 REST resources 資源（RMR中的第一個R），與其唯一的公開方法映射到一個 HTTP 方法：\n\u0026lt;?php // taken from http://www.peej.co.uk/articles/rmr-architecture.html class Resource { private resourceData = []; method constructor(request, dataSource) { // load data from data source } method get(request) { return new Response(200, getRepresentation(request.url, resourceData)); } method put(request) { return new Response(405); } method post(request) { return new Response(405); } method delete(request) { return new Response(405); } } Method 方法 當向 API 發出請求時，該請求會被路由到這些業務物件之一，即資源，並且在此資源上被調用的方法對應於請求的 HTTP 方法。然後，這個業務物件上的方法負責返回一個完整的 http 響應，包括其狀態碼和 headers 信息。\nRepresentation 表現 Representation 是 API 選擇或客戶端請求的資源表示形式，例如 JSON、XML 等。這種表示法是由方法創建並在有任何內容需要發送回來時發送回客戶端的響應內容。\n我的看法 MVC 模式是一種呈現模式，它是一種將模型(model)、領域(domain)與用戶介面(UI)分開的一種方式，這就是 MVC 的主要目標，過去如此，現在亦然。\n然而，RMR 想做的不只這些。它告訴我們如何設計我們的業務物件(business objects)，我們的領域實體(domain entities)。更重要的是，它告訴我們我們的領域實體應該反映出交付機制：HTTP 方法。\n這意味著這不僅僅是一種呈現模式，它也是一種架構模式，因為它影響到應用程式的所有層級。這也意味著使用這種模式建立的應用程式並非以領域為中心，而是以 HTTP 為中心。我們的實體最終會有反映交付機制的方法，而非領域行為。\n我認為這種模式或許可以成功地建立一些小型 API，但我不認為它可以用於企業應用程式，因為企業等級的應用程式需要領域驅動設計(domain driven design)的方法，因此需要以領域作為中心的軟體開發策略。\n此外，我完全同意 Anthony Ferrara 的說法：\nNot to mention that it couples itself to HTTP so tightly that to try to map it to a CLI or GUI interface would be quite difficult. - Anthony Ferrara 2014, Alternatives To MVC\n試圖將其映射到 CLI 或 GUI 介面將會相當困難，況且它與 HTTP 緊密耦合。 - Anthony Ferrara 2014，MVC的替代方案\n","permalink":"https://intervalrain.github.io/hgraca/resource-method-representation/","summary":"\u003cp\u003eMVC 於 1979 年在桌面應用程式與 CLI 使用者介面的背景下出現，這意味著如果資料庫因使用者以外的某些因素發生變化，則使用者介面將自動更改。同樣的模式後來在具有 GUI 的桌面應用程式上也完全可用。\u003c/p\u003e\n\u003cp\u003e然而，其在網路應用程式中的使用一直都是一種調適，因為大多數的網路應用程式並不會因為伺服器端的變更而改變使用者介面，使用者介面總是會呼叫伺服器端要求更新畫面。\u003c/p\u003e\n\u003cp\u003e我之前已經談過 MVC 模式的變體，這篇文章將討論另一種變體：\u003cstrong\u003eResource-Method-Representation\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e我覺得有必要談論這個議題，是因為我曾對它產生誤解，認為它與 ADR 模式一樣，而我很快就會寫到這一點。\u003c/p\u003e\n\u003ch1 id=\"2008--resource-method-representationrmr\"\u003e2008 – Resource-Method-Representation(RMR)\u003c/h1\u003e\n\u003cp\u003eRMR 模式是由 Paul James 在 2008 年創建的，它將 MVC 模式適配到 REST APIs 的情境中。\u003c/p\u003e\n\u003ch2 id=\"resource-資源\"\u003eResource 資源\u003c/h2\u003e\n\u003cp\u003eThe idea is that the Entities are modelled as REST resources (the first R in the pattern name), with its only public methods mapping to an HTTP method:\n這個概念是將實體模型化為 REST resources 資源（RMR中的第一個R），與其唯一的公開方法映射到一個 HTTP 方法：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-php\" data-lang=\"php\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;?\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ephp\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// taken from http://www.peej.co.uk/articles/rmr-architecture.html\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eResource\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eresourceData\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e [];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003emethod\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003econstructor\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003erequest\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003edataSource\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// load data from data source\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003emethod\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eget\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003erequest\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eResponse\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e200\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003egetRepresentation\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003erequest\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eurl\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eresourceData\u003c/span\u003e));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003emethod\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eput\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003erequest\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eResponse\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e405\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003emethod\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003epost\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003erequest\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eResponse\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e405\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003emethod\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edelete\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003erequest\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eResponse\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e405\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"method-方法\"\u003eMethod 方法\u003c/h2\u003e\n\u003cp\u003e當向 API 發出請求時，該請求會被路由到這些業務物件之一，即資源，並且在此資源上被調用的方法對應於請求的 HTTP 方法。然後，這個業務物件上的方法負責返回一個完整的 \u003cem\u003ehttp\u003c/em\u003e 響應，包括其狀態碼和 headers 信息。\u003c/p\u003e","title":"[IT] Resource-Method-Representation(RMR) 架構"},{"content":"創立一個可維護的應用程式一直是程式設計的一項長期挑戰。\n不久前，我在一家公司工作，其核心業務應用是一個 SaaS 平台，被幾千個客戶公司使用，這項應用程式已經運營了三年，其中的程式碼混雜了 HTML, CSS, 業務邏輯及 SQL，當然，在應用程式推出後的兩年，公司決定開始重構。儘管我們知道這樣的做法是不好的，且我們也知道如何避免，但是這樣的情況還是時常發生。\n然後，回溯到 1970 年代，混合職責是很常見的做法，且人們仍在努力尋找如何改進。隨著應用程式的複雜性提升，對 UI 的更動必然會導致業務邏輯的更改，從而增加了修改的複雜度、執行的時間與 bug 出現的可能性。(因為會有更多的程式碼被更改)。\n1979 - Model-View-Controller 為了解決上述問題，Trygve Reenskaug 於 1979 年提出了 MVC 架構，以此來將關注點分離，將 UI 與業務邏輯分離。該模式被應用於 1973年出現的桌面 GUI。\nMVC 架構將程式分為三個部分：\nModel: 模型，代表了商業邏輯。 View: 視圖，代表了 UI 中的組件，如 button, text box 等。 Controller: 控制器，負責協調視圖和模型之間的配合，這意味著它： 決定要顯示哪些視圖，以及使用什麼數據。 將使用者行為轉化為業務邏輯。 A model could be a single object (rather uninteresting), or it could be some structure of objects. - Trygve Reenskaug 1979, MVC\n一個模型可以是單一物件(相對無趣)，或可以是一些物件的結構。 - 特里格維‧倫斯考 1979, MVC\n其他重要且經典的 MVC 概念有：\n視圖直接使用模型數據物件(model data objects)，以顯示其數據。 當模型數據發生變化時，它會觸發一個事件，立即更新視圖(1997年，還沒有HTTP)。 通常，每個視圖都會關聯到一個控制器。 每個螢幕可以包含數對的視圖與控制器。 每個控制器可能有多個視圖。 今日我們熟悉的 HTTP Request \u0026amp; Response 模式，並未使用這樣的 MVC 風格。因為在這種情境下，流程是從視圖到控制器的，如同我們熟悉的，但在另一個方向上，它直接從模型流向視圖，而不經過控制器。\n此外，在現在的 Request \u0026amp; Response 模式中，當數據發生變化時，並不會觸發在瀏覽器中的視圖進行更新(儘管這可以透過使用 web sockets 來實現)。要查看更新的數據，用戶需要發出新的 request，接著數據才能透過控制器返回。\n1987/2000 - PAC/Hierarchical Model-View-Controller PAC，也被稱為 HMVC，為了提高模組化，將 UI 部分做 widgetization。\n例如，當我們有一個視圖，其中的一個部分在其他多個視圖中或甚至在同一個視圖中以完全相同的格視重複使用。一個實際的例子是網頁中的 RSS，它在多個頁面中重複被使用。\n使用 HMVC，處理主要 request 將會將次要的 request 轉發給其它控制器，以獲得 widget 的渲染，然後將其融入主視圖的渲染中。\n就我個人而言，我在 HTTP Request \u0026amp; Response 模式中遇過幾次這種案例，但我發現讓 UI 透過 AJAX 呼叫控制器來渲染 widget 是更簡單的方法，因為它保留了模組化的好處，且不會因嵌套呼叫控制器而增加複雜性，這樣的次要請求可以在像 Varnish 這樣的東西中被緩存，這是一個加分的部分。\n1996 - Model-View-Presenter MVC 架構為當時的程式設計提供了重大的改進，然而，隨著應用程式複雜性的增加，對進一步解耦的需求也隨之增加。\n在 1996 年，IBM 子公司 Taligent 公開了他們基於 MVC 架構開發的 MVP 架構，想法是進一步將模型與 UI 進行關注點分離：\n視圖是被動的，且對模型一無所知。 專注於控制器(presenter)，它們不包含任何業務遲輯，只是在模型中調用命令、查詢，將原始數據傳遞給視圖。 數據的變化並不會直接觸發視圖的更新：它會透過 presenter 進行，然後 presenter 再更新視圖。這樣可以讓 presenter 在執行視圖更新前執行額外跟呈現相關的邏輯。例如，更新與數據庫中發生變化的數據相關的數據。 每個視圖都有一個單獨的 presenter。 這已經更接近我們在今日 Request \u0026amp; Response 模式中看到的：流程總是通過 Controller/Presenter。然而，presenter 仍然不會主動更新視圖，它總是需要執行新的 request 才能使變更可見。\n在 MVP 中，presenter 又被稱為監督控制器(supervisor controller)。\n2005 - Model-View-ViewModel 再次，源於應用程式的複雜性增加，2005年，微軟的 WPF 和 Silverlight 的架構師 John Gossman 宣布了 MVVM 架構，其目標是進一步將 UI 設計與程式碼分離，並提供從視圖到數據模型的數據綁定。\n[MVVM] is a variation [of MVC] that is tailored for modern UI development platforms where the View is the responsibility of a designer rather than a classic developer. […] the UI part of the application is being developed using different tools, languages and by a different person than is the business logic or data backend. - John Gossman 2005, Introduction to Model/View/ViewModel pattern [MVVM]是[ MVC]的一種變體，專為現代UI開發平台量身定制，其中視圖是由設計師而非傳統開發人員負責。[…] 應用程序的UI部分是使用不同的工具、語言以及由與業務邏輯或數據後端不同的人來開發的。 - 約翰‧高斯曼 2005，模型/視圖/視圖模型模式介紹\n其中，Controller 被 ViewModel 所取代。\n[The View] encodes the keyboard shortcuts and the controls themselves manage the interaction with the input devices that is the responsibility of Controller in MVC (what exactly happened to Controller in modern GUI development is a long digression…I tend to think it just faded into the background. It is still there, but we don’t have to think about it as much as we did in 1979). - John Gossman 2005, Introduction to Model/View/ViewModel pattern [視圖]編碼鍵盤快捷鍵，而控制項本身則管理與輸入設備的互動，這是MVC中控制器的責任（現代GUI開發中控制器究竟發生了什麼，是一個長篇的離題\u0026hellip;我傾向於認為它只是淡出了背景。它仍然存在，但我們不必像1979年那樣多考慮它）。 - 約翰‧高斯曼 2005，模型/視圖/視圖模型模式介紹\nMVVM 的概念是：\n一個 ViewModel 只對應一個 View，反之亦然。 將視圖邏輯移至 ViewModel 以簡化視圖。 視圖中使用的數據與 ViewModel 中的數據之間的一對一映射。 將 ViewModel 中的數據與 View 中的數據綁定，以便當 ViewModel 中的數據發生變化時，它會立即在 View 中反映出來。 就像在原始的 MVC 模式中一樣，這種方法在傳統的 request \u0026amp; response 模式中是不可能的，因為 ViewModel 無法主動更新視圖（除非使用web socket），而 MVVM 需要它。此外，ViewModel 具有與視圖中使用的數據匹配的屬性，並非控制器的常見做法。\nModel-View-Presenter-ViewModel 在為雲端建立複雜的企業應用程式時，我傾向於將應用程式的使用者介面結構理性化為 M-V-P-VM，其中的 ViewModel 就是 Martin Fowler 在 2004 年所稱的 Presentation Model。\nModel 模型 一組包含所有業務邏輯和使用案例的類別。\nView 視圖 一個模板，用於使用模板引擎生成 HTML。\nViewModel 視圖模型(aka Presentation Model) 從查詢（或從中提取原始數據的模型實體）接收原始數據，並保留該數據以在模板中使用。它還封裝了複雜的呈現邏輯，以簡化模板。我發現使用 ViewModel 尤其重要，因為我們將不會被誘惑在模板中使用實體，這使我們能夠完全隔離視圖和模型：\n模型中的變化（即實體結構的變化）可能會影響到 ViewModel，但不會影響模板； 複雜的呈現邏輯不會滲透到領域中（即，在業務實體中創建與呈現邏輯專屬相關的方法），因為我們可以將其封裝在 ViewModel 中。 模板的依賴性因必須在 ViewModel 中設定而變得明確。使這些依賴性可見可以幫助我們，例如，決定應該從數據庫中急切加載什麼以防止 N+1 問題。 Presenter\n接收一個 HTTP 請求，觸發一個命令或查詢，使用查詢返回的數據，一個 ViewModel，一個模板和一個模板引擎來生成HTML並將其發送回客戶端。所有視圖交互都通過一個 presenter 進行。\n\u0026lt;?php // src/UI/Admin/Some/Controller/Namespace/Detail/SomeEntityDetailController.php namespace UI\\Admin\\Some\\Controller\\Namespace\\Detail; // use ... final class SomeEntityDetailController { /** * @var SomeRepositoryInterface */ private $someRepository; /** * @var RelatedRepositoryInterface */ private $relatedRepository; /** * @var TemplateEngineInterface */ private $templateEngine; public function __construct( SomeRepositoryInterface $someRepository, RelatedRepositoryInterface $relatedRepository, TemplateEngineInterface $templateEngine ) { $this-\u0026gt;someRepository = $someRepository; $this-\u0026gt;relatedRepository = $relatedRepository; $this-\u0026gt;templateEngine = $templateEngine; } /** * @return mixed */ public function get(int $someEntityId) { $mainEntity = $this-\u0026gt;someRepository-\u0026gt;getById($someEntityId); $relatedEntityList = $this-\u0026gt;relatedRepository-\u0026gt;getByParentId($someEntityId); return $this-\u0026gt;templateEngine-\u0026gt;render( \u0026#39;@Some/Controller/Namespace/Detail/details.html.twig\u0026#39;, new DetailsViewModel($mainEntity, $relatedEntityList) ); } } \u0026lt;?php // src/UI/Admin/Some/Controller/Namespace/Detail/DetailsViewModel.php namespace UI\\Admin\\Some\\Controller\\Namespace\\Detail; // use ... final class DetailsViewModel implements TemplateViewModelInterface { /** * @var array */ private $mainEntity = []; /** * @var array */ private $relatedEntityList = []; /** * @var bool */ private $shouldDisplayFancyDialog = false; /** * @var bool */ private $canEditData = false; /** * @param SomeEntity $mainEntity * @param RelatedEntity[] $relatedEntityList */ public function __construct(SomeEntity $mainEntity, array $relatedEntityList) { $this-\u0026gt;mainEntity = [ \u0026#39;name\u0026#39; =\u0026gt; $mainEntity-\u0026gt;getName(), \u0026#39;description\u0026#39; =\u0026gt; $mainEntity-\u0026gt;getResume(), ]; foreach ($relatedEntityList as $relatedEntity) { $this-\u0026gt;relatedEntityList[] = [ \u0026#39;title\u0026#39; =\u0026gt; $relatedEntity-\u0026gt;getTitle(), \u0026#39;subtitle\u0026#39; =\u0026gt; $relatedEntity-\u0026gt;getSubtitle(), ]; } $this-\u0026gt;shouldDisplayFancyDialog = /* ... some complex conditional using the entities data ... */ ; $this-\u0026gt;canEditData = /* ... another complex conditional using the entities data ... */ ; } public function getMainEntity(): array { return $this-\u0026gt;mainEntity; } public function getRelatedEntityList(): array { return $this-\u0026gt;relatedEntityList; } public function shouldDisplayFancyDialog(): bool { return $this-\u0026gt;shouldDisplayFancyDialog; } public function canEditData(): bool { return $this-\u0026gt;canEditData; } } 模板和 ViewModel 有一對一的對應關係，這意味著一個視圖只能與特定的 ViewModel 一起使用，反之亦然。這實際上甚至讓我想到，也許我們可以將模板和 ViewModel 封裝在一個視圖物件中，有效地將控制器與模板和 ViewModel 解耦，使其依賴於一個通用的視圖介面，但我從未嘗試過這種方法。\n結論 我們可能會在網路上找到 MVC 的其他變形。然而，以上是我認為跟我工作相關且我認為相對比較有趣的幾種案例。\n儘管如此，我在這裡引用的模式是為桌面應用程式和/或豐富客戶端的情境而創建的，因此它們並不總是 100% 適合 Request \u0026amp; Response 模式。\n如果您正在進行企業雲應用，並且您正在使用 MVC，那麼您很可能實際上使用的是更接近 MVP 的東西，但無論如何，我的觀點並不是要堅持遵循 MVC 的特定變體或了解所有名稱並對此嚴格要求，我的觀點是我們應該從所有這些中學習，以便我們可以根據需要使用和調整。最終的目標是，像往常一樣，低耦合和高內聚：關注點分離。\n","permalink":"https://intervalrain.github.io/hgraca/mvc-and-its-variants/","summary":"\u003cp\u003e創立一個可維護的應用程式一直是程式設計的一項長期挑戰。\u003c/p\u003e\n\u003cp\u003e不久前，我在一家公司工作，其核心業務應用是一個 SaaS 平台，被幾千個客戶公司使用，這項應用程式已經運營了三年，其中的程式碼混雜了 HTML, CSS, 業務邏輯及 SQL，當然，在應用程式推出後的兩年，公司決定開始重構。儘管我們知道這樣的做法是不好的，且我們也知道如何避免，但是這樣的情況還是時常發生。\u003c/p\u003e\n\u003cp\u003e然後，回溯到 1970 年代，混合職責是很常見的做法，且人們仍在努力尋找如何改進。隨著應用程式的複雜性提升，對 UI 的更動必然會導致業務邏輯的更改，從而增加了修改的複雜度、執行的時間與 bug 出現的可能性。(因為會有更多的程式碼被更改)。\u003c/p\u003e\n\u003ch1 id=\"1979---model-view-controller\"\u003e1979 - Model-View-Controller\u003c/h1\u003e\n\u003cp\u003e\u003cimg alt=\"mvc\" loading=\"lazy\" src=\"https://herbertograca.files.wordpress.com/2017/04/mvc.jpg\"\u003e\n為了解決上述問題，Trygve Reenskaug 於 1979 年提出了 MVC 架構，以此來將關注點分離，將 UI 與業務邏輯分離。該模式被應用於 1973年出現的桌面 GUI。\u003c/p\u003e\n\u003cp\u003eMVC 架構將程式分為三個部分：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eModel\u003c/strong\u003e: 模型，代表了商業邏輯。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eView\u003c/strong\u003e: 視圖，代表了 UI 中的組件，如 button, text box 等。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eController\u003c/strong\u003e: 控制器，負責協調視圖和模型之間的配合，這意味著它：\n\u003cul\u003e\n\u003cli\u003e決定要顯示哪些視圖，以及使用什麼數據。\u003c/li\u003e\n\u003cli\u003e將使用者行為轉化為業務邏輯。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cem\u003eA model could be a single object (rather uninteresting), or it could be some structure of objects.\u003c/em\u003e - \u003cem\u003e\u003cstrong\u003eTrygve Reenskaug 1979, MVC\u003c/strong\u003e\u003c/em\u003e\u003cbr\u003e\n\u003cem\u003e一個模型可以是單一物件(相對無趣)，或可以是一些物件的結構。\u003c/em\u003e - \u003cem\u003e\u003cstrong\u003e特里格維‧倫斯考 1979, MVC\u003c/strong\u003e\u003c/em\u003e\u003c/p\u003e","title":"[IT] MVC 及其變形"},{"content":"分層是一種常見於系統中做法，用於分隔或組織程式碼，根據程式碼在系統中的角色或職責。\nIn an object-oriented program, UI, database, and other support code often gets written directly into the business objects. Additional business logic is embedded in the behaviour of UI widgets and database scripts. This happens because it is the easiest way to make things work, in the short run.\nWhen the domain-related code is diffused through such a large amount of other code, it becomes extremely difficult to see and to reason about. Superficial changes to the UI can actually change business logic. To change a business rule may require meticulous tracing of UI code, database code, or other program elements. Implementing coherent, model-driven objects becomes impractical. Automated testing is awkward. With all the technologies and logic involved in each activity, a program must be kept very simple or it becomes impossible to understand. - Eric Evans 2014, Domain-Driven-Design\n在物件導向的程式中，使用者介面、資料庫和其他輔助程式碼常常直接被寫入商業物件中，額外的商業邏輯被嵌入在使用者介面和資料庫腳本，因為這是最簡單且最快速使事情可以運作的方式，導致這種情況時常發生。\n當與領域相關的程式碼在更大量的程式碼中擴散，程式碼便開始變得困難且難以理解，UI 的變更可能導致業務邏輯的改變，同樣地，業務邏輯的更動需要密切地追縱 UI、資料庫與組其它組件的程式碼。實作內聚且以模型驅動的物件變得不可行、自動化測試變得笨拙，由於每個動作都涉及到所有的技術和邏輯，程式必須保持簡單，否則就會難以理解。 - 艾瑞克‧埃文斯 2014, 領域驅動設計\n分層的意義 在一個分層系統中，每一層：\n取決於該層底下有哪些層。\nDepends on the layers beneath it. 獨立於該層以上的層，意指對哪些層使用該層是未知的。\nIs independent of the layers on top of it, having no knowledge of the layers using it. 在分層架構中，可以用嚴格的方式定義：該層只能訪問其底下的層；或以更靈活的方式定義：該層可以訪問其下的任何層。馬丁‧福勒(Marting Fowler)和我自己的經驗都告訴我，第二種情況在實作中似乎效果更好，因為它避免了在中介層(intermediary layers)中創建代理方法(proxy methods)，甚至完整的代理類別(proxy classes)，並可能退化為 Lasagna Architecture 的反模式（下面有更多關於它的信息）。\nSometimes the layers are arranged so that the domain layer completely hides the data source from the presentation. More often, however, the presentation accesses the data store directly. While this is less pure, it tends to work better in practice. - Fowler 2002, Patterns of Enterprise Application Architecture\n有時候，各層會被安排得使得領域層完全隱藏了資料來源，使其對於呈現層來說是不可見的。然而，更常見的情況是，呈現層會直接存取資料儲存庫。雖然這種方式較不純粹，但在實際操作中，這種方式往往效果更佳。 - Fowler 2002，企業應用架構模式\n優點如下：\n我們只需要理解我們正在操作的該層，與該層底下的各個層。 We only need to understand the layers beneath the one we are working on.\n每一層都可以被等效的實作所替換，而不會對其他層產生影響。\nEach layer is replaceable by an equivalent implementation, with no impact on the other layers.\n分層是標準化的理想選擇。\nLayers are optimal candidates for standardisation.\n一個層可以被多個不同的高級層級使用。\nA layer can be used by several different higher-level layers.\n缺點如下：\n層並不能封裝所有事物（一個添加到 UI 的欄位，很可能也需要添加到資料庫中）。\nLayers can not encapsulate everything (a field that is added to the UI, most likely also needs to be added to the DB).\n額外的層次可能會損害性能，尤其是在不同的階層中。\nExtra layers can harm performance, especially if in different tiers.\n60年代與70年代 雖然軟體開發始於50年代，但我們今日所知的，可以被交付、部署且供非開發者自己使用的應用程式的軟體開發模式，實際上是誕生於60年代和70年代。\n然而，60年代與70年代的應用程式仍與今日的形式大相逕庭，當時並沒有 GUI（該技術是80年代末或90年代初才出現），所有的應用程式只能透過 CLI 操作，並在一個只會傳送使用者輸入內容的簡單終端機上顯示。而這些應用程式，很可能都是在同一台電腦上使用的。 這些應用程式相當簡單，因此並未考慮到分層的設計，且它們被部署並在一台電腦上使用，實質上它們是單層(one-tier)的應用程式，雖然在某些時候，這種簡單的客戶端可以是遠端的。然而這些應用程式雖簡單，但它們並不具有可擴展性，例如，如果我們需要將軟體更新到新版本，我們將必須在每台已安裝該應用程式的電腦上進行更新。\n80年代與90年代 在1980年代，企業應用程式開始活躍起來，我們開始看到在公司中有多個使用者在桌機上透過網路使用這些應用程式。\n在這個時候，主要有三層：\nUser Interface (Presentation)：無論是網頁、命令列介面，或是原生桌面應用程式，都屬於使用者介面。 即：一個原生Windows應用程式作為客戶端，由共同用戶在桌機上透過伺服器通訊。客戶端負責應用程式的流程與用戶輸入驗證。 Business logic (Domain)：這是應用程式存在的原因所在的邏輯。 即：一個應用伺服器，它將包含業務邏輯並從本地客戶端接收請求，對其進行操作並將數據持久化到數據儲存庫中； Data source：資料持久性機制（資料庫），或與其他應用程式的通訊。 即：一個資料庫伺服器，將被應用伺服器用於數據的持久化。 隨著使用情境的轉變，分層開始成為一種實踐，儘管它直到1990年代（Fowler 2002）才開始因客戶端/服務器(client/server) 系統的興起而普遍。這實際上是一種兩層(two-tier)應用程式，其中客戶端將是用作應用程序介面的豐富客戶端應用程序，而服務器將具有業務邏輯和數據源。\n這種架構模式解決了可擴展性問題，因為多個用戶可以獨立使用該應用程式，我們只需要另一台桌面電腦，將客戶端應用程式安裝在其中即可。然而，如果我們有幾百個，甚至只有幾十個客戶，並且我們想要更新應用程式，那將是一項高度複雜的操作，因為我們必須一個接一個地更新客戶端。\n90 年代中期之後 大約在1995年至2005年間，隨著向雲端環境的普遍轉變，應用程式使用者的增加，應用程式的複雜性和基礎設施的複雜性的提高，我們最終看到了分層方案的演變，其中一個典型的實施可能是：\n一個本地的瀏覽器應用程式，渲染並運行 UI，向伺服器應用程式發送請求； 一個應用伺服器，包含了呈現層、應用層、領域層，以及持久層； 一個資料庫伺服器，將被應用伺服器用於數據的持久化。 這是一種三層(3-tier)架構模式，也被稱為n層架構。這是一種可擴展的解決方案，並解決了更新客戶端的問題，因為用戶介面存在並在伺服器上編譯，儘管它是在客戶端瀏覽器上渲染和運行的。\n2000 年以後 在2003年，Eric Evans發布了他的標誌性書籍《領域驅動設計：解決軟體核心的複雜性》。在該書中發布的許多關鍵概念中，也包含了對軟體系統分層的視野： User Interface 使用者介面 負責繪製用戶與應用程式互動的螢幕，並將用戶的輸入轉換為應用程式命令。值得注意的是，“用戶”可以是人，但也可以是其他應用程式，這完全對應於Ivar Jacobson的EBI架構中的邊界對象（稍後將在另一篇文章中詳述）。\nApplication Layer 應用層 協調領域對象以執行用戶所需的任務。它不包含業務邏輯。這與Ivar Jacobson的EBIArchitecture中的互動者相關，只是Jacobson的互動者是與UI或實體無關的任何對象。\nDomain Layer 領域層 這是包含所有業務邏輯、實體、事件以及任何其他包含業務邏輯的對象類型的層。顯然，它與EBI的實體對象類型有關。這是系統的核心；\nInfrastructure 基礎建設 支援上層的技術能力，即持久性或訊息傳遞。\n反模式：千層麵架構 Anti-pattern: Lasagna Architecture 「Lasagna Architecture」通常被用來指稱分層架構的反模式。當以下情況發生時：\n我們決定採用嚴格的分層方法，其中每一層只知道其下的那一層。在這種情況下，我們將創建代理方法，甚至代理類別，只是為了通過中間層，而不是直接使用我們需要的層。 我們在追求創建完美系統的強烈欲望中，將項目引向過度抽象化； 微小的更新會對應用程式的所有區域產生深遠影響，例如，整理單一層面可能是一項龐大的工作，風險巨大而回報微小。 我們最終會有太多的層(layers)，這增加了整體系統的複雜性 我們最終會有過多的層級(tiers)，這既增加了整體系統的複雜性，也損害了整體系統的性能 我們明確地按照其層次(layers)（即用戶界面，領域，數據庫）來組織我們的單體系統，而不是按照其子領域/組件（即產品，付款，結帳）來組織，這破壞了領域概念的模塊化和封裝。 Conclusion 結論 分層架構是另一種提供關注點分離、封裝和解耦的方式，通過將程式碼單元按照其在應用程式中的功能角色進行分組。\n然而，就像生活中的大部分事物一樣，過度反而會適得其反！所以，經驗法則是：只使用我們需要的層次，我們需要的階層，而不多做任何事！我們不能為了追求不存在的建築聖杯而忘我。真正存在的是需求，以及最適合該需求的最佳選擇。這也是 Lean 的一部分，順帶一提。\n此外，值得注意的是，這種自上而下的分層方法已經過時。在現代軟體開發中，我們不應再採用這種方式，有新的且更好的方式來思考應用程式的層次。我將在接下來的文章中討論這些。\n","permalink":"https://intervalrain.github.io/hgraca/layered-architecture/","summary":"\u003cp\u003e分層是一種常見於系統中做法，用於分隔或組織程式碼，根據程式碼在系統中的角色或職責。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cem\u003eIn an object-oriented program, UI, database, and other support code often gets written directly into the business objects. Additional business logic is embedded in the behaviour of UI widgets and database scripts. This happens because it is the easiest way to make things work, in the short run.\u003c/em\u003e\u003cbr\u003e\n\u003cem\u003eWhen the domain-related code is diffused through such a large amount of other code, it becomes extremely difficult to see and to reason about. Superficial changes to the UI can actually change business logic. To change a business rule may require meticulous tracing of UI code, database code, or other program elements. Implementing coherent, model-driven objects becomes impractical. Automated testing is awkward. With all the technologies and logic involved in each activity, a program must be kept very simple or it becomes impossible to understand.\u003c/em\u003e - \u003cem\u003e\u003cstrong\u003eEric Evans 2014, Domain-Driven-Design\u003c/strong\u003e\u003c/em\u003e\u003cbr\u003e\n\u003cem\u003e在物件導向的程式中，使用者介面、資料庫和其他輔助程式碼常常直接被寫入商業物件中，額外的商業邏輯被嵌入在使用者介面和資料庫腳本，因為這是最簡單且最快速使事情可以運作的方式，導致這種情況時常發生。\u003c/em\u003e\u003cbr\u003e\n\u003cem\u003e當與領域相關的程式碼在更大量的程式碼中擴散，程式碼便開始變得困難且難以理解，UI 的變更可能導致業務邏輯的改變，同樣地，業務邏輯的更動需要密切地追縱 UI、資料庫與組其它組件的程式碼。實作內聚且以模型驅動的物件變得不可行、自動化測試變得笨拙，由於每個動作都涉及到所有的技術和邏輯，程式必須保持簡單，否則就會難以理解。\u003c/em\u003e - \u003cem\u003e\u003cstrong\u003e艾瑞克‧埃文斯 2014, 領域驅動設計\u003c/strong\u003e\u003c/em\u003e\u003c/p\u003e","title":"[IT] 分層架構 Layered Architecture"},{"content":"建立一個單體系統一直以來都是預設的架構風格，最初軟體開發剛萌芽時，每個應用程式只有一個檔案，然後才出現了包含多個檔案的應用程式，並且直到1990年代我們才開始看到由其他應用程式組成的應用程式（儘管第一次的實驗是在1980年代進行的）。\n單體結構自身也在演進，當應用程式開始使用多個檔案進行建構時，因為這些應用程式相對簡單，所以對每個檔案的職責與檔案之間的關係並沒有太多的思考。但隨著應用程式變得越來越大且越來越複雜，我們便開始需要思考要創建哪些檔案以及如何關聯它。\n模組化軟體開發 Modular Software Development 模組化程式設計是在 1960 年代晚期和 1970年代 所提出的解決方案。它是從類別演變到對粒度更大程式碼單元進行明確定義(explicit definition)，程式語言以不同程度的明確性(explicitness)實現了模組化。\n例如，JAVA 具有 default 和 public 的類別級別可見性，其中 default 級別意味著一個類別只在其套件（模組）中可見，而 public 則意味著該類別在其套件（模組）內外都可見，這讓我們可以定義哪些類別可以當作套件被客戶端使用。\n組件化軟體開發 Componentized Software Development 另一種模組化的風格是組件。如我在之前的文章中所解釋的，組件是以領域概念為基礎創建的模塊。理想情況下，它們是可以用來創建複合應用的獨立「應用程式」。這種風格的一個常見例子是 pipes 和 filters 架構，這在 Unix 系統中被廣泛使用，並允許我們做像 ps -ef | grep php 這樣的操作。另一個例子是使用微服務作為複合應用的組件，如 Netflix。\n這種程式碼組織方式也已經存在很長時間了，可以追溯到1960年代末，就像模組化軟體開發一樣。\n現代的單體架構 現今，擁有單體架構風格簡單來說就是所有的應用程式碼都被部署(deployed) 並在單一節點(node) 上作為單一進程運行。我們假設它正在使用模組和組件，儘管事實上往往並非如此。\n理解這裡的關鍵詞「部署」和「節點」至關重要。關於第一個詞，部署，這意味著無論程式碼在物理上儲存在一個或多個儲存庫的任何地方，重要的是它在運行時是如何組織的。關於第二個關鍵詞，節點，這意味著即使我們將應用程式部署到多個服務器，就像在水平擴展的情況下，它仍然是一個單體。\n在單一節點伺服器中，單體中的所有模組都被組裝到同一記憶體 image 中，並在單一節點上作為單一進程運行。通訊是通過同一 heap 和 stack 進行標準程式調用。正是這種單一記憶體 image 使得應用程序變得單體化。如果你在不同的進程中運行模組，那麼你正在進行 IPC。因為模組落入不同的進程邊界，你將開始面臨分散式計算的挑戰，這就進入了微服務領域。\n這種風格，儘管聲名狼藉，但即使對於大型應用程式也能運作得相當好。只有當我們需要以下情況時，它才不再足夠好：\n不同領域組件的獨立可擴展性(Independent scalability)。 需要用不同的程式語言撰寫不同的組件或模組； 獨立部署能力(Independent deployability)，或許是因為我們的釋出速率超過了單一程式碼庫的部署管道所能處理的範圍，導致一個版本的部署變慢，因為它需要等待其他版本的部署，甚至導致部署佇列的增長速度超過了它的消耗速度。 在那個時候，我們需要將我們的單體系統分離成不同的應用程式，並採用SOA架構風格（關於這點將在後續的文章中詳述）。\n反模式：大泥球/義大利麵條式架構 Anti-pattern: Big Ball of Mud / Spaghetti Architecture 所謂的「泥球」，又稱為「義大利麵條式架構」，就是這種風格的反模式，其中套件的結構和關係並不明確，結構的內聚力和封裝性幾乎不存在，依賴性沒有遵循任何規則，並且很難理解子系統，以進行變更和重構。該系統是不透明的，黏稠的，脆弱的，且僵硬的：一個大泥球！\n","permalink":"https://intervalrain.github.io/hgraca/monolithic-architecture/","summary":"\u003cp\u003e建立一個單體系統一直以來都是預設的架構風格，最初軟體開發剛萌芽時，每個應用程式只有一個檔案，然後才出現了包含多個檔案的應用程式，並且直到1990年代我們才開始看到由其他應用程式組成的應用程式（儘管第一次的實驗是在1980年代進行的）。\u003c/p\u003e\n\u003cp\u003e單體結構自身也在演進，當應用程式開始使用多個檔案進行建構時，因為這些應用程式相對簡單，所以對每個檔案的職責與檔案之間的關係並沒有太多的思考。但隨著應用程式變得越來越大且越來越複雜，我們便開始需要思考要創建哪些檔案以及如何關聯它。\u003c/p\u003e\n\u003ch1 id=\"模組化軟體開發-modular-software-development\"\u003e模組化軟體開發 Modular Software Development\u003c/h1\u003e\n\u003cp\u003e模組化程式設計是在 1960 年代晚期和 1970年代 所提出的解決方案。它是從類別演變到對粒度更大程式碼單元進行明確定義(explicit definition)，程式語言以不同程度的明確性(explicitness)實現了模組化。\u003c/p\u003e\n\u003cp\u003e例如，JAVA 具有 \u003ccode\u003edefault\u003c/code\u003e 和 \u003ccode\u003epublic\u003c/code\u003e 的類別級別可見性，其中 \u003ccode\u003edefault\u003c/code\u003e 級別意味著一個類別只在其套件（模組）中可見，而 \u003ccode\u003epublic\u003c/code\u003e 則意味著該類別在其套件（模組）內外都可見，這讓我們可以定義哪些類別可以當作套件被客戶端使用。\u003c/p\u003e\n\u003ch1 id=\"組件化軟體開發-componentized-software-development\"\u003e組件化軟體開發 Componentized Software Development\u003c/h1\u003e\n\u003cp\u003e另一種模組化的風格是組件。如我在之前的文章中所解釋的，組件是以領域概念為基礎創建的模塊。理想情況下，它們是可以用來創建複合應用的獨立「應用程式」。這種風格的一個常見例子是 pipes 和 filters 架構，這在 Unix 系統中被廣泛使用，並允許我們做像 \u003ccode\u003eps -ef | grep php\u003c/code\u003e 這樣的操作。另一個例子是使用微服務作為複合應用的組件，如 Netflix。\u003c/p\u003e\n\u003cp\u003e這種程式碼組織方式也已經存在很長時間了，可以追溯到1960年代末，就像模組化軟體開發一樣。\u003c/p\u003e\n\u003ch1 id=\"現代的單體架構\"\u003e現代的單體架構\u003c/h1\u003e\n\u003cp\u003e現今，擁有單體架構風格簡單來說就是所有的應用程式碼都被\u003cstrong\u003e部署(deployed)\u003c/strong\u003e 並在單一\u003cstrong\u003e節點(node)\u003c/strong\u003e 上作為單一進程運行。我們假設它正在使用模組和組件，儘管事實上往往並非如此。\u003c/p\u003e\n\u003cp\u003e理解這裡的關鍵詞「部署」和「節點」至關重要。關於第一個詞，部署，這意味著無論程式碼在物理上儲存在一個或多個儲存庫的任何地方，重要的是它在運行時是如何組織的。關於第二個關鍵詞，節點，這意味著即使我們將應用程式部署到多個服務器，就像在水平擴展的情況下，它仍然是一個單體。\u003c/p\u003e\n\u003cp\u003e在單一節點伺服器中，單體中的所有模組都被組裝到同一記憶體 image 中，並在單一節點上作為單一進程運行。通訊是通過同一 heap 和 stack 進行標準程式調用。正是這種單一記憶體 image 使得應用程序變得單體化。如果你在不同的進程中運行模組，那麼你正在進行 IPC。因為模組落入不同的進程邊界，你將開始面臨分散式計算的挑戰，這就進入了微服務領域。\u003c/p\u003e\n\u003cp\u003e這種風格，儘管聲名狼藉，但即使對於大型應用程式也能運作得相當好。只有當我們需要以下情況時，它才不再足夠好：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e不同領域組件的\u003cstrong\u003e獨立可擴展性(Independent scalability)\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e需要用\u003cstrong\u003e不同的程式語言\u003c/strong\u003e撰寫不同的組件或模組；\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e獨立部署能力(Independent deployability)\u003c/strong\u003e，或許是因為我們的釋出速率超過了單一程式碼庫的部署管道所能處理的範圍，導致一個版本的部署變慢，因為它需要等待其他版本的部署，甚至導致部署佇列的增長速度超過了它的消耗速度。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e在那個時候，我們需要將我們的單體系統分離成不同的應用程式，並採用SOA架構風格（關於這點將在後續的文章中詳述）。\u003c/p\u003e\n\u003ch1 id=\"反模式大泥球義大利麵條式架構-anti-pattern-big-ball-of-mud--spaghetti-architecture\"\u003e反模式：大泥球/義大利麵條式架構 Anti-pattern: Big Ball of Mud / Spaghetti Architecture\u003c/h1\u003e\n\u003cp\u003e\u003cimg alt=\"spaghetta\" loading=\"lazy\" src=\"https://herbertograca.files.wordpress.com/2017/03/spaghetti.png\"\u003e\n所謂的「泥球」，又稱為「義大利麵條式架構」，就是這種風格的反模式，其中套件的結構和關係並不明確，結構的內聚力和封裝性幾乎不存在，依賴性沒有遵循任何規則，並且很難理解子系統，以進行變更和重構。該系統是不透明的，黏稠的，脆弱的，且僵硬的：一個大泥球！\u003c/p\u003e","title":"[IT] 單體架構 Monolithic Architecture"},{"content":"在上一篇文章中，我介紹了程式語言的演進，以及它告訴我們的事情：軟體發展的驅勢是走向更多的模組化(modularity)與封裝(encapsulation)。\n在接下來的文章，我會開始介紹架構風格與架構模式的演進。首先，我們要先知道什麼是架構風格，什麼是架構模式。\n在軟體開發中的眾多術語中，定義往往不夠明確，卻不同人都有自己不同的解釋。MSDN 認為架構風格(architectural styles)與架構模式(architectural patterns)是同一碼子事，但我個人更傾向於 George Fairbanks 與 Michael Keeling 在 stack overflow 中與維基百科中的解釋。其關鍵的差異在於範疇(scope)。\n同時，我們也需要強調這個觀念：架構風格、架構模式和設計模式並非互斥，它們相輔相成，每一種都能帶給我們一些啟示。然而，如同常情，我們只應在需要時才使用它們。\nArchitectural Styles 架構風格 架構風格非常大方向的告訴我們該如何組織我們的程式碼，它有著高層次的粒度。它定義了層的概念，尤其應用程式的高階模組。它告訴我們模組與層之間是怎麼交互作用的、它們的關係等等。架構風格的例子：\nComponent-based Monolithic application Layered Pipes and filters Event-driven Publish-subscribe Plug-ins Client-server Service-oriented 一種建架構格可以透過各種方式實現，包括特定的技術環境、特定的政策、框架或實踐方法。\nArchitectural Patterns 架構模式 模式是一種對反覆出現的問題的反覆解決方案。在架構模式的情況下，他們解決與架構風格相關的問題。例如，「我們該有哪些類別，它們該如何互動，以實現具有特定層次的系統」，又或者「我們的服務導向架構將擁有哪些高級模組，以及他們將如何溝通」，或者「我們的客戶端-伺服器架構將擁有多少層」。\n架構模式對程式碼庫有著廣泛的影響，通常會橫向（即如何在一層內結構化程式碼）或縱向（即如何從外層處理請求到內層並返回）影響整個應用程式。架構模式的例子：\nThree-tier 三層架構 Microkernel 微核心 Model-View-Controller 模型-視圖-控制器 Model-View-ViewModel 模型-視圖-視圖模型 Design Patterns 設計模式 設計模式與架構模式在範疇上有所不同，它們更為局部化，對程式碼庫的影響較小，它們只影響程式碼的特定部分，例如：\n如何在我們只知道在運行時需要實例化什麼類型的情況下實例化一個對象（可能是一個工廠類別？） 如何讓一個物件根據其狀態（可能是一個狀態機，或者是策略模式？）表現出不同的行為？ Conclusion 結論 如我在這篇文章的開頭所提到的，一切都關於範疇(scope)：\n架構風格是在最高抽象層次上的應用設計。 架構模式是實現架構風格的一種方式。 設計模式是解決局部問題的一種方式。 此外，一種模式可能既可以作為架構模式，也可以作為設計模式使用，這再次取決於我們在特定項目中使用它的範疇。\n","permalink":"https://intervalrain.github.io/hgraca/architectural-styles-vs-architectural-patterns-vs-design-patterns/","summary":"\u003cp\u003e在上一篇文章中，我介紹了程式語言的演進，以及它告訴我們的事情：軟體發展的驅勢是走向更多的\u003cstrong\u003e模組化(modularity)\u003cstrong\u003e與\u003c/strong\u003e封裝(encapsulation)\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e在接下來的文章，我會開始介紹架構風格與架構模式的演進。首先，我們要先知道什麼是架構風格，什麼是架構模式。\u003c/p\u003e\n\u003cp\u003e在軟體開發中的眾多術語中，定義往往不夠明確，卻不同人都有自己不同的解釋。MSDN 認為架構風格(architectural styles)與架構模式(architectural patterns)是同一碼子事，但我個人更傾向於 George Fairbanks 與 Michael Keeling 在 stack overflow 中與維基百科中的解釋。其關鍵的差異在於\u003cstrong\u003e範疇(scope)\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e同時，我們也需要強調這個觀念：架構風格、架構模式和設計模式並非互斥，它們相輔相成，每一種都能帶給我們一些啟示。然而，如同常情，我們只應在需要時才使用它們。\u003c/p\u003e\n\u003ch1 id=\"architectural-styles-架構風格\"\u003eArchitectural Styles 架構風格\u003c/h1\u003e\n\u003cp\u003e架構風格非常大方向的告訴我們該如何組織我們的程式碼，它有著高層次的粒度。它定義了層的概念，尤其應用程式的高階模組。它告訴我們模組與層之間是怎麼交互作用的、它們的關係等等。架構風格的例子：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eComponent-based\u003c/li\u003e\n\u003cli\u003eMonolithic application\u003c/li\u003e\n\u003cli\u003eLayered\u003c/li\u003e\n\u003cli\u003ePipes and filters\u003c/li\u003e\n\u003cli\u003eEvent-driven\u003c/li\u003e\n\u003cli\u003ePublish-subscribe\u003c/li\u003e\n\u003cli\u003ePlug-ins\u003c/li\u003e\n\u003cli\u003eClient-server\u003c/li\u003e\n\u003cli\u003eService-oriented\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e一種建架構格可以透過各種方式實現，包括特定的技術環境、特定的政策、框架或實踐方法。\u003c/p\u003e\n\u003ch1 id=\"architectural-patterns-架構模式\"\u003eArchitectural Patterns 架構模式\u003c/h1\u003e\n\u003cp\u003e模式是一種對反覆出現的問題的反覆解決方案。在架構模式的情況下，他們解決與架構風格相關的問題。例如，「我們該有哪些類別，它們該如何互動，以實現具有特定層次的系統」，又或者「我們的服務導向架構將擁有哪些高級模組，以及他們將如何溝通」，或者「我們的客戶端-伺服器架構將擁有多少層」。\u003c/p\u003e\n\u003cp\u003e架構模式對程式碼庫有著廣泛的影響，通常會橫向（即如何在一層內結構化程式碼）或縱向（即如何從外層處理請求到內層並返回）影響整個應用程式。架構模式的例子：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThree-tier 三層架構\u003c/li\u003e\n\u003cli\u003eMicrokernel 微核心\u003c/li\u003e\n\u003cli\u003eModel-View-Controller 模型-視圖-控制器\u003c/li\u003e\n\u003cli\u003eModel-View-ViewModel 模型-視圖-視圖模型\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"design-patterns-設計模式\"\u003eDesign Patterns 設計模式\u003c/h1\u003e\n\u003cp\u003e設計模式與架構模式在範疇上有所不同，它們更為局部化，對程式碼庫的影響較小，它們只影響程式碼的特定部分，例如：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e如何在我們只知道在運行時需要實例化什麼類型的情況下實例化一個對象（可能是一個工廠類別？）\u003c/li\u003e\n\u003cli\u003e如何讓一個物件根據其狀態（可能是一個狀態機，或者是策略模式？）表現出不同的行為？\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"conclusion-結論\"\u003eConclusion 結論\u003c/h1\u003e\n\u003cp\u003e如我在這篇文章的開頭所提到的，一切都關於\u003cstrong\u003e範疇(scope)\u003c/strong\u003e：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e架構風格是在最高抽象層次上的應用設計。\u003c/li\u003e\n\u003cli\u003e架構模式是實現架構風格的一種方式。\u003c/li\u003e\n\u003cli\u003e設計模式是解決局部問題的一種方式。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e此外，一種模式可能既可以作為架構模式，也可以作為設計模式使用，這再次取決於我們在特定項目中使用它的範疇。\u003c/p\u003e","title":"[IT] 架構風格 vs. 架構模式 vs. 設計模式 Architectural Styles vs. Architectural Patterns vs. Design Patterns"},{"content":"程式設計語言本身並非架構的產物，但如果我不寫關於它，我會覺得《軟體架構編年史》似乎缺少了些什麼。\n那麼，讓我們快速回顧一下程式語言的歷史，它的演變，並檢查我們可以從中學到什麼。我在文章中加入了一些日期，僅作為參考，它們應被視為大致的估計，重要的是演變的順序和他們試圖解決的問題。\n1950s - Non-structured Programming Assembly ~1951\n軟體開發曾是一項非常晦澀的活動，只在世界上少數地方進行。當時流行的語言是組合語言，它使用了非常低階的操作，如 add, sub, goto，並直接操作記憶體地址。建立一個簡單的應用程式既緩慢又困難。要創建一個簡單的 if 語句，我們需要幾行程式碼，對於一個迴圈，則需要超過幾行的程式碼\u0026hellip;稍後才出現了將程式碼分組和重用的可能性，所以當時的編碼風格非常線性，程式碼的重用僅限於在檔案內或檔案間複製和貼上程式碼。\n1960s – Structured Programming Algol ~1958, Fortran\n結構化程式設計出現了，引入了 code blocks 概念，控制結構 if, then, else, case, for, while, do, \u0026hellip;，和子程序的構造。然後，我們可以創建更有趣的程式流程，更重要的是，我們可以將程式碼指令分組並重用它，儘管有一些限制，例如子程序總是對同一全域變數進行操作。但就在這個時候，重用性 (reusability) 的概念開始被使用。\n1970s – Procedural \u0026amp; Functional Programming Pascal ~1970, C ~1972\n程序和函數式程式設計在1970年代開始活躍起來。到了這個時候，我們終於有了：\n程序(Procedures)：一組不返回數據的指令 函式(Functions)：一組會回傳資料的指令集 資料結構(Data structures)：記錄，類似於關聯式陣列 模組(Modules)：可以被導入到其他程式碼檔案的程式碼檔案。 在1970年代，「Spaghetti code」這個詞也被創造出來，這是在Edsger W. Dijkstra於1968年寫給「計算機機構通訊」(CACM)的信中提出的，該信的標題為「Go To Statement Considered Harmful」。\n在1970年代晚期，事件導向程式設計(Event Oriented Programming)的初步概念首次浮現，而Trygve Reenskaug則撰寫了他關於MVC（使用事件）的論文。\n有了這些改進，因此我們有更好的重用性(reusability)，因為子程序（程序和函式），我們可以使用不同的數據執行相同的邏輯。我們也可以通過將相關數據分組到複雜的數據結構中來模擬領域概念(domain concepts)。最後，我們在**解耦(decoupling)和模組化(modularity)**方面邁出了第一步，我們可以創建在其他程式碼文件和事件中可重用的程式碼，以將客戶端程式碼與正在執行的邏輯解耦。\n1980s – Object Oriented Programming Simula ~1965, Smalltalk-71 ~1971, C++ ~1980, Erlang ~1986, Perl ~1987, Python ~1991, Ruby ~1993, Delphi, Java, Javascript, PHP ~1995\n關於物件導向程式設計（OOP）的理論與思想早在1960年代就已經開始，並在1960年代首次實施：Simula。\n然而，正是在1980年代，當前的程式設計範疇的使用變得普遍化：物件導向程式設計，具有 Visibility levels, methods (messages), objects, classes，以及稍後的 packages。這就等同於說增加了封裝(encapsulation)和模塊化(modularity)：\nVisibility levels 讓我們能夠控制哪些程式碼可以存取特定的數據集。 Classes 讓我們能夠定義/模擬領域概念。 Objects 讓我們能擁有同一領域概念的不同實例。 Packages 讓我們可以將一起代表某個領域或功能概念並共同完成某些任務的類別群組化。 Methods，功能上代表程序和函式，但從概念上應被視為可以發送給特定類型物件的 messages(commands)。 1990s – Subject \u0026amp; Aspect Oriented Programming 在1990年代，主題導向程式設計和切面導向程式設計浮出水面。\n主題導向程式設計要求對物件有不同的表示方式，這取決於誰在「觀察」它。例如，當一個人看到一棵樹時，他可能會看到木頭，而一隻鳥可能會看到食物和庇護所。將這種情況轉化為程式設計，這意味著物件的屬性和行為可以有所不同，這取決於誰向物件發送消息（誰觸發了物件上的一種方法）。\n切面導向程式設計試圖通過在「編譯」時間注入額外的程式碼，將交叉關注點與實際的業務邏輯完全分離。例如，一個切面可以是一個方法名稱。交叉關注點可以是，例如，日誌記錄。使用AOP，我們可以簡單地配置系統以注入執行日誌記錄的代碼到符合特定模式的所有方法中，例如，「記錄所有以 find 開頭的方法的調用」。（TYPO3是一個使用AOP的CMS的例子）\nBeyond OOP 超越物件導向程式設計 在導向物件程式設計（OOP）建立之後，我們的主要關注點已經轉向為網路程式設計做調整，進化現有的語言，創建專門用於網頁開發的新語言，開發框架，調整工具和架構以適應現今大量的請求和數據。\n有些嘗試去演進程式語言，如主題導向程式設計（物件的行為會因觸發該行為的主題而有所不同），或是切面導向程式設計（在編譯時注入程式碼），但實質上，程式語言的範疇並未有太大的變化，我們仍然在大多數情況下使用物件導向程式設計。儘管近來函數式語言似乎已經開始獲得一些採納（也許是一種炒作？）。\nConclusion 結論 我想要表達的觀點是，在軟體開發歷史的最初幾十年裡，程式語言的演進是為了提供重用性，但也是為了讓軟體做好變更的準備（無論是改變功能、重構或完全替換一部分的程式碼），它們朝著模組化（低耦合） 和 封裝（高內聚） 的方向演進。\n如我們將在我接下來的文章中看到，架構繼續在演進，儘管在更高的抽象層次上。\n","permalink":"https://intervalrain.github.io/hgraca/programming-language-evolution/","summary":"\u003cp\u003e程式設計語言本身並非架構的產物，但如果我不寫關於它，我會覺得《軟體架構編年史》似乎缺少了些什麼。\u003c/p\u003e\n\u003cp\u003e那麼，讓我們快速回顧一下程式語言的歷史，它的演變，並檢查我們可以從中學到什麼。我在文章中加入了一些日期，僅作為參考，它們應被視為大致的估計，重要的是演變的順序和他們試圖解決的問題。\u003c/p\u003e\n\u003ch1 id=\"1950s---non-structured-programming\"\u003e1950s - Non-structured Programming\u003c/h1\u003e\n\u003cp\u003eAssembly ~1951\u003c/p\u003e\n\u003cp\u003e軟體開發曾是一項非常晦澀的活動，只在世界上少數地方進行。當時流行的語言是組合語言，它使用了非常低階的操作，如 \u003ccode\u003eadd\u003c/code\u003e, \u003ccode\u003esub\u003c/code\u003e, \u003ccode\u003egoto\u003c/code\u003e，並直接操作記憶體地址。建立一個簡單的應用程式既緩慢又困難。要創建一個簡單的 \u003ccode\u003eif\u003c/code\u003e 語句，我們需要幾行程式碼，對於一個迴圈，則需要超過幾行的程式碼\u0026hellip;稍後才出現了將程式碼分組和重用的可能性，所以當時的編碼風格非常線性，程式碼的重用僅限於在檔案內或檔案間複製和貼上程式碼。\u003c/p\u003e\n\u003ch1 id=\"1960s--structured-programming\"\u003e1960s – Structured Programming\u003c/h1\u003e\n\u003cp\u003eAlgol ~1958, Fortran\u003c/p\u003e\n\u003cp\u003e結構化程式設計出現了，引入了 code blocks 概念，控制結構 \u003ccode\u003eif\u003c/code\u003e, \u003ccode\u003ethen\u003c/code\u003e, \u003ccode\u003eelse\u003c/code\u003e, \u003ccode\u003ecase\u003c/code\u003e, \u003ccode\u003efor\u003c/code\u003e, \u003ccode\u003ewhile\u003c/code\u003e, \u003ccode\u003edo\u003c/code\u003e, \u0026hellip;，和子程序的構造。然後，我們可以創建更有趣的程式流程，更重要的是，我們可以將程式碼指令分組並重用它，儘管有一些限制，例如子程序總是對同一全域變數進行操作。但就在這個時候，\u003cstrong\u003e重用性 (reusability)\u003c/strong\u003e 的概念開始被使用。\u003c/p\u003e\n\u003ch1 id=\"1970s--procedural--functional-programming\"\u003e1970s – Procedural \u0026amp; Functional Programming\u003c/h1\u003e\n\u003cp\u003ePascal ~1970, C ~1972\u003c/p\u003e\n\u003cp\u003e程序和函數式程式設計在1970年代開始活躍起來。到了這個時候，我們終於有了：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e程序(Procedures)\u003c/strong\u003e：一組不返回數據的指令\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e函式(Functions)\u003c/strong\u003e：一組會回傳資料的指令集\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e資料結構(Data structures)\u003c/strong\u003e：記錄，類似於關聯式陣列\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e模組(Modules)\u003c/strong\u003e：可以被導入到其他程式碼檔案的程式碼檔案。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e在1970年代，「Spaghetti code」這個詞也被創造出來，這是在Edsger W. Dijkstra於1968年寫給「計算機機構通訊」(CACM)的信中提出的，該信的標題為「Go To Statement Considered Harmful」。\u003c/p\u003e\n\u003cp\u003e在1970年代晚期，事件導向程式設計(Event Oriented Programming)的初步概念首次浮現，而Trygve Reenskaug則撰寫了他關於MVC（使用事件）的論文。\u003c/p\u003e\n\u003cp\u003e有了這些改進，因此我們有更好的\u003cstrong\u003e重用性(reusability)\u003c/strong\u003e，因為子程序（程序和函式），我們可以使用不同的數據執行相同的邏輯。我們也可以通過將相關數據分組到複雜的數據結構中來模擬\u003cstrong\u003e領域概念(domain concepts)\u003c/strong\u003e。最後，我們在**解耦(decoupling)和模組化(modularity)**方面邁出了第一步，我們可以創建在其他程式碼文件和事件中可重用的程式碼，以將客戶端程式碼與正在執行的邏輯解耦。\u003c/p\u003e\n\u003ch1 id=\"1980s--object-oriented-programming\"\u003e1980s – Object Oriented Programming\u003c/h1\u003e\n\u003cp\u003eSimula ~1965, Smalltalk-71 ~1971, C++ ~1980, Erlang ~1986, Perl ~1987,\nPython ~1991, Ruby ~1993, Delphi, Java, Javascript, PHP ~1995\u003c/p\u003e","title":"[IT] 程式語言的演進 Programming Language Evolution"},{"content":"在這篇文章中，我將建立有關軟體架構的最初概念，這將有助於更好地理解接下來的文章。\n沒有萬靈丹 無論你如何理解我在《軟體架構編年史》中所談論的內容，最重要的是要明白，並不存在萬能的解決方案。儘可能多學習不同的方法，理解每種方法的優點和缺點，以及它們解決的具體技術問題。\n然後，在接受新的挑戰時，首先要理解業務和終端用戶的需求。只有在清楚理解這些需求之後，您才能理智地思考應該使用哪種架構風格和模式來更好地解決手頭的問題。\n最後，做出你自己的選擇，也許實施其中一種已知的解決方案，或者創建你自己的設計來適應你特定的問題。\nSome architectural styles are often portrayed as ‘silver bullet’ solutions for all forms of software. However, a good designer should select a style that matches the needs of the particular problem being solved. - Roy Fielding, 2000\n有些架構風格常被描繪為所有軟體問題的「萬靈丹」解決方案。然而，一個優秀的設計師應該選擇一種與特定問題需求相匹配的風格。 - 羅伊·菲爾丁，2000\nTerminology 術語 在軟體開發的世界裡，使用的術語充滿了模糊性，因此，在繼續之前，澄清我所使用的一些術語的意義是非常重要的。\nFunctional 功能性的 這是任何一段程式碼、方法、類別、類別群組，它在應用程式中擔任純粹的技術角色。它與領域無關，僅代表應用程式中的技術能力。例如：\nLayers Factories Repositories Value Objects Views ViewModels Conceptual 概念性的 這是任何一段代碼、方法、類別、一組類別，都反映了應用程式中的領域概念。它與領域直接相關，代表了應用程式中的業務能力。例如：\nUser Product Stock Management Product Variants Checkout Upsells 這種分離並不意味著一個程式碼單元不能以兩種方式（功能性和概念性）被引用。例如，一個 Money 類別可以代表一個 domain concept，也可以是一個 value object。\nPackage 套件 任何一組按照某些規則理想地組合在一起的類別\nModule 模組 我使用的定義來自於《實踐中的軟體架構（Software Architecture）》一書，該書指出，一個模組是一個功能性的套件，它反映了應用程式中的技術能力。它是解耦的，可以被其他實現替換。對我來說，模組存在於一個較低的粒度級別，例如，「安全模組」或「ORM」，但也存在於像應用程式的客戶端和伺服器這樣的更高粒度級別。模組提供了功能性的內聚。\nComponent 組件 我也採用了《實踐中的軟體架構（Software Architecture）》一書中給出的定義，其中作者將組件定義為反映業務能力的概念性套件。理想情況下，它也應與其他組件和模塊解耦。例如可以是 User、Product 或 Checkout。\n然而，最重要的是要記住，理想情況下，它反映了 Bounded Context。組件提供了概念性的內聚。\nApplication 應用程式 我將應用程式視為面向使用者的程式碼，也就是使用者介面（UI），它是建立在元件之上的。例如，我們可以有一組元件，我們在其上建立一個網路商店。然而，這個網路商店有一個由消費者用來瀏覽和購買產品的使用者介面（商店前台），並且它有另一個獨立的使用者介面，由商店管理員用來管理產品、庫存、付款提供商等（後台）。這些都是建立在相同業務元件之上的兩個獨立應用程式。\nSystem 系統 我將系統視為一組應用程式，這些程式以某種方式共同工作，以滿足各種企業需求，形成一個企業範圍的系統，即企業應用程式。這些應用程式可能建立在相同的組件之上，也可能不是。在前面的網路商店例子中，系統是整個網路商店，包括建立在相同業務組件之上的兩個應用程式（商店前台和管理員），但也包括其他第三方應用程式，如付款提供商或運輸提供商。\nArchitecture 架構 有許多簡單的軟體架構定義，我認為擁有這些定義是好的，但我認為更容易理解的是，甚至更重要的是，定義架構的成果，它應該為項目提供什麼。\nSoftware Architecture […] is the set of structures needed to reason about the system, which comprises software elements, relations among them, and properties of both. - Clements et al, 2010\n軟體架構[…]是用於推理系統所需的結構集合，其中包括軟體元素、它們之間的關係，以及兩者的屬性。 - Clement 等人，2010\n這是我對架構的理解：\n所有與功能開發相關的技術決策，即框架(frameworks)、編碼標準(coding standards)、文檔(documentation)、流程(processes)等。 這些技術決策很難在專案開發後期去做更動。 是對系統的全局觀，對組件們的結構與關係的描述。 它為變動提供緩衝，通常是為了延緩變更。 提供良好的組件與模組的重用(reuse)機制。 它為結果的一致性和流程的輕量化設立標準，如編碼標準、開發階段、持續交付和部署。 這並非僅是一個人的責任，而是屬於該項目中不同功能團隊的一群經驗豐富的開發者的責任。 Architect 架構師 他們是建築學的守護者和推廣者，可以是個人、也可以是團隊。他們是團隊/部門中最有經驗的開發者之一，且有分析高層次問題和解決方案的責任。在做出決策時，總是會被認為是有「質量」的。\n值得注意的是，所有的開發者在某種程度上都會成為架構師，因為他們都需要理解架構，都會以某種方式貢獻於架構，最終，他們都有維護現有架構的責任。\nIvory Tower Architect 象牙塔架構師 全能的象牙塔架構師是架構師的反模式，他承擔起決定所有與架構相關的問題。他剝奪了其他 stakeholder 對架構的貢獻，因為他既不開放，也不容易接受這些貢獻。\n壞味道 Rigidity 剛性 軟體的剛性就是指該軟體難以變更，因為一個變動將引發更多的變動需求。這就像是一個兔子洞：當我們認為快要完成時，卻發現還有更多的程式碼需要被修改，將我們拖入一個看不見盡頭的循環中。\nFragility 脆弱性 當軟體被更改時，它將在預料之外、無關聯且無法預測的地方破裂。\nImmobility 不動性 當一個設計包含了可能在其他系統中有用的部分，但從原始系統中分離它們的努力和風險過大時，該設計就是不動的。\nViscosity 黏度 在一個黏性系統中，做錯事要比做對事容易得多。這意味著，透過短路行為來實施變革，比正確地開發它要來得容易得多。\n如果執行單元測試和/或編譯需要大量時間，導致開發人員可能會繞過程序並在未執行所有自動化測試的情況下實施一個破解，那麼就會發生系統範圍的黏度。\nNeedless repetition 不必要的重複 當必要的抽象化未能完成時，就會發生這種情況，原因可能是時間不足或經驗不足。程式碼可能並未直接被複製貼上，但相同的業務規則在多個地方被定義。\nOpacity 不透明度 這段程式碼的撰寫方式晦澀難懂，我們需要深入研究方法的實現才能理解其功能。\nNeedless complexity 不必要的複雜性 在熱衷於避免其他六種問題的嘗試中，開發者引入了各種抽象和為可能的未來變化做的準備。優秀的軟體設計應該是輕量級的，靈活的，易於閱讀和理解，最重要的是易於變更，這樣你就不必試圖預測未來所有可能的變化。\n","permalink":"https://intervalrain.github.io/hgraca/software-architecture-premises/","summary":"\u003cp\u003e在這篇文章中，我將建立有關軟體架構的最初概念，這將有助於更好地理解接下來的文章。\u003c/p\u003e\n\u003ch1 id=\"沒有萬靈丹\"\u003e沒有萬靈丹\u003c/h1\u003e\n\u003cp\u003e無論你如何理解我在《軟體架構編年史》中所談論的內容，最重要的是要明白，並不存在萬能的解決方案。儘可能多學習不同的方法，理解每種方法的優點和缺點，以及它們解決的具體技術問題。\u003c/p\u003e\n\u003cp\u003e然後，在接受新的挑戰時，首先要理解業務和終端用戶的需求。只有在清楚理解這些需求之後，您才能理智地思考應該使用哪種架構風格和模式來更好地解決手頭的問題。\u003c/p\u003e\n\u003cp\u003e最後，做出你自己的選擇，也許實施其中一種已知的解決方案，或者創建你自己的設計來適應你特定的問題。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cem\u003eSome architectural styles are often portrayed as ‘silver bullet’ solutions for all forms of software. However, a good designer should select a style that matches the needs of the particular problem being solved.\u003c/em\u003e - \u003cstrong\u003eRoy Fielding, 2000\u003c/strong\u003e\u003cbr\u003e\n\u003cem\u003e有些架構風格常被描繪為所有軟體問題的「萬靈丹」解決方案。然而，一個優秀的設計師應該選擇一種與特定問題需求相匹配的風格。\u003c/em\u003e - \u003cstrong\u003e羅伊·菲爾丁，2000\u003c/strong\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch1 id=\"terminology-術語\"\u003eTerminology 術語\u003c/h1\u003e\n\u003cp\u003e在軟體開發的世界裡，使用的術語充滿了模糊性，因此，在繼續之前，澄清我所使用的一些術語的意義是非常重要的。\u003c/p\u003e\n\u003ch2 id=\"functional-功能性的\"\u003eFunctional 功能性的\u003c/h2\u003e\n\u003cp\u003e這是任何一段程式碼、方法、類別、類別群組，它在應用程式中擔任純粹的技術角色。它與領域無關，僅代表應用程式中的技術能力。例如：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eLayers\u003c/li\u003e\n\u003cli\u003eFactories\u003c/li\u003e\n\u003cli\u003eRepositories\u003c/li\u003e\n\u003cli\u003eValue Objects\u003c/li\u003e\n\u003cli\u003eViews\u003c/li\u003e\n\u003cli\u003eViewModels\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"conceptual-概念性的\"\u003eConceptual 概念性的\u003c/h2\u003e\n\u003cp\u003e這是任何一段代碼、方法、類別、一組類別，都反映了應用程式中的領域概念。它與領域直接相關，代表了應用程式中的業務能力。例如：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eUser\u003c/li\u003e\n\u003cli\u003eProduct\u003c/li\u003e\n\u003cli\u003eStock Management\u003c/li\u003e\n\u003cli\u003eProduct Variants\u003c/li\u003e\n\u003cli\u003eCheckout\u003c/li\u003e\n\u003cli\u003eUpsells\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e這種分離並不意味著一個程式碼單元不能以兩種方式（功能性和概念性）被引用。例如，一個 \u003ccode\u003eMoney\u003c/code\u003e 類別可以代表一個 domain concept，也可以是一個 value object。\u003c/p\u003e","title":"[IT] 軟體架構前提 The Software Architecture Premises"},{"content":" 前言：這系列文章為翻譯自作者 hgraca。\n這篇文章是關於軟體架構系列文章的第一篇。在這些文章中，我將分享我所學習到的軟體架構知識，我如何看待它，以及我如何運用這些知識。\n我這一系列的文章稱為「軟體架構編年史」，並非因為我自認為是一位偉大的作家，而是因為我覺得這個名字有點俗氣，又帶點趣味。\n在這篇首篇文章中，我將會談論我為何要撰寫這一系列的文章，以及接下來將會有什麼內容。\n認識歷史的重要性 Those who fail to learn History are doomed to repeat it. - George Santayana, The Life of Reason, 1905\n未能學習歷史的人注定要重蹈覆轍。 - 喬治‧桑塔亞納《理性的生活》，1905\n我認為從歷史中學習是非常重要的，它能教導我們事情。在個人層面上，我們終究需要（也希望）能從錯誤中學習。從國家的角度來看，歷史幫助塑造我們的文化、創造群體的概念，因此有了「台灣人」的觀念，一種國家認同。同時，歷史也幫助我們從祖先的錯誤中學習，比如信仰那些有著怪異思想的人，如二戰…\n對程式開發者而言，歷史有助於我們仰靠前人的經驗上，少走許多錯的道路，並讓我們「站在巨人的肩膀上」達到更高的境界！\n在我成為更好的開發者路上，我閱讀了很多文章，觀看了許多演講，我盡我所能的站在巨人的肩膀上。\n有一件事情使我感到困惑，那就是許多意見是基於意見之上的意見…這就像是以訛傳訛，我們最終得到是對於一篇論文、文章或書籍真正內容的扭曲理解。\n因此，我開始在網路上搜尋原始的論文、文章和書籍，這些都是我認為對我的工作最重要的概念，並自己對它們進行思考。\n這些文章是這種推理的結果，因為我試圖理解這些概念是如何產生的，以某種程度上的時間順序來看。\n撰寫這些文章迫使我大量閱讀和思考所有議題，並幫助我理解當代在軟體開發中使用的技術。我希望這些文章能對更多開發者有所幫助。\n然而，如果你讀到一些你不理解或是不認同的內容，請告訴我，我非常願意討論這些議題，並從討論中學習，也願意修正我錯誤的觀點。\n文章列表 1. 軟體架構前提 (Software Architecture Premises)\n2. 程式語言的演進 (Programming Languages Evolution)\n3. 架構風格 / 架構模式 / 設計模式 (Architectural Styles vs. Architectural Patterns vs. Design Patterns)\n4. 單體架構 (Monolithic Architecture)\n5. 分層架構 (Layered Architecture)\n6. MVC 及其變形\n1979 - Model-View-Controller 1987/2000 - PAC/Hierachical Model-View-Controller 1996 - Model-View-Presenter 1998 - \u0026ldquo;Model1\u0026rdquo; \u0026amp; \u0026ldquo;Model2\u0026rdquo; 2005 - ModelView-ViewModel ???? - Model-View-Presenter-ViewModel 2008 - Resource-Method-Representation 2014 - Action-Domain-Responder 7. EBI 架構 (EBI Architecture)\n8. 包裝與命名空間 (Packaging \u0026amp; namespacing)\n9. 領域驅動設計 (Domain-Driven Design)\n10. 埠與適配器架構, aka 六邊形架構 (Ports \u0026amp; Adapter Architecture aka Hexagonal Architecture)\n11. 洋蔥架構 (Onion Architecture)\n12. 乾淨架構 (Clean Architecture)\n13. 事件驅動架構 (Event-Driven Architectrue)\n14. 從CQS到CQRS\n15. 面向服務的架構 (Service Oriented Architecture, SOA)\n16. 明確的架構 #01: DDD, 六角, 洋蔥, 乾淨, CQRS, \u0026hellip; 我如何將它們全部組合在一起\n明確的架構 #02: 不僅僅是同心層次\n明確的架構 #03: 在程式碼中反映架構和領域\n明確的架構 #04: 記錄架構\n發展項目: 從 MVP 到 P\n4+1 架構視圖模型\n架構品質\n時間軸 這是我在閱讀了所有這些主題的文章和書籍後，排出的軟體開發演進時間軸。\n1950s Non-structed Programming 1960s Structed Programming Layering: 1 tier UI + 業務邏輯 + 資料儲存 ~1958 - Algol 1970s Procedural/Functional Programming ~1970 - Pascal ~1972 - C 1979 - Model-View-Controller 1980s Object Oriented Programming(OOP): 最初的想法出現在 1960 晚期 Layering: 2 tier UI / 業務邏輯 + 資料儲存 ~1980 - C++ CORBA(Common Object Request Broker Architecture) - 通用物件請求代理架構(儘管第一個穩定版本在1991年推出，但第一次使用是在1980s) ~1986 - Erlang ~1987 - Perl 1987 - PAC aka Hierachical Model-View-Controller 1988 - LSP(Liskov Subsitution Principle) 1990s Layering: 3 tier UI / 業務邏輯(用戶端為瀏覽器時還包含UI呈現邏輯) / 資料儲存 ~1991 - Message Bus ~1991 - Python 1992 - Entity-Boundary-Interactor Architecture aka EBC aka EIC ~1993 - Ruby ~1995 - Delphi, Java, JavaScript, PHP 1996 - Model-View-Presenter 1996 - OCP, ISP, DIP, REP, CRP, CCP, ADP 1997 - SDP, SAP ~1997 - Aspect Oriented Programming(AOP) ~1997 - Web Service ~1997 - ESB - Enterprise Service Bus(儘管創造此詞的書籍於2004出版，當該概念於之前已使用過) 2000s 2002 - SRP 2003 - Domain-Driven-Design 2005 - Model-View-ViewModel 2005 - Ports \u0026amp; Adapter Architecture aka Hexagonal Architecture 2006? - CQRS \u0026amp; ES(Command Query Responsibility Segregation \u0026amp; Event Sourcing) 2008 - Onion Architecture 2009 - Microservices (at Netflix) 2010s 2010 - Data-Context-Interaction Architecture 2012 - Clean Architecture 2014 - C4 Model ","permalink":"https://intervalrain.github.io/hgraca/the-software-architecture-chronicles/","summary":"\u003cblockquote\u003e\n\u003cp\u003e前言：這系列文章為翻譯自作者 \u003ca href=\"https://herbertograca.com/2017/07/03/the-software-architecture-chronicles/\"\u003ehgraca\u003c/a\u003e。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e這篇文章是關於軟體架構系列文章的第一篇。在這些文章中，我將分享我所學習到的軟體架構知識，我如何看待它，以及我如何運用這些知識。\u003c/p\u003e\n\u003cp\u003e我這一系列的文章稱為「軟體架構編年史」，並非因為我自認為是一位偉大的作家，而是因為我覺得這個名字有點俗氣，又帶點趣味。\u003c/p\u003e\n\u003cp\u003e在這篇首篇文章中，我將會談論我為何要撰寫這一系列的文章，以及接下來將會有什麼內容。\u003c/p\u003e\n\u003ch1 id=\"認識歷史的重要性\"\u003e認識歷史的重要性\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cem\u003eThose who fail to learn History are doomed to repeat it.\u003c/em\u003e - \u003cstrong\u003eGeorge Santayana\u003c/strong\u003e, \u003cem\u003e\u003cstrong\u003eThe Life of Reason\u003c/strong\u003e\u003c/em\u003e, \u003cstrong\u003e1905\u003c/strong\u003e\u003cbr\u003e\n\u003cem\u003e未能學習歷史的人注定要重蹈覆轍。\u003c/em\u003e - \u003cstrong\u003e喬治‧桑塔亞納\u003c/strong\u003e《\u003cem\u003e\u003cstrong\u003e理性的生活\u003c/strong\u003e\u003c/em\u003e》，\u003cstrong\u003e1905\u003c/strong\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e我認為從歷史中學習是非常重要的，它能教導我們事情。在個人層面上，我們終究需要（也希望）能從錯誤中學習。從國家的角度來看，歷史幫助塑造我們的文化、創造群體的概念，因此有了「台灣人」的觀念，一種國家認同。同時，歷史也幫助我們從祖先的錯誤中學習，比如信仰那些有著怪異思想的人，如二戰…\u003c/p\u003e\n\u003cp\u003e對程式開發者而言，歷史有助於我們仰靠前人的經驗上，少走許多錯的道路，並讓我們「站在巨人的肩膀上」達到更高的境界！\u003c/p\u003e\n\u003cp\u003e在我成為更好的開發者路上，我閱讀了很多文章，觀看了許多演講，我盡我所能的站在巨人的肩膀上。\u003c/p\u003e\n\u003cp\u003e有一件事情使我感到困惑，那就是許多意見是基於意見之上的意見…這就像是以訛傳訛，我們最終得到是對於一篇論文、文章或書籍真正內容的扭曲理解。\u003c/p\u003e\n\u003cp\u003e因此，我開始在網路上搜尋原始的論文、文章和書籍，這些都是我認為對我的工作最重要的概念，並自己對它們進行思考。\u003c/p\u003e\n\u003cp\u003e這些文章是這種推理的結果，因為我試圖理解這些概念是如何產生的，以某種程度上的時間順序來看。\u003c/p\u003e\n\u003cp\u003e撰寫這些文章迫使我大量閱讀和思考所有議題，並幫助我理解當代在軟體開發中使用的技術。我希望這些文章能對更多開發者有所幫助。\u003c/p\u003e\n\u003cp\u003e然而，如果你讀到一些你不理解或是不認同的內容，請告訴我，我非常願意討論這些議題，並從討論中學習，也願意修正我錯誤的觀點。\u003c/p\u003e\n\u003ch1 id=\"文章列表\"\u003e文章列表\u003c/h1\u003e\n\u003cp\u003e\u003ca href=\"../software-architecture-premises\"\u003e1. 軟體架構前提 (Software Architecture Premises)\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"../programming-language-evolution\"\u003e2. 程式語言的演進 (Programming Languages Evolution)\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"\"\u003e3. 架構風格 / 架構模式 / 設計模式 (Architectural Styles vs. Architectural Patterns vs. Design Patterns)\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"../monolithic-architecture\"\u003e4. 單體架構 (Monolithic Architecture)\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"../layered-architecture\"\u003e5. 分層架構 (Layered Architecture)\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"../mvc-and-its-variants\"\u003e6. MVC 及其變形\u003c/a\u003e\u003c/p\u003e","title":"[IT] 軟體架構編年史 The Software Architecture Chronicles"},{"content":"環境建置 安裝 Anaconda 創建虛擬環境 conda create -n tensorflow 進入虛擬環境 (macOS/Linux) source activate tensorflow 在環境內安裝 tensorflow pip install tensorflow 在環境內安裝 jupyter notebook pip install jupyter notebook 在環境內安裝 pandas pip install pandas 開啟 jupyter notebook jupyter notebook For terminal user 開始 Anaconda.Navigator 在 Environments 中安裝指定模組 ex.tensorflow, keras 在 terminal 中輸入 conda activate {環境名稱} conda activate tensorflow 開啟 python python 若成功便會顯示 python 安裝資訊\nPython 3.11.5 (main, Sep 11 2023, 08:17:37) [Clang 14.0.6 ] on darwin Type \u0026#34;help\u0026#34;, \u0026#34;copyright\u0026#34;, \u0026#34;credits\u0026#34; or \u0026#34;license\u0026#34; for more information. 大功告成，接著嘗試訓練第一筆資料\n","permalink":"https://intervalrain.github.io/ml/environment/","summary":"\u003ch1 id=\"環境建置\"\u003e環境建置\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003e安裝 Anaconda\u003c/li\u003e\n\u003cli\u003e創建虛擬環境\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003econda create -n tensorflow\n\u003c/code\u003e\u003c/pre\u003e\u003col start=\"3\"\u003e\n\u003cli\u003e進入虛擬環境 (macOS/Linux)\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003esource activate tensorflow\n\u003c/code\u003e\u003c/pre\u003e\u003col start=\"4\"\u003e\n\u003cli\u003e在環境內安裝 tensorflow\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003epip install tensorflow\n\u003c/code\u003e\u003c/pre\u003e\u003col start=\"5\"\u003e\n\u003cli\u003e在環境內安裝 jupyter notebook\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003epip install jupyter notebook\n\u003c/code\u003e\u003c/pre\u003e\u003col start=\"6\"\u003e\n\u003cli\u003e在環境內安裝 pandas\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003epip install pandas\n\u003c/code\u003e\u003c/pre\u003e\u003col start=\"7\"\u003e\n\u003cli\u003e開啟 jupyter notebook\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ejupyter notebook\n\u003c/code\u003e\u003c/pre\u003e\u003ch1 id=\"for-terminal-user\"\u003eFor terminal user\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003e開始 Anaconda.Navigator\n\u003cimg alt=\"conda\" loading=\"lazy\" src=\"/ML/images/conda.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在 Environments 中安裝指定模組 ex.\u003ccode\u003etensorflow\u003c/code\u003e, \u003ccode\u003ekeras\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e在 terminal 中輸入 conda activate {環境名稱}\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003econda activate tensorflow\n\u003c/code\u003e\u003c/pre\u003e\u003col start=\"4\"\u003e\n\u003cli\u003e開啟 python\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003epython\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e若成功便會顯示 python 安裝資訊\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ePython 3.11.5 (main, Sep 11 2023, 08:17:37) [Clang 14.0.6 ] on darwin\nType \u0026#34;help\u0026#34;, \u0026#34;copyright\u0026#34;, \u0026#34;credits\u0026#34; or \u0026#34;license\u0026#34; for more information.\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e大功告成，接著嘗試訓練第一筆資料\u003c/p\u003e","title":"[ML] Start Tensorflow Environment with Conda"},{"content":" 題號 題目 類別 題解 1 Two Sum Hash Table Hash Table 2 Add Two numbers Linked List Recursion 201 Bitwise AND of Numbers Range Bitwise Operation Lowbit = x\u0026amp;(~x+1) 204 Count Primes Math Thetory The Sieve of Eratosthenes 408 Valid Word Abbreviation Two Pointers 字串轉數字 ","permalink":"https://intervalrain.github.io/leetcode/summary/","summary":"\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: left\"\u003e題號\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003e題目\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003e類別\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003e題解\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e1\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003ca href=\"../../leetcode/1\"\u003eTwo Sum\u003c/a\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eHash Table\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eHash Table\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e2\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e\u003ca href=\"../../leetcode/2\"\u003eAdd Two numbers\u003c/a\u003e\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eLinked List\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eRecursion\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e201\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eBitwise AND of Numbers Range\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eBitwise Operation\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eLowbit = x\u0026amp;(~x+1)\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e204\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eCount Primes\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eMath Thetory\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eThe Sieve of Eratosthenes\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: left\"\u003e408\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eValid Word Abbreviation\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003eTwo Pointers\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e字串轉數字\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e","title":"[Leetcode] Arrangement"},{"content":"\nch4. 結構化程式設計 Edsger Wybe Dijkstra 於 1930 年出生在鹿特丹。他在第二次世界大戰期間倖存於鹿特丹的轟炸，以及德國對荷蘭的占領，並於1948年以數學、物理、化學、生物最高分從高中畢業。1952年3月，21歲的 Dijkstra 在阿姆斯特丹的數學中心找到工作，成為荷蘭第一位程式設計師。\n1955年，已經當了三年的程式設計師，且同時身為學生的 Dijkstra 得出一個結論：程式設計的智力挑戰比起理論物理學還大。因此，他選擇了程式設計作為他的長期職業。\n1957年，Dijkstra 與 Maria Debets 結婚。當時，在荷蘭結婚必須登記職業，荷蘭的公家機關並不接受 programmer 這個職業，他們從未聽過這樣的職業，為了滿足他們，Dijkstra 在職業欄中將自己定位為「理論物理學家」。\nDijkstra 與他的老闆 Adriaan van Wijngaarden 討論著以程式設計當作他的生涯志向，他認為沒有人會將程式設計視為一門學科或是科學，因此他認為自己可能不會被認真以待，然而他的老闆回答說，Dijkstra 將有可能成為那位發現新學科，以致於將軟體變成一門科學的人。\nDijkstra 在真空管時代開始了他的職業生涯，當時的計算機很巨大、脆弱、緩慢、不可靠、且極其有限。在早期，程式是二進制或是非常粗糙的組合語言編寫的，並以紙帶或打孔卡片作為輸入的這種物理形式存在，編輯/編譯/測試的循環就需要數小時甚至數天的時間。\n正是在這個原始的環境造就了 Dijkstra 做出了他偉的的發現。\n證明 Dijkstra 很早就發現，程式設計是一件難事，且程式設計師也不容易將它做好。任何複雜的程式都包含了太多人類大腦在沒有幫助下可以管理的細節。忽視一個極小的細節程式看似可以運作正常，但卻可以以出人意料的方式失敗。\nDijkstra 的解決方案是應用數學的證明法。他的願景是建立一個如同歐基里得的公理、定理、推論和引理的層次結構。Dijkstra 認為程式設計師可以像數學家一樣使用這樣的證明方法，換句話說，程式設計師應該要運用這些經過驗證的結構，並將它們與自己證明正確的程式碼相結合。\n當然，為了使這一切開始進行，Dijkstra 意識到他必須要撰寫一些範例以展示如何用基本的證明方法來證明簡單的演算法，而他發現這是一件極具挑戰性的事。\n在調查的過程中，Dijkstra 發現某些使用 goto 語句的情況會阻止模塊被遞迴地分解成更小的單元，從而阻礙了使用分而治之的方法進行證明的可能性。\n然而，goto 的其他用途卻沒有這個問題。Dijkstra 意識到，「好的」goto 使用方法對應到簡單的選擇和迭代控制結構，例如 if/then/else 和 do/while。只使用這些控制結構的模塊才可以被遞迴的切割成可以被證明的單元。\nDijkstra 認識到，當這些控制結構與順序執行相結合是特殊的。在當時的兩年前，已經由 Böhm 和 Jacopini 證明了，所有程式都可以由三個結構建構而成：順序(sequence)、選擇(selection)、迭代(iteration)。\n這個發現非常了不起：使一個模塊可證明的控制結構，正是構成所有程式的最小控制結構集合。因此，結構化程式設計應運而生。\nDijkstra 證明了順序語句可以通過簡單的列舉來證明其正確性。這種技術利用數學方法系統性地追蹤語句的輸入與輸出，與一般的數學證明無異。\nDijkstra 通過重新應用列舉法來解決選擇問題，對於選擇中的每條路徑都進行了列舉，如果所有的路徑都產生了適當的數學結果，那麼就表示證明是可靠的。\n迭代則有些不同，為了證明迭代的正確性，Dijkstra 必須使用歸納法。他通過列舉證明了 1 得情況，然後他再次通過列舉證明了如果假設 N 是正確的，則 N+1 也是正確的，他也證明了迭代的起始條件與結束條件的正確性。\n這樣的證明是費時且複雜的，但它們具備了證明的意義。隨著它們的發展，建立一個歐基里得式階層式的定理看似變得可行。\n一個有害的聲明 1968年，Dijkstra 給 CACM 的編輯寫了一封信，該信在三月份的期刊上發表。這封信的標題是「Go To Statement Considered Harmful」。該文章概述了他對三種控制結構的立場。\n而程設界也因此掀起了一場熱潮。當時我們還沒有網路，所以人們無法在網上對 Dijkstra 進行網路攻擊，但他們可以向許多發行的期刊投信。\n這些信件不一定都很客氣，有些甚至十分負面，而有些則表達了對他的支持，於是兩方的戰爭開始，並持續了約十年。\n最終爭論逐漸消失了。原因很簡單：Dijkstra 獲得了勝利。隨著電腦語言的演進，goto 語句逐漸被淘汰，幾乎消失殆盡。大多數現代語言都不再使用 goto 語句，在 LISP 這個程式語言中，甚至從來就沒有使用過。\n現在我們都是結構化程式設計師，雖然不一定是出於選擇。只是因為我們的語言不給我們使用無紀律的直接控制轉移的選擇。\n有些人可能會指出 Java 中的命名中斷或異常作為 goto 的類比。事實上，這些結構並不像 Fortran 或 COBOL 等舊語言一樣完全無限制地轉移控制。實際上，即使是還支持 goto 關鍵字的語言，也常常將目標限制在當前函數的範圍內。\n函式分解 結構化程式設計允許將模塊遞歸地分解為可證明的單元，這意味著模塊可以被功能性地分解。也就是說，您可以將一個大規模的問題陳述分解為高層次的函數。然後，每個函數可以進一步分解為低層次的函數，無窮無盡。此外，每個分解的函數都可以使用受限的控制結構來表示。\n在此基礎上，結構化分析和結構化設計等學科在 1970 年代末至 1980 年代間變得流行起來。像是 Ed Yourdon, Larry Constantine, Tom DeMarco 和 Meilir Page-Jones 這樣的人在那個時期推廣和普及了這些技術。通過遵循這些學科，程序員可以將大型的預計系統分解為模塊和組件，進一步將其細分為可證明的小型功能。\n不再使用正式證明 我們沒有等到一個系統且完整的證明出現，歐幾里得式的層狀結構理論從未被建立，廣大的程式設計師從未看到耗費大量力氣證明每個小函式正確性所帶來的好處。最終，Dijkstra 的夢想逐漸消失。人們很少有人相信透過嚴謹的證明才能產生高質量的軟體。\n當然，正式的、歐幾里得風格的數學證明並不是證明某事正確的唯一策略。另一種極為成功的策略是科學方法。\n科學拯救大業 科學與數學在根本上有所不同，那就是科學理論和定律無法被證明為正確。我無法向你證明牛頓的第二運動定律，\\(F = ma\\)，或是萬有引力定律，\\(F = Gm_1m_2/r^2\\)是正確的。我可以向你展示這些定律，並且我可以進行測量來證明它們在許多小數點後都是正確的，但我無法以數學證明的方式來證明它們。無論我進行多少實驗或收集多少實證，總是有可能某個實驗會顯示那些運動和引力的定律是不正確的。\n這就是科學理論和定律的本質：它們是可證伪的，但不可證明的。\n然而，我們每天都憑藉這些法律來賭上我們的生命。每次你上車的時候，你肯定相信 \\(F = ma\\) 是對世界運作方式的可靠描述。每當你踏出一步，你就賭上你的健康和安全，相信 \\(F = Gm_1m_2/r^2\\) 是正確的。\n科學的運作方式並非通過證明陳述為真，而是通過證明陳述為假。那些我們無法證明為假的陳述，在經過大量努力後，我們認為它們對我們的目的來說足夠真實。\n當然，並非所有陳述都是可證明的。陳述「這是謊言」既不是真的也不是假的。這是一個最簡單的不可證明陳述的例子之一。\n最終，我們可以說數學是證明可證明的陳述為真的學科。相反，科學是證明可證明的陳述為假的學科。\n測試 Dijkstra 曾說過：「測試只能顯示會誤的存在，而不能證明其不存在。」換句話說，一個程式可以通過測試被證明是錯誤的，但無法被證明是正確的。在充分的測試過後，測試只能讓我們認為一個程式對我們的目的來說是否足夠正確。\n這個事實的含義令人驚嘆。軟體開發並不是一個數學的努力，儘管它似乎在操作數學結構。相反，軟體就像一門科學。我們通過無法證明錯誤來展示正確性，儘管我們盡了最大的努力。\n這樣的錯誤證明只適用於可證明的程式。一個無法證明的程式，例如由於無節制地使用goto，無論進行多少次測試，都無法被視為正確。\n結構化程式設計迫使我們將程式遞歸地分解為一組小的可證明函數。然後，我們可以使用測試來嘗試證明這些小的可證明函數的不正確性。如果這些測試無法證明不正確性，那麼我們認為這些函數對於我們的目的來說足夠正確。\n結論 正是這種能力創造了可驗證的程式設計單元，使得結構化程式設計在今天仍然具有價值。這也是現代語言通常不支援無限制的goto語句的原因。此外，在架構層面上，這也是為什麼我們仍然認為函式分解是我們的最佳實踐之一。 從最小的功能到最大的組件，軟體在各個層面上都像是一門科學，因此受到可證伪性的驅動。軟體架構師致力於定義易於證伪（可測試）的模塊、組件和服務。為此，他們運用類似結　構化程式設計的嚴格紀律，只是在更高的層次上。\n在接下來的章節中，我們將詳細研究這些限制性的學科。\n","permalink":"https://intervalrain.github.io/clean_arch/ch4/","summary":"\u003cp\u003e\u003cimg alt=\"ch4\" loading=\"lazy\" src=\"/clean_arch/images/ch4.png\"\u003e\u003c/p\u003e\n\u003ch1 id=\"ch4-結構化程式設計\"\u003ech4. 結構化程式設計\u003c/h1\u003e\n\u003cp\u003e　　Edsger Wybe Dijkstra 於 1930 年出生在鹿特丹。他在第二次世界大戰期間倖存於鹿特丹的轟炸，以及德國對荷蘭的占領，並於1948年以數學、物理、化學、生物最高分從高中畢業。1952年3月，21歲的 Dijkstra 在阿姆斯特丹的數學中心找到工作，成為荷蘭第一位程式設計師。\u003cbr\u003e\n　　1955年，已經當了三年的程式設計師，且同時身為學生的 Dijkstra 得出一個結論：程式設計的智力挑戰比起理論物理學還大。因此，他選擇了程式設計作為他的長期職業。\u003cbr\u003e\n　　1957年，Dijkstra 與 Maria Debets 結婚。當時，在荷蘭結婚必須登記職業，荷蘭的公家機關並不接受 \u003cstrong\u003eprogrammer\u003c/strong\u003e 這個職業，他們從未聽過這樣的職業，為了滿足他們，Dijkstra 在職業欄中將自己定位為「理論物理學家」。\u003cbr\u003e\n　　Dijkstra 與他的老闆 Adriaan van Wijngaarden 討論著以程式設計當作他的生涯志向，他認為沒有人會將程式設計視為一門學科或是科學，因此他認為自己可能不會被認真以待，然而他的老闆回答說，Dijkstra 將有可能成為那位發現新學科，以致於將軟體變成一門科學的人。\u003cbr\u003e\n　　Dijkstra 在真空管時代開始了他的職業生涯，當時的計算機很巨大、脆弱、緩慢、不可靠、且極其有限。在早期，程式是二進制或是非常粗糙的組合語言編寫的，並以紙帶或打孔卡片作為輸入的這種物理形式存在，編輯/編譯/測試的循環就需要數小時甚至數天的時間。\u003cbr\u003e\n　　正是在這個原始的環境造就了 Dijkstra 做出了他偉的的發現。\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"證明\"\u003e證明\u003c/h2\u003e\n\u003cp\u003e　　Dijkstra 很早就發現，程式設計是一件難事，且程式設計師也不容易將它做好。任何複雜的程式都包含了太多人類大腦在沒有幫助下可以管理的細節。忽視一個極小的細節程式看似可以運作正常，但卻可以以出人意料的方式失敗。\u003cbr\u003e\n　　Dijkstra 的解決方案是應用數學的證明法。他的願景是建立一個如同歐基里得的公理、定理、推論和引理的層次結構。Dijkstra 認為程式設計師可以像數學家一樣使用這樣的證明方法，換句話說，程式設計師應該要運用這些經過驗證的結構，並將它們與自己證明正確的程式碼相結合。\u003cbr\u003e\n　　當然，為了使這一切開始進行，Dijkstra 意識到他必須要撰寫一些範例以展示如何用基本的證明方法來證明簡單的演算法，而他發現這是一件極具挑戰性的事。\u003cbr\u003e\n　　在調查的過程中，Dijkstra 發現某些使用 \u003ccode\u003egoto\u003c/code\u003e 語句的情況會阻止模塊被遞迴地分解成更小的單元，從而阻礙了使用分而治之的方法進行證明的可能性。\u003cbr\u003e\n　　然而，\u003ccode\u003egoto\u003c/code\u003e 的其他用途卻沒有這個問題。Dijkstra 意識到，「好的」\u003ccode\u003egoto\u003c/code\u003e 使用方法對應到簡單的選擇和迭代控制結構，例如 \u003ccode\u003eif\u003c/code\u003e/\u003ccode\u003ethen\u003c/code\u003e/\u003ccode\u003eelse\u003c/code\u003e 和 \u003ccode\u003edo\u003c/code\u003e/\u003ccode\u003ewhile\u003c/code\u003e。只使用這些控制結構的模塊才可以被遞迴的切割成可以被證明的單元。\u003cbr\u003e\n　　Dijkstra 認識到，當這些控制結構與順序執行相結合是特殊的。在當時的兩年前，已經由 Böhm 和 Jacopini 證明了，所有程式都可以由三個結構建構而成：順序(sequence)、選擇(selection)、迭代(iteration)。\u003cbr\u003e\n　　這個發現非常了不起：使一個模塊可證明的控制結構，正是構成所有程式的最小控制結構集合。因此，結構化程式設計應運而生。\u003cbr\u003e\n　　Dijkstra 證明了順序語句可以通過簡單的列舉來證明其正確性。這種技術利用數學方法系統性地追蹤語句的輸入與輸出，與一般的數學證明無異。\u003cbr\u003e\n　　Dijkstra 通過重新應用列舉法來解決選擇問題，對於選擇中的每條路徑都進行了列舉，如果所有的路徑都產生了適當的數學結果，那麼就表示證明是可靠的。\u003cbr\u003e\n　　迭代則有些不同，為了證明迭代的正確性，Dijkstra 必須使用歸納法。他通過列舉證明了 1 得情況，然後他再次通過列舉證明了如果假設 N 是正確的，則 N+1 也是正確的，他也證明了迭代的起始條件與結束條件的正確性。\u003cbr\u003e\n　　這樣的證明是費時且複雜的，但它們具備了證明的意義。隨著它們的發展，建立一個歐基里得式階層式的定理看似變得可行。\u003c/p\u003e","title":"[IT] Clean Architecture - 第4章 - 結構化程式設計"},{"content":"乾淨架構 設計(design)與架構(architecture)為何重要？ 軟體架構的目標是將開發與維護軟體系統所需的人力最小化。 不好的設計會使維護的成本愈來愈高。 每次版本的發布時的生產力。 良好的開發模式(TDD)大幅減少開發時間。 行為(behavior)與架構(architecture) 行為：緊迫但並非特別重要 架構：重要不緊迫\n∵ 緊急且重要 \u0026gt; 不緊急但重要 \u0026gt; 緊急但不重要 \u0026gt; 不緊急且不重要\n∴ 大多情況下，架構(設計)比行為(開發)更重要。 程式設計範式(paradigms) 結構化程式設計(structed programming) 不要使用 goto，使用結構化的設計模式。(順序、選擇、迭代) 總結：對直接控制權施加限制。 關注點：功能 物件導向程式設計(object-oriented programming) 使用多型來避免函數指針的濫用。 總結：對間接控制權施加限制。 關注點：組件分離 函式程式設計(functional programming) λ演算的概念是不可變性，符號的值不會改變，意味著沒有賦值。 總結：對賦值施加限制。 關注點：數據管理 物件導向設計： 依賴反轉： 商業邏輯不依賴於 UI 與 DB，UI 與 DB 可以做為商業邏輯的插件。 小結： 三種範式都在約束你寫 code 的某些行為。這些約束就是在制定規則。 SOLID 設計原則 SRP: 單一職責原則(The Single Responsibility Principle) 一個模組只有一個原因(用戶/利益相關者)需要改變。 OCP: 開放封閉原則(The Open-Closed Principle) 軟體工程應對擴展開放，但對修改封閉。 LSP: 里氏替體原則(The Liskov Substitution Principle) 避免簡單的可替代性違規導致大量的額外機制。 ISP: 介面隔離原則(The Interface Segregation Principle) 關注點分離。將一個多功能的物件拆成繼承三個不同功能介面的物件。 DIP: 依賴反轉原則(The Dependency Inversion Principle) 組件原則 組件是部署的單位，他們是系統的最小單元。 在 Java，他們是 jar 檔。 在 Ruby，他們是 gem 檔。 在 .Net，他們是 DLL 檔。 可搬遷性(relocatabbility) 解決方案(solution)是可以被重定位的二進制檔案(binaries)。 工程師可以告訴載入器要在哪裡載入函式庫。 如果程式調用了函式庫，則編譯器會將之視為外部引用(external reference)；如果程式定義了函式庫，則編譯器會將之視為外部定義(external definition)。 在加載器確定了加載的對象是外部引用或是外部定義之後，便可透過 linker 將外部引用對外部定義做連結。 連結器(linkers) 當程式的規模愈來愈大，連結加載(linking loader)的速度愈來久。於是乎加載與連結被拆為兩個階段。 模組化的組件被編譯後，餵進 linker，形成可執行的檔案，以供 loader 可以快速的加載。 內聚三原則 REP(The Reuse/Release Equivalence Principle) REP: 重用/發布等價原則(The Reuse/Release Equivalence Principle) 想要重用軟體組件，則這些組件必須經過發布流程追縱並有版本號。 發布版本需確保所有重複使用的組件彼此具兼容性。模組須是有內聚力的群組，有共同的主題。 CCP(The Common Closure Principle) CCP: 共同封包原則(The Common Closure Principle) 將因為相同原因和時間改變的類別組合在一起；不同原因和時間改變的類別分開。 組件版的 SRP：一個組件不應該有多個改變的原因。 可維護性大於可重用性。 若有應用程式需要被需改，最好這些修改要發生在一個組件中而非分散在多個組件中。 OCP 是對擴展開放，對修改封閉，但封閉不可能是100%的，所以需策略性的封閉。 CRP(The Common Reuse Principle) CRP: 共同重用原則(The Common Reuse Principle) 不只強調哪些組件因強耦合而應該放在同一個組件，還強調我們不應該把哪些類別放在一起。 不強迫組件的使用者依賴他們不需要的東西。 ISP 的通用版。 耦合(Coupling) 非循環依賴原則(The Acyclic Dependencies Principle, ADP) 組件間的依賴關係必須是有向無環圖(DAG)。 應用 DIP 依賴反轉，創造介面，打破循環。 創建一個新的組件，使兩者共同依賴於新的組件。 由上自下的設計(Top-Down Design) 組件結構不能從上而下設計，應隨著系統的成長和變化而演變。 組件依賴圖是應用程式可構建性和可維護性的地圖，所以不該是項目開始時設計的原因。 隨著軟體的成長，累積了愈來愈多的模組，則開始需要管理這些依賴關係，我們應該盡可能將更改局部化，因此我們開始關注 SRP 和 CCP。 穩定依賴原則(The Stable Dependencies Principle, SDP) 穩定的依賴流。 穩定性指標 \\(I=\\frac{\\text{fan-out}}{\\text{fan-in + fan-out}}\\)\n不是所有的組件都應該是穩定的 如果系統中的所有組件都是極度穩定的，代表系統是不可改變的，這並非理想的情況。 好的依賴方向，由不穩定指向穩定。 被設計成 flexable 的組件，愈被依賴則愈難被更動，同樣應該用 DIP 來破壞對 flexable 的依賴。 穩定抽象原則(The Stable Abstractions Principle, SAP) 要使組件穩定，它應該由接口和抽象類組成，以便擴展，且要不過度限制架構。 SAP 與 SDP 的結合就是組件的 DIP。 測量抽象性 A 指標 A 指標是衡量元件抽象程度的方方 \\(N_c\\) 是組件中類別的數量。 \\(N_a\\) f是組件中的抽象類別和介面的數量 \\(A=\\frac{N_a}{N_c}\\) 抽象度。 在上圖的座標中，愈穩定且抽象的組件位於左上角(0,1)、愈不穩定且具體的組件位於右下角(1,0)。 我們無法強制所有元件均位於 (0,1) 或 (1,0)，而是定義元件合理的位置，並找出元件不應該出現的區域。 Zone of Pain 非常穩定且具體的元件，這樣的元件並不理想，因為它是僵硬且無法擴展的。 如資料庫、實用程式庫… Zone of Uselessness 極度抽象卻沒有相依性，這樣的元件是無用的。 連接 (1,0) 與 (0,1) 的線稱為主序線(the Main Sequence)。 好的組件位在這條線上，對其穩定性並不太抽象，也不會因其抽象性而變得太不穩定。 抽象程度決定了它的依賴性；具體性決定了它對他人的依賴程度。 與主序線的距離，為元件的 D 指標，介 0~1 之間，任何不接近 0 的元件都可以被重新檢視和重組。 \\(D=|A+I-1|\\) ","permalink":"https://intervalrain.github.io/clean_arch/clean_arch/","summary":"\u003ch1 id=\"乾淨架構\"\u003e乾淨架構\u003c/h1\u003e\n\u003ch2 id=\"設計design與架構architecture為何重要\"\u003e設計(design)與架構(architecture)為何重要？\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e軟體架構的目標是將\u003cstrong\u003e開發\u003c/strong\u003e與\u003cstrong\u003e維護\u003c/strong\u003e軟體系統所需的人力最小化。\n\u003cul\u003e\n\u003cli\u003e不好的設計會使維護的成本愈來愈高。\n\u003cimg alt=\"1-1\" loading=\"lazy\" src=\"/clean_arch/images/img1_3.png\"\u003e\u003c/li\u003e\n\u003cli\u003e每次版本的發布時的生產力。\n\u003cimg alt=\"1-2\" loading=\"lazy\" src=\"/clean_arch/images/img1_4.png\"\u003e\u003c/li\u003e\n\u003cli\u003e良好的開發模式(TDD)大幅減少開發時間。\n\u003cimg alt=\"1-3\" loading=\"lazy\" src=\"/clean_arch/images/img1_6.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"行為behavior與架構architecture\"\u003e行為(behavior)與架構(architecture)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e行為：緊迫但並非特別重要\u003c/li\u003e\n\u003cli\u003e架構：重要不緊迫\u003cbr\u003e\n∵ 緊急且重要 \u0026gt; 不緊急但重要 \u0026gt; 緊急但不重要 \u0026gt; 不緊急且不重要\u003cbr\u003e\n∴ 大多情況下，架構(設計)比行為(開發)更重要。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"程式設計範式paradigms\"\u003e程式設計範式(paradigms)\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e結構化程式設計(structed programming)\n\u003cul\u003e\n\u003cli\u003e不要使用 \u003ccode\u003egoto\u003c/code\u003e，使用結構化的設計模式。(順序、選擇、迭代)\u003c/li\u003e\n\u003cli\u003e總結：對直接控制權施加限制。\u003c/li\u003e\n\u003cli\u003e關注點：\u003cstrong\u003e功能\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e物件導向程式設計(object-oriented programming)\n\u003cul\u003e\n\u003cli\u003e使用多型來避免函數指針的濫用。\u003c/li\u003e\n\u003cli\u003e總結：對間接控制權施加限制。\u003c/li\u003e\n\u003cli\u003e關注點：\u003cstrong\u003e組件分離\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e函式程式設計(functional programming)\n\u003cul\u003e\n\u003cli\u003eλ演算的概念是不可變性，符號的值不會改變，意味著沒有賦值。\u003c/li\u003e\n\u003cli\u003e總結：對賦值施加限制。\u003c/li\u003e\n\u003cli\u003e關注點：\u003cstrong\u003e數據管理\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"物件導向設計\"\u003e物件導向設計：\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e依賴反轉：\n\u003cimg alt=\"DIP\" loading=\"lazy\" src=\"/clean_arch/images/DIP.png\"\u003e\u003c/li\u003e\n\u003cli\u003e商業邏輯不依賴於 UI 與 DB，UI 與 DB 可以做為商業邏輯的插件。\n\u003cimg alt=\"DIP2\" loading=\"lazy\" src=\"/clean_arch/images/DIP2.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"小結\"\u003e小結：\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e三種範式都在約束你寫 code 的某些行為。這些約束就是在制定規則。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"solid-設計原則\"\u003eSOLID 設計原則\u003c/h2\u003e\n\u003ch3 id=\"srp-單一職責原則the-single-responsibility-principle\"\u003eSRP: 單一職責原則(The Single Responsibility Principle)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e一個模組只有一個原因(用戶/利益相關者)需要改變。\n\u003cimg alt=\"SRP\" loading=\"lazy\" src=\"/clean_arch/images/SRP.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"ocp-開放封閉原則the-open-closed-principle\"\u003eOCP: 開放封閉原則(The Open-Closed Principle)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e軟體工程應對擴展開放，但對修改封閉。\n\u003cimg alt=\"OCP\" loading=\"lazy\" src=\"/clean_arch/images/OCP.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"lsp-里氏替體原則the-liskov-substitution-principle\"\u003eLSP: 里氏替體原則(The Liskov Substitution Principle)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e避免簡單的可替代性違規導致大量的額外機制。\n\u003cimg alt=\"LSP\" loading=\"lazy\" src=\"/clean_arch/images/LSP.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"isp-介面隔離原則the-interface-segregation-principle\"\u003eISP: 介面隔離原則(The Interface Segregation Principle)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e關注點分離。將一個多功能的物件拆成繼承三個不同功能介面的物件。\n\u003cimg alt=\"SRP\" loading=\"lazy\" src=\"/clean_arch/images/ISP.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"dip-依賴反轉原則the-dependency-inversion-principle\"\u003eDIP: 依賴反轉原則(The Dependency Inversion Principle)\u003c/h3\u003e\n\u003cp\u003e\u003cimg alt=\"DIP3\" loading=\"lazy\" src=\"/clean_arch/images/DIP3.png\"\u003e\u003c/p\u003e","title":"[IT] Clean Architecture"},{"content":"EventBus EventBus 用於維護一個事件源與事件處理的映射字典 通過 Singleton，確保 EventBus 的唯一入口 利用反射完成事件源與件事處理的初始化綁定 提供統一的事件注冊(register)、取消注冊(unsubscribe)和觸發(trigger)。 Interfaces IEventData public interface IEventData { DateTime EventTime { get; set; } object EventSource {get; set; } } IEventHandler public interface IEventHandler { } IEventHandler`1 public interface IEventHandler\u0026lt;TEventData\u0026gt; : IEventHandler where TEventData : IEventData { void HandlerEvent(TEventData eventData); } base class EventData public class EventData : IEventData { public DateTime EventTIme { get; set; } object EventSource { get; set; } public EventData() { EventTime = DateTime.Now; } } Domain FishType public enum FishType { None, 鯽魚, 鯉魚, 黑魚, 青魚, 草魚, 鱸魚 } FishingEventData : EventData public class FishingEventData : EventData { public FishType FishType { get; set; } public FishingMan FishingMan { get; set; } } FishingEventHandler : IEventHandler public class FishingEventHandler : IEventHandler\u0026lt;FishingEventData\u0026gt; { public void HandleEvent(FishingEventData eventData) { var type = eventData.FishType; var fishMan = eventData.FishingMan; var Name = fishMan.Name; if (type == FishType.None) { fishMan.Message = string.Format(\u0026#34;{0}: 沒有釣到魚, 累計釣了{1}條魚\u0026#34;, Name, fishMan.FishCount); } else { fishMan.FishCount++; fishMan.Message = string.Format(\u0026#34;{0}: 釣到一條[{2}], 累計釣了{1}條魚\u0026#34;, Name, fishMan.FishCount, type); } } } FishingMan public class FishingMan { public string Name { get; set; } public int FishCount { get; set; } public FishingRod FishingRod { get; set; } public string Message { get; set; } public FishingMan(string name) { Name = name; FishCount = 0; } public void Fishing() { FishingRod.ThrowHook(this); } } FishingRod 用反射註冊事件 public class FishingRod { public string Message { get; private set; } public FishingRod() { } public void ThrowHook(FishingMan man) { if (new Random().Next() % 2 == 0) { var type = (FishType)(new Random().Next(0, 5) + 1); Message = (\u0026#34;魚兒上鉤了!\u0026#34;); if (FishingEvent != null) { var eventData = new FishingEventData { FishingMan = man, FishType = type }; EventBus.Default.Trigger\u0026lt;FishingEventData\u0026gt;(eventData); } } else { var type = FishType.None; Message = (\u0026#34;可惜了!\u0026#34;); if (FishingEvent != null) { var eventData = new FishingEventData { FishingMan = man, FishType = type }; EventBus.Default.Trigger\u0026lt;FishingEventData\u0026gt;(eventData); } } } } EventBus 實作 用一個靜態單例來統一管理事件 public class EventBus { public static EventBus Default =\u0026gt; new EventBus(); private readonly ConcurrentDictionary\u0026lt;Type, List\u0026lt;Type\u0026gt;\u0026gt; _eventAndHandlerMapping; private EventBus() { _eventAndHandlerMapping = new ConcurrentDictionary\u0026lt;Type, List\u0026lt;Type\u0026gt;\u0026gt;(); MapEventToHandler(); } private void MapEventToHandler() { Assembly assembly = Assembly.GetEntryAssembly(); foreach (var type in assembly.GetTypes()) { if (typeof(IEventHandler).IsAssignableFrom(type)) { Type handlerInterface = type.GetInterface(\u0026#34;IEventHandler`1\u0026#34;); if (handlerInterface == null) continue; Type eventDataType = handlerInterface.GetGenericArguments()[0]; if (_eventAndHandlerMapping.ContainsKey(eventDataType)) { List\u0026lt;Type\u0026gt; handlerTypes = _eventAndHandlerMapping[eventDataType]; handlerTypes.Add(type); _eventAndHandlerMapping[eventDataType] = handlerTypes; } else { var handlerTypes = new List\u0026lt;Type\u0026gt; { type }; _eventAndHandlerMapping[eventDataType] = handlerTypes; } } } } public void Register\u0026lt;TEventData\u0026gt;(Type eventHandler) { List\u0026lt;Type\u0026gt; handlerTypes = _eventAndHandlerMapping[typeof(TEventData)]; if (!handlerTypes.Contains(eventHandler)) { handlerTypes.Add(eventHandler); _eventAndHandlerMapping[typeof(TEventData)] = handlerTypes; } } public void Unsubscribe\u0026lt;TEventData\u0026gt;(Type eventHandler) { List\u0026lt;Type\u0026gt; handlerTypes = _eventAndHandlerMapping[typeof(TEventData)]; if (!handlerTypes.Contains(eventHandler)) { handlerTypes.Remove(eventHandler); _eventAndHandlerMapping[typeof(TEventData)] = handlerTypes; } } public void Trigger\u0026lt;TEventData\u0026gt;(TEventData eventData) where TEventData : IEventData { List\u0026lt;Type\u0026gt; handlers = _eventAndHandlerMapping[eventData.GetType()]; if (handlers != null \u0026amp;\u0026amp; handlers.Count \u0026gt; 0) { foreach (var handler in handlers) { MethodInfo methodInfo = handler.GetMethod(\u0026#34;HandleEvent\u0026#34;); if (methodInfo != null) { object obj = Activator.CreateInstance(handler); methodInfo.Invoke(obj, new object[] { eventData }); } } } } } demo MacOs Cocoa Project public partial class ViewController : NSViewController { public ViewController (IntPtr handle) : base (handle) { } public override void ViewDidLoad () { base.ViewDidLoad (); jeff = new FishingMan(\u0026#34;Jeff\u0026#34;); rod = new FishingRod(); jeff.FishingRod = rod; EventBus eventBus = EventBus.Default; eventBus.Register\u0026lt;FishingEventData\u0026gt;(typeof(FishingEventHandler)); } FishingMan jeff; FishingRod rod; public override NSObject RepresentedObject { get { return base.RepresentedObject; } set { base.RepresentedObject = value; } } partial void Button_Click(NSButton sender) { jeff.Fishing(); TextLabel.StringValue = rod.Message; TextLabel2.StringValue = jeff.Message ?? \u0026#34;\u0026#34;; } } ","permalink":"https://intervalrain.github.io/it/eventbus/","summary":"\u003ch1 id=\"eventbus\"\u003eEventBus\u003c/h1\u003e\n\u003cp\u003e\u003cimg alt=\"eventBus\" loading=\"lazy\" src=\"https://th.bing.com/th/id/R.87d7f0f7e01b188aa312c91b2be45fe8?rik=TjWnWJ%2fkTukAaA\u0026pid=ImgRaw\u0026r=0\"\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eEventBus 用於維護一個事件源與事件處理的映射字典\u003c/li\u003e\n\u003cli\u003e通過 Singleton，確保 EventBus 的唯一入口\u003c/li\u003e\n\u003cli\u003e利用反射完成事件源與件事處理的初始化綁定\u003c/li\u003e\n\u003cli\u003e提供統一的事件注冊(register)、取消注冊(unsubscribe)和觸發(trigger)。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"interfaces\"\u003eInterfaces\u003c/h2\u003e\n\u003ch3 id=\"ieventdata\"\u003eIEventData\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eIEventData\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    DateTime EventTime { \u003cspan style=\"color:#66d9ef\"\u003eget\u003c/span\u003e; \u003cspan style=\"color:#66d9ef\"\u003eset\u003c/span\u003e; }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eobject\u003c/span\u003e EventSource {\u003cspan style=\"color:#66d9ef\"\u003eget\u003c/span\u003e; \u003cspan style=\"color:#66d9ef\"\u003eset\u003c/span\u003e; }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"ieventhandler\"\u003eIEventHandler\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eIEventHandler\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"ieventhandler1\"\u003eIEventHandler`1\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eIEventHandler\u003c/span\u003e\u0026lt;TEventData\u0026gt; : IEventHandler \u003cspan style=\"color:#66d9ef\"\u003ewhere\u003c/span\u003e TEventData : IEventData\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e HandlerEvent(TEventData eventData);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"base-class\"\u003ebase class\u003c/h2\u003e\n\u003ch3 id=\"eventdata\"\u003eEventData\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eEventData\u003c/span\u003e : IEventData\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e DateTime EventTIme { \u003cspan style=\"color:#66d9ef\"\u003eget\u003c/span\u003e; \u003cspan style=\"color:#66d9ef\"\u003eset\u003c/span\u003e; }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eobject\u003c/span\u003e EventSource { \u003cspan style=\"color:#66d9ef\"\u003eget\u003c/span\u003e; \u003cspan style=\"color:#66d9ef\"\u003eset\u003c/span\u003e; }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e EventData()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        EventTime = DateTime.Now;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"domain\"\u003eDomain\u003c/h2\u003e\n\u003ch3 id=\"fishtype\"\u003eFishType\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eenum\u003c/span\u003e FishType\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    None,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e鯽魚\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e鯉魚\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e黑魚\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e青魚\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e草魚\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e鱸魚\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"fishingeventdata--eventdata\"\u003eFishingEventData : EventData\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eFishingEventData\u003c/span\u003e : EventData\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e FishType FishType { \u003cspan style=\"color:#66d9ef\"\u003eget\u003c/span\u003e; \u003cspan style=\"color:#66d9ef\"\u003eset\u003c/span\u003e; }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e FishingMan FishingMan { \u003cspan style=\"color:#66d9ef\"\u003eget\u003c/span\u003e; \u003cspan style=\"color:#66d9ef\"\u003eset\u003c/span\u003e; }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"fishingeventhandler--ieventhandler\"\u003eFishingEventHandler : IEventHandler\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eFishingEventHandler\u003c/span\u003e : IEventHandler\u0026lt;FishingEventData\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e HandleEvent(FishingEventData eventData)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e type = eventData.FishType;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e fishMan = eventData.FishingMan;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e Name = fishMan.Name;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (type == FishType.None)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            fishMan.Message = \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e.Format(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;{0}: 沒有釣到魚, 累計釣了{1}條魚\u0026#34;\u003c/span\u003e, Name, fishMan.FishCount);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            fishMan.FishCount++;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            fishMan.Message = \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e.Format(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;{0}: 釣到一條[{2}], 累計釣了{1}條魚\u0026#34;\u003c/span\u003e, Name, fishMan.FishCount, type);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"fishingman\"\u003eFishingMan\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eFishingMan\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e Name { \u003cspan style=\"color:#66d9ef\"\u003eget\u003c/span\u003e; \u003cspan style=\"color:#66d9ef\"\u003eset\u003c/span\u003e; }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e FishCount { \u003cspan style=\"color:#66d9ef\"\u003eget\u003c/span\u003e; \u003cspan style=\"color:#66d9ef\"\u003eset\u003c/span\u003e; }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e FishingRod FishingRod { \u003cspan style=\"color:#66d9ef\"\u003eget\u003c/span\u003e; \u003cspan style=\"color:#66d9ef\"\u003eset\u003c/span\u003e; }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e Message { \u003cspan style=\"color:#66d9ef\"\u003eget\u003c/span\u003e; \u003cspan style=\"color:#66d9ef\"\u003eset\u003c/span\u003e; }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e FishingMan(\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e name)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Name = name;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        FishCount = \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e Fishing()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        FishingRod.ThrowHook(\u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"fishingrod\"\u003eFishingRod\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e用反射註冊事件\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eFishingRod\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e Message { \u003cspan style=\"color:#66d9ef\"\u003eget\u003c/span\u003e; \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eset\u003c/span\u003e; }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e FishingRod()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e ThrowHook(FishingMan man)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e Random().Next() % \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e == \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e type = (FishType)(\u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e Random().Next(\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e) + \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            Message = (\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;魚兒上鉤了!\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (FishingEvent != \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e eventData = \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e FishingEventData\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    FishingMan = man,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    FishType = type\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                };\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                EventBus.Default.Trigger\u0026lt;FishingEventData\u0026gt;(eventData);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e type = FishType.None;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            Message = (\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;可惜了!\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (FishingEvent != \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e eventData = \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e FishingEventData\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    FishingMan = man,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    FishType = type\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                };\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                EventBus.Default.Trigger\u0026lt;FishingEventData\u0026gt;(eventData);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"eventbus-實作\"\u003eEventBus 實作\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e用一個靜態單例來統一管理事件\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eEventBus\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e EventBus Default =\u0026gt; \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e EventBus();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ereadonly\u003c/span\u003e ConcurrentDictionary\u0026lt;Type, List\u0026lt;Type\u0026gt;\u0026gt; _eventAndHandlerMapping;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e EventBus()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t_eventAndHandlerMapping = \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e ConcurrentDictionary\u0026lt;Type, List\u0026lt;Type\u0026gt;\u0026gt;();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tMapEventToHandler();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e MapEventToHandler()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tAssembly assembly = Assembly.GetEntryAssembly();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eforeach\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e type \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e assembly.GetTypes())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003etypeof\u003c/span\u003e(IEventHandler).IsAssignableFrom(type))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\tType handlerInterface = type.GetInterface(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;IEventHandler`1\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (handlerInterface == \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003econtinue\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\tType eventDataType = handlerInterface.GetGenericArguments()[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (_eventAndHandlerMapping.ContainsKey(eventDataType))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\tList\u0026lt;Type\u0026gt; handlerTypes = _eventAndHandlerMapping[eventDataType];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\thandlerTypes.Add(type);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\t_eventAndHandlerMapping[eventDataType] = handlerTypes;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\t\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e handlerTypes = \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e List\u0026lt;Type\u0026gt; { type };\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\t_eventAndHandlerMapping[eventDataType] = handlerTypes;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e Register\u0026lt;TEventData\u0026gt;(Type eventHandler)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tList\u0026lt;Type\u0026gt; handlerTypes = _eventAndHandlerMapping[\u003cspan style=\"color:#66d9ef\"\u003etypeof\u003c/span\u003e(TEventData)];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (!handlerTypes.Contains(eventHandler))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\thandlerTypes.Add(eventHandler);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t_eventAndHandlerMapping[\u003cspan style=\"color:#66d9ef\"\u003etypeof\u003c/span\u003e(TEventData)] = handlerTypes;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e Unsubscribe\u0026lt;TEventData\u0026gt;(Type eventHandler)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        List\u0026lt;Type\u0026gt; handlerTypes = _eventAndHandlerMapping[\u003cspan style=\"color:#66d9ef\"\u003etypeof\u003c/span\u003e(TEventData)];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (!handlerTypes.Contains(eventHandler))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            handlerTypes.Remove(eventHandler);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            _eventAndHandlerMapping[\u003cspan style=\"color:#66d9ef\"\u003etypeof\u003c/span\u003e(TEventData)] = handlerTypes;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e Trigger\u0026lt;TEventData\u0026gt;(TEventData eventData) \u003cspan style=\"color:#66d9ef\"\u003ewhere\u003c/span\u003e TEventData : IEventData\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        List\u0026lt;Type\u0026gt; handlers = _eventAndHandlerMapping[eventData.GetType()];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (handlers != \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e \u0026amp;\u0026amp; handlers.Count \u0026gt; \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003eforeach\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e handler \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e handlers)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\tMethodInfo methodInfo = handler.GetMethod(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;HandleEvent\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (methodInfo != \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\t\u003cspan style=\"color:#66d9ef\"\u003eobject\u003c/span\u003e obj = Activator.CreateInstance(handler);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\tmethodInfo.Invoke(obj, \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eobject\u003c/span\u003e[] { eventData });\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"demo\"\u003edemo\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMacOs Cocoa Project\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003epartial\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eViewController\u003c/span\u003e : NSViewController\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e ViewController (IntPtr handle) : \u003cspan style=\"color:#66d9ef\"\u003ebase\u003c/span\u003e (handle)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eoverride\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e ViewDidLoad ()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ebase\u003c/span\u003e.ViewDidLoad ();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        jeff = \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e FishingMan(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Jeff\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        rod = \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e FishingRod();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        jeff.FishingRod = rod;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        EventBus eventBus = EventBus.Default;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        eventBus.Register\u0026lt;FishingEventData\u0026gt;(\u003cspan style=\"color:#66d9ef\"\u003etypeof\u003c/span\u003e(FishingEventHandler));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    FishingMan jeff;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    FishingRod rod;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eoverride\u003c/span\u003e NSObject RepresentedObject {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eget\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ebase\u003c/span\u003e.RepresentedObject;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eset\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ebase\u003c/span\u003e.RepresentedObject = \u003cspan style=\"color:#66d9ef\"\u003evalue\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epartial\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e Button_Click(NSButton sender)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        jeff.Fishing();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        TextLabel.StringValue = rod.Message;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        TextLabel2.StringValue = jeff.Message ?? \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"[IT] 事件總線 EventBus"},{"content":"乾淨架構(Clean Architecture) 筆記 分層 乾淨架構中從外而內依序為 Framework Layer Interface Adapter Layer Application Layer Domain Layer Models 一般來說會有四個 Models View Model(給前端) App Model(App Layer 隔離 Domain Layer 所用，aka DTO) Domain Model Data Model(for DBMS) Usecase App Layer 中的 Usecase 做四件事： 查 改 存 推 單向依賴原則 依賴的方向必為單向且為\n\\(\\boxed{\\text{Interface Adapter}} \\rightarrow \\boxed{\\text{Application Layer}} \\rightarrow \\boxed{\\text{Domain Layer}}\\) Repository Application Layer 為了遵守單向依賴，與 ORM 解耦會做一次依賴反轉，翠取 Repository 介面。 套用乾淨架構的效益衡量 Model Mapping 的成本 vs. 獨立出「領域模型」的價值 省下更換技術的成本(migration cost) 「領域層」的部分通常會結合 DDD ","permalink":"https://intervalrain.github.io/it/ca/","summary":"\u003ch1 id=\"乾淨架構clean-architecture-筆記\"\u003e乾淨架構(Clean Architecture) 筆記\u003c/h1\u003e\n\u003ch2 id=\"分層\"\u003e分層\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e乾淨架構中從外而內依序為\n\u003cul\u003e\n\u003cli\u003eFramework Layer\u003c/li\u003e\n\u003cli\u003eInterface Adapter Layer\u003c/li\u003e\n\u003cli\u003eApplication Layer\u003c/li\u003e\n\u003cli\u003eDomain Layer\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"models\"\u003eModels\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e一般來說會有四個 Models\n\u003cul\u003e\n\u003cli\u003eView Model(給前端)\u003c/li\u003e\n\u003cli\u003eApp Model(App Layer 隔離 Domain Layer 所用，aka DTO)\u003c/li\u003e\n\u003cli\u003eDomain Model\u003c/li\u003e\n\u003cli\u003eData Model(for DBMS)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"usecase\"\u003eUsecase\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eApp Layer 中的 Usecase 做四件事：\n\u003cul\u003e\n\u003cli\u003e查\u003c/li\u003e\n\u003cli\u003e改\u003c/li\u003e\n\u003cli\u003e存\u003c/li\u003e\n\u003cli\u003e推\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"單向依賴原則\"\u003e單向依賴原則\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e依賴的方向必為單向且為\u003cbr\u003e\n\\(\\boxed{\\text{Interface Adapter}} \\rightarrow \\boxed{\\text{Application Layer}} \\rightarrow \\boxed{\\text{Domain Layer}}\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"repository\"\u003eRepository\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eApplication Layer 為了遵守單向依賴，與 ORM 解耦會做一次依賴反轉，翠取 Repository 介面。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"套用乾淨架構的效益衡量\"\u003e套用乾淨架構的效益衡量\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eModel Mapping 的成本 vs.\n\u003col\u003e\n\u003cli\u003e獨立出「領域模型」的價值\u003c/li\u003e\n\u003cli\u003e省下更換技術的成本(migration cost)\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"領域層的部分通常會結合-ddd\"\u003e「領域層」的部分通常會結合 DDD\u003c/h2\u003e","title":"[IT] Clean Architecture - 重點整理"},{"content":"可重複使用的 IQueryable 基類 IQueryable 簡介 在 C# 最新版本中的 IQueryable 已經不再是一個介面，而是分為兩個部分： IQueryable 與 IQueryProvider。在開始實作之前，我們必須先了解一下這兩個介面。\npublic interface IQuerable : IEnumerable { Type ElementType { get; } Expression Expression { get; } IQueryProvider Provider { get; } } public interface IQueryable\u0026lt;T\u0026gt; : IEnumerable\u0026lt;T\u0026gt;, IQueryable, IEnumerable { } IQueryable 有三個唯讀屬性：\nElementType 代表了元素的類型 (或等於 IQueryable\u0026lt;T\u0026gt; 中的 T) Expression 代表了查詢對應的表達式。這是 IQueryable 存在的核心要素。在 IQueryable 的內部，實際上是一個表示查詢的表達式，它將查詢表示為 LINQ 查詢運算子/方法調用的樹狀結構。如果進一步看，你會發現，IQueryable 或是 Queryable 都只是在提供一個自動構建表達式樹節點 (expression tree nodes) 的機制。當我們對 IQeuryable 使用 Where 方法時，它只是回傳一個新的 IQueryable，並且在進行調用的樹頂添加一個方法表達式樹節點。 Provider 作為真正的「提供者」，它負責原先所有 IQueryable 的執行方法。 IQueryProvider 簡介 public interface IQueryProvider { IQueryable CreateQuery(Expression expression); IQueryable\u0026lt;TElement\u0026gt; CreateQuery\u0026lt;TElement\u0026gt;(Expression expression); object Execute(Expression expression); TResult Execute\u0026lt;TResult\u0026gt;(Expression expression); } 當我們進一步觀察 IQueryProvider，會發現它事實上只有兩個操作：CreateQuery、Execute，只是各有一個泛型與非泛型的方法。一般我們會使用泛型的方法，因為它可以避免使用反射來建構實例，從而提高性能。\nCreateQuery 人如其名，它基於指定的表達樹建構 IQueryable 的實例。標準查詢運算子 Queryable 會使用這個方法來建構與 Provider 相關聯的新的 IQueryable。 需注意，使用者可以任意向 API 傳遞任何可能的表達樹，甚至不是合法的查詢，然而，它的回傳值必定要是 IQueryable。 Execute 是進入 Provider 的入口，用於實際執行查詢表達式。擁有一個明確的執行方法而不僅僅依賴於 IEnumerable.GetEnumerator() 是非常重要的，因為它允許執行時不一定要產生序列。比方說，myquery.Count() 回傳一個整數，該查詢的表達樹是調用一個 Count 方法並回傳整數，其它的聚合方法也是同樣的道理，都是即時的執行方法。 Query 實作 IQueryable 首先，我們從 IQueryable 開始，因為現在這個介面被分為兩個部分，所以我們可以只實現 IQueryable 一次，並在其它的 QueryProvider 中重複使用它。\npublic class Query\u0026lt;T\u0026gt; : IQueryable\u0026lt;T\u0026gt;, IQueryable, IEnumerable\u0026lt;T\u0026gt;, IEnumerable, IOrderedQueryable\u0026lt;T\u0026gt;, IOrderedQueryable { QueryProvider provider; Expression expression; public Query(QueryProvider provider) { if (provider == null) throw new ArgumentNullException(\u0026#34;provider\u0026#34;); this.provider = provider; this.expression = Expression.Constant(this); } public Query(QueryProvider provider, Expression expression) { if (provider == null) throw new ArgumentNullException(\u0026#34;provider\u0026#34;); if (expression == null) throw new ArgumentNullException(\u0026#34;expression\u0026#34;); if (!typeof(IQueryable\u0026lt;T\u0026gt;).IsAssignableFrom(expression.Type)) throw new ArgumentOutOfRangeException(\u0026#34;expression\u0026#34;); this.provider = provider; this.expression = expression; } Expression IQueryable.Expression { get { return this.expression; } } Type IQueryable.ElementType { get { return typeof(T); } } IQueryProvider IQueryable.Provider { get { return this.provider; } } public IEnumerator\u0026lt;T\u0026gt; GetEnumerator() { return ((IEnumerable\u0026lt;T\u0026gt;)this.provider.Execute(this.expression)).GetEnumerator(); } IEnumerator IEnumerable.GetEnumerator() { return ((IEnumerable)this.provider.Execute(this.expression)).GetEnumerator(); } public override string ToString() { return this.provider.GetQueryText(this.expression); } } 如你所見，上面的 Query 只用來保存一個 Expression 與一個 Provider。Provider才是真正核心的地方。\nQueryProvider 實作 IQueryProvider public abstract class QueryProvider : IQueryProvider { public QueryProvider() { } IQueryable\u0026lt;S\u0026gt; IQueryProvider.CreateQuery\u0026lt;S\u0026gt;(Expression expression) { return new Query\u0026lt;S\u0026gt;(this, expression); } IQueryable IQueryProvider.CreateQuery(Expression expression) { Type elementType = TypeManager.GetElementType(expression.Type); try { return (IQueryable)Activator.CreateInstance(typeof(Query\u0026lt;\u0026gt;).MakeGenericType(elementType), new object[] { this, expression }); } catch (Exception tie) { throw tie.InnerException; } } S IQueryProvider.Execute\u0026lt;S\u0026gt;(Expression expression) { return (S)this.Execute(expression); } object IQueryProvider.Execute(Expression expression) { return this.Execute(expression); } public abstract string GetQueryText(Expression expression); public abstract object Execute(Expression expression); } 我們先是用 QueryProvider 實作了 IQueryProvider 的基類別。這些 CreateQuery 方法創建了 Query\u0026lt;T\u0026gt; 的新實例，並將執行轉發到尚未實作的 Execute 方法。\n接下來我們可以將之視為樣板，只是為了開始建立一個 LINQ 的 IQueryable 的 provider。真正的執行將會發生在 Execute 的內部，屆時，provider 可以真正通過檢查表達樹來理解查詢的含義。\n[Helper] TypeManager TypeManager 用來處理非泛型的方法，檢查其型別。\ninternal static class TypeManager { internal static Type GetElementType(Type seqType) { Type? ienum = FindIEnumerable(seqType); if (ienum == null) return seqType; return ienum.GetGenericArguments()[0]; } private static Type? FindIEnumerable(Type seqType) { if (seqType == null || seqType == typeof(string)) return null; if (seqType.IsArray) return typeof(IEnumerable\u0026lt;\u0026gt;).MakeGenericType(seqType.GetElementType()); if (seqType.IsGenericType) { foreach (Type arg in seqType.GetGenericArguments()) { Type ienum = typeof(IEnumerable\u0026lt;\u0026gt;).MakeGenericType(arg); if (ienum.IsAssignableFrom(seqType)) return ienum; } } Type[] ifaces = seqType.GetInterfaces(); if (ifaces != null \u0026amp;\u0026amp; ifaces.Length \u0026gt; 0) { foreach (Type iface in ifaces) { Type? ienum = FindIEnumerable(iface); if (ienum != null) return ienum; } } if (seqType.BaseType != null \u0026amp;\u0026amp; seqType.BaseType != typeof(object) ) { return FindIEnumerable(seqType.BaseType); } return null; } } Where 和可重複使用的表達樹詢問器 (Expression tree visitor) 在建立好基類別 Query 與 QueryProvider 後，我們將繼續建立一個實際執行某些操作的 provider。Query Provider 實際上執行的是一小最被定義為表達樹的程式碼，而不是 IL。當然，它不需要傳統意義上的方式執行它，例如 LINQ to SQL 將查詢表達式轉換為 SQL，並將其發送到伺服器上執行。\n接下來的範例將會舉 LINQ to SQL 很相近，它會將查詢翻譯並執行到一個 ADO provider。在此，我們只打算處理 Where 這個操作，不會做其它更複雜的判斷。將來可能會對它進行擴展，但目前僅為了說明目的。\n要注意 provider 必須要做到兩件事：\n將查詢轉換成 SQL。 將執行命令的結果轉換成物件。 查詢翻譯器 (Query Translator) 查詢翻譯器將簡單地訪問表達樹中的每個節點，並使用 StringBuilder 將操作轉換成文本。為了說明方便，我們在這裡假設有個 ExpressionVisitor 類，為表達樹節點定義了基本的訪問者模式。\ninternal class QueryTranslator : ExpressionVisitor { StringBuilder sb; internal QueryTranslator() { } internal string Translate(Expression expression) { sb = new StringBuilder(); Visit(expression); return sb.ToString(); } private static Expression StripQuotes(Expression e) { while (e.NodeType == ExpressionType.Quote) { e = ((UnaryExpression)e).Operand; } return e; } protected override Expression VisitMethodCall(MethodCallExpression m) { if (m.Method.DeclaringType == typeof(Queryable) \u0026amp;\u0026amp; m.Method.Name == \u0026#34;Where\u0026#34;) { sb.Append(\u0026#34;Select * From (\u0026#34;); Visit(m.Arguments[0]); sb.Append(\u0026#34;) As T Where \u0026#34;); LambdaExpression lambda = (LambdaExpression)StripQuotes(m.Arguments[1]); Visit(lambda.Body); return m; } throw new NotSupportedException(string.Format(\u0026#34;The method \u0026#39;{0}\u0026#39; is not supported\u0026#34;, m.Method.Name)); } protected override Expression VisitUnary(UnaryExpression u) { switch (u.NodeType) { case ExpressionType.Not: sb.Append(\u0026#34; Not \u0026#34;); Visit(u.Operand); break; default: throw new NotSupportedException(string.Format(\u0026#34;The unary operator \u0026#39;{0}\u0026#39; is not supported\u0026#34;, u.NodeType)); } return u; } protected override Expression VisitBinary(BinaryExpression b) { sb.Append(\u0026#34;(\u0026#34;); Visit(b.Left); switch (b.NodeType) { case ExpressionType.Add: sb.Append(\u0026#34; And \u0026#34;); break; case ExpressionType.Or: sb.Append(\u0026#34; Or \u0026#34;); break; case ExpressionType.Equal: sb.Append(\u0026#34; = \u0026#34;); break; case ExpressionType.NotEqual: sb.Append(\u0026#34; \u0026lt;\u0026gt; \u0026#34;); break; case ExpressionType.LessThan: sb.Append(\u0026#34; \u0026lt; \u0026#34;); break; case ExpressionType.LessThanOrEqual: sb.Append(\u0026#34; \u0026lt;= \u0026#34;); break; case ExpressionType.GreaterThan: sb.Append(\u0026#34; \u0026gt; \u0026#34;); break; case ExpressionType.GreaterThanOrEqual: sb.Append(\u0026#34; \u0026gt;= \u0026#34;); break; default: throw new NotSupportedException(string.Format(\u0026#34;The binary operator \u0026#39;{0}\u0026#39; is not supported\u0026#34;, b.NodeType)); } Visit(b.Right); sb.Append(\u0026#34;)\u0026#34;); return b; } protected override Expression VisitConstant(ConstantExpression c) { IQueryable? q = c.Value as IQueryable; if (q != null) { sb.Append(\u0026#34;Select * From \u0026#34;); sb.Append(q.ElementType.Name); } else if (c.Value == null) { sb.Append(\u0026#34;Null\u0026#34;); } else { switch (Type.GetTypeCode(c.Value.GetType())) { case TypeCode.Boolean: sb.Append(((bool)c.Value) ? 1 : 0); break; case TypeCode.String: sb.Append(\u0026#34;\u0026#39;\u0026#34;); sb.Append(c.Value); sb.Append(\u0026#34;\u0026#39;\u0026#34;); break; case TypeCode.Object: throw new NotSupportedException(string.Format(\u0026#34;The constant for \u0026#39;{0}\u0026#39; is not supported\u0026#34;, c.Value)); default: sb.Append(c.Value); break; } } return c; } protected override Expression VisitMemberAccess(MemberExpression m) { if (m.Expression != null \u0026amp;\u0026amp; m.Expression.NodeType == ExpressionType.Parameter) { sb.Append(m.Member.Name); return m; } throw new NotSupportedException(string.Format(\u0026#34;The member \u0026#39;{0}\u0026#39; is not supported\u0026#34;, m.Member.Name)) } } 儘管我們只針對 Where 進行了實作，但仍然相當的複雜。我希望在表達樹中看到的是一個方法的調用，其中參數引用了資料源(source, arg[0])，與謂詞(predicate, arg[1])。參考 VisitMethodCall 方法，我們明確地處理了 Queryable.Where 方法，生成一個 \u0026quot;Select * From (\u0026quot; 的字串，然後遞迴訪問資料源後，加上了 ) As T Where，最後再訪問謂詞。這樣可以用嵌套的方式處理資料源中可能出現子查詢的可能。在不考慮其它操作子的情況下，我們可以很優雅的處理 Where 方法。在此表的別名是無關的，因為我們並無對它做任何引用，當然在一個完善的 provider，將有可能對它進行引用。\n這裡包含了一個 helper StripQuotes，它的作用是去除方法參數中的任何 ExpressionType.Quote 節點，以便取得純粹的 lambda 表達式。\nVisitUnary 和 VisitBinary 方法很直白，它們將一元與二元運算子翻譯成文本。\nVisitConstant，在我們的架構中，我們的源引用(table reference)其實就是 IQueryable 的根。如果有一個常數根作為 Query\u0026lt;T\u0026gt; 實例，那麼我們可以假設它代表源引用(子查詢)，所以我們可以用 \u0026quot;Select * From\u0026quot; 與查詢元素類型的名稱(ElementType.Name)，即表的名稱。至於其它的常數節點，就是簡單的實際常數，對文本需要以加上單引號。注意，在此並無處理 SQL injection，真正的 provider 需要處理這一部分。\n最後，VisitMemberAccess 假設所有的欄位或屬性存取都是指令文字中的欄位參考。在這裡省略了證明，並假設欄位或屬性的名稱與資料庫中的欄位名稱相符。\n給定一個 Product 類別，其欄位與 All_product 資料庫中的欄位名稱相符，此查詢轉譯器將生成以下形式的查詢：\nQuery\u0026lt;Product\u0026gt; products = ...; IQueryable\u0026lt;Product\u0026gt; q = products.Where(p =\u0026gt; p.Generation = \u0026#34;L22\u0026#34;); 對應的 SQL 語句：\nSelect * From ( Select * From Customers ) As T Where (Generation = \u0026#39;L22\u0026#39;) 物件閱讀器 (Object Reader) 物件閱讀器的工作是將 SQL 查詢的結果轉換為物件。這裡會建立一個簡單的類別，在建構子中會需要一個 DbDataReader，並且接受一個泛型類型 T 以繼承 IEnumerable\u0026lt;T\u0026gt;。實作的部分也沒有什麼花俏的，只能透過射將數據寫入類別的 fields 中，所以需要注意的只有 field 的名稱需要跟 reader 中的欄位名稱相符、類型也必須要相符。\ninternal class ObjectReader\u0026lt;T\u0026gt; : IEnumerable\u0026lt;T\u0026gt;, IEnumerable where T : class, new() { Enumerator? enumerator; public ObjectReader(DbDataReader reader) { enumerator = new Enumerator(reader); } public IEnumerator\u0026lt;T\u0026gt; GetEnumerator() { Enumerator? e = enumerator; if (e == null) throw new InvalidOperationException(\u0026#34;Cannot enumerate more than once\u0026#34;); enumerator = null; return e; } IEnumerator IEnumerable.GetEnumerator() { return GetEnumerator(); } class Enumerator : IEnumerator\u0026lt;T\u0026gt;, IEnumerator, IDisposable { DbDataReader reader; FieldInfo[] fields; int[] fieldLookup; T current; internal Enumerator(DbDataReader reader) { this.reader = reader; this.fields = typeof(T).GetFields(); } public T Current =\u0026gt; current; object IEnumerator.Current =\u0026gt; current; public bool MoveNext() { if (reader.Read()) { if (fieldLookup == null) { InitFieldLookup(); } T instance = new T(); for (int i = 0, n = fields.Length; i \u0026lt; n; i++) { int index = fieldLookup[i]; if (index \u0026gt;= 0) { FieldInfo fi = fields[i]; if (reader.IsDBNull(index)) { fi.SetValue(instance, null); } else { fi.SetValue(instance, reader.GetValue(index)); } } } current = instance; return true; } return false; } public void Reset() { } public void Dispose() { reader.Dispose(); } private void InitFieldLookup() { var map = new Dictionary\u0026lt;string, int\u0026gt;(StringComparer.InvariantCultureIgnoreCase); for (int i = 0, n = reader.FieldCount; i \u0026lt; n; i++) { map.Add(reader.GetName(i), i); } fieldLookup = new int[fields.Length]; for (int i = 0, n = fields.Length; i \u0026lt; n; i++) { if (map.TryGetValue(fields[i].Name, out int index)) { fieldLookup[i] = index; } else { fieldLookup[i] = -1; } } } } } ObjectReader 為每一行由 DbDataReader 讀取的類型 T 創建一個新的實例。它使用反射 API FieldInfo.SetValue 為對象物件的每個 field 分配值。當 ObjectReader 首次創建時，它實例化嵌套的 Enumerator 類的實例。當調用 GetEnumerator 方法時，將分發此枚舉器。由於 DataReader 無法重置並再次執行，因此枚舉器只能分發一次。如果第二次調用 GetEnumerator，則會拋出異常。\nObjectReader 在 field 上的排序是寬鬆的。由於 QueryTranslator 使用了 Select * 建構查詢，這是必須的，否則程式無法知道結果中哪個欄位會首先出現。注意，一般程式中不建議使用 Select *。為了允許不同欄的順序，在讀取 DataReader 的第一行時，精確的順序會在執行期被定義。InitFieldLookup 方法構建了一個從欄位名稱對欄位索引對映射，並組裝了一個查找表 fieldLookup，用於將物件的 fields 與索引進行映射。\n提供者 (Provider) 現在我們已經有了 IQueryable 與 QueryProvider 的基礎建設，要將它們結合在一起製作一個實際的 IQueryable LINQ Provider 就很容易了。\npublic class DbQueryProvider : QueryProvider { private readonly DbConnection connection; public DbQueryProvider(DbConnection connection) { this.connection = connection; } public override string GetQueryText(Expression expression) { return Translate(expression); } public override object Execute(Expression expression) { DbCommand cmd = connection.CreateCommand(); cmd.CommandText = Translate(expression); DbDataReader reader = cmd.ExecuteReader(); Type elementType = TypeManager.GetElementType(expression.Type); return Activator.CreateInstance( typeof(ObjectReader\u0026lt;\u0026gt;).MakeGenericType(elementType), BindingFlags.Instance | BindingFlags.NonPublic, null, new object[] { reader }, null); } private string Translate(Expression expression) { return new QueryTranslator().Translate(expression); } } Try it out 現在有了 provider，我們可以按照 LINQ to SQL 模型進行操作。\npublic class Customers { public string CustomerId; public string ContactName; public string Phone; public string City; public string Country; } public class Orders { public int OrderId; public string CustomerId; public DateTime OrderDate; } public class Northwind { public Query\u0026lt;Customers\u0026gt; Customers; public Query\u0026lt;Orders\u0026gt; Orders; public Northwind(DbConnection connection) { QueryProvider provider = new DbQueryProvider(connection); Customers = new Query\u0026lt;Customers\u0026gt;(provider); Orders = new Query\u0026lt;Orders\u0026gt;(provider); } } public class Program { public static void Main(string[] args) { string connstr = @\u0026#34;...\u0026#34;; using (var conn = new SqlConnection(connstr)) { conn.Open(); Northwind db = new Northwind(conn); IQueryable\u0026lt;Customers\u0026gt; query = db.Customers.Where(c =\u0026gt; c.City == \u0026#34;London\u0026#34;); Console.WriteLine(\u0026#34;Query:\\n{0}\\n\u0026#34;, query); var list = query.ToList(); foreach (var item in list) { Console.WriteLine(\u0026#34;Name: {0}\u0026#34;, item.ContactName); } Console.ReadLine(); } } } [Helper] 表達式訪問者 (Expression Visitor) 這個表達式訪問者是一種訪問者模式的呈現。在這個變體中，只有一個訪問者類別，將調用分派到對應於不同節點類型的特定 VisitXXX 方法的一般訪問函數。注意，並非每個節點類型都有自己的方法，例如所有二元運算子都在一個 VisitBinary 方法中處理。節點本身不直接參與訪問的過程，它們只被視為數據。這樣做的原因是訪問者的數量實際上是開放的。因此，訪問的語義並未耦合到節點類別中，而是完全由訪問者控制。節點的默認訪問行為已經內置在基類的 VisitXXX 版本中了。\n另一個變體是所有 VisitXXX 方法都返回一個節點。樹節點是不可變的，為了改變樹，必須要構建一個新的樹。如果任何子樹發生變化，默認的 VisitXXX 方法將構建一個新的節點。如果沒有進行任何更改，則返回相同的節點。這樣，如果在樹的深處進行了一個更改，則整個樹將自動重新構建。\npublic abstract class ExpressionVisitor { protected ExpressionVisitor() { } protected virtual Expression Visit(Expression exp) { if (exp == null) return exp; switch (exp.NodeType) { case ExpressionType.Negate: case ExpressionType.NegateChecked: case ExpressionType.Not: case ExpressionType.Convert: case ExpressionType.ConvertChecked: case ExpressionType.ArrayLength: case ExpressionType.Quote: case ExpressionType.TypeAs: return this.VisitUnary((UnaryExpression)exp); case ExpressionType.Add: case ExpressionType.AddChecked: case ExpressionType.Subtract: case ExpressionType.SubtractChecked: case ExpressionType.Multiply: case ExpressionType.MultiplyChecked: case ExpressionType.Divide: case ExpressionType.Modulo: case ExpressionType.And: case ExpressionType.AndAlso: case ExpressionType.Or: case ExpressionType.OrElse: case ExpressionType.LessThan: case ExpressionType.LessThanOrEqual: case ExpressionType.GreaterThan: case ExpressionType.GreaterThanOrEqual: case ExpressionType.Equal: case ExpressionType.NotEqual: case ExpressionType.Coalesce: case ExpressionType.ArrayIndex: case ExpressionType.RightShift: case ExpressionType.LeftShift: case ExpressionType.ExclusiveOr: return this.VisitBinary((BinaryExpression)exp); case ExpressionType.TypeIs: return this.VisitTypeIs((TypeBinaryExpression)exp); case ExpressionType.Conditional: return this.VisitConditional((ConditionalExpression)exp); case ExpressionType.Constant: return this.VisitConstant((ConstantExpression)exp); case ExpressionType.Parameter: return this.VisitParameter((ParameterExpression)exp); case ExpressionType.MemberAccess: return this.VisitMemberAccess((MemberExpression)exp); case ExpressionType.Call: return this.VisitMethodCall((MethodCallExpression)exp); case ExpressionType.Lambda: return this.VisitLambda((LambdaExpression)exp); case ExpressionType.New: return this.VisitNew((NewExpression)exp); case ExpressionType.NewArrayInit: case ExpressionType.NewArrayBounds: return this.VisitNewArray((NewArrayExpression)exp); case ExpressionType.Invoke: return this.VisitInvocation((InvocationExpression)exp); case ExpressionType.MemberInit: return this.VisitMemberInit((MemberInitExpression)exp); case ExpressionType.ListInit: return this.VisitListInit((ListInitExpression)exp); default: throw new Exception(string.Format(\u0026#34;Unhandled expression type: \u0026#39;{0}\u0026#39;\u0026#34;, exp.NodeType)); } } protected virtual MemberBinding VisitBinding(MemberBinding binding) { switch (binding.BindingType) { case MemberBindingType.Assignment: return this.VisitMemberAssignment((MemberAssignment)binding); case MemberBindingType.MemberBinding: return this.VisitMemberMemberBinding((MemberMemberBinding)binding); case MemberBindingType.ListBinding: return this.VisitMemberListBinding((MemberListBinding)binding); default: throw new Exception(string.Format(\u0026#34;Unhandled binding type \u0026#39;{0}\u0026#39;\u0026#34;, binding.BindingType)); } } protected virtual ElementInit VisitElementInitializer(ElementInit initializer) { ReadOnlyCollection\u0026lt;Expression\u0026gt; arguments = this.VisitExpressionList(initializer.Arguments); if (arguments != initializer.Arguments) { return Expression.ElementInit(initializer.AddMethod, arguments); } return initializer; } protected virtual Expression VisitUnary(UnaryExpression u) { Expression operand = this.Visit(u.Operand); if (operand != u.Operand) { return Expression.MakeUnary(u.NodeType, operand, u.Type, u.Method); } return u; } protected virtual Expression VisitBinary(BinaryExpression b) { Expression left = this.Visit(b.Left); Expression right = this.Visit(b.Right); Expression conversion = this.Visit(b.Conversion); if (left != b.Left || right != b.Right || conversion != b.Conversion) { if (b.NodeType == ExpressionType.Coalesce \u0026amp;\u0026amp; b.Conversion != null) return Expression.Coalesce(left, right, conversion as LambdaExpression); else return Expression.MakeBinary(b.NodeType, left, right, b.IsLiftedToNull, b.Method); } return b; } protected virtual Expression VisitTypeIs(TypeBinaryExpression b) { Expression expr = this.Visit(b.Expression); if (expr != b.Expression) { return Expression.TypeIs(expr, b.TypeOperand); } return b; } protected virtual Expression VisitConstant(ConstantExpression c) { return c; } protected virtual Expression VisitConditional(ConditionalExpression c) { Expression test = this.Visit(c.Test); Expression ifTrue = this.Visit(c.IfTrue); Expression ifFalse = this.Visit(c.IfFalse); if (test != c.Test || ifTrue != c.IfTrue || ifFalse != c.IfFalse) { return Expression.Condition(test, ifTrue, ifFalse); } return c; } protected virtual Expression VisitParameter(ParameterExpression p) { return p; } protected virtual Expression VisitMemberAccess(MemberExpression m) { Expression exp = this.Visit(m.Expression); if (exp != m.Expression) { return Expression.MakeMemberAccess(exp, m.Member); } return m; } protected virtual Expression VisitMethodCall(MethodCallExpression m) { Expression obj = this.Visit(m.Object); IEnumerable\u0026lt;Expression\u0026gt; args = this.VisitExpressionList(m.Arguments); if (obj != m.Object || args != m.Arguments) { return Expression.Call(obj, m.Method, args); } return m; } protected virtual ReadOnlyCollection\u0026lt;Expression\u0026gt; VisitExpressionList(ReadOnlyCollection\u0026lt;Expression\u0026gt; original) { List\u0026lt;Expression\u0026gt; list = null; for (int i = 0, n = original.Count; i \u0026lt; n; i++) { Expression p = this.Visit(original[i]); if (list != null) { list.Add(p); } else if (p != original[i]) { list = new List\u0026lt;Expression\u0026gt;(n); for (int j = 0; j \u0026lt; i; j++) { list.Add(original[j]); } list.Add(p); } } if (list != null) { return list.AsReadOnly(); } return original; } protected virtual MemberAssignment VisitMemberAssignment(MemberAssignment assignment) { Expression e = this.Visit(assignment.Expression); if (e != assignment.Expression) { return Expression.Bind(assignment.Member, e); } return assignment; } protected virtual MemberMemberBinding VisitMemberMemberBinding(MemberMemberBinding binding) { IEnumerable\u0026lt;MemberBinding\u0026gt; bindings = this.VisitBindingList(binding.Bindings); if (bindings != binding.Bindings) { return Expression.MemberBind(binding.Member, bindings); } return binding; } protected virtual MemberListBinding VisitMemberListBinding(MemberListBinding binding) { IEnumerable\u0026lt;ElementInit\u0026gt; initializers = this.VisitElementInitializerList(binding.Initializers); if (initializers != binding.Initializers) { return Expression.ListBind(binding.Member, initializers); } return binding; } protected virtual IEnumerable\u0026lt;MemberBinding\u0026gt; VisitBindingList(ReadOnlyCollection\u0026lt;MemberBinding\u0026gt; original) { List\u0026lt;MemberBinding\u0026gt; list = null; for (int i = 0, n = original.Count; i \u0026lt; n; i++) { MemberBinding b = this.VisitBinding(original[i]); if (list != null) { list.Add(b); } else if (b != original[i]) { list = new List\u0026lt;MemberBinding\u0026gt;(n); for (int j = 0; j \u0026lt; i; j++) { list.Add(original[j]); } list.Add(b); } } if (list != null) return list; return original; } protected virtual IEnumerable\u0026lt;ElementInit\u0026gt; VisitElementInitializerList(ReadOnlyCollection\u0026lt;ElementInit\u0026gt; original) { List\u0026lt;ElementInit\u0026gt; list = null; for (int i = 0, n = original.Count; i \u0026lt; n; i++) { ElementInit init = this.VisitElementInitializer(original[i]); if (list != null) { list.Add(init); } else if (init != original[i]) { list = new List\u0026lt;ElementInit\u0026gt;(n); for (int j = 0; j \u0026lt; i; j++) { list.Add(original[j]); } list.Add(init); } } if (list != null) return list; return original; } protected virtual Expression VisitLambda(LambdaExpression lambda) { Expression body = this.Visit(lambda.Body); if (body != lambda.Body) { return Expression.Lambda(lambda.Type, body, lambda.Parameters); } return lambda; } protected virtual NewExpression VisitNew(NewExpression nex) { IEnumerable\u0026lt;Expression\u0026gt; args = this.VisitExpressionList(nex.Arguments); if (args != nex.Arguments) { if (nex.Members != null) return Expression.New(nex.Constructor, args, nex.Members); else return Expression.New(nex.Constructor, args); } return nex; } protected virtual Expression VisitMemberInit(MemberInitExpression init) { NewExpression n = this.VisitNew(init.NewExpression); IEnumerable\u0026lt;MemberBinding\u0026gt; bindings = this.VisitBindingList(init.Bindings); if (n != init.NewExpression || bindings != init.Bindings) { return Expression.MemberInit(n, bindings); } return init; } protected virtual Expression VisitListInit(ListInitExpression init) { NewExpression n = this.VisitNew(init.NewExpression); IEnumerable\u0026lt;ElementInit\u0026gt; initializers = this.VisitElementInitializerList(init.Initializers); if (n != init.NewExpression || initializers != init.Initializers) { return Expression.ListInit(n, initializers); } return init; } protected virtual Expression VisitNewArray(NewArrayExpression na) { IEnumerable\u0026lt;Expression\u0026gt; exprs = this.VisitExpressionList(na.Expressions); if (exprs != na.Expressions) { if (na.NodeType == ExpressionType.NewArrayInit) { return Expression.NewArrayInit(na.Type.GetElementType(), exprs); } else { return Expression.NewArrayBounds(na.Type.GetElementType(), exprs); } } return na; } protected virtual Expression VisitInvocation(InvocationExpression iv) { IEnumerable\u0026lt;Expression\u0026gt; args = this.VisitExpressionList(iv.Arguments); Expression expr = this.Visit(iv.Expression); if (args != iv.Arguments || expr != iv.Expression) { return Expression.Invoke(expr, args); } return iv; } } 本地變量參考 (Local Variable References) 至此，我們已經建立了一個 provider，但它只能操作一些查詢運算子和一些次要的運算子，例如比較運算子等等。然後，真正的 provider 不得不處理更多運算子與它們之間的複雜操作。\n翻譯本地變數參考 (Translate Local Variable References) 假如我們需要用參考本地變數的方式來進行參詢，例如：\nstring city = \u0026#34;London\u0026#34;; var query = db.Customers.Where(c =\u0026gt; c.City == city); 在目前的設計會丟出一個異常: The member 'city' is not supported，city 應該是其中一個欄位，不應是 member，所以我們進一步看向表達式樹的 ToString() 所丟出的結果：\nSelect * From Customers.Where(c =\u0026gt; return (c.City = value(Sample.Program+\u0026lt;\u0026gt;c__DisplayClass0).city)) 原來 C# 編譯器已經創建了一個類來保存在 lambda 表達式中被引用的局部變數了。當局部變數在匿名方法中被引用時，它也會做同樣的事情。\n無論如何，如果我們想讓 provider 與本地變數的參考一起工作，我們就必須處理它。也許我們可以只識別這些編譯器生成的類型的 field 引用，那我們該如何識別編譯器生成的類型？根據名稱嗎？如果 C# 編譯器改變了它們命名方式怎麼辦？如果另一種語言使用了不同的方案呢？本地變數是唯一的情況嗎？那麼在範圍內引用成員變數呢？它們也不會被編碼成樹中的值。最好的情況是，它們是一個常數節點，引用該成員所在的實例，或是一個 MemberAccess 的節點，用於訪問該實例上的成員。我們能否只識別對常數節點的任何成員訪問，並使用反射手動評估它？也許可以，但如果編譯器生成了更複雜的東西呢？ 我們要做的是在整個樹中識別可以立即評估並轉換值的子樹，如果我們能做到這一點，那麼翻譯器的其餘部分只需要處理這些值。\npublic static Expression PartialEval(Expression expression, Func\u0026lt;Expression, bool\u0026gt; fnCanBeEvaluated) { return new SubtreeEvaluator(new Nominator(fnCanBeEvaluated).Nominate(expression)).Eval(expression); } public static Expression PartialEval(Expression expression) { return new PartialEval(expression, Evaluator.CanBeEvaluatedLocally); } public static bool CanBeEvaluatedLocally(Expression expression) { return expression.NodeType != ExpressionType.Parameter; } public class SubtreeEvaluator : ExpressionVisitor { HashSet\u0026lt;Expression\u0026gt; candidates; internal SubtreeEvaluator(HashSet\u0026lt;Expression\u0026gt; candidates) { this.candidates = candidates; } internal Expression Eval(Expression expression) { return Visit(expression); } protected override Expression Visit(Expression expression) { if (expression == null) return null; if (candidates.Contains(expression)) return Evaluate(expression); return base.Visit(expression); } private Expression Evaluate(Expression expression) { if (expression.NodeType == ExpressionType.Constant) return expression; LambdaExpression lambda = Expression.Lambda(expression); Delegate fn = lambda.Compile(); return Expression.Constant(fn.DynamicInvoke(null), expression.type); } } public class Nominator : ExpressionVisitor { Func\u0026lt;Expression, bool\u0026gt; fnCanBeEvaluated; HashSet\u0026lt;Expression\u0026gt; candidates; bool cannotBeEvaluated; internal Nominator(Func\u0026lt;Expression, bool\u0026gt; fnCanBeEvaluated) { this.fnCanBeEvaluated = fnCanBeEvaluated; } internal HashSet\u0026lt;Expression\u0026gt; Nominate(Expression expression) { this.candidates = new HashSet\u0026lt;Expression\u0026gt;(); this.Visit(expression); return this.candidates; } protected override Expression Visit(Expression expression) { if (expression != null) { bool saveCannotBeEvaluated = this.cannotBeEvaluated; this.cannotBeEvaluated = false; base.Visit(expression); if (!this.cannotBeEvaluated) { if (this.fnCanBeEvaluated(expression)) { this.candidates.Add(expression); } else { this.cannotBeEvaluated = true; } } this.cannotBeEvaluated |= saveCannotBeEvaluated; } return expression; } } Evaluator 類公開了一個靜態方法 ParitalEval，讓我們可以呼叫此方法來評估表達式中的子樹，只留下具有實際值的常數節點。\n大部分的程式碼是用來劃分可以獨立求值的最大小樹。實際評估的過程非常簡單，因為這些子樹可以使用 LambdaExpression.Compile 進行編譯，轉換為委派並進行調用。我們可以在 SubtreeVisitor.Evaluate 方法中觀察這一過程的發生。\n確定最大子樹的過程分為兩個步驟，首先，在 Nominator 類中進行自底向上的遍歷，確定可能獨立求值的節點，然後在 SubtreeEvaluator 中進行自頂向下的遍歷，找到被標記的子樹的最高節點。\nNominator 由我們的定義的函式作參數化，該函數可以使用任何觸發式方法來確定某個給定節點是否可以獨立求值。默認的觸發鉽方法是除了 ExpressionType.Parameter 之外的任何節點都可以獨立求值。除此之外，還有一個通用規則，即如果子節點無法在本地求值，則父節點也無法求值。因此，參數上游的任何節點都無法求值並將保留在樹中。其它所有節點將被求值並替換成常數。\n現在有了這個類別，我們就可以在翻譯表達樹時隨時使用它。這個操作已經被分解到 DbQueryProvider 類別的 Translate 方法中了。\npublic class DbQueryProvider : QueryProvider { private string Translate(Expression expression) { expression = Evaluator.PartialEval(expression); return new QueryTranslator().Translate(expression); } } Select 我們已經有了一個粗糙的 LINQ provider 了，可以把 Where 方法轉成 SQL。可以執行查詢並將結果轉成我的物件。但我們想要做的是一個可以完整運作的 ORM，首先我們可以試著將 provider 加入 Select。\n相比 Select，翻譯 Where 方法容易許多。我指的是 LINQ 的 Select 操作，我們可以將數據轉換成任何我們想要的形式。LINQ 的 Select 運算子的選擇器函數可以是任何用戶能夠想象的轉換表達式。這裡可能會有物件建構子、初始化程式、條件語句、二元運算子、方法調用等等。我們該如何將這些轉換成 SQL，更不用說在返回的物件中重現這種結構？\n事實上，當用戶撰寫好查詢時，它已經寫好程式碼了。\n選擇器函數是建構結果的程式碼，如果這是物件的 LINQ 而不是 IQueryable 提供的程式，選擇器函數將是運行以產生結果的程式碼，這有什麼不同呢？\n如果選擇器函數是實際程式碼而不是表達樹，那它只需要一個函數將一個物件轉換成另一個物件。 我們可能可以將先前的 ObjectReader 與基本上是 LINQ to Objects 版本的 Select 結合起來，將檢索到的所有數據結果轉換為不同形狀。然而，這將是對時間與空間結構的嚴重濫用。我們不應該檢索所有數據，我們只應該帶回需要的二元制結果(bits)。\npublic abstract class ProjectionRow { public abstract object GetValue(int index); } 先做一個簡單的抽象基類，代表一行數據。如果我們透過選擇器表達式通過調用 GetValue 從這個對象中提取數據，然後使用 Expression.Convert 操作。\nColumnProjector 實作 internal class ColumnProjector : ExpressionVisitor { StringBuilder sb; int iColumn; ParameterExpression row; static MethodInfo miGetValue; internal ColumnProjector() { if (miGetValue == null) miGetValue = typeof(ProjectionRow).GetMethod(\u0026#34;GetValue\u0026#34;); } internal ColumnProjection ProjectColumns(Expression expression, ParameterExpression row) { sb = new StringBuilder(); this.row = row; Expression selector = this.Visit(expression); return new ColumnProjection { Columns = sb.ToString(), Selector = selector }; } protected override Expression VisitMemberAccess(MemberExpression m) { if (m.Expression != null \u0026amp;\u0026amp; m.Expression.NodeType == ExpressionType.Parameter) { if (sb.Length \u0026gt; 0) { sb.Append(\u0026#34;, \u0026#34;); } sb.Append(m.Member.Name); return Expression.Convert(Expression.Call(row, miGetValue, Expression.Constant(iColumn++)), m.Type); } return base.VisitMemberAccess(m); } } ColumnProjector 是一個訪問者，它遍歷表達式樹，將欄參考轉換成可以通過調用 GetValue 方法來訪問的個別數據表達式。這個方法來一個叫作 row 的 ParameterExpression，它的類型被定義為 ProjectionRow 抽象類。我不僅正在重建這個選擇器表達式，最終還要將它轉換成一個以 ProjectionRow 為參數的 lambda 表達式主體。這樣我就可以通過調用 LambdaExpression.Compile 方法將 LambdaExpression 轉換為委託。\n注意，訪問者還建立了一個表示 SQL select 子句的字串。現在每當我們在查詢表達式中看到 Queryable.Select，我們都可以將選擇器轉換為同時產生結果的函數，以及下 SQL 需要的 select 子句。\n改寫 QueryTranslator 以下是修改過後的 QueryTranslator：\ninternal class QueryTranslator : ExpressionVisitor { StringBuilder sb; ParameterExpression row; ColumnProjection projection; internal TranslateResult Translate(Expression expression) { sb = new StringBuilder(); row = Expression.Parameter(typeof(ProjectionRow), \u0026#34;row\u0026#34;); Visit(expression); return new TranslateResult { CommandText = sb.ToString(), projector = projection != null ? Expression.Lambda(projection.Selector, row) : null }; } protected override Expression VisitMethodCall(MethodCallExpression m) { if (m.Method.DeclaringType == typeof(Queryable)) { if (m.Method.Name == \u0026#34;Where\u0026#34;) { sb.Append(\u0026#34;Select * From (\u0026#34;); Visit(m.Arguments[0]); sb.Append(\u0026#34;) As T Where \u0026#34;); LambdaExpression lambda = (LambdaExpression)StripQuotes(m.Arguments[1]); Visit(lambda.Body); return m; } else if (m.Method.Name == \u0026#34;Select\u0026#34;) { LambdaExpression lambda = (LambdaExpression)StripQuotes(m.Arguments[1]); ColumnProjection proj = new ColumnProjector().ProjectColumns(lambda.Body, row); sb.Append(\u0026#34;Select \u0026#34;); sb.Append(proj.Columns); sb.Append(\u0026#34; From (\u0026#34;); Visit(m.Arguments[0]); sb.Append(\u0026#34;) As T \u0026#34;); projection = proj; return m; } } throw new NotSupportedException(string.Format(\u0026#34;The method \u0026#39;{0}\u0026#39; is not supported\u0026#34;, m.Method.Name)); } } 其中 TranslateResult 裝載要下的 SQL 字串與 lambda 表達式。\ninternal class TranslateResult { internal string CommandText; internal LambdaExpression projector; } 現在 QueryTranslator 處理 Select 方法，就像 Where 方法一樣建構 SQL Select 語句。然而，它還記住了最後一個 ColumnProjection(調用 ProjectColumns 的結果)，並將新重構的選擇器作為 LambdaExpression 反回到 TranslateResult 物件中。\n現在我們所需要的是一個能夠根據這個 LambdaExpression 工作的 ObjectReader，而不僅僅是建構一個物件。\n改寫 Projection Reader Projection Reader 可以改寫成：\ninternal class ProjectionReader\u0026lt;T\u0026gt; : IEnumerable\u0026lt;T\u0026gt;, IEnumerable { Enumerator\u0026lt;T\u0026gt; enumerator; internal ProjectionReader(DbDataReader reader, Func\u0026lt;ProjectionRow, T\u0026gt; projector) { enumerator = new Enumerator\u0026lt;T\u0026gt;(reader, projector); } public IEnumerator\u0026lt;T\u0026gt; GetEnumerator() { Enumerator\u0026lt;T\u0026gt; e = enumerator; if (e == null) throw new InvalidOperationException(\u0026#34;Cannot enumerate more than once\u0026#34;); enumerator = null; return e; } IEnumerator IEnumerable.GetEnumerator() { return GetEnumerator(); } } 其中，Enumerator 的實作：\ninternal class Enumerator\u0026lt;T\u0026gt; : ProjectionRow, IEnumerator\u0026lt;T\u0026gt;, IEnumerator, IDisposable { DbDataReader reader; T current; Func\u0026lt;ProjectionRow, T\u0026gt; projector; internal Enumerator(DbDataReader reader, Func\u0026lt;ProjectionRow, T\u0026gt; projector) { this.reader = reader; this.projector = projector; } public override object GetValue(int index) { if (index \u0026gt;= 0) { if (reader.IsDBNull(index)) { return null; } else { return reader.GetValue(index); } } throw new IndexOutOfRangeException(); } public T Current { get { return current; } } object IEnumerator.Current { get { return current; } } public bool MoveNext() { if (reader.Read()) { current = projector(this); return true; } return false; } public void Reset() { } public void Dispose() { reader.Dispose(); } } ProjectionReader 類別與 ObjectReader 類別幾乎相同，唯一的差異在於缺少根據欄位建構物件的邏輯。取而代之的是對這個新的 projector 委派的呼叫。這個想法是，將我們可以重建的選擇器表達式中獲得完全相同的委派。\n所以，我們重新建立了選擇器表達式，以引用一個類型為 ProjectionRow 的參數。現在我們可以看到 ProjectionReader 內部的 Enumerator 類別實現了這個 ProjectionRow。它是唯一可以引用 DbDataReader 的物件，這也讓我們在調用時能夠輕鬆地將 this 傳遞給委派。\n改寫 DbQueryProvider 有了這些，我們可以構建新的 provider：\npublic class DbQueryProvider : QueryProvider { private readonly DbConnection connection; public DbQueryProvider(DbConnection connection) { this.connection = connection; } public override string GetQueryText(Expression expression) { return Translate(expression).CommandText; } public override object Execute(Expression expression) { TranslateResult result = Translate(expression); DbCommand cmd = connection.CreateCommand(); cmd.CommandText = result.CommandText; DbDataReader reader = cmd.ExecuteReader(); Type elementType = TypeManager.GetElementType(expression.Type); if (result.projector != null) { Delegate projector = result.projector.Compile(); return Activator.CreateInstance( typeof(ProjectionReader\u0026lt;\u0026gt;).MakeGenericType(elementType), BindingFlags.Instance | BindingFlags.NonPublic, null, new object[] { reader, projector }, null); } return Activator.CreateInstance( typeof(ObjectReader\u0026lt;\u0026gt;).MakeGenericType(elementType), BindingFlags.Instance | BindingFlags.NonPublic, null, new object[] { reader }, null); } private TranslateResult Translate(Expression expression) { expression = Evaluator.PartialEval(expression); return new QueryTranslator().Translate(expression); } } 調用 Translate 方法會返回我們所需的一切。我們只需要通過調用 Compile 將 LambdaExpression 轉換成委託。注意，我們仍然需要保留舊的 ObjectReader。這只是為了防止查詢從未出來 Select 的情況。\nstring city = \u0026#34;London\u0026#34;; var query = db.Customers .Where(c =\u0026gt; c.City == city) .Select(c =\u0026gt; new { Name = c.ContactName, Phone = c.Phone }); 現在上面的查詢語句已經可以執行了。以下是產生的結果：\nSelect ContactName, Phone From ( Select * From ( Select * From Customers ) As T Where ( City = \u0026#39;London\u0026#39; ) ) As T 改進欄綁定(column binding) 我們已經構建了一個可以工作的 LINQ IQueryable provider，它針對 ADO 和 SQL，並且到目前為止已經能夠翻譯 Queryable.Where 和 Queryable.Select 標準查詢運算子。然後還存在很大的缺失，不只是缺少了運算子如 OrderBy 與 Join，而是更大的概念性錯誤。\n嘗試重新調換 .Where 與 .Select 的順序：\nvar query = db.Customers.Select(c =\u0026gt; new { Name = c.ContactName, Location = c.City }).Where(x =\u0026gt; x.Location == city); 以下是目前的 provider 轉換出來的 SQL：\nSelect * From ( Select ContactName, City From ( Select * From Customers ) As T ) As T Where ( Location = \u0026#39;London\u0026#39; ) 上面的 SQL 在執行時，會拋出異常，Invalid column name 'Location'，我們將成員訪問視為欄位引用過於簡化致使問題的產生。子樹中唯的的成員訪問不一定與欄位名稱匹配，所以我們需要其它的方法來改變欄位名以匹配，或是找到其它處理成員訪問的方法。\nprovider 要做的最終目的，其實只是將查詢表達式轉換成文字。文字只是 SQL 的一種表現形式，但對程式邏輯而言並不是一種好的表達方式，如果我們可以將 SQL 抽象化，那我們就能處理更複雜的轉換。\n最適合操作的數據結構當然是語義 SQL 樹 (semantic SQL tree)，理想狀況下，我們會有一個完全獨立的 SQL 樹定義，可以將 LINQ 查詢表達式轉換成樹，這個理想的 SQL 樹的定義與 LINQ 樹有很多重疊之處，所以我們可以透過「教導」 LINQ 表達式樹有關 SQL 的知識，為此，我們需要新的表達式節點類型：\n自定義的 DbExpressionType internal enum DbExpressionType { Table = 1000, // 確保不與其它 ExpressionType 重覆 Column, Select, Projection } 接著創建各自的 Expression 繼承類別，與供 SelectExpression 使用的 ColumnDeclaration：\nTableExpression 實作 internal class TableExpression : Expression { string alias; string name; internal TableExpression(Type type, string alias, string name) : base((ExpressionType)DbExpressionType.Table, type) { this.alias = alias; this.name = name; } internal string Alias =\u0026gt; alias; internal string Name =\u0026gt; name; } ColumnExpression 實作 internal class ColumnExpression : Expression { string alias; string name; int ordinal; internal ColumnExpression(Type type, string alias, string name, int ordinal) : base((ExpressionType)DbExpressionType.Column, type) { this.alias = alias; this.name = name; this.ordinal = ordinal; } internal string Alias =\u0026gt; alias; internal string Name =\u0026gt; name; internal int Ordinal =\u0026gt; ordinal; } ColumnDeclaration 實作 internal class ColumnDeclaration { string name; Expression expression; internal ColumnDeclaration(string name, Expression expression) { this.name = name; this.expression = expression; } internal string Name =\u0026gt; name; internal Expression Expression =\u0026gt; expression; } SelectExpression 實作 internal class SelectExpression : Expression { string alias; ReadOnlyCollection\u0026lt;ColumnDeclaration\u0026gt; columns; Expression from; Expression where; internal SelectExpression(Type type, string alias, IEnumerable\u0026lt;ColumnDeclaration\u0026gt; columns, Expression from, Expression where) : base((ExpressionType)DbExpressionType.Select, type) { this.alias = alias; this.columns = columns as ReadOnlyCollection\u0026lt;ColumnDeclaration\u0026gt;; if (this.columns == null) { this.columns = new List\u0026lt;ColumnDeclaration\u0026gt;(columns).AsReadOnly(); } this.from = from; this.where = where; } internal string Alias =\u0026gt; alias; internal ReadOnlyCollection\u0026lt;ColumnDeclaration\u0026gt; Columns =\u0026gt; columns; internal Expression From =\u0026gt; from; internal Expression Where =\u0026gt; where; } ProjectionExpression 實作 internal class ProjectionExpression :Expression { SelectExpression source; Expression projector; internal ProjectionExpression(SelectExpression source, Expression projector) : base((ExpressionType)DbExpressionType.Projection, projector.Type) { this.source = source; this.projector = projector; } internal SelectExpression Source =\u0026gt; source; internal Expression Projector =\u0026gt; projector; } 我們在目前的 LINQ 表達式樹中真正需要添加的 SQL 部分只有以下幾個概念：\nSQL Select 查詢，它可以生成一個或多個欄 對欄的引用 對表的引用 通過欄引用重新組裝物件的投影 透過自定義 DbExpressionType 的 enum 類型，它擴充了 ExpressionType，通過選擇一個足夠大的起始值(table = 1000)，避免與其它定義發生衝突。這做為一個無法繼承 enum 類別時，另闢的途徑。\n每個新的表達式節點都遵循由 LINQ 表達式設置的相同配置，只是現在它們模擬的是 SQL 概念而不是 CLR 概念。注意 SelectExpression 包含了一組欄的集合、from 表達式與 where 表達式。這是因為這個表達式節點的目的是要匹配一個合法的 SQL Select 語句所包含的內容。\nProjectionExpression 描述了如何根據 select 表達式的欄構建物件，這幾乎與先前的 ProjectionReader 的委托所扮演的角色完全相同。只不過這一次，我們可以根據 SQL 查詢來推理投影，而不僅僅將其視為從 DataReaders 中組裝物件。\nDbExpressionVisitor 實作 既然我們有了新的節點，那我們就需要新的訪問器。DbExpressionVisitor 擴展了 ExpressionVisitor，為新節點添加基本的訪問模式：\ninternal class DbExpressionVisitor : ExpressionVisitor { public override Expression Visit(Expression exp) { if (exp == null) return exp; switch ((DbExpressionType)exp.NodeType) { case DbExpressionType.Table: return VisitTable((TableExpression)exp); case DbExpressionType.Column: return VisitColumn((ColumnExpression)exp); case DbExpressionType.Select: return VisitSelect((SelectExpression)exp); case DbExpressionType.Projection: return VisitProjection((ProjectionExpression)exp); default: return base.Visit(exp); } } protected virtual Expression VisitTable(TableExpression table) { return table; } protected virtual Expression VisitColumn(ColumnExpression column) { return column; } protected virtual Expression VisitSelect(SelectExpression select) { Expression from = VisitSource(select.From); Expression where = Visit(select.Where); ReadOnlyCollection\u0026lt;ColumnDeclaration\u0026gt; columns = this.VisitColumnDeclaration(select.Columns); if (from != select.From || where != select.Where || columns != select.Columns) { return new SelectExpression(select.Type, select.Alias, columns, from, where); } return select; } protected virtual Expression VisitSource(Expression source) { return this.Visit(source); } protected virtual Expression VisitProjection(ProjectionExpression projection) { SelectExpression source = (SelectExpression)this.Visit(projection.Source); Expression projector = this.Visit(projection.Projector); if (source != projection.Source || projector != projection.Projector) { return new ProjectionExpression(source, projector); } return projection; } protected ReadOnlyCollection\u0026lt;ColumnDeclaration\u0026gt; VisitColumnDeclarations(ReadOnlyCollection\u0026lt;ColumnDeclaration\u0026gt; columns) { List\u0026lt;ColumnDeclaration\u0026gt; alternate = null; for (int i = 0; i \u0026lt; columns.Count; i++) { ColumnDeclaration column = columns[i]; Expression e = this.Visit(column.Expression); if (alternate == null \u0026amp;\u0026amp; e != column.Expression) { alternate = columns.Take(i).ToList(); } if (alternate != null) { alternate.Add(new ColumnDeclaration(column.Name, e)); } } return alternate?.AsReadOnly() ?? columns; } } ","permalink":"https://intervalrain.github.io/it/iq1/","summary":"\u003ch1 id=\"可重複使用的-iqueryable-基類\"\u003e可重複使用的 IQueryable 基類\u003c/h1\u003e\n\u003ch2 id=\"iqueryable-簡介\"\u003eIQueryable 簡介\u003c/h2\u003e\n\u003cp\u003e　　在 C# 最新版本中的 \u003ccode\u003eIQueryable\u003c/code\u003e 已經不再是一個介面，而是分為兩個部分： \u003ccode\u003eIQueryable\u003c/code\u003e 與 \u003ccode\u003eIQueryProvider\u003c/code\u003e。在開始實作之前，我們必須先了解一下這兩個介面。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eIQuerable\u003c/span\u003e : IEnumerable\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Type ElementType { \u003cspan style=\"color:#66d9ef\"\u003eget\u003c/span\u003e; }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Expression Expression { \u003cspan style=\"color:#66d9ef\"\u003eget\u003c/span\u003e; }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    IQueryProvider Provider { \u003cspan style=\"color:#66d9ef\"\u003eget\u003c/span\u003e; }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eIQueryable\u003c/span\u003e\u0026lt;T\u0026gt; : IEnumerable\u0026lt;T\u0026gt;, IQueryable, IEnumerable\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e　　\u003ccode\u003eIQueryable\u003c/code\u003e 有三個唯讀屬性：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003eElementType\u003c/code\u003e 代表了元素的類型 (或等於 \u003ccode\u003eIQueryable\u0026lt;T\u0026gt;\u003c/code\u003e 中的 \u003ccode\u003eT\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eExpression\u003c/code\u003e 代表了查詢對應的表達式。這是 \u003ccode\u003eIQueryable\u003c/code\u003e 存在的核心要素。在 \u003ccode\u003eIQueryable\u003c/code\u003e 的內部，實際上是一個表示查詢的表達式，它將查詢表示為 LINQ 查詢運算子/方法調用的樹狀結構。如果進一步看，你會發現，\u003ccode\u003eIQueryable\u003c/code\u003e 或是 \u003ccode\u003eQueryable\u003c/code\u003e 都只是在提供一個自動構建表達式樹節點 (expression tree nodes) 的機制。當我們對 \u003ccode\u003eIQeuryable\u003c/code\u003e 使用 \u003ccode\u003eWhere\u003c/code\u003e 方法時，它只是回傳一個新的 \u003ccode\u003eIQueryable\u003c/code\u003e，並且在進行調用的樹頂添加一個方法表達式樹節點。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eProvider\u003c/code\u003e 作為真正的「提供者」，它負責原先所有 \u003ccode\u003eIQueryable\u003c/code\u003e 的執行方法。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"iqueryprovider-簡介\"\u003eIQueryProvider 簡介\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eIQueryProvider\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    IQueryable CreateQuery(Expression expression);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    IQueryable\u0026lt;TElement\u0026gt; CreateQuery\u0026lt;TElement\u0026gt;(Expression expression);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eobject\u003c/span\u003e Execute(Expression expression);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    TResult Execute\u0026lt;TResult\u0026gt;(Expression expression);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e　　當我們進一步觀察 \u003ccode\u003eIQueryProvider\u003c/code\u003e，會發現它事實上只有兩個操作：\u003ccode\u003eCreateQuery\u003c/code\u003e、\u003ccode\u003eExecute\u003c/code\u003e，只是各有一個泛型與非泛型的方法。一般我們會使用泛型的方法，因為它可以避免使用反射來建構實例，從而提高性能。\u003c/p\u003e","title":"[IT] LINQ: IQueryable Provider"},{"content":"\nch3. 程式設計範式總覽 這個概述章節中包含的三種範式(paradigm)是結構化編程、物件導向編程和函數式編程。\n結構化程式設計(Structured Programming) 第一個被採用的範式(但不是第一個發明的)是結構化程式設計，由艾德斯格·韋伯·迪科斯特拉(Edsger Wybe Dijkstra)在1968年發現。迪科斯特拉指出，無節制的跳躍(goto語句)對程式結構是有害的。正如我們在接下來的章節中將看到的那樣，他用更為熟悉的if/then/else和do/while/until結構取代了這些跳躍。\n一句話總結結構化程式設計:\n結構化程式設計對直接控制權的轉移施加限制\nStructured programming imposes discipline on direct transfer of control.\n物件導向程式設計(Object-Oriented Programming) 第二個採用的範式實際上是在1966年早兩年被奧利·約翰·達爾(Ole Johan Dahl)和克利斯登·奈加特(Kristen Nygaard)發現的。這兩位程式設計師注意到，在ALGOL語言中，函數呼叫的 stack frame 可以移動到 heap，從而使函數聲明的區域變數在函數返回後仍然存在。該函數成為一個類的構造函數，區域變數成為實例變數，嵌套函數則成為方法。這不可避免地導致了多態的發明，用以限制函數指針的使用。\n一句話總結物件導向程式設計:\n物件導向程式設計對間接控制權的轉移施加限制 Object-oriented programming imposes discipline on indirect transfer of control.\n函數式程式設計 第三種範式，最近才開始被採用，卻是最早被發明的。事實上，它的發明早於程式設計本身。函數式程式設計是阿隆佐·邱奇(Alonzo Church)的工作的直接產物，他在1936年時發明了λ演算法(l-calculus)，當時圖靈也在研究同樣的問題。他的λ演算法是基於9158年由約翰·麥卡錫(John McCarthy)發明的LISP語言，λ演算法有一個最基本的概念是不可變性(immutability)，也就是說，變數的值不會改變。這意味著函數式程式設計並不會有賦值的敘述。事實上，大多數的函數式程式語言，有自己的方法去改變變數的值，但只有在非常嚴格的限制下可以使用。\n一句話總結函數式程式設計:\n函數式程式設計對賦值施加限制 Functional programming imposes discipline upon assignment\n討論 注意到本章所介紹到的三個範式，都是在限制程式設計師的能力，而非增加新的能力。每個範式都在告訴我們什麼不應該做，而不是應該做什麼。\n從另一角度來看，從結構化程式設計消除了go to語句，從物件導向程式設計消除了function pointers，從函數式程式設計消除了assignment。我們還有什麼可以消除的呢？\n答案很可能是沒有。因此這三種範式很有可能是唯一的三種，至少是唯三限制型的範式，另一個證據是，在爾後的數十年間，也沒有再出現任何的範式。\n結論 從範式的歷史，我們可以怎麼與架構做聯想呢？\n1. 我們利用多型的機制來跨越架構的邊界。\n2. 我們利用函數式程式設計來約束對數據的位置與訪問權限。\n3. 我們利用結構化程式設計作為模塊的演算法基礎。\n注意這三個與建築的三個重要關注點不謀而合：功能、組件分離、數據管理。\n","permalink":"https://intervalrain.github.io/clean_arch/ch3/","summary":"\u003cp\u003e\u003cimg alt=\"ch3\" loading=\"lazy\" src=\"/clean_arch/images/ch3.png\"\u003e\u003c/p\u003e\n\u003ch1 id=\"ch3-程式設計範式總覽\"\u003ech3. 程式設計範式總覽\u003c/h1\u003e\n\u003cp\u003e　　這個概述章節中包含的三種範式(paradigm)是結構化編程、物件導向編程和函數式編程。\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"結構化程式設計structured-programming\"\u003e結構化程式設計(Structured Programming)\u003c/h2\u003e\n\u003cp\u003e　　第一個被採用的範式(但不是第一個發明的)是結構化程式設計，由艾德斯格·韋伯·迪科斯特拉(Edsger Wybe Dijkstra)在1968年發現。迪科斯特拉指出，無節制的跳躍(goto語句)對程式結構是有害的。正如我們在接下來的章節中將看到的那樣，他用更為熟悉的\u003ccode\u003eif\u003c/code\u003e/\u003ccode\u003ethen\u003c/code\u003e/\u003ccode\u003eelse\u003c/code\u003e和\u003ccode\u003edo\u003c/code\u003e/\u003ccode\u003ewhile\u003c/code\u003e/\u003ccode\u003euntil\u003c/code\u003e結構取代了這些跳躍。\u003c/p\u003e\n\u003cp\u003e　　一句話總結結構化程式設計:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cem\u003e結構化程式設計對直接控制權的轉移施加限制\u003cbr\u003e\nStructured programming imposes discipline on direct transfer of control.\u003c/em\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"物件導向程式設計object-oriented-programming\"\u003e物件導向程式設計(Object-Oriented Programming)\u003c/h2\u003e\n\u003cp\u003e　　第二個採用的範式實際上是在1966年早兩年被奧利·約翰·達爾(Ole Johan Dahl)和克利斯登·奈加特(Kristen Nygaard)發現的。這兩位程式設計師注意到，在ALGOL語言中，函數呼叫的 stack frame 可以移動到 heap，從而使函數聲明的區域變數在函數返回後仍然存在。該函數成為一個類的構造函數，區域變數成為實例變數，嵌套函數則成為方法。這不可避免地導致了多態的發明，用以限制函數指針的使用。\u003c/p\u003e\n\u003cp\u003e　　一句話總結物件導向程式設計:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cem\u003e物件導向程式設計對間接控制權的轉移施加限制\nObject-oriented programming imposes discipline on indirect transfer of control.\u003c/em\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"函數式程式設計\"\u003e函數式程式設計\u003c/h2\u003e\n\u003cp\u003e　　第三種範式，最近才開始被採用，卻是最早被發明的。事實上，它的發明早於程式設計本身。函數式程式設計是阿隆佐·邱奇(Alonzo Church)的工作的直接產物，他在1936年時發明了λ演算法(l-calculus)，當時圖靈也在研究同樣的問題。他的λ演算法是基於9158年由約翰·麥卡錫(John McCarthy)發明的LISP語言，λ演算法有一個最基本的概念是不可變性(immutability)，也就是說，變數的值不會改變。這意味著函數式程式設計並不會有賦值的敘述。事實上，大多數的函數式程式語言，有自己的方法去改變變數的值，但只有在非常嚴格的限制下可以使用。\u003c/p\u003e\n\u003cp\u003e　　一句話總結函數式程式設計:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cem\u003e函數式程式設計對賦值施加限制\nFunctional programming imposes discipline upon assignment\u003c/em\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"討論\"\u003e討論\u003c/h2\u003e\n\u003cp\u003e　　注意到本章所介紹到的三個範式，都是在\u003cstrong\u003e限制\u003c/strong\u003e程式設計師的能力，而非增加新的能力。每個範式都在告訴我們\u003cstrong\u003e什麼不應該做，而不是應該做什麼\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e　　從另一角度來看，從結構化程式設計消除了\u003ccode\u003ego to\u003c/code\u003e語句，從物件導向程式設計消除了\u003ccode\u003efunction pointers\u003c/code\u003e，從函數式程式設計消除了\u003ccode\u003eassignment\u003c/code\u003e。我們還有什麼可以消除的呢？\u003c/p\u003e\n\u003cp\u003e　　答案很可能是沒有。因此這三種範式很有可能是唯一的三種，至少是唯三\u003cstrong\u003e限制型\u003c/strong\u003e的範式，另一個證據是，在爾後的數十年間，也沒有再出現任何的範式。\u003c/p\u003e\n\u003ch2 id=\"結論\"\u003e結論\u003c/h2\u003e\n\u003cp\u003e　　從範式的歷史，我們可以怎麼與架構做聯想呢？\u003cbr\u003e\n　　1. 我們利用多型的機制來跨越架構的邊界。\u003cbr\u003e\n　　2. 我們利用函數式程式設計來約束對數據的位置與訪問權限。\u003cbr\u003e\n　　3. 我們利用結構化程式設計作為模塊的演算法基礎。\u003cbr\u003e\n　　注意這三個與建築的三個重要關注點不謀而合：\u003cstrong\u003e功能\u003c/strong\u003e、\u003cstrong\u003e組件分離\u003c/strong\u003e、\u003cstrong\u003e數據管理\u003c/strong\u003e。\u003c/p\u003e","title":"[IT] Clean Architecture - 第3章 - 程式設計範式總覽"},{"content":"　軟體架構始於程式碼，因此我們將從程式碼的角度開始討論架構，看看自從程式碼被寫下以來我們所學到的內容。\n1938年，艾倫·圖靈(Alan Turing)奠定了計算機編程的基礎。他並不是第一個構想可編程機器的人，但他是第一個理解程式即數據(programs are simply data)的人。到了1945年，圖靈已經在真正的電腦上用我們現在能夠認出的程式碼編寫真正的程式了。這些程式使用了循環(loops)、分支(branches)、賦值(assignment)、子程序(subroutines)、堆棧(stacks)和其他熟悉的結構。但，圖靈的語言是二進制的。\n自從那些日子以來，程式設計界發生了許多革命。其中一個我們都非常熟悉的革命就是語言的革命。首先，在1940年代末期，出現了組合語言(assemblers)。這些「語言」解放了程式設計師將他們的程式轉換成二進制的苦差。1951年，格雷斯·霍珀(Grace Hopper)發明了第一個編譯器 A0。事實上，她創造了「編譯器(compiler)」這個詞彙。Fortran 在1953年被發明出來。接著，一股源源不斷的新程式語言湧入 - COBOL、PL/1、SNOBOL、C、Pascal、C++、Java等等，無窮無盡。\n另一個可能更重要的革命是在程式設計範式方面。範式是編程的方式，與語言相對無關。範式指導了開發人員應該使用哪些程式結構，以及何時使用它們。\n迄今為止，已經有三種這樣的範式，也不太可能再有其它的範式，原因後述。\n","permalink":"https://intervalrain.github.io/clean_arch/sec2/","summary":"\u003cp\u003e　　軟體架構始於程式碼，因此我們將從程式碼的角度開始討論架構，看看自從程式碼被寫下以來我們所學到的內容。\u003c/p\u003e\n\u003cp\u003e　　1938年，艾倫·圖靈(Alan Turing)奠定了計算機編程的基礎。他並不是第一個構想可編程機器的人，但他是第一個理解程式即數據(programs are simply data)的人。到了1945年，圖靈已經在真正的電腦上用我們現在能夠認出的程式碼編寫真正的程式了。這些程式使用了循環(loops)、分支(branches)、賦值(assignment)、子程序(subroutines)、堆棧(stacks)和其他熟悉的結構。但，圖靈的語言是二進制的。\u003c/p\u003e\n\u003cp\u003e　　自從那些日子以來，程式設計界發生了許多革命。其中一個我們都非常熟悉的革命就是語言的革命。首先，在1940年代末期，出現了組合語言(assemblers)。這些「語言」解放了程式設計師將他們的程式轉換成二進制的苦差。1951年，格雷斯·霍珀(Grace Hopper)發明了第一個編譯器 A0。事實上，她創造了「編譯器(compiler)」這個詞彙。Fortran 在1953年被發明出來。接著，一股源源不斷的新程式語言湧入 - COBOL、PL/1、SNOBOL、C、Pascal、C++、Java等等，無窮無盡。\u003c/p\u003e\n\u003cp\u003e　　另一個可能更重要的革命是在程式設計範式方面。範式是編程的方式，與語言相對無關。範式指導了開發人員應該使用哪些程式結構，以及何時使用它們。\u003c/p\u003e\n\u003cp\u003e　　迄今為止，已經有三種這樣的範式，也不太可能再有其它的範式，原因後述。\u003c/p\u003e","title":"[IT] Clean Architecture - 第二部分 從基礎構件開始: 程式設計範式(Paradigms)"},{"content":"\nCh2. 兩個價值維度 每個軟體系統都為利益相關者(stakeholders)提供兩種不同的價值維度：行為(behavior)與結構(structure)。軟體開發人員負責確保這兩種價值保持高水準。不幸的是，他們往往只關注其中一個而忽略另一個，更不幸的是，他們往往只關注較低價值的那一個，最終使軟體失去價值。\n行為 歉體的第一個價值來自於行為。程式設計師被聘請來使機器以一種能為利益相關者帶來獲利或節省成本的方式運作。我們透過協助利益相關者制定功能規格或者需求文件，然後編寫程式碼，使利益相關者的機器滿足這些需求。當機器違反這些要求時，程式設計師便開始除錯以修復這些問題。\n結構 軟體的第二個價值來自於結構，軟體之所以為「軟」體，是因為它被創造出來是為了方便改變機器的行為。為了實現其目的，軟體必須要有足夠的彈性，易於修改。當利益相關者對某項功能改變主意時，這種改變應該要是可以簡單且容易進行的。進行這種改變的困難程度應該只與改變的範圍成比例，而不是與改變的形式成比例。\n然正是範圍和形狀之間的差異常常推動軟體開發成本的增長。這就是為什麼成本與所需求的變更規模不成比例。這也是為什麼開發前期比開發後期便宜得多的原因。\n從利益相關者的角度來看，他們只是提供了一系列大致相似範圍的變更。從開發者的角度來看，利益相關者給予他們一系列拼圖碎片，他們必須將其放入日益複雜的拼圖中。每個新的要求都比上一個更難擬合，因為系統的形狀與要求的形狀不匹配。\n我在這裡以一種非傳統的方式使用「形狀」這個詞，但我認為隱喻很貼切。軟體開發人員常常感覺自己被迫將方形木塊塞進圓洞中。\n問題當然在於系統的架構。如果這個架構偏好某種形式，那麼新功能愈來愈難以適應這種結構。因此，架構應該盡可能地不受形式的限制。\n更大的價值 行為與架構，何者提供更大的價值？對軟體系統來說，它的功能更重要，還是易於修改更重要？\n如果你問企業經理，他們通常會說軟體系統的工作更重要。開發人員通常也會贊同。但這是錯誤的態度，我們可以用簡單的邏輯工具來證明它是錯誤的，那就是檢查極端情況。\n如果你有一個完美運作但無法更改的程式，那麼當需求改變時它將無法運作，意謂著這個程式將變得沒有用處；然而一個不起作用但容易修改的程式，那麼我們可以透過簡單的修改使其運作起來，並在需求變化時保持運作，因此這個程式將持續保持有用。\n也許這個論點對有些人來說不那麼具有說服力，畢竟沒有什麼程式是真的不能改變的。但是，有些系統在實際上是幾乎不可能改變的，因為改變的成本大過於了改變的好處。許多系統在某些功能或配置上達到了這一點。\n如果你問企業經理們是否希望能夠進行變更，他們當然會說是，但可能會在回答中指出目前的功能比任何後續的靈活性更重要。相反地，如果企業經理們向你提出變更要求，而你估計的成本過高而無法負擔，他們很可能會對你允許系統達到變更變得不切實際的程度感到憤怒。\n艾森豪威爾矩陣 下圖為艾森豪威爾(Dwight D. Eisenhower)總統的重要性(importance)與緊迫性(urgency)的矩陣，艾森豪是這麼說的：\n我有兩種問題，一種是緊急的，一種是重要的。緊急的問題並不重要，而重要的問題從不緊急。\n軟體的第一個價值 - 行為，是緊迫但並非總是特別重要。\n軟體的第二個價值 - 架構，重要但從不特別緊迫。\n當然，有些事情既緊急又重要，或有些事情既不緊急又不重要。故最終，我們可以將這四種問題安排成優先順序：\n緊急且重要 不緊急但重要 緊急但不重要 不緊急也不重要\n需要注意的是，程式碼的架構位於前兩個位置，而程式碼的行為則佔據第一與第三的位置。商業經理和開發人員常犯的錯誤是將第三位的事項提升至第一位。換句話說，他們未能將那些緊急但不重要的功能與真正緊急且重要的功能區分開來。這種失誤導致忽視系統的重要架構，而偏好系統中不重要的功能。\n軟體開發人員面臨的困境是，商業經理無法評估架構的重要性。這就是軟體開發人員被聘用的原因。因此，軟體開發團隊有責任強調架構的重要性，而不是功能的緊迫性。 為架構而戰 履行這個責任意味著投入一場戰鬥，或者也許更好的詞是「奮鬥」。坦白說，這些事情總是這樣做的方式。開發團隊必須為他們認為對公司最好的事情而奮鬥，管理團隊、市場團隊、銷售團隊和運營團隊也是如此。這總是一場奮鬥。\n有效的軟體開發團隊會毫不畏懼地與其他利益相關者平起平坐地爭論。請記住，作為一名軟體開發者，您也是一個利益相關者。您需要保護您所需的軟體。這是您的角色和責任的一部分，也是您被雇用的重要原因之一。\n如果你是一位軟體架構師，這個挑戰對你來說尤其重要。軟體架構師根據他們的工作描述，更關注系統的結構而非其特性和功能。架構師創建一個架構，使得這些特性和功能能夠容易地開發、修改和擴展。\n只要記住：如果架構放在最後，那麼系統的開發成本將會愈來愈高，最終對系統的某個部分或整個系統的變更幾乎變得不可能。如果這種情況發生，那意味著軟體開發團隊沒有為他們知道的必要事項進行足夠的努力。\n","permalink":"https://intervalrain.github.io/clean_arch/ch2/","summary":"\u003cp\u003e\u003cimg alt=\"ch2\" loading=\"lazy\" src=\"/clean_arch/images/ch2.png\"\u003e\u003c/p\u003e\n\u003ch1 id=\"ch2-兩個價值維度\"\u003eCh2. 兩個價值維度\u003c/h1\u003e\n\u003cp\u003e　　每個軟體系統都為利益相關者(stakeholders)提供兩種不同的價值維度：\u003cstrong\u003e行為(behavior)\u003cstrong\u003e與\u003c/strong\u003e結構(structure)\u003c/strong\u003e。軟體開發人員負責確保這兩種價值保持高水準。不幸的是，他們往往只關注其中一個而忽略另一個，更不幸的是，他們往往只關注較低價值的那一個，最終使軟體失去價值。\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"行為\"\u003e行為\u003c/h2\u003e\n\u003cp\u003e　　歉體的第一個價值來自於行為。程式設計師被聘請來使機器以一種能為利益相關者帶來獲利或節省成本的方式運作。我們透過協助利益相關者制定功能規格或者需求文件，然後編寫程式碼，使利益相關者的機器滿足這些需求。當機器違反這些要求時，程式設計師便開始除錯以修復這些問題。\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"結構\"\u003e結構\u003c/h2\u003e\n\u003cp\u003e　　軟體的第二個價值來自於結構，軟體之所以為「軟」體，是因為它被創造出來是為了方便改變機器的行為。為了實現其目的，軟體必須要有足夠的彈性，易於修改。當利益相關者對某項功能改變主意時，這種改變應該要是可以簡單且容易進行的。進行這種改變的困難程度應該只與改變的範圍成比例，而不是與改變的形式成比例。\u003c/p\u003e\n\u003cp\u003e　　然正是範圍和形狀之間的差異常常推動軟體開發成本的增長。這就是為什麼成本與所需求的變更規模不成比例。這也是為什麼開發前期比開發後期便宜得多的原因。\u003c/p\u003e\n\u003cp\u003e　　從利益相關者的角度來看，他們只是提供了一系列大致相似範圍的變更。從開發者的角度來看，利益相關者給予他們一系列拼圖碎片，他們必須將其放入日益複雜的拼圖中。每個新的要求都比上一個更難擬合，因為系統的形狀與要求的形狀不匹配。\u003c/p\u003e\n\u003cp\u003e　　我在這裡以一種非傳統的方式使用「形狀」這個詞，但我認為隱喻很貼切。軟體開發人員常常感覺自己被迫將方形木塊塞進圓洞中。\u003c/p\u003e\n\u003cp\u003e　　問題當然在於系統的架構。如果這個架構偏好某種形式，那麼新功能愈來愈難以適應這種結構。因此，架構應該盡可能地不受形式的限制。\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"更大的價值\"\u003e更大的價值\u003c/h2\u003e\n\u003cp\u003e　　行為與架構，何者提供更大的價值？對軟體系統來說，它的功能更重要，還是易於修改更重要？\u003c/p\u003e\n\u003cp\u003e　　如果你問企業經理，他們通常會說軟體系統的工作更重要。開發人員通常也會贊同。但這是錯誤的態度，我們可以用簡單的邏輯工具來證明它是錯誤的，那就是檢查極端情況。\u003c/p\u003e\n\u003cp\u003e　　如果你有一個完美運作但無法更改的程式，那麼當需求改變時它將無法運作，意謂著這個程式將變得沒有用處；然而一個不起作用但容易修改的程式，那麼我們可以透過簡單的修改使其運作起來，並在需求變化時保持運作，因此這個程式將持續保持有用。\u003c/p\u003e\n\u003cp\u003e　　也許這個論點對有些人來說不那麼具有說服力，畢竟沒有什麼程式是真的不能改變的。但是，有些系統在實際上是幾乎不可能改變的，因為改變的成本大過於了改變的好處。許多系統在某些功能或配置上達到了這一點。\u003c/p\u003e\n\u003cp\u003e　　如果你問企業經理們是否希望能夠進行變更，他們當然會說是，但可能會在回答中指出目前的功能比任何後續的靈活性更重要。相反地，如果企業經理們向你提出變更要求，而你估計的成本過高而無法負擔，他們很可能會對你允許系統達到變更變得不切實際的程度感到憤怒。\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"艾森豪威爾矩陣\"\u003e艾森豪威爾矩陣\u003c/h2\u003e\n\u003cp\u003e　　下圖為艾森豪威爾(Dwight D. Eisenhower)總統的重要性(importance)與緊迫性(urgency)的矩陣，艾森豪是這麼說的：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e我有兩種問題，一種是緊急的，一種是重要的。緊急的問題並不重要，而重要的問題從不緊急。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003cimg alt=\"img2_1\" loading=\"lazy\" src=\"/clean_arch/images/img2_1.png\"\u003e\u003c/p\u003e\n\u003cp\u003e　　軟體的第一個價值 - 行為，是緊迫但並非總是特別重要。\u003cbr\u003e\n　　軟體的第二個價值 - 架構，重要但從不特別緊迫。\u003cbr\u003e\n　　當然，有些事情既緊急又重要，或有些事情既不緊急又不重要。故最終，我們可以將這四種問題安排成優先順序：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e緊急且重要\u003c/li\u003e\n\u003cli\u003e不緊急但重要\u003c/li\u003e\n\u003cli\u003e緊急但不重要\u003c/li\u003e\n\u003cli\u003e不緊急也不重要\u003cbr\u003e\n　　需要注意的是，程式碼的架構位於前兩個位置，而程式碼的行為則佔據第一與第三的位置。商業經理和開發人員常犯的錯誤是將第三位的事項提升至第一位。換句話說，他們未能將那些緊急但不重要的功能與真正緊急且重要的功能區分開來。這種失誤導致忽視系統的重要架構，而偏好系統中不重要的功能。\u003cbr\u003e\n　　軟體開發人員面臨的困境是，商業經理無法評估架構的重要性。這就是軟體開發人員被聘用的原因。因此，軟體開發團隊有責任強調架構的重要性，而不是功能的緊迫性。\u003c/li\u003e\n\u003c/ol\u003e\n\u003chr\u003e\n\u003ch2 id=\"為架構而戰\"\u003e為架構而戰\u003c/h2\u003e\n\u003cp\u003e　　履行這個責任意味著投入一場戰鬥，或者也許更好的詞是「奮鬥」。坦白說，這些事情總是這樣做的方式。開發團隊必須為他們認為對公司最好的事情而奮鬥，管理團隊、市場團隊、銷售團隊和運營團隊也是如此。這總是一場奮鬥。\u003c/p\u003e\n\u003cp\u003e　　有效的軟體開發團隊會毫不畏懼地與其他利益相關者平起平坐地爭論。請記住，作為一名軟體開發者，您也是一個利益相關者。您需要保護您所需的軟體。這是您的角色和責任的一部分，也是您被雇用的重要原因之一。\u003c/p\u003e\n\u003cp\u003e　　如果你是一位軟體架構師，這個挑戰對你來說尤其重要。軟體架構師根據他們的工作描述，更關注系統的結構而非其特性和功能。架構師創建一個架構，使得這些特性和功能能夠容易地開發、修改和擴展。\u003c/p\u003e\n\u003cp\u003e　　只要記住：如果架構放在最後，那麼系統的開發成本將會愈來愈高，最終對系統的某個部分或整個系統的變更幾乎變得不可能。如果這種情況發生，那意味著軟體開發團隊沒有為他們知道的必要事項進行足夠的努力。\u003c/p\u003e","title":"[IT] Clean Architecture - 第2章 - 兩個價值維度"},{"content":"\nCh1. 設計與架構到底是什麼？ 對初學者而言，設計(Design) 與架構(Architecture) 基本上是沒有差別的。\n「架構」這個詞常常用在高層次的情境，而與低層次的細節脫節；而「設計」則更常用於暗示著低層次的結構和決策。但事實上底層的細節與高層次的架構往往是伴隨而生的。（作者以建築設計作為範例，在建築設計圖中，會包含房屋形狀、外觀設計、高度、房間佈局等等，但同時也具備大量的設計細節，如每個插座、開關以及每個電燈具體的安裝位置，甚備某個開關與所控制的電燈的具體連接訊息等等。）\n總而言之，底層設計細節和高層架構資訊是不可分割的。它們共同定義了整個軟體系統，缺一不可。所謂的底層和高層本身就是一系列決策組成的連續體，並沒有清晰的分界線。\n目標是什麼？ 軟體架構的終極目標是，用最小的人力成本來滿足構建和維護該系統的需求。 一個軟體架構的優劣，可以用它滿足用戶需求所需要的成本來衡量。如果成本很低，並且在系統整個生命週期內一直都能維持這樣的成本，那麼這個系統的設計就是優良的。反之如果該系統的每次發布都會提升下一次變更的成本，那麼這個設計就是不好的。\n案例分析 下面為書中的一個真實案例，該案例中的數據均來源於一個匿名的真實公司。\n該公司的工程人員數量的增長 由圖可見，人員的增長肯定是顯示了產品重大的成功。 2. 該公司同一時段的生滻力 從第二張圖可以發現一些端倪，雖然開發者愈來愈多，但程式碼的增長似乎接近了一個漸近線。 3. 隨著時間推移每行程式碼的成本 從第三張圖可見，成本快速的增加，大量地消耗利潤，將公司推向停滯，甚至是完全崩潰的境地。\n凌亂系統的特點 當系統匆忙地拼湊在一起，當程式設計師的數量成為唯一的驅動力，而沒有考量程式碼的整潔度與設計結構時，必定會走向醜陋的結局。\n每次版本發布的生產力 這張圖顯示了開發人員對這條曲線的看法。一開始的生產力接近100%，但隨著每次發布，生產力逐漸下降，最後趨近於零。\n從開發者的角度來看，真是令人沮喪，因為每個人都在努力工作，但實際上已經無法完成更多。所有努力都被轉移到處理混亂上了，而不是開發新功能。\n管理層視角 每次版本發布時的薪資支出 由圖明顯可見，後期投入的資金幾乎沒有帶來任何東西。但其中發生了什麼問題呢？\n問題到底在哪裡？ 現代的程式開發者，大腦中有一部分是在沉睡的，儘管它們知道「好的、乾淨的、設計良好的程式碼是重要的」。\n這些程式開發者通常相信一個熟悉的謊言：「我們可以之後再整理，我們現在更需要趕快上線。」實際上是，在未來，程式從來不會被整理，因為市場上的壓力永遠不會減輕。所以開發人員從來不會切換模式，他們無法回頭整理事情，因為他們被逼著完成下一個任務，一而再再而三。於是混亂愈來愈多，生產力逐漸趨近於零。\n程式開發者還相信一個更大的謊言：「沒有秩序的程式碼可以讓他們在短期內快速前進，且只會在長期才會反應出速度的變慢」，他們認為可以在未來的某個時刻從製造混亂轉換成整理混亂，但事實是，無論使用哪種時間尺度，製造混亂總是比保持整潔更慢。\n完成任務所需的時間(With TDD/No TDD) 圖6是傑森戈爾曼(Json Gorman)進行的一個實驗。傑森在六天的時間內反覆進行這項測試，每一天他會完成一個整數轉羅馬數字的簡單小程式，當他通過了他預定義好的ATDD(Acceptance Tests)，他可以清楚知道他完成了程式。在過去六天內，每天的任務都花不到30分鐘。在第一、第三、第五天使用了 TDD(Test Driven Development)，而另外三天則沒有遵守。結果顯示，後期工作完成速度比前期快，而在實施 TDD 的日子裡，工作進展大約比沒有實施的日子快了 10%，即使是最慢的TDD日子也比非TDD的日子還快。\n結論 在每一種情況下，最好的選擇是開發組織要認識到並避免自己的過度自信，並且開始認真對待軟體架構的質量。\n要認真對待軟體架構，你需要知道什麼是良好的軟體架構。為了構建一個設計和架構能夠最大程度減少工作量並提高生產力的系統，你需要知道哪些系統架構的特性能夠達到這個目標。\n這本書就是在談這個，它描述了好的乾淨架構和設計的樣貌，讓軟體開發者能夠建立具有長期盈利生命力的系統。\n","permalink":"https://intervalrain.github.io/clean_arch/ch1/","summary":"\u003cp\u003e\u003cimg alt=\"ch1\" loading=\"lazy\" src=\"/clean_arch/images/ch1.png\"\u003e\u003c/p\u003e\n\u003ch1 id=\"ch1-設計與架構到底是什麼\"\u003eCh1. 設計與架構到底是什麼？\u003c/h1\u003e\n\u003cp\u003e　　對初學者而言，設計(Design) 與架構(Architecture) 基本上是沒有差別的。\u003c/p\u003e\n\u003cp\u003e　　「架構」這個詞常常用在高層次的情境，而與低層次的細節脫節；而「設計」則更常用於暗示著低層次的結構和決策。但事實上底層的細節與高層次的架構往往是伴隨而生的。（作者以建築設計作為範例，在建築設計圖中，會包含房屋形狀、外觀設計、高度、房間佈局等等，但同時也具備大量的設計細節，如每個插座、開關以及每個電燈具體的安裝位置，甚備某個開關與所控制的電燈的具體連接訊息等等。）\u003c/p\u003e\n\u003cp\u003e　　總而言之，底層設計細節和高層架構資訊是不可分割的。它們共同定義了整個軟體系統，缺一不可。所謂的底層和高層本身就是一系列決策組成的連續體，並沒有清晰的分界線。\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"目標是什麼\"\u003e目標是什麼？\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e軟體架構的終極目標是，用最小的人力成本來滿足構建和維護該系統的需求。\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e　　一個軟體架構的優劣，可以用它滿足用戶需求所需要的成本來衡量。如果成本很低，並且在系統整個生命週期內一直都能維持這樣的成本，那麼這個系統的設計就是優良的。反之如果該系統的每次發布都會提升下一次變更的成本，那麼這個設計就是不好的。\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"案例分析\"\u003e案例分析\u003c/h2\u003e\n\u003cp\u003e　　下面為書中的一個真實案例，該案例中的數據均來源於一個匿名的真實公司。\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e該公司的工程人員數量的增長\n\u003cimg alt=\"img1_1\" loading=\"lazy\" src=\"/clean_arch/images/img1_1.png\"\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e　　由圖可見，人員的增長肯定是顯示了產品重大的成功。\n2. 該公司同一時段的生滻力\n\u003cimg alt=\"img1_2\" loading=\"lazy\" src=\"/clean_arch/images/img1_2.png\"\u003e\u003c/p\u003e\n\u003cp\u003e　　從第二張圖可以發現一些端倪，雖然開發者愈來愈多，但程式碼的增長似乎接近了一個漸近線。\n3. 隨著時間推移每行程式碼的成本\n\u003cimg alt=\"img1_3\" loading=\"lazy\" src=\"/clean_arch/images/img1_3.png\"\u003e\u003c/p\u003e\n\u003cp\u003e　　從第三張圖可見，成本快速的增加，大量地消耗利潤，將公司推向停滯，甚至是完全崩潰的境地。\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"凌亂系統的特點\"\u003e凌亂系統的特點\u003c/h3\u003e\n\u003cp\u003e　　當系統匆忙地拼湊在一起，當程式設計師的數量成為唯一的驅動力，而沒有考量程式碼的整潔度與設計結構時，必定會走向醜陋的結局。\u003c/p\u003e\n\u003col start=\"4\"\u003e\n\u003cli\u003e每次版本發布的生產力\n\u003cimg alt=\"img1_4\" loading=\"lazy\" src=\"/clean_arch/images/img1_4.png\"\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e　　這張圖顯示了開發人員對這條曲線的看法。一開始的生產力接近100%，但隨著每次發布，生產力逐漸下降，最後趨近於零。\u003c/p\u003e\n\u003cp\u003e　　從開發者的角度來看，真是令人沮喪，因為每個人都在努力工作，但實際上已經無法完成更多。所有努力都被轉移到\u003cstrong\u003e處理混亂\u003c/strong\u003e上了，而不是開發新功能。\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"管理層視角\"\u003e管理層視角\u003c/h3\u003e\n\u003col start=\"5\"\u003e\n\u003cli\u003e每次版本發布時的薪資支出\n\u003cimg alt=\"img1_5\" loading=\"lazy\" src=\"/clean_arch/images/img1_5.png\"\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e　　由圖明顯可見，後期投入的資金幾乎沒有帶來任何東西。但其中發生了什麼問題呢？\u003c/p\u003e\n\u003ch3 id=\"問題到底在哪裡\"\u003e問題到底在哪裡？\u003c/h3\u003e\n\u003cp\u003e　　現代的程式開發者，大腦中有一部分是在沉睡的，儘管它們知道「好的、乾淨的、設計良好的程式碼是重要的」。\u003c/p\u003e\n\u003cp\u003e　　這些程式開發者通常相信一個熟悉的謊言：「我們可以之後再整理，我們現在更需要趕快上線。」實際上是，在未來，程式從來不會被整理，因為市場上的壓力永遠不會減輕。所以開發人員從來不會切換模式，他們無法回頭整理事情，因為他們被逼著完成下一個任務，一而再再而三。於是混亂愈來愈多，生產力逐漸趨近於零。\u003c/p\u003e\n\u003cp\u003e　　程式開發者還相信一個更大的謊言：「沒有秩序的程式碼可以讓他們在短期內快速前進，且只會在長期才會反應出速度的變慢」，他們認為可以在未來的某個時刻從製造混亂轉換成整理混亂，但事實是，\u003cstrong\u003e無論使用哪種時間尺度，製造混亂總是比保持整潔更慢\u003c/strong\u003e。\u003c/p\u003e\n\u003col start=\"6\"\u003e\n\u003cli\u003e完成任務所需的時間(With TDD/No TDD)\n\u003cimg alt=\"img1_6\" loading=\"lazy\" src=\"/clean_arch/images/img1_6.png\"\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e　　圖6是傑森戈爾曼(Json Gorman)進行的一個實驗。傑森在六天的時間內反覆進行這項測試，每一天他會完成一個整數轉羅馬數字的簡單小程式，當他通過了他預定義好的ATDD(Acceptance Tests)，他可以清楚知道他完成了程式。在過去六天內，每天的任務都花不到30分鐘。在第一、第三、第五天使用了 TDD(Test Driven Development)，而另外三天則沒有遵守。結果顯示，後期工作完成速度比前期快，而在實施 TDD 的日子裡，工作進展大約比沒有實施的日子快了 10%，即使是最慢的TDD日子也比非TDD的日子還快。\u003c/p\u003e\n\u003ch2 id=\"結論\"\u003e結論\u003c/h2\u003e\n\u003cp\u003e　　在每一種情況下，最好的選擇是開發組織要認識到並避免自己的過度自信，並且開始認真對待軟體架構的質量。\u003cbr\u003e\n　　要認真對待軟體架構，你需要知道什麼是良好的軟體架構。為了構建一個設計和架構能夠最大程度減少工作量並提高生產力的系統，你需要知道哪些系統架構的特性能夠達到這個目標。\u003cbr\u003e\n　　這本書就是在談這個，它描述了好的乾淨架構和設計的樣貌，讓軟體開發者能夠建立具有長期盈利生命力的系統。\u003c/p\u003e","title":"[IT] Clean Architecture - 第1章 - 設計與架構到底是什麼"},{"content":"　採用好的軟體架構可以大大節省軟體項目構建與維護的人力成本。讓每次變更都短小簡單，易於實施，並且避免缺陷，用最小的成本，最大程度地滿足功能性和靈活性的要求。\n","permalink":"https://intervalrain.github.io/clean_arch/sec1/","summary":"\u003cp\u003e　　採用好的軟體架構可以大大節省\u003cstrong\u003e軟體項目構建\u003c/strong\u003e與\u003cstrong\u003e維護的人力成本\u003c/strong\u003e。讓每次變更都短小簡單，易於實施，並且避免缺陷，用最小的成本，最大程度地滿足功能性和靈活性的要求。\u003c/p\u003e","title":"[IT] Clean Architecture - 第一部分 概述"},{"content":"\nClean Architecture\nA Craftsman\u0026rsquo;s Guide to Software Structure and Design\n中文翻譯: 無瑕的程式碼 - 整潔的軟體設計與架構\n原著: Robert C. Martin(Uncle Bob)\n目錄 第一部分 概述 第1章 - 設計與架構到底是什麼 第2章 - 兩個價值維度 第二部分 從基礎構件開始: 程式設計範式 第3章 - 程式設計範式總覽 第4章 - 結構化程式設計 第5章 - 物件導向程式設計 第6章 - 函數式程式設計 第三部分 設計原則 第7章 - SRP 單一職責原則 第8章 - OCP 開放封則原則 第9章 - LSP 里氏替換原則 第10章 - ISP 介面隔離原則 第11章 - DIP 依賴反轉原則 [第四部分 組件構建原則)(/clean_arch/sec4) 第12章 - 元件 第13章 - 元件聚合 第14章 - 元件耦合 第五部分 軟體架構 第15章 - 什麼是軟體架構 第16章 - 獨立性 第17章 - 劃分邊界 第18章 - 邊界剖析 第19章 - 策略與層次 第20章 - 業務邏輯 第21章 - 尖叫的軟體架構 第22章 - 整潔架構 第23章 - 展示器和謙卑物件 第24章 - 不完全邊界 第25章 - 層次與邊界 第26章 - Main 元件 第27章 - 服務: 宏觀與微觀 第28章 - 測試邊界 第29章 - 整潔的嵌入式架構 第六部分 實現細節] 第30章 - 數據庫只是實現細節 第31章 - Web 是實現細節 第32章 - 應用程式框架是實現細節 第33章 - 案例分析: 影片銷售網站 第34章 - 拾遺 ","permalink":"https://intervalrain.github.io/clean_arch/toc/","summary":"\u003cp\u003e\u003cimg alt=\"CleanArchitecture\" loading=\"lazy\" src=\"http://geekdaxue.co/uploads/projects/Clean-Architecture-zh/docs/cover.jpg\"\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eClean Architecture\u003cbr\u003e\nA Craftsman\u0026rsquo;s Guide to Software Structure and Design\u003cbr\u003e\n中文翻譯: 無瑕的程式碼 - 整潔的軟體設計與架構\u003cbr\u003e\n原著: Robert C. Martin(Uncle Bob)\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch1 id=\"目錄\"\u003e目錄\u003c/h1\u003e\n\u003chr\u003e\n\u003ch3 id=\"第一部分-概述clean_archsec1\"\u003e\u003ca href=\"/clean_arch/sec1\"\u003e第一部分 概述\u003c/a\u003e\u003c/h3\u003e\n\u003ch4 id=\"第1章---設計與架構到底是什麼clean_archch1\"\u003e\u003ca href=\"/clean_arch/ch1\"\u003e第1章 - 設計與架構到底是什麼\u003c/a\u003e\u003c/h4\u003e\n\u003ch4 id=\"第2章---兩個價值維度clean_archch2\"\u003e\u003ca href=\"/clean_arch/ch2\"\u003e第2章 - 兩個價值維度\u003c/a\u003e\u003c/h4\u003e\n\u003chr\u003e\n\u003ch3 id=\"第二部分-從基礎構件開始-程式設計範式clean_archsec2\"\u003e\u003ca href=\"/clean_arch/sec2\"\u003e第二部分 從基礎構件開始: 程式設計範式\u003c/a\u003e\u003c/h3\u003e\n\u003ch4 id=\"第3章---程式設計範式總覽clean_archch3\"\u003e\u003ca href=\"/clean_arch/ch3\"\u003e第3章 - 程式設計範式總覽\u003c/a\u003e\u003c/h4\u003e\n\u003ch4 id=\"第4章---結構化程式設計clean_archch4\"\u003e\u003ca href=\"/clean_arch/ch4\"\u003e第4章 - 結構化程式設計\u003c/a\u003e\u003c/h4\u003e\n\u003ch4 id=\"第5章---物件導向程式設計clean_archch5\"\u003e\u003ca href=\"/clean_arch/ch5\"\u003e第5章 - 物件導向程式設計\u003c/a\u003e\u003c/h4\u003e\n\u003ch4 id=\"第6章---函數式程式設計clean_archch6\"\u003e\u003ca href=\"/clean_arch/ch6\"\u003e第6章 - 函數式程式設計\u003c/a\u003e\u003c/h4\u003e\n\u003chr\u003e\n\u003ch3 id=\"第三部分-設計原則clean_archsec3\"\u003e\u003ca href=\"/clean_arch/sec3\"\u003e第三部分 設計原則\u003c/a\u003e\u003c/h3\u003e\n\u003ch4 id=\"第7章---srp-單一職責原則clean_archch7\"\u003e\u003ca href=\"/clean_arch/ch7\"\u003e第7章 - SRP 單一職責原則\u003c/a\u003e\u003c/h4\u003e\n\u003ch4 id=\"第8章---ocp-開放封則原則clean_archch8\"\u003e\u003ca href=\"/clean_arch/ch8\"\u003e第8章 - OCP 開放封則原則\u003c/a\u003e\u003c/h4\u003e\n\u003ch4 id=\"第9章---lsp-里氏替換原則clean_archch9\"\u003e\u003ca href=\"/clean_arch/ch9\"\u003e第9章 - LSP 里氏替換原則\u003c/a\u003e\u003c/h4\u003e\n\u003ch4 id=\"第10章---isp-介面隔離原則clean_archch10\"\u003e\u003ca href=\"/clean_arch/ch10\"\u003e第10章 - ISP 介面隔離原則\u003c/a\u003e\u003c/h4\u003e\n\u003ch4 id=\"第11章---dip-依賴反轉原則clean_archch11\"\u003e\u003ca href=\"/clean_arch/ch11\"\u003e第11章 - DIP 依賴反轉原則\u003c/a\u003e\u003c/h4\u003e\n\u003chr\u003e\n\u003ch3 id=\"第四部分-組件構建原則clean_archsec4\"\u003e[第四部分 組件構建原則)(/clean_arch/sec4)\u003c/h3\u003e\n\u003ch4 id=\"第12章---元件clean_archch12\"\u003e\u003ca href=\"/clean_arch/ch12\"\u003e第12章 - 元件\u003c/a\u003e\u003c/h4\u003e\n\u003ch4 id=\"第13章---元件聚合clean_archch13\"\u003e\u003ca href=\"/clean_arch/ch13\"\u003e第13章 - 元件聚合\u003c/a\u003e\u003c/h4\u003e\n\u003ch4 id=\"第14章---元件耦合clean_archch14\"\u003e\u003ca href=\"/clean_arch/ch14\"\u003e第14章 - 元件耦合\u003c/a\u003e\u003c/h4\u003e\n\u003chr\u003e\n\u003ch3 id=\"第五部分-軟體架構clean_archsec5\"\u003e\u003ca href=\"/clean_arch/sec5\"\u003e第五部分 軟體架構\u003c/a\u003e\u003c/h3\u003e\n\u003ch4 id=\"第15章---什麼是軟體架構clean_archch15\"\u003e\u003ca href=\"/clean_arch/ch15\"\u003e第15章 - 什麼是軟體架構\u003c/a\u003e\u003c/h4\u003e\n\u003ch4 id=\"第16章---獨立性clean_archch16\"\u003e\u003ca href=\"/clean_arch/ch16\"\u003e第16章 - 獨立性\u003c/a\u003e\u003c/h4\u003e\n\u003ch4 id=\"第17章---劃分邊界clean_archch17\"\u003e\u003ca href=\"/clean_arch/ch17\"\u003e第17章 - 劃分邊界\u003c/a\u003e\u003c/h4\u003e\n\u003ch4 id=\"第18章---邊界剖析clean_archch18\"\u003e\u003ca href=\"/clean_arch/ch18\"\u003e第18章 - 邊界剖析\u003c/a\u003e\u003c/h4\u003e\n\u003ch4 id=\"第19章---策略與層次clean_archch19\"\u003e\u003ca href=\"/clean_arch/ch19\"\u003e第19章 - 策略與層次\u003c/a\u003e\u003c/h4\u003e\n\u003ch4 id=\"第20章---業務邏輯clean_archch20\"\u003e\u003ca href=\"/clean_arch/ch20\"\u003e第20章 - 業務邏輯\u003c/a\u003e\u003c/h4\u003e\n\u003ch4 id=\"第21章---尖叫的軟體架構clean_archch21\"\u003e\u003ca href=\"/clean_arch/ch21\"\u003e第21章 - 尖叫的軟體架構\u003c/a\u003e\u003c/h4\u003e\n\u003ch4 id=\"第22章---整潔架構clean_archch22\"\u003e\u003ca href=\"/clean_arch/ch22\"\u003e第22章 - 整潔架構\u003c/a\u003e\u003c/h4\u003e\n\u003ch4 id=\"第23章---展示器和謙卑物件clean_archch23\"\u003e\u003ca href=\"/clean_arch/ch23\"\u003e第23章 - 展示器和謙卑物件\u003c/a\u003e\u003c/h4\u003e\n\u003ch4 id=\"第24章---不完全邊界clean_archch24\"\u003e\u003ca href=\"/clean_arch/ch24\"\u003e第24章 - 不完全邊界\u003c/a\u003e\u003c/h4\u003e\n\u003ch4 id=\"第25章---層次與邊界clean_archch25\"\u003e\u003ca href=\"/clean_arch/ch25\"\u003e第25章 - 層次與邊界\u003c/a\u003e\u003c/h4\u003e\n\u003ch4 id=\"第26章---main-元件clean_arch_h26\"\u003e\u003ca href=\"/clean_arch_/h26\"\u003e第26章 - Main 元件\u003c/a\u003e\u003c/h4\u003e\n\u003ch4 id=\"第27章---服務-宏觀與微觀clean_archch27\"\u003e\u003ca href=\"/clean_arch/ch27\"\u003e第27章 - 服務: 宏觀與微觀\u003c/a\u003e\u003c/h4\u003e\n\u003ch4 id=\"第28章---測試邊界clean_archch28\"\u003e\u003ca href=\"/clean_arch/ch28\"\u003e第28章 - 測試邊界\u003c/a\u003e\u003c/h4\u003e\n\u003ch4 id=\"第29章---整潔的嵌入式架構clean_archch29\"\u003e\u003ca href=\"/clean_arch/ch29\"\u003e第29章 - 整潔的嵌入式架構\u003c/a\u003e\u003c/h4\u003e\n\u003chr\u003e\n\u003ch3 id=\"第六部分-實現細節clean_archsec6\"\u003e\u003ca href=\"/clean_arch/sec6\"\u003e第六部分 實現細節\u003c/a\u003e]\u003c/h3\u003e\n\u003ch4 id=\"第30章---數據庫只是實現細節clean_archch30\"\u003e\u003ca href=\"/clean_arch/ch30\"\u003e第30章 - 數據庫只是實現細節\u003c/a\u003e\u003c/h4\u003e\n\u003ch4 id=\"第31章---web-是實現細節clean_archch31\"\u003e\u003ca href=\"/clean_arch/ch31\"\u003e第31章 - Web 是實現細節\u003c/a\u003e\u003c/h4\u003e\n\u003ch4 id=\"第32章---應用程式框架是實現細節clean_archch32\"\u003e\u003ca href=\"/clean_arch/ch32\"\u003e第32章 - 應用程式框架是實現細節\u003c/a\u003e\u003c/h4\u003e\n\u003ch4 id=\"第33章---案例分析-影片銷售網站clean_archch33\"\u003e\u003ca href=\"/clean_arch/ch33\"\u003e第33章 - 案例分析: 影片銷售網站\u003c/a\u003e\u003c/h4\u003e\n\u003ch4 id=\"第34章---拾遺clean_archch34\"\u003e\u003ca href=\"/clean_arch/ch34\"\u003e第34章 - 拾遺\u003c/a\u003e\u003c/h4\u003e","title":"[IT] Clean Architecture - Catalog"},{"content":"簡介 Spotifre 的視覺化工具(visualization)是可以被擴展的。已在 Spotfire 環境中部署的自定義視覺化工具將會出現在相同的位置並以相同的方式運作，就像 Spotfire 原生的視覺化工具一樣：它們可以從視覺化選單(visualization menu)、繪圖文本選單(plot context menus)、工具列中被訪問，並且可以與其它繪圖(plots)共享數據集(data sets)、標記(marking)和篩選(filtering)。 需要擴充的點 可視化框架的擴充點包括：\nCustomVisual, CustomVisualization - custom visuals 的基礎類別，custom visualization 是 custom visual 的子類別，具有一此額外的功能。 CustomVisualFactory - custom visualizations 的工廠基類(Factory base)，用於創建自定義可視化工具的實例。 CustomVisualView - CustomVisual 視圖的基類。 實作 建立模型 模型部分繼承自 CustomVisual 或 CustomVisualization。 CustomVisualization 是 CustomVisual 的子類別，並添加了指定 data table 和 marking 的功能。能夠指定當前 data table 和當前 marking 使視覺化能夠參與主細節情境。它還使框架能夠在 marking 記錄上實現命令並在狀態欄中顯示有關 filtering 和 marking 的行數的訊息。\nCustomVisualization 的 model資料可以來源自一個或一個以上的 data tables；而 CustomVisual 則是可以在 Page 中實作原生的 Text Area 和其它各種控制面板。\nThe model achieves this dual requirement by overriding two virtual methods defined by CustomVisual: 視覺化工具應該要能自行渲染，它應該要能感知到外觀變化並能通知環境產生對應動作。模型透該 overrides 兩個虛擬方法(virtual methods)來實現這兩個需求：\n覆寫 RenderCore 方法以執行繪圖。 覆寫 GetRenderTriggerCore 以定義何時需要重新繪製視覺區。 以下範例展示了一個最簡單的 visualization。它有兩個屬性(PropertyName)，代表資料表(data table)和標記(marking)。範例會繪製一個字串，說明在資料表中被標記的行數。\n[Serializable] [PersistenceVersion(1, 0)] public class MyVisualization : CustomVisualization { public new abstract class PropertyNames : CustomVisualization.PropertyNames { public static readonly PropertyName DataTableReference = CreatePropertyName(\u0026#34;DataTableReference\u0026#34;); public static readonly PropertyName MarkingReference = CreatePropertyName(\u0026#34;MarkingReference\u0026#34;); } private readonly UndoableCrossReferenceProperty\u0026lt;DataTable\u0026gt; dataTableReference; private readonly UndoableCrossReferenceProperty\u0026lt;DataMarkingSelection\u0026gt; markingReference; internal MyVisualization() { CreateProperty(PropertyNames.DataTableReference, out this.dataTableReference, null); CreateProperty(PropertyNames.MarkingReference, out this.markingReference, null); } public DataTable DataTableReference { get { return this.dataTableReference.Value; } set { this.dataTableReference.Value = value; } } public DataMarkingSelection MarkingReference { get { return this.markingReference.Value; } set { this.markingReference.Value = value; } } protected override void RenderCore(RenderArgs renderArgs) { // Clear our drawing surface. renderArgs.Graphics.FillRectangle(Brushes.White, renderArgs.Bounds); // Draw a string showing the number of marked rows. if (this.DataTableReference != null \u0026amp;\u0026amp; this.MarkingReference != null) { int markedRowsCount = this.MarkingReference.GetSelection(this.DataTableReference).IncludedRowCount; string message = string.Format( \u0026#34;{0} marked rows in table {1}\u0026#34;, markedRowsCount, this.DataTableReference.Name); renderArgs.Graphics.DrawString(message, SystemFonts.DefaultFont, Brushes.Black, renderArgs.Bounds); } } protected override Trigger GetRenderTriggerCore() { // Return a trigger that fires when the data table or marking properties change // or when the content of the marking changes. return Trigger.CreateCompositeTrigger( Trigger.CreatePropertyTrigger( this, PropertyNames.DataTableReference, PropertyNames.MarkingReference ), Trigger.CreateMutablePropertyTrigger\u0026lt;DataMarkingSelection\u0026gt;( this, PropertyNames.MarkingReference, DataMarkingSelection.PropertyNames.Selection ) ); } protected override DataTable GetActiveDataTableReference() { return this.dataTableReference.Value; } protected override Trigger GetActiveDataTableReferenceTriggerCore() { return Trigger.CreatePropertyTrigger(this, PropertyNames.DataTableReference); } protected override DataMarkingSelection GetActiveMarkingReferenceCore() { return this.markingReference.Value; } protected override Trigger GetActiveMarkingReferenceTriggerCore() { return Trigger.CreatePropertyTrigger(this, PropertyNames.MarkingReference); } private MyVisualization(SerializationInfo info, StreamingContext context) : base(info, context) { DeserializeProperty(info, context, PropertyNames.DataTableReference, out this.dataTableReference); DeserializeProperty(info, context, PropertyNames.MarkingReference, out this.markingReference); } protected override void GetObjectData(SerializationInfo info, StreamingContext context) { base.GetObjectData(info, context); SerializeProperty(info, context, this.dataTableReference); SerializeProperty(info, context, this.markingReference); } } 建立工廠 為了創建可視化工具，必須為其指定自定義工廠(custom factory)。該工廠負責創建和初始配置。還包含一些 metadata 如 UI commands 和 type identifier。\npublic sealed class MyCustomIdentifiers : CustomTypeIdentifiers { public static readonly CustomTypeIdentifier MyVisualizationIdentifier = CreateTypeIdentifier( \u0026#34;Acme.MyVisualization\u0026#34;, // Name \u0026#34;My Visualization\u0026#34;, // Display name \u0026#34;This is a description\u0026#34;); // Description } internal sealed class MyVisualizationFactory : CustomVisualFactory\u0026lt;MyVisualization\u0026gt; { internal MyVisualizationFactory() : base( MyCustomIdentifiers.MyVisualizationIdentifier, VisualCategory.Visualization, Properties.Resources.MyVisualizationImage, null) { } protected override void AutoConfigureCore(MyVisualization visualization) { // Find good default values for properties. DataManager dataManager = visualization.Context.GetService\u0026lt;DataManager\u0026gt;(); visualization.DataTableReference = dataManager.Tables.DefaultTableReference; visualization.MarkingReference = dataManager.Markings.DefaultMarkingReference; } } 可視化工廠是從 CustomVisualFactory 衍生而來的。請注意，自定義工廠類別並不會實例化可視化。實例化可視化是透過可視化的無參數建構函式由工廠基底類別來完成的。建構函式不必是公開的；但事實上，它不應該是公開的，因為讓 API 使用者建立可視化，然後將其插入到文件中是不合理的。\n當視覺化已經被創建並插入到文件節點層次結構中時，框架會在工廠上調用兩個虛擬方法：\nInitializeCore：它設置與數據無直接關係的屬性。 AutoConfigureCore：它使用適當的默認值為數據相關屬性（例如數據表、標記和列）配置視覺化。在上面的例子中，只有AutoConfigureCore方法被覆蓋。 註冊 Visualization 最後，視覺化工廠必須在框架中註冊。透過 overrides Add-in 中的 RegisterVisuals 完成。\npublic sealed class MyVisualizationAddIn : AddIn { protected override void RegisterVisuals(AddIn.VisualRegistrar registrar) { registrar.Register(new MyVisualizationFactory()); } } 現在，可以在 TIBCO Spotfire 中創建 visualization 了。然而，無法以任何方式配置視覺化或與之互動。為了進行這樣的操作，必須為之一個視圖(view)。\n建立視圖 自訂視覺化檢視 API 是在 Spotfire 應用程式中建立自訂視覺化的統一 API。隨著 TIBCO Spotfire 7.5 中修改的架構，帶來了代碼共享的好處。現在建議只使用基於 Web 的方法，而不是在 TIBCO Spotfire Analyst 和 TIBCO Spotfire Consumer 和 Business Author 中維護一個自訂代碼。基於 Web 的自訂視覺化將嵌入 TIBCO Spotfire Analyst 中，就像任何內部視覺化一樣。\n如果希望任何先前創建的自定義視覺化與新的 API 配合使用，則需要進行轉換。有關更多信息，請參閱將自定義 Web 視覺化轉換為 CustomVisualView API。\n一個自訂的視圖類別是從基礎類別 CustomVisualView 繼承而來。在 AddIn 類別中，該視圖在 RegisterViews 方法中註冊，例如：\nprotected override void RegisterViews(ViewRegistrar registrar) { base.RegisterViews(registrar); registrar.Register(typeof(CustomVisualView), typeof(MyVisual), typeof(MyVisualView)); } 初始化 Visualization CustomVisualView 的一個實例可以被視為一個嵌入式 Web 伺服器，通常會提供一個 HTML 檔案，以及一些資源，例如 JavaScript 檔案、圖片等。 為了初始化視覺化，要 override GetResourceCore 方法：\nprotected override HttpContent GetResourceCore(string path, NameValueCollection query, MyVisual snapshotNode) { if (string.IsNullOrEmpty(path)) { path = \u0026#34;MyVisual.html\u0026#34;; } var bytes = GetEmbeddedResource(\u0026#34;SpotfireDeveloper.CustomVisualsExample.webroot.\u0026#34; + path); return new HttpContent(\u0026#34;text/html\u0026#34;, bytes); } 從技術上講，當最終用戶創建自定義類型的可視化時，內部將發生的是一個“嵌入式 Web 客戶端”（一個 iFrame HTML 元素）將出現在當前頁面上，並且該 Web 客戶端將使用 URL \u0026ldquo;/\u0026rdquo; 進行 HTTP 請求。該請求將被路由到調用上面的 GetResourceCore 方法。在上面的示例中，將檢索 MyVisual.html。該 HTML 文件可能反過來加載任何資源：\n\u0026lt;script src=”http://code.jquery.com/jquery-1.11.2.min.js”\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=”myscript.js”\u0026gt;\u0026lt;/script\u0026gt; 請求 myscript.js 是使用相對路徑指定的，因此它將由被覆蓋的 GetResourceCore 方法處理。在上面的示例中，查找 webroot 文件夾中 JavaScript 文件的位置並嵌入該文件。但是，JavaScript 文件可以以任何方式獲取。例如，在調試的情況下，從硬編碼的路徑獲取文件可能很有用，以避免重建項目。\n客戶導向互動 您的自訂視覺化可以被視為分為客戶端和服務器端，其中客戶端是“視圖”，服務器端是“模型”。 提供了一些工具來簡化與伺服器的通訊。\n讀取資料 當「SpotfireLoaded」事件被觸發時，客戶端和伺服器之間的通訊通道就會開啟。在這個例子中，Spotfire.read 函數會從伺服器取回資料。\n$(window).on(\u0026#34;SpotfireLoaded\u0026#34;, function() { Spotfire.read(\u0026#34;GetData\u0026#34;, {\u0026#34;argument\u0026#34;: \u0026#34;value\u0026#34;}, function(data) { if (data) { // typically re-render the visualization, but this example // just displays the returned value alert(data); } }); }); Spotfire.read 函數需要三個參數：\n一個方法識別符(method identifier)。 一個參數物件(argument object) 一個 callback 在伺服器端，讀取呼叫由ReadCore方法處理： protected override string ReadCore(string method, string args, MyVisual snapshotNode) { if (method.Equals(\u0026#34;GetData\u0026#34;, StringComparison.OrdinalIgnoreCase)) { // typically retrieve some data from the document, // but this example just echoes the input argument return args; } return base.ReadCore(method, args, snapshotNode); } 請注意，當讀取數據時，服務代碼會在後台線程上執行。這允許多個同時讀取操作。\n寫入數據 當客戶需要修改文件時，例如標記數據時，請使用：\nSpotfire.modify(\u0026#34;Mark\u0026#34;, {\u0026#39;rectangle\u0026#39;: someObject}); 在伺服器端，修改呼叫由 ModifyCore 方法處理：\nprotected override void ModifyCore(string method, string args, MyVisual liveNode) { if (\u0026#34;Mark\u0026#34;.Equals(method, StringComparison.Ordinal)) { liveNode.MarkArea(/* … */); } } 請注意，文件的修改是在主線程上執行的，因此修改文件是安全的。\n伺服器驅動的互動 從伺服器端，可以觸發客戶端的事件處理程序，例如：\nprotected override void OnUpdateRequiredCore() { this.InvokeClientEventHandler(\u0026#34;render\u0026#34;, null); } 如需更多資訊，請參閱 OnUpdateRequiredCore。 當客戶端必須更新時，此代碼將運行，通過觸發\u0026quot;渲染\u0026quot;事件。 在客戶端：\nvar render = function(data) { // Typically call Spotfire.read(...) // data will be the argument from the server invocation - null in this example }; Spotfire.addEventHandler(\u0026#34;render\u0026#34;, render); 匯出時呈現自訂視覺效果。 在使用 7.10 中引入的新匯出框架進行匯出時，有一些事情需要考慮，以使自訂視覺效果呈現得漂亮。在此處了解更多。\n","permalink":"https://intervalrain.github.io/dxp/customvisualization/","summary":"\u003ch2 id=\"簡介\"\u003e簡介\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eSpotifre 的視覺化工具(visualization)是可以被擴展的。已在 Spotfire 環境中部署的自定義視覺化工具將會出現在相同的位置並以相同的方式運作，就像 Spotfire 原生的視覺化工具一樣：它們可以從視覺化選單(visualization menu)、繪圖文本選單(plot context menus)、工具列中被訪問，並且可以與其它繪圖(plots)共享數據集(data sets)、標記(marking)和篩選(filtering)。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"需要擴充的點\"\u003e需要擴充的點\u003c/h2\u003e\n\u003cp\u003e可視化框架的擴充點包括：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eCustomVisual\u003c/code\u003e, \u003ccode\u003eCustomVisualization\u003c/code\u003e - custom visuals 的基礎類別，custom visualization 是 custom visual 的子類別，具有一此額外的功能。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eCustomVisualFactory\u003c/code\u003e - custom visualizations 的工廠基類(Factory base)，用於創建自定義可視化工具的實例。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eCustomVisualView\u003c/code\u003e - CustomVisual 視圖的基類。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"實作\"\u003e實作\u003c/h2\u003e\n\u003ch3 id=\"建立模型\"\u003e建立模型\u003c/h3\u003e\n\u003cp\u003e模型部分繼承自 \u003ccode\u003eCustomVisual\u003c/code\u003e 或 \u003ccode\u003eCustomVisualization\u003c/code\u003e。 \u003ccode\u003eCustomVisualization\u003c/code\u003e 是 \u003ccode\u003eCustomVisual\u003c/code\u003e 的子類別，並添加了指定 data table 和 marking 的功能。能夠指定當前 data table 和當前 marking 使視覺化能夠參與主細節情境。它還使框架能夠在 marking 記錄上實現命令並在狀態欄中顯示有關 filtering 和 marking 的行數的訊息。\u003c/p\u003e\n\u003cp\u003eCustomVisualization 的 model資料可以來源自一個或一個以上的 data tables；而 CustomVisual 則是可以在 Page 中實作原生的 Text Area 和其它各種控制面板。\u003c/p\u003e","title":"[DXP] 在 spotfire 中創建自定義視覺化工具"},{"content":"前言 什麼是機器學習 機器學習(Machine Learning)，就是利用機器的力量幫忙找出函式。 Input 可以是 vector matrix sequence Output 可以是 Regression Classification Structed Learning(令機器產生有結構的東西 eg. text, image) 示意圖 什麼是深度學習 深度學習(Deep Learning)，就是利用神經網路(neural network)的方式來產生函數。 機器如何學習 1. 基本原理(訓練三步驟) Step 1: 使用合適的 Model \\(y=f(\\text{\\red{data}})\\) Function with unknown parameters Model: \\(\\boxed{y=b+wx_1}\\) \\(w: \\text{weight}\\) \\(b: \\text{bias}\\) \\(x: \\text{feature}\\) Step 2: 定義 Loss function Define loss from training data 以 Model 的參數 \\(w,b\\) 來計算 Loss 物理意義：Loss 愈大代表參數愈不好，Loss 愈小代表參數愈好。 計算方法：求估計的值與實際的值(label)之間的差距 Loss function: \\(\\boxed{L=\\frac{1}{N}\\sum_ne_n}\\) MAE (mean absolute error): \\(e=|y-\\hat{y}|\\) MSE (mean square error): \\(e=(y-\\hat{y})^2\\) Cross-entropy: 計算機率分布之間的差距 Error Surface: 根據不同的參數，計算出 loss 所畫出來的等高線圖。 Step 3: Optimization 找到 loss 最小的參數組合 \\((w,b)\\) 方法：Gradient Descent \\(\\boxed{w\u0026rsquo; = w - \\red{\\eta}\\frac{\\partial L}{\\partial w}|_{w=w^0,b=b^0}}\\) \\(\\boxed{b\u0026rsquo; = b - \\red{\\eta}\\frac{\\partial L}{\\partial b}|_{w=w^0,b=b^0}}\\) \\(\\red{\\eta}\\): 學習率 learning rate, 決定 gradient descent 的一步有多大步 2. Linear Model \\(\\boxed{f\\leftarrow y=b+\\sum_{j=1}^{n}{w_jx_j}}\\) 不只考慮前一天的觀看人數 \\(x_1\\)，也考慮前二~七天 \\(x_2, x_3, \u0026hellip; , x_7\\)。 當參數變多時，命中率可望有效提升。 3. Piecewise Linear Curves(Sigmoid) \\(\\text{Sigmoid Function:} \\boxed{y=\\red{c}\\frac{1}{1+e^{-(\\green{b}+\\blue{w}x_1)}}}=\\boxed{\\red{c}\\text{ sigmoid}(\\green{b}+\\blue{w}x_1)}\\) 將 \\(w_ix_i\\) 替換成 \\(c_i\\text{ sigmoid}(b_i+w_ix_i)\\) 特徵為1時，\\(\\boxed{y=b+\\sum_i{c_i\\text{ sigmoid}(b_i+ w_ix_1)}}\\) 特徵\u0026gt;1時，\\(\\boxed{y=b+\\sum_i{c_i\\text{ sigmoid}(b_i+\\sum_j w_{ij}x_j)}}\\) 意義：一條曲線可以由多個鋸齒狀的線段(hard sigmoid)的總合，我們可以用 sigmoid 函數來逼近 hard sigmoid。事實上，sigmoid 的個數就是神經網路中一層 neuron 的 node 數，至於使用幾個 sigmoid 是 hyper parameter。 可將公式轉成矩陣計算\u0026#43;激勵函數的形式： 以線性代數方式表示：\\(\\boxed{y=b+c^T\\sigma(b_i+Wx)}\\) 將 \\(b\\)、\\(b_i\\)、\\(W\\)、\\(c^T\\) 等所有參數統稱為 \\(\\theta\\) 故 Loss 可表示成 \\(L(\\theta)\\) 重覆 gradient descent 的方法，更新(update) 參數。 梯度 gradient，\\(g=\\) \\(\\begin{bmatrix}\\frac{\\partial L}{\\partial \\theta_1}|_{\\theta=\\theta^0}\\\\\\frac{\\partial L}{\\partial \\theta_2}| _{\\theta=\\theta^0}\\\\\\vdots\\end{bmatrix}=\\nabla L(\\theta^0)\\) 更新(update)計算：\\(\\begin{bmatrix}\\theta_1^1\\\\\\theta_2^1\\\\\\vdots\\end{bmatrix}\\leftarrow\\begin{bmatrix}\\theta_1^0\\\\\\theta_2^0\\\\\\vdots\\end{bmatrix}-\\begin{bmatrix}\\eta \\frac{\\partial L}{\\partial \\theta_1}|_{\\theta=\\theta^0}\\\\\\eta\\frac{\\partial L}{\\partial\\theta_2}| _{\\theta=\\theta^0}\\\\\\vdots\\end{bmatrix}\\) 或寫成 \\(\\theta^1\\leftarrow \\theta^0-\\eta g\\) batch training 將樣本依批次(batch)進行更新，當所有的 batches 都跑過一遍，稱為一個 epoch 4. ReLU 用 hard sigmoid 的方式來表示。 其每一個 hard sigmoid 由兩個 Rectified Linear Unit(ReLU) 組成， 每一個 ReLU 寫成：\\(\\boxed{\\red{c}\\text{ max}(0,\\green{b}+\\blue{w}x_1)}\\) 故 Model 可以寫成：\\(\\boxed{y=b+\\sum_{\\red{2}i}\\text{max}(0,b_i+\\sum_j{w_{ij}x_j})}\\) 其中我們選用來逼近的函式，稱為 Activation function。 深度學習 Neural Network \\(\\boxed{y=b+c^T\\sigma(b_i+Wx)}\\) Multiple hidden layers -\u0026gt; Deep learning ","permalink":"https://intervalrain.github.io/ml/lhy01/","summary":"\u003ch1 id=\"前言\"\u003e前言\u003c/h1\u003e\n\u003c!-- \u003cimg src=\"/ML/lhy/1_1.png\" width=\"500\"\u003e --\u003e\n\u003c!-- ![1_1](/ML/lhy/1_1.png) --\u003e\n\u003cdetails\u003e\n    \u003csummary\u003e什麼是機器學習\u003c/summary\u003e\n\n\u003cul\u003e\n\u003cli\u003e機器學習(Machine Learning)，就是利用機器的力量幫忙找出函式。\n\u003cul\u003e\n\u003cli\u003eInput 可以是\n\u003cul\u003e\n\u003cli\u003evector\u003c/li\u003e\n\u003cli\u003ematrix\u003c/li\u003e\n\u003cli\u003esequence\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eOutput 可以是\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eRegression\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eClassification\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eStructed Learning\u003c/strong\u003e(令機器產生有結構的東西 eg. text, image)\n\u003cdetails\u003e\n    \u003csummary\u003e示意圖\u003c/summary\u003e\n\n\u003cimg alt=\"1_1\" loading=\"lazy\" src=\"/ML/lhy/1_1.png\"\u003e\n\u003c/details\u003e\n\n\u003c/details\u003e\n\n\u003cdetails\u003e\n    \u003csummary\u003e什麼是深度學習\u003c/summary\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e深度學習(Deep Learning)，就是利用神經網路(neural network)的方式來產生函數。\n\u003c/details\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"機器如何學習\"\u003e機器如何學習\u003c/h1\u003e\n\u003ch2 id=\"1-基本原理訓練三步驟\"\u003e1. 基本原理(訓練三步驟)\u003c/h2\u003e\n\u003cp\u003e\u003cimg alt=\"1_2\" loading=\"lazy\" src=\"/ML/lhy/1_2.png\"\u003e\u003c/p\u003e\n\u003cdetails\u003e\n    \u003csummary\u003eStep 1: 使用合適的 Model\u003c/summary\u003e\n\n\u003cul\u003e\n\u003cli\u003e\\(y=f(\\text{\\red{data}})\\)\n\u003cul\u003e\n\u003cli\u003eFunction with unknown parameters\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eModel\u003c/strong\u003e: \\(\\boxed{y=b+wx_1}\\)\n\u003cul\u003e\n\u003cli\u003e\\(w: \\text{weight}\\)\u003c/li\u003e\n\u003cli\u003e\\(b: \\text{bias}\\)\u003c/li\u003e\n\u003cli\u003e\\(x: \\text{feature}\\)\n\u003c/details\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdetails\u003e\n    \u003csummary\u003eStep 2: 定義 Loss function\u003c/summary\u003e\n\n\u003cul\u003e\n\u003cli\u003eDefine loss from training data\n\u003cul\u003e\n\u003cli\u003e以 Model 的參數 \\(w,b\\) 來計算 Loss\u003c/li\u003e\n\u003cli\u003e物理意義：Loss 愈大代表參數愈不好，Loss 愈小代表參數愈好。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e計算方法：求估計的值與實際的值(label)之間的差距\n\u003cul\u003e\n\u003cli\u003eLoss function: \\(\\boxed{L=\\frac{1}{N}\\sum_ne_n}\\)\u003c/li\u003e\n\u003cli\u003eMAE (mean absolute error): \\(e=|y-\\hat{y}|\\)\u003c/li\u003e\n\u003cli\u003eMSE (mean square error): \\(e=(y-\\hat{y})^2\\)\u003c/li\u003e\n\u003cli\u003eCross-entropy: 計算\u003cstrong\u003e機率分布\u003c/strong\u003e之間的差距\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cem\u003e\u003cstrong\u003eError Surface\u003c/strong\u003e\u003c/em\u003e: 根據不同的參數，計算出 loss 所畫出來的等高線圖。\n\u003cimg alt=\"1_3\" loading=\"lazy\" src=\"/ML/lhy/1_3.png\"\u003e\n\u003c/details\u003e\n\n\u003cdetails\u003e\n    \u003csummary\u003eStep 3: Optimization\u003c/summary\u003e\n\u003c/li\u003e\n\u003cli\u003e找到 loss 最小的參數組合 \\((w,b)\\)\u003c/li\u003e\n\u003cli\u003e方法：\u003cstrong\u003eGradient Descent\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e\\(\\boxed{w\u0026rsquo; = w - \\red{\\eta}\\frac{\\partial L}{\\partial w}|_{w=w^0,b=b^0}}\\)\u003c/li\u003e\n\u003cli\u003e\\(\\boxed{b\u0026rsquo; = b - \\red{\\eta}\\frac{\\partial L}{\\partial b}|_{w=w^0,b=b^0}}\\)\u003c/li\u003e\n\u003cli\u003e\\(\\red{\\eta}\\): \u003cstrong\u003e學習率 learning rate\u003c/strong\u003e, 決定 gradient descent 的一步有多大步\n\u003cimg alt=\"1_4\" loading=\"lazy\" src=\"/ML/lhy/1_4.png\"\u003e\n\u003c/details\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"2-linear-model\"\u003e2. Linear Model\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\\(\\boxed{f\\leftarrow y=b+\\sum_{j=1}^{n}{w_jx_j}}\\)\n\u003cul\u003e\n\u003cli\u003e不只考慮前一天的觀看人數 \\(x_1\\)，也考慮前二~七天 \\(x_2, x_3, \u0026hellip; , x_7\\)。\u003c/li\u003e\n\u003cli\u003e當參數變多時，命中率可望有效提升。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"3-piecewise-linear-curvessigmoid\"\u003e3. Piecewise Linear Curves(Sigmoid)\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\\(\\text{Sigmoid Function:} \\boxed{y=\\red{c}\\frac{1}{1+e^{-(\\green{b}+\\blue{w}x_1)}}}=\\boxed{\\red{c}\\text{ sigmoid}(\\green{b}+\\blue{w}x_1)}\\)\u003c/li\u003e\n\u003cli\u003e將 \\(w_ix_i\\) 替換成 \\(c_i\\text{ sigmoid}(b_i+w_ix_i)\\)\n\u003cul\u003e\n\u003cli\u003e特徵為1時，\\(\\boxed{y=b+\\sum_i{c_i\\text{ sigmoid}(b_i+ w_ix_1)}}\\)\u003c/li\u003e\n\u003cli\u003e特徵\u0026gt;1時，\\(\\boxed{y=b+\\sum_i{c_i\\text{ sigmoid}(b_i+\\sum_j w_{ij}x_j)}}\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e意義：一條曲線可以由多個鋸齒狀的線段(hard sigmoid)的總合，我們可以用 sigmoid 函數來逼近 hard sigmoid。事實上，sigmoid 的個數就是神經網路中一層 neuron 的 node 數，至於使用幾個 sigmoid 是 hyper parameter。\n\u003cimg alt=\"1_5\" loading=\"lazy\" src=\"/ML/lhy/1_5.png\"\u003e\n\u003cdetails\u003e\n    \u003csummary\u003e可將公式轉成矩陣計算\u0026#43;激勵函數的形式：\u003c/summary\u003e\n\n\u003cimg alt=\"1_6\" loading=\"lazy\" src=\"/ML/lhy/1_6.png\"\u003e\n\u003cimg alt=\"1_7\" loading=\"lazy\" src=\"/ML/lhy/1_7.png\"\u003e\n\u003cimg alt=\"1_8\" loading=\"lazy\" src=\"/ML/lhy/1_8.png\"\u003e\n\u003c/details\u003e\n\u003c/li\u003e\n\u003cli\u003e以線性代數方式表示：\\(\\boxed{y=b+c^T\\sigma(b_i+Wx)}\\)\n\u003cul\u003e\n\u003cli\u003e將 \\(b\\)、\\(b_i\\)、\\(W\\)、\\(c^T\\) 等所有參數統稱為 \\(\\theta\\)\u003c/li\u003e\n\u003cli\u003e故 Loss 可表示成 \\(L(\\theta)\\)\u003c/li\u003e\n\u003cli\u003e重覆 gradient descent 的方法，更新(update) 參數。\u003c/li\u003e\n\u003cli\u003e梯度 gradient，\\(g=\\)\n\\(\\begin{bmatrix}\\frac{\\partial L}{\\partial \\theta_1}|_{\\theta=\\theta^0}\\\\\\frac{\\partial L}{\\partial \\theta_2}| _{\\theta=\\theta^0}\\\\\\vdots\\end{bmatrix}=\\nabla L(\\theta^0)\\)\u003c/li\u003e\n\u003cli\u003e更新(update)計算：\\(\\begin{bmatrix}\\theta_1^1\\\\\\theta_2^1\\\\\\vdots\\end{bmatrix}\\leftarrow\\begin{bmatrix}\\theta_1^0\\\\\\theta_2^0\\\\\\vdots\\end{bmatrix}-\\begin{bmatrix}\\eta \\frac{\\partial L}{\\partial \\theta_1}|_{\\theta=\\theta^0}\\\\\\eta\\frac{\\partial L}{\\partial\\theta_2}| _{\\theta=\\theta^0}\\\\\\vdots\\end{bmatrix}\\)\u003c/li\u003e\n\u003cli\u003e或寫成 \\(\\theta^1\\leftarrow \\theta^0-\\eta g\\)\n\u003cdetails\u003e\n        \u003csummary\u003ebatch training\u003c/summary\u003e\n\n\u003cimg alt=\"1_9\" loading=\"lazy\" src=\"/ML/lhy/1_9.png\"\u003e\n\u003c/details\u003e\n\u003c/li\u003e\n\u003cli\u003e將樣本依批次(batch)進行更新，當所有的 batches 都跑過一遍，稱為一個 \u003cstrong\u003eepoch\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"4-relu\"\u003e4. ReLU\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e用 hard sigmoid 的方式來表示。\n\u003cul\u003e\n\u003cli\u003e其每一個 hard sigmoid 由兩個 \u003cstrong\u003eRectified Linear Unit(ReLU)\u003c/strong\u003e 組成，\u003c/li\u003e\n\u003cli\u003e每一個 ReLU 寫成：\\(\\boxed{\\red{c}\\text{ max}(0,\\green{b}+\\blue{w}x_1)}\\)\u003c/li\u003e\n\u003cli\u003e故 Model 可以寫成：\\(\\boxed{y=b+\\sum_{\\red{2}i}\\text{max}(0,b_i+\\sum_j{w_{ij}x_j})}\\)\u003c/li\u003e\n\u003cli\u003e其中我們選用來逼近的函式，稱為 \u003cstrong\u003eActivation function\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"深度學習\"\u003e深度學習\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eNeural Network\n\u003cul\u003e\n\u003cli\u003e\\(\\boxed{y=b+c^T\\sigma(b_i+Wx)}\\)\u003c/li\u003e\n\u003cli\u003eMultiple hidden layers -\u0026gt; Deep learning\n\u003cimg alt=\"1_10\" loading=\"lazy\" src=\"/ML/lhy/1_10.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","title":"[ML] 01. 機器學習基本概念簡介"},{"content":"LOH(Large Object Heap) GC .NET 具有 GC(garbage collector)，使開發員不需要過多考慮記憶體控管，因為 GC 會自動移除「死掉的」物件，並將記憶體重排。 這些小的物件會透過釋放死的物件，並移動集合中存活的物件，以確保沒有間隙。（事實上並非原地移動，而是將之全部複製到新的記憶體區塊，這樣可以簡化分配記憶體的過程，這樣意味著，空間都會出現在區塊的尾端，所以不需要進行掃描來找尋記憶體區塊來儲存新的物件。 LOH LOH(Large Object Heap) 指的是大型物件堆，也就是大小超過 85000 bytes 的物件，GC 會將之視為獨立的部分，GC 會優先處理其它的堆，原因是若要透過複製移動的方法來重新分配 LOH，它們需要兩倍的記憶體來進行，會使得 GC 花費大量的時間進行任務。 取而代之，GC 不會移動 LOH，而是將之留在原地，使得空間變得碎片化(fragmented)。當移除 LOH 時，會將空間原地保留，當要放入新的物件時，若區塊的尾端沒有足夠的空間，則會在這些 LOH 之間的空洞找尋可用空間，在沒有足夠空間時，擴展堆。 隨著時間堆移，即使不會發生 memory leakage，由於 LOH 之間的碎片空間會愈來愈小，不足以放置新的物件。在最糟的狀況下，這些碎片空間佔有的空間很大，但又不足以放置新的物件，且碎片的個數很多，這可能就會導致更多的產生 OutOfMemoryException。 如何解決 防止或減少使用大型物件的需求。 定期停止或重啟受影響的應用程式。 將大型物件重構成不同的數據結構，如 100000 個元素的數組，儲存成 10 個 10000 個元素的數組。 System.Collections 中也有一個 Capacity 的屬性來促進這種設計模式來避免大型物件的產生，有效的共享大型數據結構也有助於減少大型物件。 Reference: Andrew Hunter - The Dangers of the Large Object Heap\nReference: Microsoft - The large object heap on Windows systems\n","permalink":"https://intervalrain.github.io/csharp/loh/","summary":"\u003ch1 id=\"lohlarge-object-heap\"\u003eLOH(Large Object Heap)\u003c/h1\u003e\n\u003ch2 id=\"gc\"\u003eGC\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e.NET 具有 GC(garbage collector)，使開發員不需要過多考慮記憶體控管，因為 GC 會自動移除「死掉的」物件，並將記憶體重排。\u003c/li\u003e\n\u003cli\u003e這些小的物件會透過釋放死的物件，並移動集合中存活的物件，以確保沒有間隙。（事實上並非原地移動，而是將之全部複製到新的記憶體區塊，這樣可以簡化分配記憶體的過程，這樣意味著，空間都會出現在區塊的尾端，所以不需要進行掃描來找尋記憶體區塊來儲存新的物件。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"loh\"\u003eLOH\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eLOH(Large Object Heap) 指的是大型物件堆，也就是大小超過 85000 bytes 的物件，GC 會將之視為獨立的部分，GC 會優先處理其它的堆，原因是若要透過複製移動的方法來重新分配 LOH，它們需要兩倍的記憶體來進行，會使得 GC 花費大量的時間進行任務。\u003c/li\u003e\n\u003cli\u003e取而代之，GC 不會移動 LOH，而是將之留在原地，使得空間變得碎片化(fragmented)。當移除 LOH 時，會將空間原地保留，當要放入新的物件時，若區塊的尾端沒有足夠的空間，則會在這些 LOH 之間的空洞找尋可用空間，在沒有足夠空間時，擴展堆。\u003c/li\u003e\n\u003cli\u003e隨著時間堆移，即使不會發生 memory leakage，由於 LOH 之間的碎片空間會愈來愈小，不足以放置新的物件。在最糟的狀況下，這些碎片空間佔有的空間很大，但又不足以放置新的物件，且碎片的個數很多，這可能就會導致更多的產生 \u003cstrong\u003eOutOfMemoryException\u003c/strong\u003e。\n\u003cimg alt=\"LOH\" loading=\"lazy\" src=\"https://www.red-gate.com/simple-talk/wp-content/uploads/imported/674-image002.gif\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"如何解決\"\u003e如何解決\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e防止或減少使用大型物件的需求。\u003c/li\u003e\n\u003cli\u003e定期停止或重啟受影響的應用程式。\u003c/li\u003e\n\u003cli\u003e將大型物件重構成不同的數據結構，如 100000 個元素的數組，儲存成 10 個 10000 個元素的數組。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSystem.Collections\u003c/strong\u003e 中也有一個 \u003ccode\u003eCapacity\u003c/code\u003e 的屬性來促進這種設計模式來避免大型物件的產生，有效的共享大型數據結構也有助於減少大型物件。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003ca href=\"https://www.red-gate.com/simple-talk/development/dotnet-development/the-dangers-of-the-large-object-heap/\"\u003eReference: Andrew Hunter - The Dangers of the Large Object Heap\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/large-object-heap\"\u003eReference: Microsoft - The large object heap on Windows systems\u003c/a\u003e\u003c/p\u003e","title":"[C#] Large Object Heap"},{"content":"Spotfire Extension Spotfire Extension 是添加到平台的最小功能單元。它是在 Visual Studio® 中開發的，並包含在 Spotfire 外掛中，使版本控制、授權、部署和加載成為可能。本主題描述了開發 Extension 時需要的關鍵概念，以添加自定義功能到 Spotfire 平台。\nAdd-in Extensions 以 add-in 的方式載入 Spotifre 中。Spotfire 處理版本控制、部署及為擴充功能註冊。Spotfire extension 的設計燈南規定每個 add-in 都必須包含一個繼承 AddIn Class 的類別。Add-in 基本上是由在從 SDK 模板創建專案時提供的資訊所定義的。Add-in project 可以包含一或多個 extensions，故專案也可以輕鬆的透過添加其它擴充來建立新的版本。 每個擴充功能都是由一組類別實現的，通常是透過 override base class 來定義擴充類別，並透過覆寫特定擴充類別的方法 Register[ExtensionType]()，宣告式地進行 add-in 的註冊。每個這樣的方法都會傳遞一個 registrar，允許 add-in 在適當的 registry 進行註冊。例如在註冊新的工具(tool)時，必須要 override 方法 RegisterTools(ToolRegister)。在授權擴充功能時也會使用類似的方法。 如果一個模組有有效的模組定義檔案，則被定義為適合在 Spotfire 中載入。它通過定義 AddIn 類別的完全限定類型名稱和組件名稱來向應用程式聲明這個外掛程式。它還聲明了一個唯一的專案GUID和 assembly 的強名稱(string name)。這些組合唯一地識別了專案和外掛程式。因此，Extension assembly 必須使用強名稱金鑰(string name key)文件（.snk）簽名。擴展專案模板包含一個默認金鑰。可以用自己的金鑰文件替換此金鑰文件，但如果這樣做，請務必相應地修改模組定義檔案。 Extesnion Type IronPython 提供一種輕量的方式，便可在分析本身中添加複雜的行為，無需透過開發工具與部署機制，便可快速的創建小型的應用程序。而當需要創建自定義的功能時，就需要用到 C# 的擴充機制。 Custom Tool Custom Tool 用於擴充在 Spotfire 中特定文本(context) 上的操作。文本可以是 Spotfire 應用程式(application)本身、檔案庫(document)、或是每個特定的可視化類型(visualization)。 包含 Custom Tool、Custom Export Tool、Custom Share Tool Custom Panel Custom Panel 是通用 UI 組件，用於視覺化文本資訊、添加控制項或其它特定的功能。 Custom Visualization Custom Visualization 可用來擴充 Spotfire 的 Visualization Set，使之可以從 Visualization 選單中、繪圖文本(plot context)清單上、工具列中被選擇，並與其它繪圖工具一樣享有數據集、標記(marking)、與篩選(filtering )功能。 Custom Value Renderer Custom Value Renderer 用來呈現表格視覺化列中的值。最常見的情況是將數據值轉成圖像，在表格中呈現。 Custom Data Source Custom Data Source 用來匯入任何自訂的外部資料來源。 Custom Data Function Custom Data Function 用自定義的公式將文件中的資料進行計算後輸出到文件的其它位置。 Custom Data Tranformation Custom Data Transformation 在資料讀取和建立表格之間添加了一層，提供在匯入資料前修改資料的方法。資料轉換將一個規則或函數應用於檢索到的資料，以準備進行分析。 Custom Data Writer Custom Data Writer 用於匯出自定義格式的檔案。 Custom Expression Functions Custom Expression Functions 可以擴展在自定義表達式和計算列中使用的表達式語言。可以是基於行、列或聚合方法。 Custom Fitting Model Custom Fitting Model 由 Visualization 的座標和參數計算出值，以繪值對應的參考點或曲線。 Custom Virtual Column Custom Virtual Column 根據一個或多個現有的列和文件屬性創建新的欄。 Custom Preference Custom Preference 偏好設定，也稱作 Configuration Sets。 Custom License Custom License 可用於自訂授權。 Custom Node Custom Node 可以添加項目到 spotfire document model 中，並序列化到 dxp 文件中。 Custom Application Event Handler Custom Application Event Handler 可用來監控並回應應用程式事件。 ","permalink":"https://intervalrain.github.io/dxp/extension/","summary":"\u003ch1 id=\"spotfire-extension\"\u003eSpotfire Extension\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eSpotfire Extension 是添加到平台的最小功能單元。它是在 Visual Studio® 中開發的，並包含在 Spotfire 外掛中，使版本控制、授權、部署和加載成為可能。本主題描述了開發 Extension 時需要的關鍵概念，以添加自定義功能到 Spotfire 平台。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"add-in\"\u003eAdd-in\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eExtensions 以 \u003ccode\u003eadd-in\u003c/code\u003e 的方式載入 Spotifre 中。Spotfire 處理版本控制、部署及為擴充功能註冊。Spotfire extension 的設計燈南規定每個 add-in 都必須包含一個繼承 \u003ccode\u003eAddIn Class\u003c/code\u003e 的類別。Add-in 基本上是由在從 SDK 模板創建專案時提供的資訊所定義的。Add-in project 可以包含一或多個 extensions，故專案也可以輕鬆的透過添加其它擴充來建立新的版本。\u003c/li\u003e\n\u003cli\u003e每個擴充功能都是由一組類別實現的，通常是透過 \u003ccode\u003eoverride base class\u003c/code\u003e 來定義擴充類別，並透過覆寫特定擴充類別的方法 \u003ccode\u003eRegister[ExtensionType]()\u003c/code\u003e，宣告式地進行 add-in 的註冊。每個這樣的方法都會傳遞一個 registrar，允許 add-in 在適當的 registry 進行註冊。例如在註冊新的工具(tool)時，必須要 override 方法 \u003ccode\u003eRegisterTools(ToolRegister)\u003c/code\u003e。在授權擴充功能時也會使用類似的方法。\u003c/li\u003e\n\u003cli\u003e如果一個模組有有效的模組定義檔案，則被定義為適合在 Spotfire 中載入。它通過定義 \u003ccode\u003eAddIn\u003c/code\u003e 類別的完全限定類型名稱和組件名稱來向應用程式聲明這個外掛程式。它還聲明了一個唯一的專案GUID和 assembly 的強名稱(string name)。這些組合唯一地識別了專案和外掛程式。因此，Extension assembly 必須使用強名稱金鑰(string name key)文件（.snk）簽名。擴展專案模板包含一個默認金鑰。可以用自己的金鑰文件替換此金鑰文件，但如果這樣做，請務必相應地修改模組定義檔案。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"extesnion-type\"\u003eExtesnion Type\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eIronPython 提供一種輕量的方式，便可在分析本身中添加複雜的行為，無需透過開發工具與部署機制，便可快速的創建小型的應用程序。而當需要創建自定義的功能時，就需要用到 C# 的擴充機制。\n\u003cimg alt=\"extension type\" loading=\"lazy\" src=\"https://supportinfo.tibco.com/stca/comm/How-to-choose-between-using-IronPython-scripting-and-creating-a-C-Extension-when-developing-for-TIBCO-Spotfire-3.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"custom-tool\"\u003eCustom Tool\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eCustom Tool 用於擴充在 Spotfire 中特定文本(context) 上的操作。文本可以是 Spotfire 應用程式(application)本身、檔案庫(document)、或是每個特定的可視化類型(visualization)。\u003c/li\u003e\n\u003cli\u003e包含 \u003ccode\u003eCustom Tool\u003c/code\u003e、\u003ccode\u003eCustom Export Tool\u003c/code\u003e、\u003ccode\u003eCustom Share Tool\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"custom-panel\"\u003eCustom Panel\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eCustom Panel 是通用 UI 組件，用於視覺化文本資訊、添加控制項或其它特定的功能。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"custom-visualization\"\u003eCustom Visualization\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eCustom Visualization 可用來擴充 Spotfire 的 Visualization Set，使之可以從 Visualization 選單中、繪圖文本(plot context)清單上、工具列中被選擇，並與其它繪圖工具一樣享有數據集、標記(marking)、與篩選(filtering )功能。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"custom-value-renderer\"\u003eCustom Value Renderer\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eCustom Value Renderer 用來呈現表格視覺化列中的值。最常見的情況是將數據值轉成圖像，在表格中呈現。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"custom-data-source\"\u003eCustom Data Source\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eCustom Data Source 用來匯入任何自訂的外部資料來源。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"custom-data-function\"\u003eCustom Data Function\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eCustom Data Function 用自定義的公式將文件中的資料進行計算後輸出到文件的其它位置。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"custom-data-tranformation\"\u003eCustom Data Tranformation\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eCustom Data Transformation 在資料讀取和建立表格之間添加了一層，提供在匯入資料前修改資料的方法。資料轉換將一個規則或函數應用於檢索到的資料，以準備進行分析。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"custom-data-writer\"\u003eCustom Data Writer\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eCustom Data Writer 用於匯出自定義格式的檔案。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"custom-expression-functions\"\u003eCustom Expression Functions\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eCustom Expression Functions 可以擴展在自定義表達式和計算列中使用的表達式語言。可以是基於行、列或聚合方法。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"custom-fitting-model\"\u003eCustom Fitting Model\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eCustom Fitting Model 由 Visualization 的座標和參數計算出值，以繪值對應的參考點或曲線。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"custom-virtual-column\"\u003eCustom Virtual Column\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eCustom Virtual Column 根據一個或多個現有的列和文件屬性創建新的欄。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"custom-preference\"\u003eCustom Preference\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eCustom Preference 偏好設定，也稱作 Configuration Sets。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"custom-license\"\u003eCustom License\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eCustom License 可用於自訂授權。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"custom-node\"\u003eCustom Node\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eCustom Node 可以添加項目到 spotfire document model 中，並序列化到 dxp 文件中。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"custom-application-event-handler\"\u003eCustom Application Event Handler\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eCustom Application Event Handler 可用來監控並回應應用程式事件。\u003c/li\u003e\n\u003c/ul\u003e","title":"[DXP] Spotfire Extension 擴充程式"},{"content":"Spotfire SDK SDK，全名 Software Development Kit，中譯軟體開發套件，可以想成 Spotfire 提供給開發者一個以 Spotfire 工具分析為基底的開發框架，提供了各式套件以供各種開發需求。包含了 Extension Template, Development assemblies, example projects, package builder application\u0026hellip; Binaries 包含了在 Windows 或 Linux 上使用 Spotifre 平台建立 Solution 時所參考的 .NET 套件。由於兩個平台具有不同的 .NET 需求，因此 Binaries 中包含了兩種 OS 各一組檔案，其中還包含了相關的 IntelliSense 檔案。 Examples 提供一系列廣泛的 Solutions，用於解決常見的開發場景。可根據不同的技術特性分為： COM Automation 描述使用 COM 進行應用程式間通訊的方法。 微軟的基於 COM 組件的軟體架構，讓應用程式將其內部功能公開為 COM 物件，使開發者可以編寫一些腳本，進行一些自動化任務，稱為 Automation 或 OLE Automation。 Extensions 擴充套件：提供了一組完整的 .NET 專案，為解決 Spotifre 客戶端的特定任務。這些擴充套件足夠簡單，可以作為一些開發者的靈感或程式碼的來源。 所有範例擴充功能都包含在 Visual Studio Solution 的 Spotfire.Developer.Extensions.sln 中，所有包含 c# 程式碼的自定義工具(Custom Tool)範例都包含在 Solutions CustomerToolExample.sln 和 CustomToolExampleVS.sln 中。這些 Solutions 中的範例提供了一種簡單的方式來開始進行開發，並且都可以直接在 Relase Mode 下進行編譯。Window 與 Linux 兩個系統都會自動進行建置。 所有 C# 擴充範例都包含一個 .pkdesc 檔，可使用 Package Builder 來進行包裝不同的 Packages。 C# 擴充範例中包含兩個發行描述檔 DistributionDescription-windows.xml 和 DistributionDescription-linux.xml 用來描述兩個平台各自包含了哪些範例。 兩個 .bat 檔和 BuildPackages-window.bat 和 BuildPackge-linux.bat 包含了 Package Builder 用來建置 Windows 與 Linux Packages 的邏輯。它們會呼叫適用的範例的 .pkdesc 檔，並用提供的 description.xml 檔案來建立包含範例工具套件的發行檔案。 在官方的 SDK 中包含了四個完整的 .NET 範例專案可建構於 Linux 與 Window 上： SpotfireDeveloper.CalculationMothodExample SpotifreDeveloper.CustomToolExample SpotfireDeveloper.CustomToolExampleForms SpotfireDeveloper.CustomToolExampleWeb 以上所有的專案，都包含了兩個 csproj 文件，且都已經被轉換成 SDK-style。一個是用來進行 .NET 的編譯，另一個用來與 PackageBuilder-Console 進行整合，以自動整合 Package。 除了專案以外，另外還包含了 SpotfireDeveloper.ApiExamples，提拱了源始碼，說明如何進行日常任務的自動化，例如配置可視化(Visualizations)，處理篩選(Filter)和定期更新數據(Refresh data)。 Integration 提供了如何在 Spotfire Server 呼叫 REST/SOAP 方法的範例。(REST與SOAP的差異) JavaScript 為 Web 端的使用者端供了混合 JavaScript Api 的 Solution。 Package Builder 提供一個框架，用於開發、除錯、打包及部署擴充到 Spotfire 上。它是一個用於添加自定義功能到 Spotfire 平台上的重要工具。同時具備 UI-based 與 Console 兩種版本供使用。(Linux 只有 Console 版) 點擊 [Manage] 點擊 [Add]，並在 Add Configuration 對話視窗中，輸入 Configuration name。 點擊 [File] \u0026gt; [Add TIBCO Spotfire Distribution] 以新增 Spotfire 執行檔，以進行擴充功能的除錯。 前往安裝 TIBCO Spotfire® Analyst 的 [Modules] 資料夾，點擊選擇資料夾，可自行指定何者作為 Spotfire Distribution。 Starter 包含了一個特殊的 Spotfire.Dxp.exe，與擴充的 Package Builder 應用程式整合，它被用於擴充專案的開發與除錯。 還包含一個特殊的 Spotfire.Dxp.exe.config，由 Package Builder 在設計時進行配置，以反映開發擴充時使用的配置，以涵蓋所有支持的 Spotfire 版本的開發。 Template Spotfire 擴充專案範本是在 Visual Studio® 中用來建立新的 Spotfire 擴充專案的工具。它處理實作細節，讓開發者專注於新增功能。有多個版本的範本可用，取決於您打算為哪個平台開發您的擴充（Windows 或 Linux），以及在開發期間如何工作（使用 Package Builder 或僅使用 Visual Studio）。 在 Linux 上運行的專案檔案必須是所謂的「SDK-style 專案」，請參閱 https://docs.microsoft.com/zh-tw/dotnet/core/project-sdk/overview。 也可以使用 SDK-style 來建立 Windows 專案。因此，模板專案設置為使用 csproj 檔案中的屬性 \u0026lt;TargetFrameworks\u0026gt;net48;net6.0\u0026lt;/TargetFrameworks\u0026gt; 自動建立兩種 .NET 版本。 為了實現自動參照正確版本的 Spotfire 二進位檔，在 csproj 檔中定義 MSBuild property 中的 TargetFramework 以定義參照位址。例如： \u0026lt;Reference Include=\u0026#34;Spotfire.Dxp.Application\u0026#34;\u0026gt; \u0026lt;HintPath\u0026gt;../../../Binaries/$(TargetFramework)/Spotfire.Dxp.Application.dll\u0026lt;/HintPath\u0026gt; \u0026lt;Private\u0026gt;false\u0026lt;/Private\u0026gt; \u0026lt;/Reference\u0026gt; VisualStudioMacros 該 SDK 包含一個 Visual Studio macro，簡化 document nodes 的開發。它基於定義 Custom Spotfire Document Nodes 的私有域(private fields) ","permalink":"https://intervalrain.github.io/dxp/sdk/","summary":"\u003ch1 id=\"spotfire-sdk\"\u003eSpotfire SDK\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eSDK，全名 Software Development Kit，中譯軟體開發套件，可以想成 Spotfire 提供給開發者一個以 Spotfire 工具分析為基底的開發框架，提供了各式套件以供各種開發需求。包含了 Extension Template, Development assemblies, example projects, package builder application\u0026hellip;\n\u003cimg alt=\"sdk\" loading=\"lazy\" src=\"https://docs.tibco.com/pub/sfire_dev/area/doc/html/devdoc/images/sdkfolders.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"binaries\"\u003eBinaries\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e包含了在 Windows 或 Linux 上使用 Spotifre 平台建立 Solution 時所參考的 .NET 套件。由於兩個平台具有不同的 .NET 需求，因此 Binaries 中包含了兩種 OS 各一組檔案，其中還包含了相關的 IntelliSense 檔案。\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"examples\"\u003eExamples\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e提供一系列廣泛的 Solutions，用於解決常見的開發場景。可根據不同的技術特性分為：\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"com-automation\"\u003eCOM Automation\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e描述使用 COM 進行應用程式間通訊的方法。\u003c/li\u003e\n\u003cli\u003e微軟的基於 COM 組件的軟體架構，讓應用程式將其內部功能公開為 COM 物件，使開發者可以編寫一些腳本，進行一些自動化任務，稱為 Automation 或 OLE Automation。\n\u003cimg alt=\"COM\" loading=\"lazy\" src=\"https://i.pcmag.com/imagery/encyclopedia-terms/com-automation-comauto.fit_lim.size_512x.gif\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"extensions\"\u003eExtensions\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e擴充套件：提供了一組完整的 .NET 專案，為解決 Spotifre 客戶端的特定任務。這些擴充套件足夠簡單，可以作為一些開發者的靈感或程式碼的來源。\u003c/li\u003e\n\u003cli\u003e所有範例擴充功能都包含在 Visual Studio Solution 的 Spotfire.Developer.Extensions.sln 中，所有包含 c# 程式碼的自定義工具(Custom Tool)範例都包含在 Solutions \u003ccode\u003eCustomerToolExample.sln\u003c/code\u003e 和 \u003ccode\u003eCustomToolExampleVS.sln\u003c/code\u003e 中。這些 Solutions 中的範例提供了一種簡單的方式來開始進行開發，並且都可以直接在 Relase Mode 下進行編譯。Window 與 Linux 兩個系統都會自動進行建置。\u003c/li\u003e\n\u003cli\u003e所有 C# 擴充範例都包含一個 \u003ccode\u003e.pkdesc\u003c/code\u003e 檔，可使用 \u003cstrong\u003ePackage Builder\u003c/strong\u003e 來進行包裝不同的 Packages。\u003c/li\u003e\n\u003cli\u003eC# 擴充範例中包含兩個發行描述檔 \u003ccode\u003eDistributionDescription-windows.xml\u003c/code\u003e 和 \u003ccode\u003eDistributionDescription-linux.xml\u003c/code\u003e 用來描述兩個平台各自包含了哪些範例。\u003c/li\u003e\n\u003cli\u003e兩個 .bat 檔和 \u003ccode\u003eBuildPackages-window.bat\u003c/code\u003e 和 \u003ccode\u003eBuildPackge-linux.bat\u003c/code\u003e 包含了 Package Builder 用來建置 Windows 與 Linux Packages 的邏輯。它們會呼叫適用的範例的 \u003ccode\u003e.pkdesc\u003c/code\u003e 檔，並用提供的 \u003ccode\u003edescription.xml\u003c/code\u003e 檔案來建立包含範例工具套件的發行檔案。\u003c/li\u003e\n\u003cli\u003e在官方的 SDK 中包含了四個完整的 .NET 範例專案可建構於 Linux 與 Window 上：\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSpotfireDeveloper.CalculationMothodExample\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSpotifreDeveloper.CustomToolExample\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSpotfireDeveloper.CustomToolExampleForms\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSpotfireDeveloper.CustomToolExampleWeb\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e以上所有的專案，都包含了兩個 \u003ccode\u003ecsproj\u003c/code\u003e 文件，且都已經被轉換成 SDK-style。一個是用來進行 .NET 的編譯，另一個用來與 PackageBuilder-Console 進行整合，以自動整合 Package。\u003c/li\u003e\n\u003cli\u003e除了專案以外，另外還包含了 \u003ccode\u003eSpotfireDeveloper.ApiExamples\u003c/code\u003e，提拱了源始碼，說明如何進行日常任務的自動化，例如配置可視化(Visualizations)，處理篩選(Filter)和定期更新數據(Refresh data)。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"integration\"\u003eIntegration\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e提供了如何在 Spotfire Server 呼叫 REST/SOAP 方法的範例。(\u003ca href=\"https://aws.amazon.com/tw/compare/the-difference-between-soap-rest/\"\u003eREST與SOAP的差異\u003c/a\u003e)\n\u003cimg alt=\"REST/SOAP\" loading=\"lazy\" src=\"https://www.upwork.com/mc/documents/SOAP-vs-REST.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"javascript\"\u003eJavaScript\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e為 Web 端的使用者端供了混合 JavaScript Api 的 Solution。\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"package-builder\"\u003ePackage Builder\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e提供一個框架，用於開發、除錯、打包及部署擴充到 Spotfire 上。它是一個用於添加自定義功能到 Spotfire 平台上的重要工具。同時具備 UI-based 與 Console 兩種版本供使用。(Linux 只有 Console 版)\n\u003cimg alt=\"pkg builder\" loading=\"lazy\" src=\"https://docs.tibco.com/pub/sfire_dev/area/doc/html/devdoc/images/packagebuilder_launch_80pc.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003col\u003e\n\u003cli\u003e點擊 \u003cstrong\u003e[Manage]\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e點擊 \u003cstrong\u003e[Add]\u003c/strong\u003e，並在 \u003cstrong\u003eAdd Configuration\u003c/strong\u003e 對話視窗中，輸入 \u003cstrong\u003eConfiguration name\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e點擊 \u003cstrong\u003e[File]\u003c/strong\u003e \u0026gt; \u003cstrong\u003e[Add TIBCO Spotfire Distribution]\u003c/strong\u003e 以新增 Spotfire 執行檔，以進行擴充功能的除錯。\u003c/li\u003e\n\u003cli\u003e前往安裝 TIBCO Spotfire® Analyst 的 \u003cstrong\u003e[Modules]\u003c/strong\u003e 資料夾，點擊選擇資料夾，可自行指定何者作為 Spotfire Distribution。\n\u003cimg alt=\"pgk builder2\" loading=\"lazy\" src=\"https://docs.tibco.com/pub/sfire_dev/area/doc/html/devdoc/images/pb-dist.png\"\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003chr\u003e\n\u003ch2 id=\"starter\"\u003eStarter\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e包含了一個特殊的 \u003ccode\u003eSpotfire.Dxp.exe\u003c/code\u003e，與擴充的 Package Builder 應用程式整合，它被用於擴充專案的開發與除錯。\u003c/li\u003e\n\u003cli\u003e還包含一個特殊的 \u003ccode\u003eSpotfire.Dxp.exe.config\u003c/code\u003e，由 Package Builder 在設計時進行配置，以反映開發擴充時使用的配置，以涵蓋所有支持的 Spotfire 版本的開發。\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"template\"\u003eTemplate\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eSpotfire 擴充專案範本是在 Visual Studio® 中用來建立新的 Spotfire 擴充專案的工具。它處理實作細節，讓開發者專注於新增功能。有多個版本的範本可用，取決於您打算為哪個平台開發您的擴充（Windows 或 Linux），以及在開發期間如何工作（使用 Package Builder 或僅使用 Visual Studio）。\u003c/li\u003e\n\u003cli\u003e在 Linux 上運行的專案檔案必須是所謂的「SDK-style 專案」，請參閱 \u003ca href=\"https://docs.microsoft.com/zh-tw/dotnet/core/project-sdk/overview\"\u003ehttps://docs.microsoft.com/zh-tw/dotnet/core/project-sdk/overview\u003c/a\u003e。\u003c/li\u003e\n\u003cli\u003e也可以使用 SDK-style 來建立 Windows 專案。因此，模板專案設置為使用 csproj 檔案中的屬性 \u003ccode\u003e\u0026lt;TargetFrameworks\u0026gt;net48;net6.0\u0026lt;/TargetFrameworks\u0026gt;\u003c/code\u003e 自動建立兩種 .NET 版本。\u003c/li\u003e\n\u003cli\u003e為了實現自動參照正確版本的 Spotfire 二進位檔，在 csproj 檔中定義 MSBuild property 中的 \u003ccode\u003eTargetFramework\u003c/code\u003e 以定義參照位址。例如：\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-cmd\" data-lang=\"cmd\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;Reference Include=\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Spotfire.Dxp.Application\u0026#34;\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;HintPath\u0026gt;../../../Binaries/$(TargetFramework)/Spotfire.Dxp.Application.dll\u0026lt;/HintPath\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;Private\u0026gt;false\u0026lt;/Private\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u0026lt;/Reference\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch2 id=\"visualstudiomacros\"\u003eVisualStudioMacros\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e該 SDK 包含一個 Visual Studio macro，簡化 document nodes 的開發。它基於定義 Custom Spotfire Document Nodes 的私有域(private fields)\u003c/li\u003e\n\u003c/ul\u003e","title":"[DXP] Spotfire Developer SDK"},{"content":"簡介 Custom Tool 是一種通用 Spotfire 擴充類型，用於在特定文本中(spotfire app, docuemnt, visual, \u0026hellip;)執行某些動作，且可顯示或隱藏於菜單中。 概要 開發者需新建一個類別，並繼承並實作 CustomTool 類別。然後這個類別會在 AddIn 類別的 RegisterTools 方法中註冊。此時，也可以使用CustomMenuGroup 類別指定將工具放置在自訂菜單組中。 在創建 CustomTool 類別時，工具文本被指定為類型參數，例如對於 Document 需使用使用 CustomTool\u0026lt;Document\u0026gt;，對於 Page 需使用CustomTool\u0026lt;Page\u0026gt;。 可以將提示添加到工具中。提示對話框可以添加到 Windows 客戶端和 Web 客戶端。 在實作 custom tool 時，需注意到以下的特性： Tools 是靜態的(static)：工具只有一個實例，該實例從調用 Execute() 方法的文本引數中接收其文本的處理。 Tools 是無狀態的(stateless)：一個狀態只能從一個繼承自 DocumentNode 類別並附加到文件模型的實例中保存在文件中。使用 CustomNode 類別和 Document.CustomNodes 屬性。 Tools 只執行一個動作。：通常，該動作需要在一個 undo stack 上產生一個 undo state。因此，所有更改文檔狀態的工具都應該被包裝在其 Transaction 中。 Tools 文本 1. Application public sealed class MyApplicationTool : CustomTool\u0026lt;AnalysisApplication\u0026gt; AnalysisApplication tools 可從「Tools」選單中取得，在啟動 Spotfire 後即可啟用。 2. Document public sealed class MyDocumentTool : CustomTool\u0026lt;Document\u0026gt; Document tools 可從「工具」選單中取得，在文件開啟時啟用。 3. Page public sealed class MyPageTool : CustomTool\u0026lt;Page\u0026gt; Page tools 可從頁面文本選單中使用，但 web client 無法使用。 4. Visual public sealed class MyVisualTool : CustomTool\u0026lt;VisualContent\u0026gt; VisualContent 文本為頁面上的所有視覺工具提供了一個工具。還有針對特定可視化類型應用的視覺工具的子文本： Visualization: 所有可視區，不包括繪圖區(plot area)。 BarChart: 僅限長條圖。 BoxPlot: 僅限箱形圖。 CombinationChart: 僅限組合圖表。 CrossTablePlot: 僅限交叉圖表。 GraphicalTable: 僅限圖形表格繪圖。 KPIChart: 僅限KPI圖表。 LineChart: 僅限折線圖。 MapChart: 僅限地圖圖表。 ParallelCoordinatePlot PieChart: 僅限圓餅圖。 ScatterPlot: 僅限散佈圖。 ScatterPlot3D: 僅限3D散佈圖。 SummaryTable: 僅限摘要表格。 TablePlot: 僅限表格繪圖。 TextArea: 僅限文字區域。 WaterfallChart: 僅限瀑布圖表。 通過覆寫 IsVisibleCore 方法，可以將多個子文本結合起來，從而隱藏除了有明確定的子文本以外的工具。例如，擁有一個僅對散點圖和條形圖可用的工具，並在有標記(marking)時啟用。 5. TablePlot TablePlotColumn\npublic sealed class MyTablePlotColumnTool : CustomTool\u0026lt;TablePlotColumnContext\u0026gt; 當右鍵點擊列標題時，可在文本菜單中找到。 TablePlotCell\npublic sealed class MyTablePlotCellTool : CustomTool\u0026lt;TablePlotCellContext\u0026gt; 在表格中右鍵點擊單元格時顯示的文本菜單選單中可用。 TablePlotCopyCellValue\npublic sealed class MyTablePlotCopyCellValueTool : CustomTool\u0026lt;TablePlotCopyCellValueContext\u0026gt; 在表格中右鍵點擊單元格時，可以在文本菜單的「Copy Cell」子菜單中找到。根據右鍵點擊的儲存格內容，且沒有添加任何擴展功能，子菜單標題可能包含以下一個或多個項目：\nValue: 當所點擊的儲存格包含文字時可用。文字會被放置在剪貼簿上。 Link: 當列渲染器為所點擊的儲存格提供了連結時可用。 Image: 當渲染器為單元格提供了圖像時可用。放置在剪貼板上的圖像與表格中看到的圖像相同。 TablePlotCopyCellValue 在 web client 無法使用。\n6. Map Chart Coordinates Context public sealed class MyMapChartCoordinatesTool : CustomTool\u0026lt;MapChartCoordinatesContext\u0026gt; 當使用者在地圖圖表上按右鍵時，具有 MapChartCoordinatesContext 的自訂工具將自動被呼叫。座標可在上下文物件的屬性中取得。 7. Filter public sealed class MyFilterTool : CustomTool\u0026lt;FilterBase\u0026gt; FilterBase 文本使篩選器面板中的所有篩選器工具可用。還有針對特定篩選器類型應用的篩選器工具的子文本： CheckboxFilter ItemFilter ListBoxFilter RadioButtonFilter RangeFilte TextFilter HierarchyFilter ColumnFilter: 所有 filter 類型，但不包括層次篩選。 SingleValueColumnFilter: 選擇一個值的 filter 類型，即 ItemFilter 和 RadioButtonFilter. Grouping Tools、註冊 Tools 可以按它們出現的位置分類： 未指定 menu group，它將出現在「工具」菜單中。 指定 menu group，因此它將出現在「工具」選單中的自訂工具群組中。 為了防止意外或未經管理的從其他專案添加工具，只有在相同的 Spotfire 擴充專案中實現的工具才能在菜單子組中分組。通過將工具收集在一個 AddIn 中，創建該組，然後在註冊它們時將其傳遞給要包含在該組中的工具。使用 AddIn.ToolRegistrar.Register 方法註冊工具： public sealed class CustomToolAddIn : AddIn { protected override void RegisterTools(ToolRegistrar registrar) { base.RegisterTools(registrar); CustomMenuGroup menuGroup = new CustomMenuGroup(\u0026#34;My menu sub group\u0026#34;); registrar.Register(new MyTool(), menuGroup); } ... } 自訂頂層選單 [ApiVersion(\u0026#34;10.10.0\u0026#34;)] public static MenuCategory CreateCustom(params string[] path); 範例：\nMenuCategory.CreateCustom(\u0026#34;First\u0026#34;, \u0026#34;Second\u0026#34;); First 作為最上層的菜單標題， Second 為子菜單 或在實作 customTool 時指定 public MyTool() : base(menuText, requiredLicense, MenuCategory.CreateCustom(\u0026#34;First\u0026#34;, \u0026#34;Second\u0026#34;)) {} Custom Tool 建構子 CustomTool 類別的建構式有一個必要的字串參數 menuText，該字串會顯示在選單和工具提示中。可以使用 GetMenuTextCore 覆寫此文字，以獲取適應 Web Client 端本地化設置的文字。建構函式的可選參數包括運行該工具所需的許可證 requiredLicense、選單類別 menuCategory 和要顯示在選單中的自訂圖示 image。 protected CustomTool(string menuText, LicensedFunction requiredLicense, MenuCategory menuCategory, Image image) ExecuteCore 工具邏輯是透過覆寫 ExecuteCore 或 ExecuteAndPromptCore 方法來實現的，當工具需要提示使用者輸入時，後者會被使用。 protected virtual void ExecuteCore(TContext context); protected virtual IEnumerable\u0026lt;Object\u0026gt; ExecuteAndPromptCore(TContext context); 文本參數將使工具能夠訪問文件、頁面、視覺或其他對象，具體取決於工具操作的文本。 ExecuteAnPromptCore 方法的簽名需要額外解釋：注意它應該返回可枚舉物件(enumerable objects)。這是通過 yield 構造實現的，以返回用作提示模型的任何對象。使用 AddIn.RegisterViews 為工具使用的任何提示模型註冊相應的提示視圖。 如果該工具使用提示，則需要覆寫 GetSupportsPromptingCore 以返回 true。 Web Client 中的 Tools: 預期 Web Client 端中的工具支援提示，並且必須實現 ExecuteAndPromptCore (ExecuteCore 永遠不會被框架呼叫)。但是，可以使用以下解決方法在 ExecuteAndPromptCore 中實現不提示的 Web 客戶端工具，該方法調用 ExecuteCore 並返回沒有提示模型： protected override IEnumerable\u0026lt;object\u0026gt; ExecuteAndPromptCore(Visualization context) { this.ExecuteCore(context); yield break; } IsEnabledCore 有兩種方法可以覆寫，以指定何時應該顯示工具，以及何時應該啟用工具。\nIsEnabledCore 回傳一個布林值，以指定該工具是否應該在選單中啟用。 protected override bool IsEnabledCore(TContext context) IsVisibleCore 回傳一個布林值，指定該工具是否應該在選單中顯示。 protected override bool IsVisibleCore(TContext context) 範例1: 將當下的頁籤移至最後。\npublic sealed class PageTool : CustomTool\u0026lt;Page\u0026gt; { public PageTool() : base(Properties.Resources.PageToolTitle) {} protected override void ExecuteCore(Page page) { Document document = page.Context.GetAncestor\u0026lt;Document\u0026gt;(); int index = document.Pages.IndexOf(page); document.Pages.Move(index, document.Pages.Count - 1); } protected override bool IsEnabledCore(Page page) { Document document = page.Context.GetAncestor\u0026lt;Document\u0026gt;(); int index = document.Pages.IndexOf(page); return index \u0026gt;= 0 \u0026amp;\u0026amp; index \u0026lt; document.Pages.Count - 1; } } 範例2: 將 visualization 中標記的值寫出來。 public sealed class PlotTool : CustomTool\u0026lt;VisualContent\u0026gt; { public PlotTool() : base(Properties.Resources.PlotToolTitle) {} protected override void ExecuteCore(VisualContent context) { Visualization plot = (Visualization)context; DataManager dataManager = context.Context.GetSertvice\u0026lt;DataManager\u0026gt;(); DataTable dataTable = plot.Data.DataTableReference; DataColumn firstColumn = dataManager.Tables[dataTable.Id].Columns[0]; IndexSet markedRows = dataManager.Markings.DefaultMarkingReference.GetSelection(dataTable).AsIndexSet(); var cursor = DataValueCursor.Create(firstColumn); foreach (var row in dataTable.GetRows(markedRows, cursor)) { Trace.WriteLine(cursor.CurrentDataValue.ValidValue); } } protected override bool IsEnabledCore(VisualContent context) { Visualization plot = context as Visualization; DataManager dataManager = context.Context.GetService\u0026lt;DataManager\u0026gt;(); DataMarkingSelection marking = dataManager.Markings.DefaultMarkingReference; if (plot.Data.DataReference == null) { return false; } else { RowSelection selectedRows = marking.GetSelection(plot.Data.DataTableReference); return !selectedRows.IsEmpty; } } protected override bool IsVisibleCore(VisualContent context) { return context is BarChart || context is ScatterPlot; } } 範例3: 在 Spotfire 表格中右鍵點擊顯示圖像的儲存格，選擇「複製儲存格 \u0026gt; 圖像」，將圖像按比例縮放後添加到剪貼簿中。此範例實現了一個工具，可將全尺寸圖像複製到剪貼簿中。它可以從通用的 Spotfire 圖像複製工具相同的位置訪問： public sealed class CopyCellValueTool : CustomTool\u0026lt;CopyCellValueContext\u0026gt; { public CopyCellValueTool() : base(\u0026#34;Image (fullsize)\u0026#34;) {} protected override void ExecuteCore(CopyCellValueContext context) { BinaryLargeObject blob = context.DataValue.Value as BinaryLargeObject; if (blob != null) { try { Image img = Image.FromStream(blob.GetByteStream()); Clipboard.Clear(); Clipboard.SetImage(img); } catch (ArgumentException) { // Unable to convert to image, ignore } } } protected override bool IsVisibleCore(CopyCellValueContext context) { return context.DataType != null \u0026amp;\u0026amp; context.ContentType != null \u0026amp;\u0026amp; !context.DataType.IsSimple \u0026amp;\u0026amp; context.ContentType.StartsWith(\u0026#34;image/\u0026#34;, true, CultureInfo.InvariantCulture); } protected override bool IsEnabledCore(CopyCellValueContext context) { return context.DataValue != null \u0026amp;\u0026amp; context.DataValue.IsValid; } } 範例4: 將「顯示儲存格資訊」項目添加到儲存格內容選單中。該工具會顯示一個訊息方塊，顯示所選儲存格的欄位名稱和儲存格值。\npublic sealed class TablePlotCellContextExampleTool : CustomTool\u0026lt;TablePlotCellContext\u0026gt; { public TablePlotCellContextExampleTool() : base(Properties.Resources.TablePlotCellToolTitle) {} protected override void ExecuteCore(TablePlotCellContext tablePlotCellContext) { string dataValue = tablePlotCellContext.DataValue.Value.ToString(); string info = string.Format( System.Threading.Thread.CurrentThread.CurrentCulture, Properties.Resources.TablePlotCellToolInfo, new object[] { tablePlotCellContext.TableColumn.Name, dataValue }); System.Windows.Forms.MessageBox.Show(info, Properties.Resources.TablePlotCellToolTitle); } protected override bool IsEnabledCore(TablePlotCellContext context) { return context.DataValue != null \u0026amp;\u0026amp; context.DataValue.IsValid; } } ","permalink":"https://intervalrain.github.io/dxp/customtool/","summary":"\u003ch2 id=\"簡介\"\u003e簡介\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eCustom Tool 是一種通用 Spotfire 擴充類型，用於在特定\u003cstrong\u003e文本\u003c/strong\u003e中(spotfire app, docuemnt, visual, \u0026hellip;)執行某些動作，且可顯示或隱藏於菜單中。\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"概要\"\u003e概要\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e開發者需新建一個類別，並繼承並實作 \u003ccode\u003eCustomTool\u003c/code\u003e 類別。然後這個類別會在 \u003ccode\u003eAddIn\u003c/code\u003e 類別的 \u003ccode\u003eRegisterTools\u003c/code\u003e 方法中註冊。此時，也可以使用\u003ccode\u003eCustomMenuGroup\u003c/code\u003e 類別指定將工具放置在自訂菜單組中。\u003c/li\u003e\n\u003cli\u003e在創建 CustomTool 類別時，工具\u003cstrong\u003e文本\u003c/strong\u003e被指定為類型參數，例如對於 Document 需使用使用 \u003ccode\u003eCustomTool\u0026lt;Document\u0026gt;\u003c/code\u003e，對於 Page 需使用\u003ccode\u003eCustomTool\u0026lt;Page\u0026gt;\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e可以將提示添加到工具中。提示對話框可以添加到 Windows 客戶端和 Web 客戶端。\u003c/li\u003e\n\u003cli\u003e在實作 custom tool 時，需注意到以下的特性：\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eTools 是靜態的(static)\u003c/strong\u003e：工具只有一個實例，該實例從調用 \u003ccode\u003eExecute()\u003c/code\u003e 方法的文本引數中接收其文本的處理。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eTools 是無狀態的(stateless)\u003c/strong\u003e：一個狀態只能從一個繼承自 \u003ccode\u003eDocumentNode\u003c/code\u003e 類別並附加到文件模型的實例中保存在文件中。使用 \u003ccode\u003eCustomNode\u003c/code\u003e 類別和 \u003ccode\u003eDocument.CustomNodes\u003c/code\u003e 屬性。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eTools 只執行一個動作。\u003c/strong\u003e：通常，該動作需要在一個 undo stack 上產生一個 undo state。因此，所有更改文檔狀態的工具都應該被包裝在其 Transaction 中。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"tools-文本\"\u003eTools 文本\u003c/h2\u003e\n\u003ch3 id=\"1-application\"\u003e1. Application\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C#\" data-lang=\"C#\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003esealed\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMyApplicationTool\u003c/span\u003e : CustomTool\u0026lt;AnalysisApplication\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eAnalysisApplication tools 可從「\u003cstrong\u003eTools\u003c/strong\u003e」選單中取得，在啟動 Spotfire 後即可啟用。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"2-document\"\u003e2. Document\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C#\" data-lang=\"C#\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003esealed\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMyDocumentTool\u003c/span\u003e : CustomTool\u0026lt;Document\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eDocument tools 可從「\u003cstrong\u003e工具\u003c/strong\u003e」選單中取得，在文件開啟時啟用。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"3-page\"\u003e3. Page\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C#\" data-lang=\"C#\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003esealed\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMyPageTool\u003c/span\u003e : CustomTool\u0026lt;Page\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003ePage tools 可從頁面文本選單中使用，但 web client 無法使用。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"4-visual\"\u003e4. Visual\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C#\" data-lang=\"C#\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003esealed\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eMyVisualTool\u003c/span\u003e : CustomTool\u0026lt;VisualContent\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eVisualContent 文本為頁面上的所有視覺工具提供了一個工具。還有針對特定可視化類型應用的視覺工具的子文本：\n\u003cul\u003e\n\u003cli\u003eVisualization: 所有可視區，不包括繪圖區(plot area)。\u003c/li\u003e\n\u003cli\u003eBarChart: 僅限長條圖。\u003c/li\u003e\n\u003cli\u003eBoxPlot: 僅限箱形圖。\u003c/li\u003e\n\u003cli\u003eCombinationChart: 僅限組合圖表。\u003c/li\u003e\n\u003cli\u003eCrossTablePlot: 僅限交叉圖表。\u003c/li\u003e\n\u003cli\u003eGraphicalTable: 僅限圖形表格繪圖。\u003c/li\u003e\n\u003cli\u003eKPIChart: 僅限KPI圖表。\u003c/li\u003e\n\u003cli\u003eLineChart: 僅限折線圖。\u003c/li\u003e\n\u003cli\u003eMapChart: 僅限地圖圖表。\u003c/li\u003e\n\u003cli\u003eParallelCoordinatePlot\u003c/li\u003e\n\u003cli\u003ePieChart: 僅限圓餅圖。\u003c/li\u003e\n\u003cli\u003eScatterPlot: 僅限散佈圖。\u003c/li\u003e\n\u003cli\u003eScatterPlot3D: 僅限3D散佈圖。\u003c/li\u003e\n\u003cli\u003eSummaryTable: 僅限摘要表格。\u003c/li\u003e\n\u003cli\u003eTablePlot: 僅限表格繪圖。\u003c/li\u003e\n\u003cli\u003eTextArea: 僅限文字區域。\u003c/li\u003e\n\u003cli\u003eWaterfallChart: 僅限瀑布圖表。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e通過覆寫 \u003ccode\u003eIsVisibleCore\u003c/code\u003e 方法，可以將多個子文本結合起來，從而隱藏除了有明確定的子文本以外的工具。例如，擁有一個僅對散點圖和條形圖可用的工具，並在有標記(marking)時啟用。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"5-tableplot\"\u003e5. TablePlot\u003c/h3\u003e\n\u003cp\u003eTablePlotColumn\u003c/p\u003e","title":"[DXP] 在 spotfire 中創建自定義工具"},{"content":"簡介 Spotfire Automation Services 提供一個平台和工具，用於在無使用者操作與 UI 的情況下自動地執行 TIBCO Spotfire。 適用情境如「定期發送報告」、「在某些事件發生時保存嵌入在 Spotfire 文件中的截圖」，以及在許多其他需要基於Spotfire文件進行自動化操作的情況下使用。 自動化服務 API 使自訂任務變得可能，且可與內建任務一起使用，執行自動化工作。 Spotfire 用語 名詞 解釋 Task Task 是用於創建複雜工作的基礎模塊。自動化服務附帶了許多預定義的 Tasks，例如應用書籤或發送電子郵件或乃至其它可擴充的 Tasks。 Job 排程好待執行的 Tasks 組合成一個 Job，Job 又被儲存於 Job File 中。 Job File Job File 是一個可讀的 XML，用於定義 Job。 Job Builder Job Builder 是一個在 Spotfire 專業版中運行的應用程式，提供了一個易於使用的界面，用於創建和編輯工作。 Job Sender ClientJobSender 是一個工具，可將作業發送到 Spotfire Server 以進行執行。使用 ClientJobSender 設置定期或事件驅動的作業執行。 架構 Job 通常是在 Job Builder 或 ClientJobSender 中創建並保存為 XML 的 Job File，然後被送至 Spotfire 伺服器以執行，或是使用 ClientJobSender 工具發送到 Spotfire 伺服器以進行執行。 對於每個以 XML 格式發送到 Spotfire Server 以執行的工作，Automation Services 會啟動一個 node。接著內部工作執行程序會逐一執行任務，直到任務失敗或所有任務成功完成時退出。 Job File 格式 工作檔案的 XML 格式設計為易於理解和修改。雖沒有正式的格式規範，但可讀性仍是挺高的。 以下是一個「從 Analytics Server Library 開啟分析文件並將圖像匯出到預定位置」的 Job 範例： \u0026lt;as:Job xmlns:as=\u0026#34;urn:tibco:spotfire.dxp.automation\u0026#34;\u0026gt; \u0026lt;as:Tasks\u0026gt; \u0026lt;OpenAnalysisFromLibrary xmlns=\u0026#34;urn:tibco:spotfire.dxp.automation.tasks\u0026#34;\u0026gt; \u0026lt;as:Title\u0026gt;Open Analysis from Library\u0026lt;/as:Title\u0026gt; \u0026lt;AnalysisPath\u0026gt;/Users/Username/Baseball stats\u0026lt;/AnalysisPath\u0026gt; \u0026lt;/OpenAnalysisFromLibrary\u0026gt; \u0026lt;ExportImage xmlns=\u0026#34;urn:tibco:spotfire.dxp.automation.tasks\u0026#34;\u0026gt; \u0026lt;as:Title\u0026gt;Export Image\u0026lt;/as:Title\u0026gt; \u0026lt;VisualizationId\u0026gt;292a90c6-0e03-47fe-961e-a528a14e9735\u0026lt;/VisualizationId\u0026gt; \u0026lt;DestinationPath\u0026gt;C:inetpubwwwrootMyWebServerImage.png\u0026lt;/DestinationPath\u0026gt; \u0026lt;Width\u0026gt;640\u0026lt;/Width\u0026gt; \u0026lt;Height\u0026gt;480\u0026lt;/Height\u0026gt; \u0026lt;/ExportImage\u0026gt; \u0026lt;/as:Tasks\u0026gt; \u0026lt;/as:Job\u0026gt; 自動化 Task 範例 一個 Task 需繼承 Task 母類別。 一個 Task 類別必須擁有一個無參建構式，並呼叫 base 建構式，並傳入標題和描述。如果相同的任務名稱已經在使用中，可以選擇性地使用 XmlRoot 命名空間來避免命名衝突。為自訂任務使用自訂命名空間。 // 自定義任務的命名空間 [XmlRoot(\u0026#34;urn:spotfiredeveloper.automationservicesexample\u0026#34;)] public sealed class ApplyBookmark : Task { // 建立一個無參建構式，並呼叫 base 建構式，同時傳入標題與描述 public ApplyBookmark() : base(Properties.Resources.ApplyBookmarkTitle, Properties.Resources.ApplyBookmarkDescription) { } // 一些 public 的 properties 可供 UI 存取 [Description(\u0026#34;The GUID of the bookmark to apply\u0026#34;)] public Guid BookmarkId { get; set; } } 當任務被執行時，會執行 ExecuteCore 方法。 protected override TaskExecutionStatus ExecuteCore(TaskExecutionContext context) { // 沒有文件被讀取 if (context.Application.Document == null) { return new TaskExecutionStatus(false, Properties.Resources.NoAnalysisLoaded); } // 檢查書籤是否存在於新書籤中 var manager = context.Application.GetService\u0026lt;BookmarkManager\u0026gt;(); if (manager != null) { Bookmark bookmark; if (manager.TryGetBookmark(this.BookmarkId, out bookmark)) { // 套用書籤 manager.Apply(bookmark); return new TaskExecutionStatus(true); } } // 檢查書籤是否存在於舊書籤中 foreach (var bookmark in context.Application.Document.Bookmarks) { if (bookmark.Id == this.BookmarkId) { // 套用書籤 bookmark.Apply(); return new TaskExecutionStatus(true); } } // 找不到書籤，報錯 Console.WriteLine(\u0026#34;Error in execution of job {0}. The bookmark {1} was not found.\u0026#34;, context.Id, this.BookmarkId); return new TaskExecutionStatus(false, Common.Format(Properties.Resources.BookmarkNotAvaliable, this.BookmarkId)); } 註冊 最後，工作任務必須被註冊在單獨的 RegisterTasksAddin 類別中 public sealed class TasksAddIn : RegisterTasksAddIn { public override void RegisterTasks(TaskRegistrar registrar) { registrar.Register(new ApplyBookmark()); } } ","permalink":"https://intervalrain.github.io/dxp/customtask/","summary":"\u003ch3 id=\"簡介\"\u003e簡介\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eSpotfire Automation Services 提供一個平台和工具，用於在無使用者操作與 UI 的情況下自動地執行 TIBCO Spotfire。\u003c/li\u003e\n\u003cli\u003e適用情境如「定期發送報告」、「在某些事件發生時保存嵌入在 Spotfire 文件中的截圖」，以及在許多其他需要基於Spotfire文件進行自動化操作的情況下使用。\u003c/li\u003e\n\u003cli\u003e自動化服務 API 使自訂任務變得可能，且可與內建任務一起使用，執行自動化工作。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"spotfire-用語\"\u003eSpotfire 用語\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003e名詞\u003c/th\u003e\n          \u003cth\u003e解釋\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eTask\u003c/td\u003e\n          \u003ctd\u003eTask 是用於創建複雜工作的基礎模塊。自動化服務附帶了許多預定義的 Tasks，例如應用書籤或發送電子郵件或乃至其它可擴充的 Tasks。\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eJob\u003c/td\u003e\n          \u003ctd\u003e排程好待執行的 Tasks 組合成一個 Job，Job 又被儲存於 Job File 中。\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eJob File\u003c/td\u003e\n          \u003ctd\u003eJob File 是一個可讀的 XML，用於定義 Job。\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eJob Builder\u003c/td\u003e\n          \u003ctd\u003eJob Builder 是一個在 Spotfire 專業版中運行的應用程式，提供了一個易於使用的界面，用於創建和編輯工作。\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eJob Sender\u003c/td\u003e\n          \u003ctd\u003eClientJobSender 是一個工具，可將作業發送到 Spotfire Server 以進行執行。使用 ClientJobSender 設置定期或事件驅動的作業執行。\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"架構\"\u003e架構\u003c/h3\u003e\n\u003cp\u003e\u003cimg alt=\"pic1\" loading=\"lazy\" src=\"https://supportinfo.tibco.com/stca/comm/Create-an-Automation-Services-Custom-Task-in-TIBCO-Spotfire-1.png\"\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eJob 通常是在 Job Builder 或 ClientJobSender 中創建並保存為 XML 的 Job File，然後被送至 Spotfire 伺服器以執行，或是使用 ClientJobSender 工具發送到 Spotfire 伺服器以進行執行。\u003c/li\u003e\n\u003cli\u003e對於每個以 XML 格式發送到 Spotfire Server 以執行的工作，Automation Services 會啟動一個 \u003cstrong\u003enode\u003c/strong\u003e。接著內部工作執行程序會逐一執行任務，直到任務失敗或所有任務成功完成時退出。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"job-file-格式\"\u003eJob File 格式\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e工作檔案的 XML 格式設計為易於理解和修改。雖沒有正式的格式規範，但可讀性仍是挺高的。\u003c/li\u003e\n\u003cli\u003e以下是一個「從 Analytics Server Library 開啟分析文件並將圖像匯出到預定位置」的 Job 範例：\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-xml\" data-lang=\"xml\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;as:Job\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003exmlns:as=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;urn:tibco:spotfire.dxp.automation\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003e\u0026lt;as:Tasks\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026lt;OpenAnalysisFromLibrary\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003exmlns=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;urn:tibco:spotfire.dxp.automation.tasks\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#f92672\"\u003e\u0026lt;as:Title\u0026gt;\u003c/span\u003eOpen Analysis from Library\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/as:Title\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#f92672\"\u003e\u0026lt;AnalysisPath\u0026gt;\u003c/span\u003e/Users/Username/Baseball stats\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/AnalysisPath\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026lt;/OpenAnalysisFromLibrary\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026lt;ExportImage\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003exmlns=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;urn:tibco:spotfire.dxp.automation.tasks\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#f92672\"\u003e\u0026lt;as:Title\u0026gt;\u003c/span\u003eExport Image\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/as:Title\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#f92672\"\u003e\u0026lt;VisualizationId\u0026gt;\u003c/span\u003e292a90c6-0e03-47fe-961e-a528a14e9735\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/VisualizationId\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#f92672\"\u003e\u0026lt;DestinationPath\u0026gt;\u003c/span\u003eC:inetpubwwwrootMyWebServerImage.png\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/DestinationPath\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#f92672\"\u003e\u0026lt;Width\u0026gt;\u003c/span\u003e640\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/Width\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#f92672\"\u003e\u0026lt;Height\u0026gt;\u003c/span\u003e480\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/Height\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026lt;/ExportImage\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#f92672\"\u003e\u0026lt;/as:Tasks\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/as:Job\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"自動化-task-範例\"\u003e自動化 Task 範例\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e一個 Task 需繼承 \u003ccode\u003eTask\u003c/code\u003e 母類別。\u003c/li\u003e\n\u003cli\u003e一個 \u003ccode\u003eTask\u003c/code\u003e 類別必須擁有一個無參建構式，並呼叫 base 建構式，並傳入標題和描述。如果相同的任務名稱已經在使用中，可以選擇性地使用 XmlRoot 命名空間來避免命名衝突。為自訂任務使用自訂命名空間。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C#\" data-lang=\"C#\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 自定義任務的命名空間\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e[XmlRoot(\u0026#34;urn:spotfiredeveloper.automationservicesexample\u0026#34;)]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003esealed\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eApplyBookmark\u003c/span\u003e : Task\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// 建立一個無參建構式，並呼叫 base 建構式，同時傳入標題與描述\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e ApplyBookmark()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        : \u003cspan style=\"color:#66d9ef\"\u003ebase\u003c/span\u003e(Properties.Resources.ApplyBookmarkTitle, Properties.Resources.ApplyBookmarkDescription)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// 一些 public 的 properties 可供 UI 存取\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003e    [Description(\u0026#34;The GUID of the bookmark to apply\u0026#34;)]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e Guid BookmarkId { \u003cspan style=\"color:#66d9ef\"\u003eget\u003c/span\u003e; \u003cspan style=\"color:#66d9ef\"\u003eset\u003c/span\u003e; }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e當任務被執行時，會執行 \u003ccode\u003eExecuteCore\u003c/code\u003e 方法。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C#\" data-lang=\"C#\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eprotected\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eoverride\u003c/span\u003e TaskExecutionStatus ExecuteCore(TaskExecutionContext context)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// 沒有文件被讀取\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (context.Application.Document == \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e TaskExecutionStatus(\u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e, Properties.Resources.NoAnalysisLoaded);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// 檢查書籤是否存在於新書籤中\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e manager = context.Application.GetService\u0026lt;BookmarkManager\u0026gt;();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (manager != \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Bookmark bookmark;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (manager.TryGetBookmark(\u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e.BookmarkId, \u003cspan style=\"color:#66d9ef\"\u003eout\u003c/span\u003e bookmark))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#75715e\"\u003e// 套用書籤\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            manager.Apply(bookmark);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e TaskExecutionStatus(\u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// 檢查書籤是否存在於舊書籤中\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eforeach\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e bookmark \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e context.Application.Document.Bookmarks)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (bookmark.Id == \u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e.BookmarkId)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#75715e\"\u003e// 套用書籤\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            bookmark.Apply();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e TaskExecutionStatus(\u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// 找不到書籤，報錯\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Console.WriteLine(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Error in execution of job {0}. The bookmark {1} was not found.\u0026#34;\u003c/span\u003e, context.Id, \u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e.BookmarkId);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e TaskExecutionStatus(\u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e, Common.Format(Properties.Resources.BookmarkNotAvaliable, \u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e.BookmarkId));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"註冊\"\u003e註冊\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e最後，工作任務必須被註冊在單獨的 \u003ccode\u003eRegisterTasksAddin\u003c/code\u003e 類別中\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003epublic sealed class TasksAddIn : RegisterTasksAddIn\n{\n    public override void RegisterTasks(TaskRegistrar registrar)\n    {\n        registrar.Register(new ApplyBookmark());\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e","title":"[DXP] 在 spotfire 中創建自定義任務"},{"content":"在 Visual Studio 中創建 Extension 在 Visual Studio 中，選擇 [Tools] \u0026gt; [Options]，並在 [Projects and Solutions] \u0026gt; [Locations] 下，將 [User project templates location] 設定為 Spotfire SDK 中 [Templates] 資料夾的路徑。 在 Visual Studio 中，選擇 [File] \u0026gt; [New] \u0026gt; [Project]，然後選擇 [TIBCO Spotfire Extension_VS] 或 [TIBCO Spotfire Extension Net6_VS] 範本。請注意，TIBCO Spotfire Extension Net6_VS 範本是一個 SDK-style 專案，它允許同時為多個平台進行構建。這是本範例中使用的範本。為了使預定義的後置構建步驟正常工作， 新專案的位置必須在 SDK 中的 MyExtensions 文件夾中\n（或者在同一級別的其他文件夾中） 並選取 [Place solution and project in the same directory] 核取方塊。 透過選擇 [Build] \u0026gt; [Build Solution] 來編譯新建立的專案。這將會產生一個新的子資料夾 MyExtensions\\Build，其中會存放所有建置產物。 編譯後的二進制文件與 SDK 二進制文件會儲存在 Build\\bin\\ 中。例如，Build\\bin\\net6.0 或 Build\\bin\\AnyCPU\\Debug。 一個或多個 Spotfire 套件檔案 (.spk) 儲存在 Build 資料夾中。 套件檔案的未打包版本儲存在 Build\\Modules\\\u0026lt;Extension-name\u0026gt;_\u0026lt;Version number\u0026gt;中。例如，TIBCO Spotfire_Extension_Net6_VS-Windows_1.0.6320.3907。這樣與下載的 Spotfire 的擴充方式一致，更易於 debug。 為了能夠除錯擴充功能，需在 Visual Studio 中手動進行以下配置： 在 Solution Explorer 中選擇擴充功能專案。 選擇 [View] \u0026gt; [Property Pages]。 在 Debug 頁面上，點擊 [Open debug launch profiles UI]，然後在 [Launch Profiles] 對話框中執行以下操作： 點擊 [Create a new profile]，並選擇 [Executable]。 在 [Executable] 下，指向電腦中的 Spotfire.Dxp.exe。它可以是安裝的版本、某些中間測試版本或類似版本。例如，C:\\Users\\{username}\\AppData\\Local\\TIBCO\\Spotfire\\12.0.0\\Spotfire.Dxp.exe。 在 CLI 下，輸入 /loadallmodules /addmodulefolder:\u0026lt;SDK 中模組資料夾的路徑\u0026gt;，舉例： /loadallmodules /addmodulefolder:C:\\SpotfireSDK\\SDK\\MyExtensions\\Build\\Modules`。 為了驗證擴展功能已經載入，請在 Visual Studio 中選擇新的 Debug 檔案，並運行它以確保 Spotfire 已啟動。 在 Spotfire 中，請前往 [Help] \u0026gt; [Support Diagnostics and Logging]，向下捲動已載入檔案的清單，以確認擴充功能已載入。 使用標準管理使用者介面 [Deployments \u0026amp; Packages]，將儲存在 Build 資料夾中的套件檔案部署到 Spotfire 伺服器。 自訂環境和進階資訊 可以透過編輯 post-build command 來配置 Visual Studio 環境。\n在 Solution Explorer 中選擇擴充的專案。 選擇 [View] \u0026gt; [Property Pages]。 在 [Build Event] 頁面上，查看 [Post-build event command line] 根據需求修改後置命令，後置命令會執行位於專案資料夾中的 PostBuildEvent.bat 檔案。TIBCO Spotfire Extension_VS.zip 模板的後置檔案需要四個參數，TIBCO Spotfire Extension Net6 VS.zip 則需要六個參數。由 Visual Studio Macro 來定義，分別為： $(ProjectDir)：專案資料夾的完整路徑。 $(ProjectName)：項目的名稱。 $(TargetDir)：創建 Packge 應儲存的資料夾。 $(Configuration)：建置設定(Debug/Release)。 $(TargetFramework)：目標框架。(\u0026quot;net48\u0026quot; for Window，\u0026quot;net6.0\u0026quot; for Linux) $(AdditionBinaryFolders)：一個以分號分隔的額外添加的二進制文件夾列表，用於 refpath 參數。 在 PostBuildEvent.bat 檔案後的後置命令為：\n\u0026#34;%~1..\\..\\..\\Package Builder\\Spotfire.Dxp.PackageBuilder-Console.exe\u0026#34; /pkdesc:\u0026#34;%~1%~2.pkdesc\u0026#34; /target:\u0026#34;%~1..\\..\\build\\%~2.spk\u0026#34; /basefolder:\u0026#34;%~3..\\%~4\u0026#34; /refpath:\u0026#34;%~3..\\%~4;%~1..\\..\\..\\Binaries\u0026#34; /saveunpackedmodule /unpackedmodulefolder:\u0026#34;%~1..\\..\\Build\\Modules\u0026#34; /automaticpackageversionnumber 基本上是在呼叫 Spotfire.Dxp.PackageBuilder-Console.exe，並帶有一些包含專參參考的特定引數。如果選擇對擴充功能儲存位置進行任何更改，或需要更改輸出位置，則需要進行手動更改，無論是對發佈後建置命令檔案發送的引數進行修改，或是對發佈後建置檔案本身進行修改： \u0026quot;%~1..\\..\\..\\Package Builder\\Spotfire.Dxp.PackageBuilder-Console.exe\u0026quot; 這必須指向 SDK 中包含的 Package Builder Console。 %~1 是由第一個參數定義的完整路徑，它指向包含 csproj 檔案的資料夾（包括尾部反斜線）。 /pkdesc:\u0026quot;%~1%~2.pkdesc\u0026quot; 此參數識別擴展套件的 pkdesc 檔案。請注意，一個 pkdesc 檔案可以包含多個組件（即 Visual Studio 中的專案），但這不是必要的。 %~1 是由第一個參數定義的完整路徑，它指向包含 csproj 檔案的資料夾（包括尾部反斜線）。 %~2 應該包含 pkdesc 檔案的檔名，不包含副檔名。 /target:\u0026quot;%~1..\\..\\build\\%~2.spk\u0026quot; 此參數識別輸出套件檔案的路徑和名稱。 %~1 是由第一個參數定義的完整路徑，它指向包含 csproj 檔案的資料夾（包括尾部反斜線）。 %~2 應包含 pkdesc 檔案的檔名（不含副檔名），此引數的預設值指向建置資料夾。 /basefolder:\u0026quot;%~3..\\%~4\u0026quot; 此參數識別 pkdesc 檔案中提及的檔案和資料夾的根目錄。 %~3 是第三個參數給定的建置資料夾路徑。在範例專案中，預設為 \u0026ldquo;....\\Build\\bin\\AnyCPU\\Debug\u0026quot;。請注意，巨集包含尾部反斜線，這意味著尾部的雙引號將不被識別。因此，在建置時添加尾部的 \u0026ldquo;..\\%~4\u0026rdquo; 以避免錯誤。 %~4 是預設的建置設定 (Debug / Release)，通常情況下，不需要更改此參數。 /refpath:\u0026quot;%~3..\\%~4;%~1..\\..\\..\\Binaries\u0026quot; 此參數識別存放所有相依組件的資料夾。 %~3 是第三個參數給定的建置資料夾路徑。在範例專案中，預設為 \u0026ldquo;....\\Build\\bin\\AnyCPU\\Debug\u0026quot;。請注意，巨集包含尾部反斜線，這意味著尾部的雙引號將不被識別。因此，在建置時添加尾部的 \u0026quot; ..%~4 \u0026quot; 以避免錯誤。 %~4 是預設的建置設定 (Debug / Release)。 通常，至少應該包括Spotfire SDK組件，但擴展還可能依賴於更多組件。示例項目指向兩個由分號分隔的文件夾；擴展的構建文件夾和SDK二進制文件夾。如果您的擴展需要更多文件夾，請添加分號以分隔它們。 /saveunpackedmodule 如果已經將擴充功能編譯成其他 Spotfire SDK 二進位檔案，則需要相應地更改最後一個路徑。 此參數會讓套件建置工具控制台解壓縮所建立的套件並將其存儲在磁碟上。這是為了能夠無縫地調試擴展所必需的。 /unpackedmodulefolder:\u0026quot;%~1..\\..\\Build\\Modules\u0026quot; 此參數指向未打包模組應存儲的文件夾。 %~1 是由第一個參數定義的完整路徑，指向包含 csproj 檔案的資料夾（包括尾部反斜線）。 /automaticpackageversionnumber 此參數告訴 Package Builder Console 自動為套件產生唯一的版本號碼（不是任何包含的檔案）。這是一個方便的功能，以確保新建立的套件在部署到 Spotfire Server 時可以取代現有的套件。 使用此參數的一個副作用是，每次編譯時您都會在「未打包的模組」文件夾中獲得一個新的模組文件夾。因此，如果您經常重新編譯，您可能需要偶爾清除此文件夾。 若不想每次編譯時都建立 Package，可在編輯 PostBuildEvent.bat 並在在命令前加前綴 rem。 使用 .pkdesc 檔案代替 module.xml 檔案 與傳統的套件生成器不同，當專注於使用 Visual Studio 時，不需要編輯 module.xml 檔案。相反地，套件檔案中包含的 module.xml 檔案是由套件生成器控制台根據 .pkdesc 檔案中的規格創建的。範例專案包含一個最小的 .pkdesc 檔案，可用作起點，完整的 .pkdesc 格式參考可在此處找到。 將多個專案新增至解決方案 您可以將所有專案打包在同一個 Package 中，或者您可以將多個套件添加到 Solution 中。 如果要為每個專案單獨做打包，可以透過實作後，為每個專案都做後建置處理。 然而，如果要在一個 Package 中包含多個 Assemblies，則必須對 Visual Studio 中的專案進行一些更改。 建議將 pkdesc 檔案存放在解決方案檔案 (.sln) 所在的資料夾中，而非位於專案資料夾之一，並且檔名應對應到所有包含的組件的描述。通常這是向上一個資料夾層級。 只有其中一個專案應包含後建置步驟。請確保該專案是編譯相依性鏈中的最後一個專案之一。 必須編輯 pkdesc 檔案，以包含套件中包含的所有組件的相關資訊。 必須確保後建置步驟的引數 /pkdesc 有正確的值。 使用 .pkdesc 檔案作為範本。 如果您決定使用 pkdesc 檔案作為模板並複製它，必須確保在檔案中創建一個新的 GUID 作為識別符。這可以在 Visual Studio 中通過執行**[工具]** \u0026gt; [建立 GUID] 輕鬆完成。由於 Spotfire Server 根據其 ID 識別 Package，如果未替換副本中的 GUID，則在部署時新的 Package 將覆蓋現有的 Package。當然，還應更新 Package 名稱，以避免部署了多個具有相同名稱的 Package。 ","permalink":"https://intervalrain.github.io/dxp/config/","summary":"\u003ch2 id=\"在-visual-studio-中創建-extension\"\u003e在 Visual Studio 中創建 Extension\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e在 Visual Studio 中，選擇 \u003cstrong\u003e[Tools]\u003c/strong\u003e \u0026gt; \u003cstrong\u003e[Options]\u003c/strong\u003e，並在 \u003cstrong\u003e[Projects and Solutions]\u003c/strong\u003e \u0026gt; \u003cstrong\u003e[Locations]\u003c/strong\u003e 下，將 \u003cstrong\u003e[User project templates location]\u003c/strong\u003e 設定為 Spotfire SDK 中 \u003cstrong\u003e[Templates]\u003c/strong\u003e 資料夾的路徑。\n\u003cimg alt=\"pic1\" loading=\"lazy\" src=\"https://docs.tibco.com/pub/sfire_dev/area/doc/html/devdoc/images/vs_first_extension.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在 Visual Studio 中，選擇 \u003cstrong\u003e[File]\u003c/strong\u003e \u0026gt; \u003cstrong\u003e[New]\u003c/strong\u003e \u0026gt; \u003cstrong\u003e[Project]\u003c/strong\u003e，然後選擇 \u003cstrong\u003e[TIBCO Spotfire Extension_VS]\u003c/strong\u003e 或 \u003cstrong\u003e[TIBCO Spotfire Extension Net6_VS]\u003c/strong\u003e 範本。請注意，TIBCO Spotfire Extension Net6_VS 範本是一個 SDK-style 專案，它允許同時為多個平台進行構建。這是本範例中使用的範本。為了使預定義的後置構建步驟正常工作，\u003c/li\u003e\n\u003c/ol\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e新專案的位置必須在 SDK 中的 MyExtensions 文件夾中\u003c/strong\u003e\u003cbr\u003e\n（或者在同一級別的其他文件夾中） \u003cbr\u003e\n並選取 \u003cstrong\u003e[Place solution and project in the same directory]\u003c/strong\u003e 核取方塊。\n\u003cimg alt=\"pic2\" loading=\"lazy\" src=\"https://docs.tibco.com/pub/sfire_dev/area/doc/html/devdoc/images/vs_myextensions_location.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003col start=\"3\"\u003e\n\u003cli\u003e透過選擇 \u003cstrong\u003e[Build]\u003c/strong\u003e \u0026gt; \u003cstrong\u003e[Build Solution]\u003c/strong\u003e 來編譯新建立的專案。這將會產生一個新的子資料夾 \u003ccode\u003eMyExtensions\\Build\u003c/code\u003e，其中會存放所有建置產物。\n\u003cul\u003e\n\u003cli\u003e編譯後的二進制文件與 SDK 二進制文件會儲存在 \u003ccode\u003eBuild\\bin\\\u003c/code\u003e 中。例如，\u003ccode\u003eBuild\\bin\\net6.0\u003c/code\u003e 或 \u003ccode\u003eBuild\\bin\\AnyCPU\\Debug\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e一個或多個 Spotfire 套件檔案 (.spk) 儲存在 Build 資料夾中。\u003c/li\u003e\n\u003cli\u003e套件檔案的未打包版本儲存在 \u003ccode\u003eBuild\\Modules\\\u0026lt;Extension-name\u0026gt;_\u0026lt;Version number\u0026gt;\u003c/code\u003e中。例如，\u003ccode\u003eTIBCO Spotfire_Extension_Net6_VS-Windows_1.0.6320.3907\u003c/code\u003e。這樣與下載的 Spotfire 的擴充方式一致，更易於 debug。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e為了能夠除錯擴充功能，需在 Visual Studio 中手動進行以下配置：\n\u003cul\u003e\n\u003cli\u003e在 \u003cstrong\u003eSolution Explorer\u003c/strong\u003e 中選擇擴充功能專案。\u003c/li\u003e\n\u003cli\u003e選擇 \u003cstrong\u003e[View]\u003c/strong\u003e \u0026gt; \u003cstrong\u003e[Property Pages]\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e在 Debug 頁面上，點擊 \u003cstrong\u003e[Open debug launch profiles UI]\u003c/strong\u003e，然後在 \u003cstrong\u003e[Launch Profiles]\u003c/strong\u003e 對話框中執行以下操作：\n\u003cul\u003e\n\u003cli\u003e點擊 \u003cstrong\u003e[Create a new profile]\u003c/strong\u003e，並選擇 \u003cstrong\u003e[Executable]\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e在 \u003cstrong\u003e[Executable]\u003c/strong\u003e 下，指向電腦中的 \u003ccode\u003eSpotfire.Dxp.exe\u003c/code\u003e。它可以是安裝的版本、某些中間測試版本或類似版本。例如，\u003ccode\u003eC:\\Users\\{username}\\AppData\\Local\\TIBCO\\Spotfire\\12.0.0\\Spotfire.Dxp.exe\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e在 CLI 下，輸入 \u003ccode\u003e/loadallmodules /addmodulefolder:\u0026lt;SDK 中模組資料夾的路徑\u0026gt;\u003c/code\u003e，舉例：\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-cmd\" data-lang=\"cmd\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e/loadallmodules /addmodulefolder:C:\\SpotfireSDK\\SDK\\MyExtensions\\Build\\Modules`。\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e為了驗證擴展功能已經載入，請在 Visual Studio 中選擇新的 Debug 檔案，並運行它以確保 Spotfire 已啟動。\n\u003cimg alt=\"pic3\" loading=\"lazy\" src=\"https://docs.tibco.com/pub/sfire_dev/area/doc/html/devdoc/images/choosing_debug_profile_vs_project.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在 Spotfire 中，請前往 \u003cstrong\u003e[Help]\u003c/strong\u003e \u0026gt; \u003cstrong\u003e[Support Diagnostics and Logging]\u003c/strong\u003e，向下捲動已載入檔案的清單，以確認擴充功能已載入。\n\u003cimg alt=\"pic4\" loading=\"lazy\" src=\"https://docs.tibco.com/pub/sfire_dev/area/doc/html/devdoc/images/spotfire_support_and_diagnostics.png\"\u003e\u003c/li\u003e\n\u003cli\u003e使用標準管理使用者介面 \u003cstrong\u003e[Deployments \u0026amp; Packages]\u003c/strong\u003e，將儲存在 Build 資料夾中的套件檔案部署到 Spotfire 伺服器。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"自訂環境和進階資訊\"\u003e自訂環境和進階資訊\u003c/h2\u003e\n\u003cp\u003e可以透過編輯 post-build command 來配置 Visual Studio 環境。\u003c/p\u003e","title":"[DXP] 使用 Visual Studio 對 Spotfire 開發進行環境設置"},{"content":"Sample code for stop watch using System; using System.Collections.Generic; using System.Data; using System.Linq; using System.Runtime.CompilerServices; using System.Data.Common; using System.Diagnostics; using System.Drawing; using System.Text; using System.Threading.Tasks; namespace Rainspace.PlayGround { public class Program { public static void Main(string[] args) { Stopwatch sw = new Stopwatch(); sw.Start(); System.Console.WriteLine(\u0026#34;==============Accumulate1==============\u0026#34;); System.Console.WriteLine(\u0026#34;Result: \u0026#34; + Accumulate(0, 100, 0)); sw.Stop(); System.Console.WriteLine(\u0026#34;Time cost: \u0026#34; + (sw.ElapsedTicks/1.0e6).ToString() + \u0026#34;ms\u0026#34;); sw.Reset(); sw.Start(); System.Console.WriteLine(\u0026#34;==============Accumulate2==============\u0026#34;); System.Console.WriteLine(\u0026#34;Result: \u0026#34; + Accumulate(0, 100, 0)); sw.Stop(); System.Console.WriteLine(\u0026#34;Time cost: \u0026#34; + (sw.ElapsedTicks/1.0e6).ToString() + \u0026#34;ms\u0026#34;); } public static int Accumulate(int begin, int end, int sum = 0) { int res = sum; if (end \u0026lt; begin) return Accumulate(end, begin, sum); for (int i = begin; i \u0026lt; end; i++) { res += i; } return res; } public static int Accumulate2(int begin, int end, int sum = 0) { int res = (begin + end) * (end - begin) / 2; return res + sum; } } } ","permalink":"https://intervalrain.github.io/csharp/performancetest/","summary":"\u003ch3 id=\"sample-code-for-stop-watch\"\u003eSample code for stop watch\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Csharp\" data-lang=\"Csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eusing\u003c/span\u003e System;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eusing\u003c/span\u003e System.Collections.Generic;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eusing\u003c/span\u003e System.Data;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eusing\u003c/span\u003e System.Linq;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eusing\u003c/span\u003e System.Runtime.CompilerServices;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eusing\u003c/span\u003e System.Data.Common;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eusing\u003c/span\u003e System.Diagnostics;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eusing\u003c/span\u003e System.Drawing;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eusing\u003c/span\u003e System.Text;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eusing\u003c/span\u003e System.Threading.Tasks;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003enamespace\u003c/span\u003e Rainspace.PlayGround\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eProgram\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e Main(\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e[] args)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            Stopwatch sw = \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e Stopwatch();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            sw.Start();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            System.Console.WriteLine(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;==============Accumulate1==============\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            System.Console.WriteLine(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Result: \u0026#34;\u003c/span\u003e + Accumulate(\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e100\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            sw.Stop();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            System.Console.WriteLine(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Time cost: \u0026#34;\u003c/span\u003e + (sw.ElapsedTicks/\u003cspan style=\"color:#ae81ff\"\u003e1.0e6\u003c/span\u003e).ToString() + \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;ms\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            sw.Reset();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            sw.Start();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            System.Console.WriteLine(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;==============Accumulate2==============\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            System.Console.WriteLine(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Result: \u0026#34;\u003c/span\u003e + Accumulate(\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e100\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            sw.Stop();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            System.Console.WriteLine(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Time cost: \u0026#34;\u003c/span\u003e + (sw.ElapsedTicks/\u003cspan style=\"color:#ae81ff\"\u003e1.0e6\u003c/span\u003e).ToString() + \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;ms\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e Accumulate(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e begin, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e end, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e sum = \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e res = sum;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (end \u0026lt; begin) \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e Accumulate(end, begin, sum);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i = begin; i \u0026lt; end; i++) \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                res += i;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e res;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e Accumulate2(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e begin, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e end, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e sum = \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e res = (begin + end) * (end - begin) / \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e res + sum;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"[CS] Sample cost for performance test"},{"content":"關聯模式的條件 關聯模式可以比實體關係模式(ERM)更精準的描述資料，他有幾個條件必須滿足： 定義域限制: 指資料庫的關聯中的每個屬性質，必須符合該屬性的定義，例如產品名稱必須是字串，薪水必須是整數數字等。 關聯鍵限制: 指資料庫的關聯中必須有關聯鍵的定義，也就是Super key、Candidate Key、Primary Key、Alternate Key、Foreign Key。這些定義我們稍後再來解釋。 實體完整限制: 如果關聯存在主鍵(Primary Key)，則不能為空。因為如果為空值，無法得知其相關的屬性值到底是描述哪一個實體。 參考完整限制: 如果關聯存在外鍵(Foreign Key)為非空值，必須有可以參考的主鍵(Primary Key)。因為如果外鍵存在，而無法關連到其他表格的主鍵，這個關聯存在就沒有意義。 語意完整限制: 這個限制不是必須的，但是可以更完備的描述實體世界的資料。例如交易金額高於100元才可以使用信用卡付款等。 關聯模式的五大鍵 Super key 超鍵: 符合唯一性的關聯鍵。 Candidate Key 候選鍵: 符合唯一性以及最小性的關聯鍵。 Primary Key 主鍵: 從候選鍵中，挑選出其中一個關聯鍵，也就是最具識別意義的關聯鍵。 Alternate Key 次要鍵: 沒有被選為主鍵的其他候選鍵。 Foreign Key 外鍵/外部鍵: 關聯中被用來參考到其他表格主鍵的關聯鍵，就是外鍵。 例如學生資料表(student_id, student_no, student_name, student_depid)\nstudent_id student_no student_name student_depid A123454321 00001 Rain Hu MSE A123123123 00002 Mike Hu IM A221232134 00003 Eva Hsu ECE A223124125 00004 Dudu Liu ECE A124124512 00005 Gober Wei IT student_id表示學生身分證字號 student_no表示學生學號 student_name表示學生姓名 student_depid表示學生的科系代號 Super key 就可以是 {student_id}、{student_no}、 {student_id, student_no}、{student_id, student_name}、{student_id, student_depid} \u0026hellip; 等等，都符合唯一性的條件。 Candidate Key 就可以是 {student_id}、{student_no}，都符合唯一性及最小性的條件。 Primary Key 就可以從Candidate Key挑選一個，至於挑選哪一個，就看你的系統特性。如果你的學校是多學制的話，就可能不適合挑選學生身分證字號當主鍵，因為可能某個學生原本是國中部，畢業後再進入高中部，如果系統沒有考慮清楚，這個畢業後再變新生的個體，就可能出錯。 Alternate Key 就是沒被挑中當成Primary Key的其他Candidate Key，例如，如果挑選 {student_id}當成主鍵，Alternate Key 就是{student_no}。 如果存在科系資料表 (depid, dep_name)，而且depid當成科系資料表的主鍵，學生資料表的 student_depid就是Foreign Key。 資料來源：https://www.mysql.tw/2015/04/super-keycandidate-keyprimary.html\n","permalink":"https://intervalrain.github.io/it/keysinrelation/","summary":"\u003ch3 id=\"關聯模式的條件\"\u003e關聯模式的條件\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e關聯模式可以比實體關係模式(ERM)更精準的描述資料，他有幾個條件必須滿足：\u003c/li\u003e\n\u003c/ul\u003e\n\u003col\u003e\n\u003cli\u003e定義域限制: 指資料庫的關聯中的每個屬性質，必須符合該屬性的定義，例如產品名稱必須是字串，薪水必須是整數數字等。\u003c/li\u003e\n\u003cli\u003e關聯鍵限制: 指資料庫的關聯中必須有關聯鍵的定義，也就是Super key、Candidate Key、Primary Key、Alternate Key、Foreign Key。這些定義我們稍後再來解釋。\u003c/li\u003e\n\u003cli\u003e實體完整限制: 如果關聯存在主鍵(Primary Key)，則不能為空。因為如果為空值，無法得知其相關的屬性值到底是描述哪一個實體。\u003c/li\u003e\n\u003cli\u003e參考完整限制: 如果關聯存在外鍵(Foreign Key)為非空值，必須有可以參考的主鍵(Primary Key)。因為如果外鍵存在，而無法關連到其他表格的主鍵，這個關聯存在就沒有意義。\u003c/li\u003e\n\u003cli\u003e語意完整限制: 這個限制不是必須的，但是可以更完備的描述實體世界的資料。例如交易金額高於100元才可以使用信用卡付款等。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"關聯模式的五大鍵\"\u003e關聯模式的五大鍵\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eSuper key 超鍵: 符合唯一性的關聯鍵。\u003c/li\u003e\n\u003cli\u003eCandidate Key 候選鍵: 符合唯一性以及最小性的關聯鍵。\u003c/li\u003e\n\u003cli\u003ePrimary Key 主鍵: 從候選鍵中，挑選出其中一個關聯鍵，也就是最具識別意義的關聯鍵。\u003c/li\u003e\n\u003cli\u003eAlternate Key 次要鍵: 沒有被選為主鍵的其他候選鍵。\u003c/li\u003e\n\u003cli\u003eForeign Key 外鍵/外部鍵: 關聯中被用來參考到其他表格主鍵的關聯鍵，就是外鍵。\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003cp\u003e例如學生資料表(student_id, student_no, student_name, student_depid)\u003c/p\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003estudent_id\u003c/th\u003e\n          \u003cth\u003estudent_no\u003c/th\u003e\n          \u003cth\u003estudent_name\u003c/th\u003e\n          \u003cth\u003estudent_depid\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eA123454321\u003c/td\u003e\n          \u003ctd\u003e00001\u003c/td\u003e\n          \u003ctd\u003eRain Hu\u003c/td\u003e\n          \u003ctd\u003eMSE\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eA123123123\u003c/td\u003e\n          \u003ctd\u003e00002\u003c/td\u003e\n          \u003ctd\u003eMike Hu\u003c/td\u003e\n          \u003ctd\u003eIM\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eA221232134\u003c/td\u003e\n          \u003ctd\u003e00003\u003c/td\u003e\n          \u003ctd\u003eEva Hsu\u003c/td\u003e\n          \u003ctd\u003eECE\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eA223124125\u003c/td\u003e\n          \u003ctd\u003e00004\u003c/td\u003e\n          \u003ctd\u003eDudu Liu\u003c/td\u003e\n          \u003ctd\u003eECE\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eA124124512\u003c/td\u003e\n          \u003ctd\u003e00005\u003c/td\u003e\n          \u003ctd\u003eGober Wei\u003c/td\u003e\n          \u003ctd\u003eIT\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cul\u003e\n\u003cli\u003estudent_id表示學生身分證字號\u003c/li\u003e\n\u003cli\u003estudent_no表示學生學號\u003c/li\u003e\n\u003cli\u003estudent_name表示學生姓名\u003c/li\u003e\n\u003cli\u003estudent_depid表示學生的科系代號\n\u003cul\u003e\n\u003cli\u003eSuper key 就可以是 {student_id}、{student_no}、 {student_id, student_no}、{student_id, student_name}、{student_id, student_depid} \u0026hellip; 等等，都符合唯一性的條件。\u003c/li\u003e\n\u003cli\u003eCandidate Key 就可以是 {student_id}、{student_no}，都符合唯一性及最小性的條件。\u003c/li\u003e\n\u003cli\u003ePrimary Key 就可以從Candidate Key挑選一個，至於挑選哪一個，就看你的系統特性。如果你的學校是多學制的話，就可能不適合挑選學生身分證字號當主鍵，因為可能某個學生原本是國中部，畢業後再進入高中部，如果系統沒有考慮清楚，這個畢業後再變新生的個體，就可能出錯。\u003c/li\u003e\n\u003cli\u003eAlternate Key 就是沒被挑中當成Primary Key的其他Candidate Key，例如，如果挑選 {student_id}當成主鍵，Alternate Key 就是{student_no}。\u003c/li\u003e\n\u003cli\u003e如果存在科系資料表 (depid, dep_name)，而且depid當成科系資料表的主鍵，學生資料表的 student_depid就是Foreign Key。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e資料來源：\u003ca href=\"https://www.mysql.tw/2015/04/super-keycandidate-keyprimary.html\"\u003ehttps://www.mysql.tw/2015/04/super-keycandidate-keyprimary.html\u003c/a\u003e\u003c/p\u003e","title":"[IT] 關聯模式的五大鍵 Super key、Candidate Key、Primary Key、Alternate Key、Foreign Key"},{"content":"Binary Search 二元搜索法 通常一般的二分搜是在解決以下這種問題：如果有一個遞增的函數 \\(f\\) 定義在區間 \\([a, a + n)\\) 上，請求出滿足 \\(f(s)\\ge c\\)的最小整數\\(s\\)。 若用一般的 linear search 從 a 開始搜直到找到滿足條件的 s，那麼複雜度是 \\(O(n)\\)，而用二元搜索法可以優化時間複雜度變成 \\(O(\\log n)\\)。\n想法是對於某個在 \\((a, a + n)\\) 中的整數 \\(k\\)，如果 \\(f(k − 1) \\ge c\\)，那麼 \\(s \u0026lt; k\\)，也就是答案會落在區間 \\([a, k)\\) 中。\n反之，如果 \\(f(k − 1) \u0026lt; c\\)，那麼 \\(s \\ge k\\)，也就是說你要求的答案會落在 \\([k, a + n)\\)。\n為了讓兩種情況的可能性都盡量低， k 取愈接近 a + n/2 愈好。如此一來，每次候選區間的長度都會縮小一半，因此複雜度為 \\(O(\\log n)\\)。 實務上，這種函數 \\(f\\) 常常不能直接得出某一點的值 \\(f(a)\\)（甚至只能確認它和 \\(c\\) 的大小關係），而需要 \\(O(M)\\) 的時間來計算。顯然地，這時複雜度是 \\(O(M \\log n)\\)。 1. 三元搜 利用二分搜這種「縮短候選人長度」的想法，我們可以找出滿足特定性質的函數的最小值，這種技巧稱為三分搜。 三分搜處理的問題如下：有一個在 \\([a, a + n)\\) 中先嚴格遞減再嚴格遞增的函數 \\(f\\)，請求出 \\(f\\) 在 \\([a, a + n)\\) 的最小值。取在 \\([a, a + n)\\) 中的兩個整數 \\(x \u0026lt; y\\)。如果 \\(f(x) \u0026lt; f(y)\\)，那麼最小值一定落在 \\([a, y)\\)。如果 \\(f(x) \u0026gt; f(y)\\)，那麼最小值一定落在 \\((x, a + n)\\)。如果 \\(f(x) = f(y)\\)，那麼最小值一定落在 \\((x, y)\\)。為了讓候選區間每次都會縮短一定的比例，通常都取 x 跟 y 為區間的三等分點（取中間一點的話常數會變小）。複雜度仍然是 \\(O(\\log n)\\)。 2. 對答案二分搜 有許多問題都喜歡叫你求「滿足條件的最小值」這種東西。如果這個問題滿足「單調 性」，那或許可以考慮對答案二分搜。 什麼是「單調性」呢？考慮一個函數 P，如果 s 滿足條件，那麼 P(s) = 1，反之則為 0。如果 P 有單調性，我們就說這個問題有單調性。這樣的好處是，我們可以直接用前面的方法二分搜出要求的 s。如果計算 P 的複雜度並不大時，這樣的方法可以有非常的表現效率。在你沒辦法快速求出 s 而只能快速確認一個 s 是否符合條件時，這是一個非常好的方法。 例題：Leetcode875. Koko Eating Bananas 以此題而言， canFinish 就是一個具備單調性的函式，符合我們對答案作二分搜的條件。 int minEatingSpeed(vector\u0026lt;int\u0026gt;\u0026amp; piles, int h) { int max = *max_element(piles.begin(), piles.end()); if (piles.size() == h) return max; int left = 1, right = max + 1; while (left \u0026lt; right){ int mid = left + (right-left)/2; if (canFinish(piles, mid, h)){ right = mid; } else { left = mid + 1; } } return left; } bool canFinish(vector\u0026lt;int\u0026gt; piles, int speed, int h){ int time = 0; for (int n : piles){ time += n/speed + ((n % speed \u0026gt; 0) ? 1 : 0); } return time \u0026lt;= h; } 回到目錄：[Algo] 演算法筆記 想要複習：[Algo] 3-1. Two Pointer 接著閱讀：[Algo] 3-3. Monotonic Stack ","permalink":"https://intervalrain.github.io/cs/algo/binary_search/","summary":"\u003ch2 id=\"binary-search-二元搜索法\"\u003eBinary Search 二元搜索法\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e通常一般的二分搜是在解決以下這種問題：如果有一個遞增的函數 \\(f\\) 定義在區間\n\\([a, a + n)\\) 上，請求出滿足 \\(f(s)\\ge c\\)的最小整數\\(s\\)。\u003c/li\u003e\n\u003cli\u003e若用一般的 linear search 從 a 開始搜直到找到滿足條件的 s，那麼複雜度是 \\(O(n)\\)，而用二元搜索法可以優化時間複雜度變成 \\(O(\\log n)\\)。\u003cbr\u003e\n想法是對於某個在 \\((a, a + n)\\) 中的整數 \\(k\\)，如果 \\(f(k − 1) \\ge c\\)，那麼 \\(s \u0026lt; k\\)，也就是答案會落在區間 \\([a, k)\\) 中。\u003cbr\u003e\n反之，如果 \\(f(k − 1) \u0026lt; c\\)，那麼 \\(s \\ge k\\)，也就是說你要求的答案會落在 \\([k, a + n)\\)。\u003cbr\u003e\n為了讓兩種情況的可能性都盡量低， k 取愈接近 a + n/2 愈好。如此一來，每次候選區間的長度都會縮小一半，因此複雜度為 \\(O(\\log n)\\)。\u003c/li\u003e\n\u003cli\u003e實務上，這種函數 \\(f\\) 常常不能直接得出某一點的值 \\(f(a)\\)（甚至只能確認它和 \\(c\\) 的大小關係），而需要 \\(O(M)\\) 的時間來計算。顯然地，這時複雜度是 \\(O(M \\log n)\\)。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"1-三元搜\"\u003e1. 三元搜\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e利用二分搜這種「縮短候選人長度」的想法，我們可以找出滿足特定性質的函數的最小值，這種技巧稱為三分搜。\u003c/li\u003e\n\u003cli\u003e三分搜處理的問題如下：有一個在 \\([a, a + n)\\) 中先嚴格遞減再嚴格遞增的函數 \\(f\\)，請求出 \\(f\\) 在 \\([a, a + n)\\) 的最小值。取在 \\([a, a + n)\\) 中的兩個整數 \\(x \u0026lt; y\\)。如果 \\(f(x) \u0026lt; f(y)\\)，那麼最小值一定落在 \\([a, y)\\)。如果 \\(f(x) \u0026gt; f(y)\\)，那麼最小值一定落在 \\((x, a + n)\\)。如果 \\(f(x) = f(y)\\)，那麼最小值一定落在 \\((x, y)\\)。為了讓候選區間每次都會縮短一定的比例，通常都取 x 跟 y 為區間的三等分點（取中間一點的話常數會變小）。複雜度仍然是 \\(O(\\log n)\\)。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"2-對答案二分搜\"\u003e2. 對答案二分搜\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e有許多問題都喜歡叫你求「滿足條件的最小值」這種東西。如果這個問題滿足「單調\n性」，那或許可以考慮對答案二分搜。\u003c/li\u003e\n\u003cli\u003e什麼是「單調性」呢？考慮一個函數 P，如果 s 滿足條件，那麼 P(s) = 1，反之則為 0。如果 P 有單調性，我們就說這個問題有單調性。這樣的好處是，我們可以直接用前面的方法二分搜出要求的 s。如果計算 P 的複雜度並不大時，這樣的方法可以有非常的表現效率。在你沒辦法快速求出 s 而只能快速確認一個 s 是否符合條件時，這是一個非常好的方法。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"例題leetcode875-koko-eating-bananashttpsleetcodecomproblemskoko-eating-bananas\"\u003e例題：\u003ca href=\"https://leetcode.com/problems/koko-eating-bananas/\"\u003eLeetcode875. Koko Eating Bananas\u003c/a\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e以此題而言， \u003ccode\u003ecanFinish\u003c/code\u003e 就是一個具備單調性的函式，符合我們對答案作二分搜的條件。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eminEatingSpeed\u003c/span\u003e(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e piles, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e h) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e max \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003emax_element(piles.begin(), piles.end());\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (piles.size() \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e h)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e max;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e left \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, right \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e max \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (left \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e right){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e mid \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e left \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e (right\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003eleft)\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (canFinish(piles, mid, h)){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            right \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e mid;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            left \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e mid \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e left;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003ebool\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecanFinish\u003c/span\u003e(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e piles, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e speed, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e h){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e time \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n : piles){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        time \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e n\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003espeed \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e ((n \u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e speed \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e time \u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e h;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003cul\u003e\n\u003cli\u003e回到目錄：\u003ca href=\"/cs/algo\"\u003e[Algo] 演算法筆記\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e想要複習：\u003ca href=\"/cs/algo/two_pointer\"\u003e[Algo] 3-1. Two Pointer\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e接著閱讀：\u003ca href=\"/cs/algo/monotonic_stack\"\u003e[Algo] 3-3. Monotonic Stack\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"[Algo] 3-2. Binary Search"},{"content":"1. 屬性的自動實現 在 C#3 以前，每個屬性需要手動實現，也就是需要手動為屬性添加 get 訪問器與 set 訪問器，如： private string name; public string Name { get { return name; } set { name = value; } } 在 C#3 以後，可以透過自動實現的方式撰寫： 其中命名為 name 的變數由編譯器自動創建並為其賦予名稱。 public string Name { get; set; } 但在 C#3 時，不能宣告 readonly 的自動屬性，且不能在宣告時賦予初始值，在 C#6 做了修正。在 C#3 只能透過訪問子分離來模擬 readonly： public string Name { get; private set; } 2. 隱式類型(var) 靜態類型 vs. 動態類型：\n靜態類型是面向編譯的的語言，故所有類型由編譯器決定，在編譯期就會完成綁定。 動態類型則是延遲綁定的時間，在執行期才進行類型綁定。 顯式類型 vs. 隱式類型：\n顯式類型代表在程式碼表達式便給出具體的類型訊息。 隱式類型則允許了類型推斷，透過上下文判斷出類型． C#3 開始支援隱式類型的寫法，關鍵字是 var。\nvar name = \u0026#34;Rainhu\u0026#34;; // string name = \u0026#34;Rainhu\u0026#34; 隱式類型的宣告有幾個限制： 變數必須在宣告時就初始化。 用於初始化的表達式必須已具備某個類型。 只能用於局部變數 var x; x = 10; // 違反1 var y = null; // 違反2 特別注意到：C# 是在編譯期就完成隱式類型的綁定 隱式類型因為其方便性，但很容易造成濫用，其適用的情形大致如下：\n變數為匿名類型，不能為其指定類型。 變數的型別過長，並且初始化表達式就足以用來推斷。 變數的精確類型不重要，並可以透過初始化表達式來推斷。 Dictionary\u0026lt;string, List\u0026lt;decimal\u0026gt;\u0026gt; mapping = new Dictionary\u0026lt;string List\u0026lt;decimal\u0026gt;\u0026gt;(); var mapping = new Dictionary\u0026lt;string, List\u0026lt;decimal\u0026gt;\u0026gt;(); 隱式類型的數組\nint[] arr = new int[10]; int[] arr1 = { 1, 2, 3, 4, 5 }; int[] arr2 = new int[] { 1, 2, 3, 4, 5 }; int[] arr3; arr3 = {1, 2, 3, 4, 5} // 非法 arr3 = new[] { 1, 2, 3, 4, 5 }; 物件與集合的初始化\n以電子商務系統為例 public class Order { private readonly List\u0026lt;OrderItem\u0026gt; items = new List\u0026lt;OrderItem\u0026gt;(); public string OrderId { get; set; } public Customer Customer { get; set; } public List\u0026lt;OrderItem\u0026gt; Items { get { return items; }} public void Add(OrderItem item) { items.Add(item); } } public class Customer { public string Name { get; set; } public string Address { get; set; } } public class OrderItem { public string ItemId { get; set; } public int Quantity { get; set; } } 若不使用物件初始化器與集合初始化器便會像： var customer = new Customer(); customer.Name = \u0026#34;Mike\u0026#34;; customer.Address = \u0026#34;Japan\u0026#34;; var item1 = new OrderItem(); item.ItedId = \u0026#34;item12345\u0026#34;; item.Quantity = 1; var item2 = new OrderItem(); item.ItedId = \u0026#34;item54321\u0026#34;; item.Quantity = 2; var order = new Order(); order.OrderId = \u0026#34;order12345\u0026#34;; order.Customer = customer; order.Items.Add(item1); order.Items.Add(item2); 若使用物件初始化器與集合初始化器，便可大大增加可讀性，並且在接下來的 LINQ 上有大大的好處： var order = new Order { OrderId = \u0026#34;order12345\u0026#34;, Customer = new Customer { Name = \u0026#34;Mike\u0026#34;, Address = \u0026#34;Japan\u0026#34; }, Items = { new OrderItem { ItemId = \u0026#34;item12345\u0026#34;, Quantity = 1 }, new OrderItem { ItemId = \u0026#34;item54321\u0026#34;, Quantity = 2 } } } 3. 匿名類型 前面說到隱式類型，好像是可有可無的存在，但在匿名類型，就是一個只能用隱式類型來宣告的情況了。 匿名類型的宣告： var procuct { Name = \u0026#34;CD Pro-2\u0026#34;, Price = 50000 } string name = product.Name; int price = product.Price; 搭配隱式類型數組的匿名類型宣告： var products = new[] { new { Name = \u0026#34;CD Pro-2\u0026#34;, Price = 50000 }, new { Name = \u0026#34;iDream\u0026#34;, Price = 100000 }, new { Name = \u0026#34;Forsung TV\u0026#34;, Price = 150000 } } 4. lambda 表達式 基本語法 lambda 表達式的基本語法為：參數列表 =\u0026gt; 主體 與之前的匿名方法類似，只是將 delegate 換成了 =\u0026gt; Action\u0026lt;string\u0026gt; action = (string msg) =\u0026gt; { Console.WriteLine(msg); }; action(\u0026#34;hello world!\u0026#34;); 但在主體包含的內容很短時，可以簡化成： Action\u0026lt;string\u0026gt; action = (string msg) =\u0026gt; Console.WriteLine(msg); 參數列表若可以經由類型推斷，那麼可以進一步簡化成： Action\u0026lt;string\u0026gt; action = (msg) =\u0026gt; Console.WriteLine(msg); 參數列表只有一個參數，括號也可以省略： Action\u0026lt;string\u0026gt; action = msg =\u0026gt; Console.WriteLine(msg); 捕獲變數 對開發者而言，lambda 表達式除了可以使用自於的參數列表外，還可以捕捉靜態變數、物件實例、this變數、方法參數或局部變數，後者全部都為捕獲變數，而根據不同的作用域，編譯器會為其編譯成相對應的 IL code。 在此提供一個以生成類來實現的例子： public Action\u0026lt;string\u0026gt; CreateAction(string methodParameter) { string methodLocal = \u0026#34;method Local\u0026#34;; string uncaptured = \u0026#34;uncaptured\u0026#34;; Action\u0026lt;string\u0026gt; action = lambdaParameter =\u0026gt; { string lambdaLocal = \u0026#34;lambda local\u0026#34;; Console.WriteLine(\u0026#34;Instance field: {0}\u0026#34;, instanceField); Console.WriteLine(\u0026#34;Method Parameter: {0}\u0026#34;, methodParameter); Console.WriteLine(\u0026#34;Method Local: {0}\u0026#34;, methodLocal); Console.WriteLine(\u0026#34;Lambda parameter: {0}\u0026#34;, lambdaParameter); Console.WriteLine(\u0026#34;Lambda local: {0}\u0026#34;, lambdaLocal); }; methodLocal = \u0026#34;modified method local\u0026#34;; return action; } 經轉譯後的程式碼 private class LambdaContext { public CapturedVariable original; public string methodParameter; public string methodLocal; public void Method(string lambdaParamter) { string lambdaLocal = \u0026#34;lambda local\u0026#34;; Console.WriteLine(\u0026#34;Instance field: {0}\u0026#34;, instanceField); Console.WriteLine(\u0026#34;Method Parameter: {0}\u0026#34;, methodParameter); Console.WriteLine(\u0026#34;Method Local: {0}\u0026#34;, methodLocal); Console.WriteLine(\u0026#34;Lambda parameter: {0}\u0026#34;, lambdaParameter); Console.WriteLine(\u0026#34;Lambda local: {0}\u0026#34;, lambdaLocal); } } public Action\u0026lt;string\u0026gt; CreateAction(string methodParameter) { LambdaContext context = new LambdaContext(); context.original = this; context.methodParameter = methodParameter; context.methodLocal = \u0026#34;method Local\u0026#34;; string uncaptured = \u0026#34;uncaptured local\u0026#34;; Action\u0026lt;string\u0026gt; action = context.Method; context.methodLocal = \u0026#34;modified method local\u0026#34;; return action; } 5. 擴展方法 Extension Method 擴展方法是一種靜態方法，可以對其第一個參數的類型物件以物件的方式進行調用： SampleClass.Method(x,y); x.Method(y); 宣告方式： using System; namespace Battle.Extensions { public static class BattleExtensions { public static void Attack(this Warrior Alpha, Warrior Delta) { Battle.Attack(Alpha, Delta); } } } 調用方式 Warrior Alpha = new Warrior { Name = \u0026#34;Alpha\u0026#34;, Level = 5, Attack = 10, HP = 20 }; Warrior Delta = new Warrior { Name = \u0026#34;Delta\u0026#34;, Level = 5 Attack = 8, HP = 25 }; // 原始版本 Battle.Attack(Alpha, Delta); // 擴充方法版本 Alpha.Attack(Delta); 編譯器唯一需要做的是為擴展方法及其所在類添加[Extension]特性。該特性在命名空間System.Runtime.CompileServices下。本質上是一個標記，標記擴充方法。 6. LINQ 查詢 接著我們可以透過 lambda 表達式與擴充方法來進行鏈式調用： Warrior Alpha = { Name = \u0026#34;Alpha\u0026#34;, Level = 5, Attack = 10, HP = 20 }; Warrior Beta = { Name = \u0026#34;Beta\u0026#34;, Level = 3, Attack = 6, HP = 12 }; Warrior Gamma = { Name = \u0026#34;Gamma\u0026#34;, Level = 5, Attack = 12, HP = 18 }; Warrior Delta = { Name = \u0026#34;Delta\u0026#34;, Level = 5, Attack = 8, HP = 25 }; Warrior[] warriors = { Alpha, Beta, Gamma, Delta }; IEnumerable\u0026lt;string\u0026gt; query = warriors .Where(warrior =\u0026gt; warrior.Level \u0026gt;= 5) .OrderBy(warrior =\u0026gt; warrio.Name) .Select(warrior =\u0026gt; warrior.Name.ToUpper()); // [\u0026#34;ALPHA\u0026#34;, \u0026#34;DELTA\u0026#34;, \u0026#34;GAMMA\u0026#34;] 若沒有使用 IEnumerable 的擴充方法，會長這樣，可讀性整個就下降了： Warrior[] warriors = { Alpha, Beta, Gamma, Delta }; IEnumerable\u0026lt;string\u0026gt; query = Enumerable.Select( Enumerable.OrderBy( Enumerable.Where(warriors, warrior =\u0026gt; warrior.Level \u0026gt;= 5), warrior =\u0026gt; warrior.Name, ), warrior =\u0026gt; warrior.Name.ToUpper()); LINQ 還可以使用查詢表達式： IEnumerale\u0026lt;string\u0026gt; query = from warrior in warriors where warrior.Level \u0026gt;= 5 orderby warrior.Name select warrior.Name.ToUpper(); 甚至可以利用 let 引入新的變數 IEnumerale\u0026lt;string\u0026gt; query = from warrior in warriors let name = warrior.Name where warrior.Level \u0026gt;= 5 orderby name select name.ToUpper(); ","permalink":"https://intervalrain.github.io/csharp/linq_props/","summary":"\u003ch2 id=\"1-屬性的自動實現\"\u003e1. 屬性的自動實現\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e在 C#3 以前，每個屬性需要手動實現，也就是需要手動為屬性添加 get 訪問器與 set 訪問器，如：\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Csharp\" data-lang=\"Csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e name;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e Name\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eget\u003c/span\u003e { \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e name; }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eset\u003c/span\u003e { name = \u003cspan style=\"color:#66d9ef\"\u003evalue\u003c/span\u003e; }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e在 C#3 以後，可以透過自動實現的方式撰寫：\n\u003cul\u003e\n\u003cli\u003e其中命名為 \u003ccode\u003ename\u003c/code\u003e 的變數由編譯器自動創建並為其賦予名稱。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Csharp\" data-lang=\"Csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e Name { \u003cspan style=\"color:#66d9ef\"\u003eget\u003c/span\u003e; \u003cspan style=\"color:#66d9ef\"\u003eset\u003c/span\u003e; }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e但在 C#3 時，不能宣告 \u003ccode\u003ereadonly\u003c/code\u003e 的自動屬性，且不能在宣告時賦予初始值，在 C#6 做了修正。在 C#3 只能透過訪問子分離來模擬 \u003ccode\u003ereadonly\u003c/code\u003e：\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Csharp\" data-lang=\"Csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e Name { \u003cspan style=\"color:#66d9ef\"\u003eget\u003c/span\u003e; \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eset\u003c/span\u003e; }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"2-隱式類型var\"\u003e2. 隱式類型(var)\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e靜態類型 vs. 動態類型：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e靜態類型是面向編譯的的語言，故所有類型由編譯器決定，在\u003cstrong\u003e編譯期\u003c/strong\u003e就會完成綁定。\u003c/li\u003e\n\u003cli\u003e動態類型則是延遲綁定的時間，在\u003cstrong\u003e執行期\u003c/strong\u003e才進行類型綁定。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e顯式類型 vs. 隱式類型：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e顯式類型代表在程式碼表達式便給出具體的類型訊息。\u003c/li\u003e\n\u003cli\u003e隱式類型則允許了類型推斷，透過上下文判斷出類型．\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eC#3 開始支援隱式類型的寫法，關鍵字是 \u003ccode\u003evar\u003c/code\u003e。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Csharp\" data-lang=\"Csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e name = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Rainhu\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// string name = \u0026#34;Rainhu\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e隱式類型的宣告有幾個限制：\n\u003col\u003e\n\u003cli\u003e變數必須在宣告時就初始化。\u003c/li\u003e\n\u003cli\u003e用於初始化的表達式必須已具備某個類型。\u003c/li\u003e\n\u003cli\u003e只能用於局部變數\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Csharp\" data-lang=\"Csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e x;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ex = \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e;         \u003cspan style=\"color:#75715e\"\u003e// 違反1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e y = \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e;   \u003cspan style=\"color:#75715e\"\u003e// 違反2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e特別注意到：\u003cstrong\u003eC# 是在編譯期就完成隱式類型的綁定\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e隱式類型因為其方便性，但很容易造成濫用，其適用的情形大致如下：\u003c/p\u003e","title":"[C#] C#3、LINQ 及相關特性"},{"content":"設計模式 Design Pattern 什麼是設計模式? 設計模式是指在軟體設計中通常出現的問題的典型解決方案。它們就像是預先製作好的藍圖，您可以根據自己程式碼中出現的重複設計問題來進行自定義。 設計模式不是一個特定的程式碼，而是一個解決特定問題的一般概念。您可以按照模式的細節來實現適合自己程式的解決方案。值得注意的是，設計模式常與演算法混淆，因為這兩個概念都描述了解決某些已知問題的典型解決方案。模式是一個更高層次的解決方案描述。 模式通常包括模式意圖、動機、結構、程式碼示例等幾個方面，以便人們在多種情況下可以複製它們。模式目錄還列出了其他有用的細節，例如模式的適用性、實施步驟和與其他模式的關係。 誰發明了設計模式? 設計模式不是晦澀難懂、高深複雜的概念，相反地，它們是物件導向設計中解決常見問題的典型解決方案。當一個解決方案在不同的項目中反復出現，某人最終會給它命名並詳細描述解決方案。這基本上是模式的發現方式。 模式的概念最初是由Christopher Alexander在《模式語言：城鎮、建築、建設》中描述的。這本書描述了一種用於設計城市環境的“語言”。這種語言的單位是模式。它們可以描述窗戶應該有多高，建築物應該有多少層，社區中綠地的大小應該是多少等等。+ 這個想法被四位作者Erch Gamma、John Vlissides、Ralph Johnson和Richard Helm接受。在1994年，他們出版了《Design Patterns: Elements of + Reusable Object-Oriented Software》一書，將設計模式的概念應用於編程中。該書介紹了23個解決物件導向設計中各種問題的模式，並迅速成為暢銷書。由於書名過長，人們開始稱之為“四人幫的書(Gang of Four, GoF)”。 此後，發現了許多其他物件導向模式。模式方法在其他編程領域也變得非常流行，因此現在還存在許多與物件導向設計無關的模式。 為什麼要學習設計模式? 設計模式是解決軟體設計中常見問題的一套經過驗證的解決方案工具包。即使從未遇到這些問題，了解模式仍然有用，因為它可以使用物件導向設計原則解決各種問題。 設計模式定義了一個共通的語言，使團隊之間可以使用它更有效地進行溝通。 設計模式的分類 設計模式可以根據其複雜性、細節程度和應用於整個系統的規模進行分類。它們有點像道路建設的類比：通過安裝交通信號燈或建造整個多層立交橋和地下通道來使十字路口更安全。 最基本和低層次的模式通常被稱為 \u0026ldquo;idioms\u0026rdquo;。它們通常僅適用於單一程式語言。 最通用和高層次的模式是架構模式(architectural patterns)。開發人員可以在幾乎任何語言中實現這些模式。與其他模式不同，它們可用於設計整個應用程序的架構。 此外，所有模式都可以通過其意圖或目的進行分類。本文將涵蓋三個主要模式： 創建型模式(creational)：提供了增加彈性和重複使用現有代碼的物件創建機制。 結構型模式(structural)：解釋如何將物件和類組合成更大的結構，同時保持這些結構的靈活性和效率。 行為型模式(behavioral)：負責處理物件之間的有效溝通和職責分配。 SOLID 原則 在進入本文之前，來認識一下 SOLID 原則：(詳細的內容可以參考YC的部落格) S = Single-responsibility principle (SRP) = 單一職責原則 O = Open–closed principle (OCP) = 開放封閉原則 L = Liskov substitution principle (LSP) = 里氏替換原則 補充：jyt0532 I = Interface segregation principle (ISP) = 介面隔離原則 D = Dependency inversion principle (DIP) = 依賴反向原則 正文 Factory 簡介\n工廠模式（Factory Pattern）最常用的設計模式之一。 這種類型的設計模式屬於創建型模式，它提供了一種創建物件的最佳方式。 在工廠模式中，我們在創建物件時不會對用戶端暴露創建邏輯，並且是通過使用一個共同的介面來指向新創建的物件。 意圖：\n定義一個創建物件的介面，讓其子類自己決定實例化哪一個工廠類，工廠模式使其創建過程延遲到子類進行。 主要解決：\n主要解決介面選擇的問題。 何時使用：\n我們明確地計劃不同條件下創建不同實例時。如何解決：讓其子類實現工廠介面，返回的也是一個抽象的產品。 關鍵代碼：\n創建過程在其子類執行。 應用實例：\n您需要一輛汽車，可以直接從工廠裡面提貨，而不用去管這輛汽車是怎麼做出來的，以及這個汽車裡面的具體實現。 Hibernate 換資料庫只需換方言和驅動就可以。 優點：\n一個調用者想創建一個物件，只要知道其名稱就可以了。 擴展性高，如果想增加一個產品，只要擴展一個工廠類就可以。 遮罩產品的具體實現，調用者只關心產品的介面。 缺點：\n每次增加一個產品時，都需要增加一個具體類和對象實現工廠，使得系統中類的個數成倍增加，在一定程度上增加了系統的複雜度，同時也增加了系統具體類的依賴。 這並不是什麼好事。 使用場景：\n日誌記錄器：記錄可能記錄到本地硬碟、系統事件、遠端伺服器等，用戶可以選擇記錄日誌到什麼地方。 資料庫訪問，當使用者不知道最後系統採用哪一類資料庫，以及資料庫可能有變化時。 設計一個連接伺服器的框架，需要三個協定，“POP3”、“IMAP”、“HTTP”，可以把這三個作為產品類，共同實現一個介面。 注意事項：\n作為一種創建類模式，在任何需要生成複雜物件的地方，都可以使用工廠方法模式。 有一點需要注意的地方就是複雜對象適合使用工廠模式，而簡單物件，特別是只需要通過 new 就可以完成創建的物件，無需使用工廠模式。 如果使用工廠模式，就需要引入一個工廠類，會增加系統的複雜度。 Design Pattern - Factory 程式碼參考 Abstract Factory 簡介 抽象工廠模式（Abstract Factory Pattern）是圍繞一個超級工廠創建其他工廠。該超級工廠又稱為其他工廠的工廠。這種類型的設計模式屬於創建型模式，它提供了一種創建物件的最佳方式。 在抽象工廠模式中，介面是負責創建一個相關物件的工廠，不需要顯式指定它們的類別。每個生成的工廠都能按照工廠模式提供物件。 意圖： 提供一個創建一系列相關或相互依賴對象的介面，而無需指定它們具體的類別。 主要解決： 主要解決介面選擇的問題。 何時使用： 系統的產品有多於一個的產品族，而系統只消費其中某一族的產品。 如何解決： 在一個產品族裡面，定義多個產品。 關鍵代碼： 在一個工廠里聚合多個同類產品。 應用實例： 家中的衣櫃是一個具體工廠，存放各式各樣的衣、褲，其中家中的衣櫃就是「衣櫃」這個虛擬工廠的其中一個實例，而衣櫃這個工廠又裝載了「衣服工廠」與「褲子工廠」，其各自裝載了「衣服」與「褲子」這兩項產品。 優點： 當一個產品族中的多個對象被設計成一起工作時，它能保證客戶端始終只使用同一個產品族中的物件。 缺點： 產品族擴展非常困難，要增加一個系列的某一產品，既要在抽象的 Creator 里加代碼，又要在具體的裡面加代碼。 使用場景： 換 Line 的聊天室 skin。 生成不同作業系統的程式。 注意事項： 產品族難擴展，產品等級易擴展。 Design Pattern - Abstract Factory 程式碼參考 Builder Prototype Facade Proxy Iterator Observer Mediator State ","permalink":"https://intervalrain.github.io/it/design_pattern/","summary":"\u003ch1 id=\"設計模式-design-pattern\"\u003e設計模式 Design Pattern\u003c/h1\u003e\n\u003cp\u003e\u003cimg alt=\"gof\" loading=\"lazy\" src=\"https://static.packt-cdn.com/products/9781782173656/graphics/image_01_006.jpg\"\u003e\u003c/p\u003e\n\u003ch2 id=\"什麼是設計模式\"\u003e什麼是設計模式?\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e設計模式是指在軟體設計中通常出現的問題的典型解決方案。它們就像是預先製作好的藍圖，您可以根據自己程式碼中出現的重複設計問題來進行自定義。\u003c/li\u003e\n\u003cli\u003e設計模式不是一個特定的程式碼，而是一個解決特定問題的一般概念。您可以按照模式的細節來實現適合自己程式的解決方案。值得注意的是，設計模式常與演算法混淆，因為這兩個概念都描述了解決某些已知問題的典型解決方案。模式是一個更高層次的解決方案描述。\u003c/li\u003e\n\u003cli\u003e模式通常包括模式意圖、動機、結構、程式碼示例等幾個方面，以便人們在多種情況下可以複製它們。模式目錄還列出了其他有用的細節，例如模式的適用性、實施步驟和與其他模式的關係。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"誰發明了設計模式\"\u003e誰發明了設計模式?\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e設計模式不是晦澀難懂、高深複雜的概念，相反地，它們是物件導向設計中解決常見問題的典型解決方案。當一個解決方案在不同的項目中反復出現，某人最終會給它命名並詳細描述解決方案。這基本上是模式的發現方式。\u003c/li\u003e\n\u003cli\u003e模式的概念最初是由Christopher Alexander在《模式語言：城鎮、建築、建設》中描述的。這本書描述了一種用於設計城市環境的“語言”。這種語言的單位是模式。它們可以描述窗戶應該有多高，建築物應該有多少層，社區中綠地的大小應該是多少等等。+ 這個想法被四位作者Erch Gamma、John Vlissides、Ralph Johnson和Richard Helm接受。在1994年，他們出版了《Design Patterns: Elements of + Reusable Object-Oriented Software》一書，將設計模式的概念應用於編程中。該書介紹了23個解決物件導向設計中各種問題的模式，並迅速成為暢銷書。由於書名過長，人們開始稱之為“四人幫的書(Gang of Four, GoF)”。\u003c/li\u003e\n\u003cli\u003e此後，發現了許多其他物件導向模式。模式方法在其他編程領域也變得非常流行，因此現在還存在許多與物件導向設計無關的模式。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"為什麼要學習設計模式\"\u003e為什麼要學習設計模式?\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e設計模式是解決軟體設計中常見問題的一套經過驗證的解決方案工具包。即使從未遇到這些問題，了解模式仍然有用，因為它可以使用物件導向設計原則解決各種問題。\u003c/li\u003e\n\u003cli\u003e設計模式定義了一個共通的語言，使團隊之間可以使用它更有效地進行溝通。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"設計模式的分類\"\u003e設計模式的分類\u003c/h2\u003e\n\u003cp\u003e\u003cimg alt=\"10pat\" loading=\"lazy\" src=\"/IT/img/ten_patterns.jpg\"\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e設計模式可以根據其複雜性、細節程度和應用於整個系統的規模進行分類。它們有點像道路建設的類比：通過安裝交通信號燈或建造整個多層立交橋和地下通道來使十字路口更安全。\u003c/li\u003e\n\u003cli\u003e最基本和低層次的模式通常被稱為 \u0026ldquo;idioms\u0026rdquo;。它們通常僅適用於單一程式語言。\u003c/li\u003e\n\u003cli\u003e最通用和高層次的模式是架構模式(architectural patterns)。開發人員可以在幾乎任何語言中實現這些模式。與其他模式不同，它們可用於設計整個應用程序的架構。\u003c/li\u003e\n\u003cli\u003e此外，所有模式都可以通過其意圖或目的進行分類。本文將涵蓋三個主要模式：\n\u003cul\u003e\n\u003cli\u003e創建型模式(creational)：提供了增加彈性和重複使用現有代碼的物件創建機制。\u003c/li\u003e\n\u003cli\u003e結構型模式(structural)：解釋如何將物件和類組合成更大的結構，同時保持這些結構的靈活性和效率。\u003c/li\u003e\n\u003cli\u003e行為型模式(behavioral)：負責處理物件之間的有效溝通和職責分配。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"solid-原則\"\u003eSOLID 原則\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e在進入本文之前，來認識一下 SOLID 原則：(詳細的內容可以參考YC的部落格)\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://medium.com/@ChunYeung/%E4%BD%BF%E4%BA%BA%E7%98%8B%E7%8B%82%E7%9A%84-solid-%E5%8E%9F%E5%89%87-%E5%96%AE%E4%B8%80%E8%81%B7%E8%B2%AC%E5%8E%9F%E5%89%87-single-responsibility-principle-c2c4bd9b4e79\"\u003eS = Single-responsibility principle (SRP) = 單一職責原則\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://medium.com/@ChunYeung/%E4%BD%BF%E4%BA%BA%E7%98%8B%E7%8B%82%E7%9A%84-solid-%E5%8E%9F%E5%89%87-%E9%96%8B%E6%94%BE%E5%B0%81%E9%96%89%E5%8E%9F%E5%89%87-open-closed-principle-f7eaf921eb9c\"\u003eO = Open–closed principle (OCP) = 開放封閉原則\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://medium.com/@ChunYeung/%E4%BD%BF%E4%BA%BA%E7%98%8B%E7%8B%82%E7%9A%84-solid-%E5%8E%9F%E5%89%87-%E9%87%8C%E6%B0%8F%E6%9B%BF%E6%8F%9B%E5%8E%9F%E5%89%87-liskov-substitution-principle-e66659344aed\"\u003eL = Liskov substitution principle (LSP) = 里氏替換原則\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.jyt0532.com/2020/03/22/lsp/\"\u003e補充：jyt0532\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://medium.com/@ChunYeung/%E4%BD%BF%E4%BA%BA%E7%98%8B%E7%8B%82%E7%9A%84-solid-%E5%8E%9F%E5%89%87-%E4%BB%8B%E9%9D%A2%E9%9A%94%E9%9B%A2%E5%8E%9F%E5%89%87-interface-segregation-principle-50f54473c79e\"\u003eI = Interface segregation principle (ISP) = 介面隔離原則\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://medium.com/@ChunYeung/%E4%BD%BF%E4%BA%BA%E7%98%8B%E7%8B%82%E7%9A%84-solid-%E5%8E%9F%E5%89%87-%E4%BE%9D%E8%B3%B4%E5%8F%8D%E5%90%91%E5%8E%9F%E5%89%87-dependency-inversion-principle-a74ca045d776\"\u003eD = Dependency inversion principle (DIP) = 依賴反向原則\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"正文\"\u003e正文\u003c/h2\u003e\n\u003ch3 id=\"factory\"\u003eFactory\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e簡介\u003c/strong\u003e\u003c/p\u003e","title":"[IT] Design Patterns"},{"content":"線性迴歸建模 載入資料 import pandas as pd import matplotlib.pyplot as plt import matplotlib as mlp url = \u0026#34;sample.csv\u0026#34; data = pd.read_csv(url) x = data[\u0026#34;x-axis\u0026#34;] y = data[\u0026#34;y-axis\u0026#34;] 畫圖 def plot(x, y, w, b): line = w * x + b plt.plot(x, line, color=\u0026#34;red\u0026#34;, label=\u0026#34;prediction\u0026#34;) plt.scatter(x, y, color=\u0026#34;blue\u0026#34;, label=\u0026#34;data\u0026#34;, marker=\u0026#34;x\u0026#34;) plt.title(\u0026#34;Title\u0026#34;) plt.xlabel(\u0026#34;x Axis\u0026#34;) plt.ylabel(\u0026#34;y Axis\u0026#34;) plt.xlim([0,12]) plt.ylim([20,140]) plt.show() plot(x, y, 10, 20) 定義 cost function def cost_function(x, y, w, b): y2 = w * x + b cost = (y - y2) ** 2 return cost.mean() cost_function(x, y, 10, 20) 假設在 b = 20 的情形下，找 w 的最小值 w_arr = [] costs = [] for w in range(-100, 101): w2 = 10 + w/100 cost = cost_function(x, y, w2, 20) w_arr.append(w2) costs.append(cost) import matplotlib.pyplot as plt plt.title(\u0026#34;cost function - when b = 20) plt.xlabel(\u0026#34;w\u0026#34;) plt.ylabel(\u0026#34;cost function\u0026#34;) plt.plot(w_arr, costs) plt.show() 利用 numpy 計算矩陣 import numpy as np ws = np.arange(-100, 101) bs = np.arange(-100, 101) costs = np.zeros((201, 201)) i = 0 for w in ws: j = 0 for b in bs: cost = cost_function(x, y, w, b) costs[i,j] = cost j = j+1 i = i+1 print(costs) 畫 3d 圖 ax = plt.axes(projection=\u0026#34;3d\u0026#34;) ax.xaxis.set_pane_color((1,1,1)) ax.yaxis.set_pane_color((1,1,1)) ax.zaxis.set_pane_color((1,1,1)) plt.figure(figsize=(7,7)) ax.view_init(30, -110) b_grid, w_grid = np.meshgrid(bs, ws) ax.plot_surface(w_grid, b_grid, costs, cmap=\u0026#34;Spectral_r\u0026#34;, alpha=0.7) ax.plot_wireframe(w_grid, b_grid, costs, alpha=0.1) ax.set_title(\u0026#34;loss function\u0026#34;) ax.set_xlabel(\u0026#34;w\u0026#34;) ax.set_ylabel(\u0026#34;b\u0026#34;) ax.set_zlabel(\u0026#34;loss\u0026#34;) w_index, b_index = np.where(costs == np.min(costs)) ax.scatter(ws[w_index], bs[b_index], costs[w_index, b_index], color=\u0026#34;red\u0026#34;, s=40) plt.show() 計算梯度 \\(\\text{cost} = (\\text{y}_\\text{pred}-\\text{y})^2\\\\ \\text{cost} = (\\text{y}-(\\text{w}\\times\\text{x}+\\text{b}))^2\\\\ \\text{m} _\\text{w} = -2\\times\\text{x}(\\text{y-wx-b})\\\\ \\text{m} _\\text{b} = -2\\times(\\text{y-wx-b})\\\\ \\) def compute_gradient(x, y, w, b): w_gradient = 2*x*(w*x+b-y).mean() b_gradient = 2*(w*x+b-y).mean() return w_gradient, b_gradient 利用梯度下降計算 cost 最小值 \\(\\text{w}_2=\\text{w}-\\text{m} _\\text{w} \\times \\text{learning\\_rate}\\) \\(\\text{b}_2=\\text{b}-\\text{m} _\\text{b} \\times \\text{learning\\_rate}\\) learning_rate = 0.001 for i in range(10): w_gradient, b_gradient = compute_gradient(x, y, w, b) w = w - w_gradient * learning_rate b = b - b_gradient * learning_rate cost = cost_function(x, y, w, b) print(f\u0026#34;Iteration {i} : Cost {cost}, w: {w}, b: {b}\u0026#34;) gradient_descent 函式 def gradient_descent(x, y, w_init, b_init, learning_rate, cost_function, gradient_function, run_iteration): c_hist = [] w_hist = [] b_hist = [] w = w_init b = b_init for i in range(run_iteration): w_gradient, b_gradient = gradient_function(x, y, w, b) w = w - w_gradient * learning_rate b = b - b_gradient * learning_rate cost = cost_function(x, y, w, b) w_hist.append(w) b_hist.append(b) c_hist.append(cost) return w, b, w_hist, b_hist, c_hist 多特徵的預測 from sklearn.model_selection import train_test_split scaler = StandardScaler() scaler.fit(x_train) x_train = scaler.transform(x_train) x_test = scaler.transform(x_test) x_real = np.array([[5.3, 2, 1, 0], [7,2, 0, 0, 1]]) x_real = scaler.transfrom(x_real) y_real = (w_final*x_real).sum(axis=1) + b_final y_real 「特徵縮放」加速 gradient descent w1x1+w2x2+w3x3+w4x4+b 因分布範圍不同，調整參數，最好令每一個乘積都相當 相當於是標準化：\\(\\frac{\\text{x-平均值}}{標準差}\\) from sklearn.preprocessing import StandardScaler scaler = StandardScaler() scaler.fit(x_train) x_train = scaler.transform(x_train) x_test = scaler.transform(x_test) 邏輯迴歸 Logistic Regression Sigmoid Function 當模性呈現 0-1 關係(邏輯迴歸)時可用 \\(\\text{Sigmoid Function}=\\frac{1}{1+e^{-z}}\\) def sigmoid(z): return 1/(1+np.exp(-z)) w = np.array([1,2,3,4]) b = 1 z = (w*x_train).sum(axis=1) + b sigmoid(z) ","permalink":"https://intervalrain.github.io/ml/work/","summary":"\u003ch2 id=\"線性迴歸建模\"\u003e線性迴歸建模\u003c/h2\u003e\n\u003ch3 id=\"載入資料\"\u003e載入資料\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e pandas \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e pd\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e matplotlib.pyplot \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e plt\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e matplotlib \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e mlp\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eurl \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;sample.csv\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edata \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e pd\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eread_csv(url)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ex \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e data[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;x-axis\u0026#34;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ey \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e data[\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;y-axis\u0026#34;\u003c/span\u003e]\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"畫圖\"\u003e畫圖\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eplot\u003c/span\u003e(x, y, w, b):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    line \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e w \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e x \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e b\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    plt\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eplot(x, line, color\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;red\u0026#34;\u003c/span\u003e, label\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;prediction\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    plt\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003escatter(x, y, color\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;blue\u0026#34;\u003c/span\u003e, label\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;data\u0026#34;\u003c/span\u003e, marker\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;x\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    plt\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003etitle(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Title\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    plt\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003exlabel(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;x Axis\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    plt\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eylabel(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;y Axis\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    plt\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003exlim([\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e12\u003c/span\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    plt\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eylim([\u003cspan style=\"color:#ae81ff\"\u003e20\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e140\u003c/span\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    plt\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eshow()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eplot(x, y, \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e20\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"定義-cost-function\"\u003e定義 cost function\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecost_function\u003c/span\u003e(x, y, w, b):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    y2 \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e w \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e x \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e b\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    cost \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (y \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e y2) \u003cspan style=\"color:#f92672\"\u003e**\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e cost\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003emean()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecost_function(x, y, \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e20\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e假設在 b = 20 的情形下，找 w 的最小值\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ew_arr \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e []\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecosts \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e []\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e w \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e range(\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e100\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e101\u003c/span\u003e):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    w2 \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e w\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e100\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    cost \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e cost_function(x, y, w2, \u003cspan style=\"color:#ae81ff\"\u003e20\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    w_arr\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eappend(w2)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    costs\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eappend(cost)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e matplotlib.pyplot \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e plt\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eplt\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003etitle(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;cost function - when b = 20)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eplt\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003exlabel(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;w\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eplt\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eylabel(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;cost function\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eplt\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eplot(w_arr, costs)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eplt\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eshow()\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"利用-numpy-計算矩陣\"\u003e利用 numpy 計算矩陣\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e numpy \u003cspan style=\"color:#66d9ef\"\u003eas\u003c/span\u003e np\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ews \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e np\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003earange(\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e100\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e101\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ebs \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e np\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003earange(\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e100\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e101\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecosts \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e np\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ezeros((\u003cspan style=\"color:#ae81ff\"\u003e201\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e201\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ei \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e w \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e ws:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    j \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e b \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e bs:\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        cost \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e cost_function(x, y, w, b)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        costs[i,j] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e cost\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        j \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e j\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e i\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(costs)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"畫-3d-圖\"\u003e畫 3d 圖\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eax \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e plt\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eaxes(projection\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;3d\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eax\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003exaxis\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eset_pane_color((\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eax\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eyaxis\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eset_pane_color((\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eax\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ezaxis\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eset_pane_color((\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eplt\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003efigure(figsize\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eax\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eview_init(\u003cspan style=\"color:#ae81ff\"\u003e30\u003c/span\u003e, \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e110\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eb_grid, w_grid \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e np\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003emeshgrid(bs, ws)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eax\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eplot_surface(w_grid, b_grid, costs, cmap\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Spectral_r\u0026#34;\u003c/span\u003e, alpha\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0.7\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eax\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eplot_wireframe(w_grid, b_grid, costs, alpha\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0.1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eax\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eset_title(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;loss function\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eax\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eset_xlabel(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;w\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eax\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eset_ylabel(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;b\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eax\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eset_zlabel(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;loss\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ew_index, b_index \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e np\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003ewhere(costs \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e np\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003emin(costs))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eax\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003escatter(ws[w_index], bs[b_index], costs[w_index, b_index], color\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;red\u0026#34;\u003c/span\u003e, s\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e40\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eplt\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eshow()\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"計算梯度\"\u003e計算梯度\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\\(\\text{cost} = (\\text{y}_\\text{pred}-\\text{y})^2\\\\\n\\text{cost} = (\\text{y}-(\\text{w}\\times\\text{x}+\\text{b}))^2\\\\\n\\text{m} _\\text{w} = -2\\times\\text{x}(\\text{y-wx-b})\\\\\n\\text{m} _\\text{b} = -2\\times(\\text{y-wx-b})\\\\\n\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecompute_gradient\u003c/span\u003e(x, y, w, b):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    w_gradient \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003ex\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e(w\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003ex\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003eb\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003ey)\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003emean()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    b_gradient \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e(w\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003ex\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003eb\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003ey)\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003emean()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e w_gradient, b_gradient\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"利用梯度下降計算-cost-最小值\"\u003e利用梯度下降計算 cost 最小值\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\\(\\text{w}_2=\\text{w}-\\text{m} _\\text{w} \\times \\text{learning\\_rate}\\)\u003c/li\u003e\n\u003cli\u003e\\(\\text{b}_2=\\text{b}-\\text{m} _\\text{b} \\times \\text{learning\\_rate}\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003elearning_rate \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0.001\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e range(\u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    w_gradient, b_gradient \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e compute_gradient(x, y, w, b)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    w \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e w \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e w_gradient \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e learning_rate\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    b \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e b \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e b_gradient \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e learning_rate\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    cost \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e cost_function(x, y, w, b)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    print(\u003cspan style=\"color:#e6db74\"\u003ef\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Iteration \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e{\u003c/span\u003ei\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e : Cost \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e{\u003c/span\u003ecost\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e, w: \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e{\u003c/span\u003ew\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e, b: \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e{\u003c/span\u003eb\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"gradient_descent-函式\"\u003egradient_descent 函式\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egradient_descent\u003c/span\u003e(x, y, w_init, b_init, learning_rate, cost_function, gradient_function, run_iteration):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    c_hist \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e []\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    w_hist \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e []\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    b_hist \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e []\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    w \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e w_init\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    b \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e b_init\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003ein\u003c/span\u003e range(run_iteration):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        w_gradient, b_gradient \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e gradient_function(x, y, w, b)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        w \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e w \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e w_gradient \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e learning_rate\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        b \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e b \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e b_gradient \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e learning_rate\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        cost \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e cost_function(x, y, w, b)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        w_hist\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eappend(w)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        b_hist\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eappend(b)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        c_hist\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eappend(cost)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e w, b, w_hist, b_hist, c_hist\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"多特徵的預測\"\u003e多特徵的預測\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e sklearn.model_selection \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e train_test_split\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003escaler \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e StandardScaler()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003escaler\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003efit(x_train)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ex_train \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e scaler\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003etransform(x_train)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ex_test \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e scaler\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003etransform(x_test)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ex_real \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e np\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003earray([[\u003cspan style=\"color:#ae81ff\"\u003e5.3\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e], [\u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ex_real \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e scaler\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003etransfrom(x_real)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ey_real \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (w_final\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003ex_real)\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esum(axis\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e b_final\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ey_real\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"特徵縮放加速-gradient-descent\"\u003e「特徵縮放」加速 gradient descent\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003ew1\u003cem\u003ex1+w2\u003c/em\u003ex2+w3\u003cem\u003ex3+w4\u003c/em\u003ex4+b\u003c/li\u003e\n\u003cli\u003e因分布範圍不同，調整參數，最好令每一個乘積都相當\u003c/li\u003e\n\u003cli\u003e相當於是標準化：\\(\\frac{\\text{x-平均值}}{標準差}\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e sklearn.preprocessing \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e StandardScaler\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003escaler \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e StandardScaler()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003escaler\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003efit(x_train)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ex_train \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e scaler\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003etransform(x_train)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ex_test \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e scaler\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003etransform(x_test)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"邏輯迴歸-logistic-regression\"\u003e邏輯迴歸 Logistic Regression\u003c/h2\u003e\n\u003ch3 id=\"sigmoid-function\"\u003eSigmoid Function\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e當模性呈現 0-1 關係(邏輯迴歸)時可用\u003c/li\u003e\n\u003cli\u003e\\(\\text{Sigmoid Function}=\\frac{1}{1+e^{-z}}\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esigmoid\u003c/span\u003e(z):\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003enp\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eexp(\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003ez))\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ew \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e np\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003earray([\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eb \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ez \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (w\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003ex_train)\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esum(axis\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e b\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esigmoid(z)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"[ML] 簡單實作測試"},{"content":" 前言：\n若要對一數組做範圍取值，那麼最快的方法是前綴數組(prefix sum)，可以做到\\(O(1)\\)的查詢，但若要做單點更新需要\\(O(n)\\)的時間來維護。\n而數組則是做單點更新只需要\\(O(1)\\)的時間，而要範圍取值則需要\\(O(n)\\)的查詢時間。\n故若是查詢遠大於更新的情境，則適用前綴數組；若更新遠大於查詢的情境，則適用一般數組。\n那假如查詢與更新的次數一樣多呢(動態更新與查詢的情境)，這種情況就可以用到此章節要介紹的資料結構，Binary Indexed Tree 了。\n此結構可以做到 \\(O(n)\\) 的初始化，\\(\\log(n)\\) 的更新與 \\(\\log(n)\\) 的查詢。\n\\( \\begin{array}{|c|c|c|}\\hline \u0026amp;\\textsf{範圍查詢}\u0026amp;\\textsf{單點更新}\\\\\\hline \\textsf{數組}\u0026amp;O(n)\u0026amp;O(1)\\\\\\hline \\textsf{前綴數組}\u0026amp;O(1)\u0026amp;O(n)\\\\\\hline \\textsf{BIT}\u0026amp;O(\\log n)\u0026amp;O(\\log n)\\\\\\hline \\end{array} \\)\n簡介 與線狀樹(Segment Tree)類似，但線狀樹可以看成是 BIT 的擴充版。 BIT 的好處是只需要 n 的數組空間便可以實作，且其指標移動是透過位元運算，計算相當快速，缺點是無法套用到取極大值、極小值的情境。 參考上圖，BIT 利用「部分presum」的特性，來達到平均 \\(O\\log n\\)的查詢與更新的時間，而其實其結構就是 partition 的其中半顆樹。 \\(\\text{BIT[1]=arr[1]}\\) \\(\\text{BIT[2]=arr[1]+arr[2]}\\) \\(\\text{BIT[3]=arr[3]}\\) \\(\\text{BIT[4]=arr[1]+arr[2]+arr[3]+arr[4]}\\) \u0026hellip; \\(\\text{BIT[8]=arr[1]+arr[2]+\u0026hellip;+arr[8]}= \\text{BIT[4]+BIT[6]+BIT[7]+arr[8]}\\) 觀察以上結構， 查詢時，求 [0:n] 的值為把上圖的片段湊起來變成 n 的長度。 如 \\(\\text{SUM[0:7]=BIT[7]+BIT[6]+BIT[4]}\\) 位元表示：\\(\\text{SUM[0:7]=BIT[1b'111]+BIT[1b'110]+BIT[1b'100]}\\) 如 \\(\\text{SUM[0:11]=BIT[11]+BIT[10]+BIT[8]}\\) 位元表示：\\(\\text{SUM[0:11]=BIT[1b'1011]+BIT[1b'1010]+BIT[1b'1000]}\\) 可以發現位元的規律是每次把當前的 LSB(least significant bit) 扣掉。 更新時，需要把包含 n 的片段都更新。(設n=18) 如 \\(\\text{update(arr[7])=update(BIT[7])+update(BIT[8])+update(BIT[16])}\\) 位元表示：\\(\\text{update(arr[7])=update(BIT[1b'111])+update(BIT[1b'1000])+update(BIT[1b'10000])}\\) 如 \\(\\text{update(arr[11])=update(BIT[11])+update(BIT[12])+update(BIT[16])}\\) 位元表示：\\(\\text{update(arr[7])=update(BIT[1b'1011])+update(BIT[1b'1100])+update(BIT[1b'10000])}\\) 可以發現位元的規律是每次把當前的 LSB 加進來。 統整以上規律我們可以寫成以下的模版 將 BIT[0] 設為 dummy，可方便計算。 模板 class BIT { private: vector\u0026lt;int\u0026gt; bit; int lowbit(int a) { return a \u0026amp; (-a); } public: BIT (int n) { bit.assign(n+1, 0); } void add(int idx, int diff) { idx++; int n = bit.size(); while (idx \u0026lt; n) { bit[idx] += diff; idx += lowbit(idx); } } int query(int idx) { int sum = 0; idx++; while (idx \u0026gt; 0) { sum += bit[idx]; idx -= lowbit(idx); } return sum; } } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/cs/algo/bit/","summary":"\u003cblockquote\u003e\n\u003cp\u003e前言：\u003cbr\u003e\n若要對一數組做範圍取值，那麼最快的方法是前綴數組(prefix sum)，可以做到\\(O(1)\\)的查詢，但若要做單點更新需要\\(O(n)\\)的時間來維護。\u003cbr\u003e\n而數組則是做單點更新只需要\\(O(1)\\)的時間，而要範圍取值則需要\\(O(n)\\)的查詢時間。\u003cbr\u003e\n故若是查詢遠大於更新的情境，則適用前綴數組；若更新遠大於查詢的情境，則適用一般數組。\u003cbr\u003e\n那假如查詢與更新的次數一樣多呢(動態更新與查詢的情境)，這種情況就可以用到此章節要介紹的資料結構，\u003ccode\u003eBinary Indexed Tree\u003c/code\u003e 了。\u003cbr\u003e\n此結構可以做到 \\(O(n)\\) 的初始化，\\(\\log(n)\\) 的更新與 \\(\\log(n)\\) 的查詢。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\\(\n\\begin{array}{|c|c|c|}\\hline\n\u0026amp;\\textsf{範圍查詢}\u0026amp;\\textsf{單點更新}\\\\\\hline\n\\textsf{數組}\u0026amp;O(n)\u0026amp;O(1)\\\\\\hline\n\\textsf{前綴數組}\u0026amp;O(1)\u0026amp;O(n)\\\\\\hline\n\\textsf{BIT}\u0026amp;O(\\log n)\u0026amp;O(\\log n)\\\\\\hline\n\\end{array}\n\\)\u003c/p\u003e\n\u003ch2 id=\"簡介\"\u003e簡介\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e與線狀樹(Segment Tree)類似，但線狀樹可以看成是 BIT 的擴充版。\u003c/li\u003e\n\u003cli\u003eBIT 的好處是只需要 \u003ccode\u003en\u003c/code\u003e 的數組空間便可以實作，且其指標移動是透過位元運算，計算相當快速，缺點是無法套用到取極大值、極小值的情境。\n\u003cimg alt=\"img\" loading=\"lazy\" src=\"https://d3i71xaburhd42.cloudfront.net/1841120d19f4bdc75f225254c52ceabea2774853/3-Figure1-1.png\"\u003e\u003c/li\u003e\n\u003cli\u003e參考上圖，BIT 利用「部分presum」的特性，來達到平均 \\(O\\log n\\)的查詢與更新的時間，而其實其結構就是 partition 的其中半顆樹。\n\u003cul\u003e\n\u003cli\u003e\\(\\text{BIT[1]=arr[1]}\\)\u003c/li\u003e\n\u003cli\u003e\\(\\text{BIT[2]=arr[1]+arr[2]}\\)\u003c/li\u003e\n\u003cli\u003e\\(\\text{BIT[3]=arr[3]}\\)\u003c/li\u003e\n\u003cli\u003e\\(\\text{BIT[4]=arr[1]+arr[2]+arr[3]+arr[4]}\\)\u003c/li\u003e\n\u003cli\u003e\u0026hellip;\u003c/li\u003e\n\u003cli\u003e\\(\\text{BIT[8]=arr[1]+arr[2]+\u0026hellip;+arr[8]}=\n\\text{BIT[4]+BIT[6]+BIT[7]+arr[8]}\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e觀察以上結構，\n\u003cul\u003e\n\u003cli\u003e查詢時，求 [0:n] 的值為把上圖的片段湊起來變成 n 的長度。\n\u003cul\u003e\n\u003cli\u003e如 \\(\\text{SUM[0:7]=BIT[7]+BIT[6]+BIT[4]}\\)\n\u003cul\u003e\n\u003cli\u003e位元表示：\\(\\text{SUM[0:7]=BIT[1b'111]+BIT[1b'110]+BIT[1b'100]}\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e如 \\(\\text{SUM[0:11]=BIT[11]+BIT[10]+BIT[8]}\\)\n\u003cul\u003e\n\u003cli\u003e位元表示：\\(\\text{SUM[0:11]=BIT[1b'1011]+BIT[1b'1010]+BIT[1b'1000]}\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e可以發現位元的規律是每次把當前的 LSB(least significant bit) 扣掉。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e更新時，需要把包含 n 的片段都更新。(設n=18)\n\u003cul\u003e\n\u003cli\u003e如 \\(\\text{update(arr[7])=update(BIT[7])+update(BIT[8])+update(BIT[16])}\\)\n\u003cul\u003e\n\u003cli\u003e位元表示：\\(\\text{update(arr[7])=update(BIT[1b'111])+update(BIT[1b'1000])+update(BIT[1b'10000])}\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e如 \\(\\text{update(arr[11])=update(BIT[11])+update(BIT[12])+update(BIT[16])}\\)\n\u003cul\u003e\n\u003cli\u003e位元表示：\\(\\text{update(arr[7])=update(BIT[1b'1011])+update(BIT[1b'1100])+update(BIT[1b'10000])}\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e可以發現位元的規律是每次把當前的 LSB 加進來。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e統整以上規律我們可以寫成以下的模版\u003c/li\u003e\n\u003cli\u003e將 \u003ccode\u003eBIT[0]\u003c/code\u003e 設為 dummy，可方便計算。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"模板\"\u003e模板\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eBIT\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e bit;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elowbit\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e a) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e a \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e (\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003ea);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    BIT (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        bit.assign(n\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eadd\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e idx, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e diff) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        idx\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e bit.size();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (idx \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e n) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            bit[idx] \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e diff;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            idx \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e lowbit(idx);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003equery\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e idx) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e sum \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        idx\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (idx \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            sum \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e bit[idx];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            idx \u003cspan style=\"color:#f92672\"\u003e-=\u003c/span\u003e lowbit(idx);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e sum;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ca href=\"/leetcode\"\u003e回目錄 Catalog\u003c/a\u003e\u003c/p\u003e","title":"[Algo] 3-10. Binary Indexed Tree(Fenwick Tree, BIT)"},{"content":" 前言：\n先前我們在鏈表的單元已經介紹過求鏈表中點的「前後指針」與求有環鏈表的「快慢指針」，這都是雙指針的應用。\n在接下來的這個章節，主要會介紹的雙指針應用，與更進階的滑動窗口(sliding window)的應用。\n一、Two Pointer in LinkedList 在本文中會學到 LinkedList 的七種技巧： 合併兩個有序鏈表 分解鏈表 合併多個有序鏈表 尋找鏈表的倒數第 k 個節點 尋找鏈表的中點 判斷鏈表是否包含環 判斷兩個鏈表是否相交 1. Merge Two Sorted Lists Leetcode 21. Merge Two Sorted Lists 這一題的小技巧是創建一個 dummy node 依序將兩條鏈表中較小的值接在後面，最後回傳 dummy-\u0026gt;next，過程很像 merge sort。 ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) { ListNode* dummy = new ListNode(); ListNode* curr = dummy; while (list1 \u0026amp;\u0026amp; list2) { if (list1-\u0026gt;val \u0026lt;= list2-\u0026gt;val) { curr-\u0026gt;next = list1; list1 = list1-\u0026gt;next; } else { curr-\u0026gt;next = list2; list2 = list2-\u0026gt;next; } curr = curr-\u0026gt;next; } if (list1) curr-\u0026gt;next = list1; if (list2) curr-\u0026gt;next = list2; return dummy-\u0026gt;next; } 二、Two Pointer in Array 三、Sliding Window 回到目錄：[Algo] 演算法筆記 想要複習：[Algo] 3-0. Sorting 接著閱讀：[Algo] 3-2. Binary Search ","permalink":"https://intervalrain.github.io/cs/algo/two_pointer/","summary":"\u003cblockquote\u003e\n\u003cp\u003e前言：\u003cbr\u003e\n先前我們在鏈表的單元已經介紹過求\u003cstrong\u003e鏈表中點的「前後指針」\u003cstrong\u003e與求\u003c/strong\u003e有環鏈表的「快慢指針」\u003c/strong\u003e，這都是雙指針的應用。\u003cbr\u003e\n在接下來的這個章節，主要會介紹的雙指針應用，與更進階的滑動窗口(sliding window)的應用。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"一two-pointer-in-linkedlist\"\u003e一、Two Pointer in LinkedList\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e在本文中會學到 \u003ccode\u003eLinkedList\u003c/code\u003e 的七種技巧：\n\u003col\u003e\n\u003cli\u003e合併兩個有序鏈表\u003c/li\u003e\n\u003cli\u003e分解鏈表\u003c/li\u003e\n\u003cli\u003e合併多個有序鏈表\u003c/li\u003e\n\u003cli\u003e尋找鏈表的倒數第 \u003ccode\u003ek\u003c/code\u003e 個節點\u003c/li\u003e\n\u003cli\u003e尋找鏈表的中點\u003c/li\u003e\n\u003cli\u003e判斷鏈表是否包含環\u003c/li\u003e\n\u003cli\u003e判斷兩個鏈表是否相交\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"1-merge-two-sorted-lists\"\u003e1. Merge Two Sorted Lists\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://leetcode.com/problems/merge-two-sorted-lists/\"\u003eLeetcode 21. Merge Two Sorted Lists\u003c/a\u003e\n\u003cimg alt=\"ex1-1\" loading=\"lazy\" src=\"https://assets.leetcode.com/uploads/2020/10/03/merge_ex1.jpg\"\u003e\u003c/li\u003e\n\u003cli\u003e這一題的小技巧是創建一個 \u003ccode\u003edummy node\u003c/code\u003e 依序將兩條鏈表中較小的值接在後面，最後回傳 \u003ccode\u003edummy-\u0026gt;next\u003c/code\u003e，過程很像 \u003ccode\u003emerge sort\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emergeTwoLists\u003c/span\u003e(ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e list1, ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e list2) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e dummy \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e ListNode();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e curr \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e dummy;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (list1 \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e list2) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (list1\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eval \u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e list2\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eval) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            curr\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e list1;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            list1 \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e list1\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            curr\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e list2;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            list2 \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e list2\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        curr \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e curr\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (list1) curr\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e list1;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (list2) curr\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e list2;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e dummy\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"二two-pointer-in-array\"\u003e二、Two Pointer in Array\u003c/h2\u003e\n\u003ch2 id=\"三sliding-window\"\u003e三、Sliding Window\u003c/h2\u003e\n\u003chr\u003e\n\u003cul\u003e\n\u003cli\u003e回到目錄：\u003ca href=\"/cs/algo\"\u003e[Algo] 演算法筆記\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e想要複習：\u003ca href=\"/cs/algo/sorting\"\u003e[Algo] 3-0. Sorting\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e接著閱讀：\u003ca href=\"/cs/algo/binary_search\"\u003e[Algo] 3-2. Binary Search\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"[Algo] 3-1. Two Pointer/Sliding Window"},{"content":"132. Palindrome Partitioning II\nHardness: \\(\\color{red}\\textsf{Hard}\\) Ralated Topics: string, dynamic programming 一、題目 Given a string s, partition s such that every substring of the partition is a palindrome.\nReturn the minimum cuts needed for a palindrome partitioning of s.\nExample 1:\nInput: s = \u0026ldquo;aab\u0026rdquo; Output: 1 Explanation: The palindrome partitioning [\u0026ldquo;aa\u0026rdquo;, \u0026ldquo;b\u0026rdquo;] could be produced using 1 cut. Example 2:\nInput: s = \u0026ldquo;a\u0026rdquo; Output: 0 Example 3:\nInput: s = \u0026ldquo;ab\u0026rdquo; Output: 1 Constraints:\n1 \u0026lt;= s.length \u0026lt;= 2000 s consists of lowercase English letters only. 二、分析 區間型的動態規劃問題，請參考[Algo] 2-5.動態規劃 Dynamic Programming #4 區間型 定義 dp[i] 為 s[0:i] 的 mincut。 當 s[i:j] 為回文時，dp[j] 為 dp[i-1] + 1 當右指標 j 不動時，移動左指標 i，找最小的 minCut，故得動態轉移方程： dp[j] = min(dp[j], dp[i-1]+1) 三、解題 1. DP Time complexity: \\(O(n^2)\\) Space complexity: \\(O(n^2)\\) vector\u0026lt;vector\u0026lt;bool\u0026gt;\u0026gt; dp; void init(string\u0026amp; s) { for (int i = 0; i \u0026lt; s.length(); i++) { isPalindrome(s, i, i); // 奇數型 isPalindrome(s, i, i+1); // 偶數型 } } int minCut(string\u0026amp; s) { int n = s.length(); dp = vector\u0026lt;vector\u0026lt;bool\u0026gt;\u0026gt;(n, vector\u0026lt;bool\u0026gt;(n, false)); init(s); // 將回文先用 memo[left][right] 的方式存起來 vector\u0026lt;int\u0026gt; cnt(n+1, n-1); // dp cnt[0] = -1; // 若問題問可拆為多少組，cnt[0]定為 0，若問需切幾刀，cnt[0]定為 -1 for (int j = 0; j \u0026lt; n; j++) { for (int i = 0; i \u0026lt;= j; i++) { if (dp[i][j]) { cnt[j+1] = min(cnt[j+1], cnt[i]+1); } } } return cnt[n]; } void isPalindrome(string\u0026amp; s, int i, int j) { while (i \u0026gt;= 0 \u0026amp;\u0026amp; j \u0026lt; s.length()) { if (s[i] != s[j]) break; dp[i][j] = true; i--; j++; } } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/132/","summary":"\u003cp\u003e\u003cstrong\u003e132. Palindrome Partitioning II\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{red}\\textsf{Hard}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003estring\u003c/code\u003e, \u003ccode\u003edynamic programming\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eGiven a string \u003ccode\u003es\u003c/code\u003e, partition \u003ccode\u003es\u003c/code\u003e such that every substring of the partition is a palindrome.\u003cbr\u003e\nReturn \u003cem\u003ethe \u003cstrong\u003eminimum\u003c/strong\u003e cuts needed for a palindrome partitioning of\u003c/em\u003e \u003ccode\u003es\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInput:\u003c/strong\u003e s = \u0026ldquo;aab\u0026rdquo;\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e 1\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e The palindrome partitioning [\u0026ldquo;aa\u0026rdquo;, \u0026ldquo;b\u0026rdquo;] could be produced using 1 cut.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInput:\u003c/strong\u003e s = \u0026ldquo;a\u0026rdquo;\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e 0\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInput:\u003c/strong\u003e s = \u0026ldquo;ab\u0026rdquo;\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e 1\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e","title":"[LeetCode] 132. Palindrome Partitioning II"},{"content":" 前言：\n在開始練習各種演算法題型時，最先需要養成的是，如何選用「適當」的演算法，題目往往不會只有一種解，但合適的演算法可以如同走捷徑一般，快速且優雅的達到目標。 在實作程式前，更重要的是，寫下一段 pseudo code，試著說明其複雜度，並觀察是否有冗餘的空間可以優化。 在腦海中模擬一遍程式碼之後，最後才是快速的將程式碼實作出來。 在這一章節，我們將練習如何將「想法」轉換成「實作」。並且我們必須熟悉如何計算其時間複雜度。\n一、Cheat Table 首先我們需要先瞭解每一種資料結構的各種操作的時間複雜度，以便我們選擇適合的資料結構與演算法。\n下面這種表的 Array, Stack, Queue, Linked List, Hash Table, Binary Search Tree 基本上是要背起來的，其餘的遇到再去認識就好。 接下來就輪到練習實作了，排序演算法是個很好的練習，試著把下表中的排序演算法完成，並且計算其時間複雜度吧。\n參考題目 Leetcode 912. Sort an Array 二、Sorting Algorithm 0. 測資 這個 file 是我寫的測資，可以拿來測試自己的實作，用法是 #include \u0026quot;agtr.h\u0026quot;，之後用 judge() 函式測試你寫好的 function。 #include \u0026lt;iostream\u0026gt; #include \u0026lt;random\u0026gt; #include \u0026lt;vector\u0026gt; using namespace std; class agtr{ public: static vector\u0026lt;int\u0026gt; exec(int n, int minv, int maxv) { if (minv \u0026gt; maxv) return {}; else if (minv == maxv) return vector\u0026lt;int\u0026gt;(n, minv); vector\u0026lt;int\u0026gt; res; random_device rd; mt19937 mt(rd()); uniform_real_distribution\u0026lt;double\u0026gt; dist(minv, maxv); while (n--) { res.push_back(dist(mt)); } return res; } static vector\u0026lt;int\u0026gt; exec(int n) { return exec(n, 0, 10); } static vector\u0026lt;int\u0026gt; exec() { return exec(10); } static void print(vector\u0026lt;int\u0026gt;\u0026amp; nums) { cout \u0026lt;\u0026lt; \u0026#34;[\u0026#34;; for_each(nums.begin(), nums.end()-1, [](int x) { cout \u0026lt;\u0026lt; x \u0026lt;\u0026lt; \u0026#34;,\u0026#34;; }); cout \u0026lt;\u0026lt; *(nums.end()-1) \u0026lt;\u0026lt; \u0026#34;]\u0026#34;; } static bool check(vector\u0026lt;int\u0026gt;\u0026amp; nums, vector\u0026lt;int\u0026gt; copy) { sort(copy.begin(), copy.end()); for (int i = 0; i \u0026lt; nums.size(); i++) { if (nums[i] != copy[i]) return false; } return true; } static void judge(void (*func)(vector\u0026lt;int\u0026gt;\u0026amp;)) { int n = 10; bool test = true; int cnt = 0; while (n--) { auto nums = exec(); auto copy = vector\u0026lt;int\u0026gt;(nums.begin(), nums.end()); print(nums); (*func)(nums); cout \u0026lt;\u0026lt; \u0026#34;-\u0026gt;\u0026#34;; print(nums); int result = check(nums, copy); cout \u0026lt;\u0026lt; \u0026#34;(\u0026#34; \u0026lt;\u0026lt; (result ? \u0026#34;Pass\u0026#34; : \u0026#34;Fail\u0026#34;) \u0026lt;\u0026lt; \u0026#34;)\u0026#34; \u0026lt;\u0026lt; endl; if (result) cnt++; test \u0026amp;= result; } if (test) { cout \u0026lt;\u0026lt; \u0026#34;Pass! (10/10)\u0026#34; \u0026lt;\u0026lt; endl; } else { cout \u0026lt;\u0026lt; \u0026#34;Fail! (\u0026#34; \u0026lt;\u0026lt; cnt \u0026lt;\u0026lt; \u0026#34;/10)\u0026#34; \u0026lt;\u0026lt; endl; } } }; 以下為測試的方式 # include \u0026#34;agtr.h\u0026#34; void sort(vector\u0026lt;int\u0026gt;\u0026amp; nums) {...} // 你的實作 int main() { agtr::judge(sort); // 用這個函式測試你的實作 return 0; } 1. Bubble Sort void sort(vector\u0026lt;int\u0026gt;\u0026amp; nums) { int n = nums.size(); for (int i = n-1; i \u0026gt; 0; i--) { for (int j = 0; j \u0026lt; i; j++) { if (nums[j] \u0026gt; nums[j+1]) swap(nums[j], nums[j+1]); } } } 2. Selection SOrt void sort(vector\u0026lt;int\u0026gt;\u0026amp; nums) { int n = nums.size(); for (int i = 0; i \u0026lt; n-1; i++) { int p = i; for (int j = i+1; j \u0026lt; n; j++) { if (nums[j] \u0026lt; nums[p]) p = j; } swap(nums[p], nums[i]); } } 3. Insertion Sort void sort(vector\u0026lt;int\u0026gt;\u0026amp; nums){ int n = nums.size(); for (int i = 1; i \u0026lt; n; i++) { int j = i-1; int curr = nums[i]; for (; j \u0026gt;= 0; j--) { if (nums[j] \u0026lt;= curr) { break; } nums[j+1] = nums[j]; } nums[j+1] = curr; } } 4. Heap Sort void heapify(vector\u0026lt;int\u0026gt;\u0026amp; nums, int i) { int left = 2*i+1; int right = 2*i+2; int p = i; int n = nums.size(); if (left \u0026lt; n \u0026amp;\u0026amp; nums[left] \u0026lt; nums[p]) p = left; if (right \u0026lt; n \u0026amp;\u0026amp; nums[right] \u0026lt; nums[p]) p = right; if (p != i) { swap(nums[i], nums[p]); heapify(nums, p); } } void sort(vector\u0026lt;int\u0026gt;\u0026amp; nums) { vector\u0026lt;int\u0026gt; vec(nums.begin(), nums.end()); int n = vec.size(); int parent = (n-1)/2; for (int i = parent; i \u0026gt;= 0; i--) { heapify(vec, i); } for (int i = 0; i \u0026lt; n; i++) { nums[i] = vec[0]; vec[0] = vec.back(); vec.pop_back(); heapify(vec, 0); } } 5. Tree Sort class TreeNode { private: TreeNode* left, *right; int val; TreeNode* insert(TreeNode* root, int val) { if (!root) { root = new TreeNode(val); return root; } if (val \u0026lt; root-\u0026gt;val) { root-\u0026gt;left = insert(root-\u0026gt;left, val); } else { root-\u0026gt;right = insert(root-\u0026gt;right, val); } return root; } void dfs(TreeNode* root, vector\u0026lt;int\u0026gt;\u0026amp; nums) { if (!root) return; dfs(root-\u0026gt;left, nums); nums.push_back(root-\u0026gt;val); dfs(root-\u0026gt;right, nums); } public: TreeNode() {} TreeNode(int val) : val(val) {} TreeNode(int val, TreeNode* left, TreeNode* right) : val(val), left(left), right(right) {} void insert(int val) { insert(this, val); } vector\u0026lt;int\u0026gt; getArray() { vector\u0026lt;int\u0026gt; nums; dfs(this, nums); return nums; } }; void sort(vector\u0026lt;int\u0026gt;\u0026amp; nums) { TreeNode* root = new TreeNode(nums[0]); for (int i = 1; i \u0026lt; nums.size(); i++) { root-\u0026gt;insert(nums[i]); } nums = root-\u0026gt;getArray(); } 6. Merge Sort void merge(vector\u0026lt;int\u0026gt;\u0026amp; nums, int left, int mid, int right) { int i = left, j = mid + 1; vector\u0026lt;int\u0026gt; tmp; while (i \u0026lt;= mid \u0026amp;\u0026amp; j \u0026lt;= right) { if (nums[i] \u0026lt; nums[j]) tmp.push_back(nums[i++]); else tmp.push_back(nums[j++]); } while (i \u0026lt;= mid) tmp.push_back(nums[i++]); while (j \u0026lt;= right) tmp.push_back(nums[j++]); for (i = left; i \u0026lt;= right; i++) { nums[i] = tmp[i-left]; } } void sort(vector\u0026lt;int\u0026gt;\u0026amp; nums, int left, int right) { if (right \u0026lt;= left) return; int mid = left + (right-left)/2; sort(nums, left, mid); sort(nums, mid+1, right); merge(nums, left, mid, right); } void sort(vector\u0026lt;int\u0026gt;\u0026amp; nums) { sort(nums, 0, nums.size()-1); } 7. Quick Sort nt partition(vector\u0026lt;int\u0026gt;\u0026amp; nums, int left, int right) { int pivot = left; int i = left; int j = right+1; while (true) { while (i \u0026lt; right \u0026amp;\u0026amp; nums[++i] \u0026lt; nums[pivot]); while (j \u0026gt; left \u0026amp;\u0026amp; nums[--j] \u0026gt; nums[pivot]); if (i \u0026gt;= j) break; swap(nums[i], nums[j]); } swap(nums[pivot], nums[j]); return j; } void sort(vector\u0026lt;int\u0026gt;\u0026amp; nums, int left, int right) { if (left \u0026gt;= right) return; int pivot = partition(nums, left, right); sort(nums, left, pivot-1); sort(nums, pivot+1, right); } void sort(vector\u0026lt;int\u0026gt;\u0026amp; nums) { sort(nums, 0, nums.size()-1); } 8. Tim Sort #define MIN_MERGE 32 int minRunLength(int n) { int r = 0; while (n \u0026gt;= MIN_MERGE) { r |= (n \u0026amp; 1); n \u0026gt;\u0026gt;= 1; } return n + r; } void insertionSort(vector\u0026lt;int\u0026gt;\u0026amp; nums, int left, int right) { int n = nums.size(); for (int i = left+1; i \u0026lt;= right; i++) { int j = i-1; int curr = nums[i]; for (; j \u0026gt;= left; j--) { if (nums[j] \u0026lt;= curr) { break; } nums[j+1] = nums[j]; } nums[j+1] = curr; } } void merge(vector\u0026lt;int\u0026gt;\u0026amp; nums, int left, int mid, int right) { int i = left; int j = mid + 1; vector\u0026lt;int\u0026gt; tmp; while (i \u0026lt;= mid \u0026amp;\u0026amp; j \u0026lt;= right) { if (nums[i] \u0026lt; nums[j]) tmp.push_back(nums[i++]); else tmp.push_back(nums[j++]); } while (i \u0026lt;= mid) tmp.push_back(nums[i++]); while (j \u0026lt;= right) tmp.push_back(nums[j++]); for (i = left; i \u0026lt;= right; i++) { nums[i] = tmp[i-left]; } } void sort(vector\u0026lt;int\u0026gt;\u0026amp; nums) { int minRun = minRunLength(MIN_MERGE); int n = nums.size(); for (int i = 0; i \u0026lt; n; i += minRun) { int hi = min((i + MIN_MERGE - 1), n-1); insertionSort(nums, i, hi); } for (int size = minRun; size \u0026lt; n; size \u0026lt;\u0026lt;= 1) { for (int left = 0; left \u0026lt; n; left += (size \u0026lt;\u0026lt; 1)) { int mid = left + size - 1; int right = min((left + (size \u0026lt;\u0026lt; 1) - 1), n-1); if (mid \u0026lt; right) { merge(nums, left, mid, right); } } } } 9. Shell Sort void sort(vector\u0026lt;int\u0026gt;\u0026amp; nums) { int n = nums.size(); for (int gap = n\u0026gt;\u0026gt;1; gap \u0026gt; 0; gap\u0026gt;\u0026gt;=1) { for (int i = gap; i \u0026lt; n; i++) { int tmp = nums[i]; int j; for (j = i; j \u0026gt;= gap \u0026amp;\u0026amp; nums[j-gap] \u0026gt; tmp; j -= gap) { nums[j] = nums[j-gap]; } nums[j] = tmp; } } } 10. Counting Sort void sort(vector\u0026lt;int\u0026gt;\u0026amp; nums) { vector\u0026lt;int\u0026gt; dp(10, 0); for (const auto\u0026amp; x : nums) { dp[x]++; } int j = 0; for (int i = 0; i \u0026lt; 10; i++) { while (dp[i]-- \u0026gt; 0) { nums[j++] = i; } } } 回到目錄：[Algo] 演算法筆記 接著閱讀：[Algo] 3-1. Two Pointer/Sliding Window ","permalink":"https://intervalrain.github.io/cs/algo/sorting/","summary":"\u003cblockquote\u003e\n\u003cp\u003e前言：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e在開始練習各種演算法題型時，最先需要養成的是，如何選用「適當」的演算法，題目往往不會只有一種解，但合適的演算法可以如同走捷徑一般，快速且優雅的達到目標。\u003c/li\u003e\n\u003cli\u003e在實作程式前，更重要的是，寫下一段 pseudo code，試著說明其複雜度，並觀察是否有冗餘的空間可以優化。\u003c/li\u003e\n\u003cli\u003e在腦海中模擬一遍程式碼之後，最後才是快速的將程式碼實作出來。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e在這一章節，我們將練習如何將「想法」轉換成「實作」。並且我們必須熟悉如何計算其時間複雜度。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"一cheat-table\"\u003e一、Cheat Table\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e首先我們需要先瞭解每一種資料結構的各種操作的時間複雜度，以便我們選擇適合的資料結構與演算法。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e下面這種表的 \u003ccode\u003eArray\u003c/code\u003e, \u003ccode\u003eStack\u003c/code\u003e, \u003ccode\u003eQueue\u003c/code\u003e, \u003ccode\u003eLinked List\u003c/code\u003e, \u003ccode\u003eHash Table\u003c/code\u003e, \u003ccode\u003eBinary Search Tree\u003c/code\u003e 基本上是要背起來的，其餘的遇到再去認識就好。\n\u003cimg alt=\"bigO\" loading=\"lazy\" src=\"/CS/algo/images/bigO.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e接下來就輪到練習實作了，排序演算法是個很好的練習，試著把下表中的排序演算法完成，並且計算其時間複雜度吧。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e參考題目 \u003ca href=\"https://leetcode.com/problems/sort-an-array/\"\u003eLeetcode 912. Sort an Array\u003c/a\u003e\n\u003cimg alt=\"chartTable\" loading=\"lazy\" src=\"/CS/algo/images/cheatTable.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"二sorting-algorithm\"\u003e二、Sorting Algorithm\u003c/h2\u003e\n\u003ch3 id=\"0-測資\"\u003e0. 測資\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e這個 file 是我寫的測資，可以拿來測試自己的實作，用法是 \u003ccode\u003e#include \u0026quot;agtr.h\u0026quot;\u003c/code\u003e，之後用 \u003ccode\u003ejudge()\u003c/code\u003e 函式測試你寫好的 function。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;random\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;vector\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eusing\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enamespace\u003c/span\u003e std;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eagtr\u003c/span\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e exec(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e minv, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e maxv) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (minv \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e maxv) \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e {};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eif\u003c/span\u003e (minv \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e maxv) \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e(n, minv);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e res;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        random_device rd;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        mt19937 \u003cspan style=\"color:#a6e22e\"\u003emt\u003c/span\u003e(rd());\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        uniform_real_distribution\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003edouble\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e dist(minv, maxv);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (n\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            res.push_back(dist(mt));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e res;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e exec(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eexec\u003c/span\u003e(n, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e exec() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eexec\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eprint\u003c/span\u003e(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e nums) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;[\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        for_each(nums.begin(), nums.end()\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, [](\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e x) { cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e x \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;,\u0026#34;\u003c/span\u003e; });\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e(nums.end()\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;]\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ebool\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003echeck\u003c/span\u003e(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e nums, vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e copy) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        sort(copy.begin(), copy.end());\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e nums.size(); i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (nums[i] \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e copy[i]) \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e false;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e true;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ejudge\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e (\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003efunc)(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e)) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ebool\u003c/span\u003e test \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e true;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e cnt \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (n\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eauto\u003c/span\u003e nums \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e exec();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eauto\u003c/span\u003e copy \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e(nums.begin(), nums.end());\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            print(nums);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            (\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003efunc)(nums);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;-\u0026gt;\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            print(nums);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e result \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e check(nums, copy);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;(\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e (result \u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Pass\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Fail\u0026#34;\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;)\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e endl;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (result) cnt\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            test \u003cspan style=\"color:#f92672\"\u003e\u0026amp;=\u003c/span\u003e result;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (test) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Pass! (10/10)\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e endl;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Fail! (\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e cnt \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/10)\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e endl;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e以下為測試的方式\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e# include \u0026#34;agtr.h\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esort\u003c/span\u003e(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e nums) {...}  \u003cspan style=\"color:#75715e\"\u003e// 你的實作\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    agtr\u003cspan style=\"color:#f92672\"\u003e::\u003c/span\u003ejudge(sort);      \u003cspan style=\"color:#75715e\"\u003e// 用這個函式測試你的實作\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"1-bubble-sort\"\u003e1. Bubble Sort\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esort\u003c/span\u003e(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e nums) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e nums.size();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e n\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e j \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; j \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e i; j\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (nums[j] \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e nums[j\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]) swap(nums[j], nums[j\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"2-selection-sort\"\u003e2. Selection SOrt\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esort\u003c/span\u003e(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e nums) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e nums.size();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e n\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e; i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e p \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e i;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e j \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e i\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e; j \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e n; j\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (nums[j] \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e nums[p]) p \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e j;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        swap(nums[p], nums[i]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"3-insertion-sort\"\u003e3. Insertion Sort\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esort\u003c/span\u003e(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e nums){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e nums.size();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e n; i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e j \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e i\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e curr \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e nums[i];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (; j \u003cspan style=\"color:#f92672\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; j\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (nums[j] \u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e curr) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003ebreak\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            nums[j\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e nums[j];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        nums[j\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e curr;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"4-heap-sort\"\u003e4. Heap Sort\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eheapify\u003c/span\u003e(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e nums, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e left \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003ei\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e right \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003ei\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e p \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e i;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e nums.size();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (left \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e n \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e nums[left] \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e nums[p]) p \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e left;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (right \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e n \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e nums[right] \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e nums[p]) p \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e right;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (p \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e i) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        swap(nums[i], nums[p]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        heapify(nums, p);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esort\u003c/span\u003e(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e nums) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e vec(nums.begin(), nums.end());\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e vec.size();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e parent \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (n\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e parent; i \u003cspan style=\"color:#f92672\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        heapify(vec, i);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e n; i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        nums[i] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e vec[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        vec[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e vec.back();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        vec.pop_back();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        heapify(vec, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"5-tree-sort\"\u003e5. Tree Sort\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eTreeNode\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    TreeNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e left, \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003eright;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e val;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    TreeNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003einsert\u003c/span\u003e(TreeNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e root, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e val) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003eroot) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            root \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e TreeNode(val);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e root;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (val \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e root\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eval) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            root\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eleft \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e insert(root\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eleft, val);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            root\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eright \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e insert(root\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eright, val);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e root;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edfs\u003c/span\u003e(TreeNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e root, vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e nums) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003eroot) \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        dfs(root\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eleft, nums);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        nums.push_back(root\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eval);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        dfs(root\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eright, nums);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    TreeNode() {}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    TreeNode(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e val)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e val(val) {}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    TreeNode(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e val, TreeNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e left, TreeNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e right)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e val(val), left(left), right(right) {}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003einsert\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e val) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        insert(\u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e, val);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e getArray() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e nums;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        dfs(\u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e, nums);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e nums;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esort\u003c/span\u003e(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e nums) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    TreeNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e root \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e TreeNode(nums[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e nums.size(); i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        root\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003einsert(nums[i]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    nums \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e root\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003egetArray();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"6-merge-sort\"\u003e6. Merge Sort\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emerge\u003c/span\u003e(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e nums, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e left, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e mid, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e right) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e left, j \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e mid \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e tmp;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e mid \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e j \u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e right) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (nums[i] \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e nums[j])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            tmp.push_back(nums[i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            tmp.push_back(nums[j\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e mid) tmp.push_back(nums[i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (j \u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e right) tmp.push_back(nums[j\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e left; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e right; i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        nums[i] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e tmp[i\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003eleft];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esort\u003c/span\u003e(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e nums, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e left, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e right) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (right \u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e left) \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e mid \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e left \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e (right\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003eleft)\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    sort(nums, left, mid);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    sort(nums, mid\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, right);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    merge(nums, left, mid, right);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esort\u003c/span\u003e(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e nums) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    sort(nums, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, nums.size()\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"7-quick-sort\"\u003e7. Quick Sort\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ent \u003cspan style=\"color:#a6e22e\"\u003epartition\u003c/span\u003e(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e nums, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e left, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e right) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e pivot \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e left;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e left;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e j \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e right\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (true) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e right \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e nums[\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003ei] \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e nums[pivot]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (j \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e left \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e nums[\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003ej] \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e nums[pivot]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (i \u003cspan style=\"color:#f92672\"\u003e\u0026gt;=\u003c/span\u003e j) \u003cspan style=\"color:#66d9ef\"\u003ebreak\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        swap(nums[i], nums[j]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    swap(nums[pivot], nums[j]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e j;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esort\u003c/span\u003e(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e nums, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e left, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e right) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (left \u003cspan style=\"color:#f92672\"\u003e\u0026gt;=\u003c/span\u003e right) \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e pivot \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e partition(nums, left, right);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    sort(nums, left, pivot\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    sort(nums, pivot\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, right);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esort\u003c/span\u003e(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e nums) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    sort(nums, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, nums.size()\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"8-tim-sort\"\u003e8. Tim Sort\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#define MIN_MERGE 32\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eminRunLength\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e r \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (n \u003cspan style=\"color:#f92672\"\u003e\u0026gt;=\u003c/span\u003e MIN_MERGE) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        r \u003cspan style=\"color:#f92672\"\u003e|=\u003c/span\u003e (n \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        n \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e n \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e r;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003einsertionSort\u003c/span\u003e(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e nums, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e left, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e right) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e nums.size();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e left\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e right; i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e j \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e i\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e curr \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e nums[i];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (; j \u003cspan style=\"color:#f92672\"\u003e\u0026gt;=\u003c/span\u003e left; j\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (nums[j] \u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e curr) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003ebreak\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            nums[j\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e nums[j];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        nums[j\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e curr;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emerge\u003c/span\u003e(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e nums, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e left, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e mid, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e right) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e left;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e j \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e mid \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e tmp;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e mid \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e j \u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e right) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (nums[i] \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e nums[j])\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            tmp.push_back(nums[i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            tmp.push_back(nums[j\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e mid)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        tmp.push_back(nums[i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (j \u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e right)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        tmp.push_back(nums[j\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e left; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e right; i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        nums[i] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e tmp[i\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003eleft];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esort\u003c/span\u003e(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e nums) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e minRun \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e minRunLength(MIN_MERGE);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e nums.size();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e n; i \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e minRun) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e hi \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e min((i \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e MIN_MERGE \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e), n\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        insertionSort(nums, i, hi);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e size \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e minRun; size \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e n; size \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e left \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; left \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e n; left \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e (size \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e mid \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e left \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e size \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e right \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e min((left \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e (size \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e), n\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (mid \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e right) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                merge(nums, left, mid, right);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"9-shell-sort\"\u003e9. Shell Sort\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esort\u003c/span\u003e(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e nums) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e nums.size();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e gap \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e n\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e; gap \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; gap\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e gap; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e n; i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e tmp \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e nums[i];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e j;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (j \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e i; j \u003cspan style=\"color:#f92672\"\u003e\u0026gt;=\u003c/span\u003e gap \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e nums[j\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003egap] \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e tmp; j \u003cspan style=\"color:#f92672\"\u003e-=\u003c/span\u003e gap) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                nums[j] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e nums[j\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003egap];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            nums[j] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e tmp;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"10-counting-sort\"\u003e10. Counting Sort\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esort\u003c/span\u003e(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e nums) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e dp(\u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eauto\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e x : nums) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        dp[x]\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e j \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e; i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (dp[i]\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            nums[j\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e i;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003cul\u003e\n\u003cli\u003e回到目錄：\u003ca href=\"/cs/algo\"\u003e[Algo] 演算法筆記\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c!-- + 想要複習：[[Algo] 4-1. 暴力演算法](/cs/algo/brute_force) --\u003e\n\u003cul\u003e\n\u003cli\u003e接著閱讀：\u003ca href=\"/cs/algo/two_pointer\"\u003e[Algo] 3-1. Two Pointer/Sliding Window\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"[Algo] 3-0. Sorting"},{"content":"1. 命名空間別名 命名空間(namespace)的作用是允許在不同的命名空間下定義多個同名 class。 使用命名空間別名(namespace alias)可以避免為了保證命名唯一而使用命名空間而導致的命名過度冗長。 using System; using WinForms = System.Windows.Forms; using WebForms = System.Web.UI.WebControls; class Program { public static void Main() { Console.WriteLine(typeof(WinForms.Button)); Console.WriteLine(typeof(WebForms.Button)); } } 2. 命名空間別名限定字符 上例的程式碼存在一個潛在的問題，如果程式中同時引用了一個同名類別，如 class WinForms，那麼 WinForms.Button 就會被判斷成該類別的 Button 成員。 為了避免上面的情形發生，在 C#2 引入了命名空間別名限定字符(::)，使用 :: 代表前面接的一定是命名空間。 public static void Main() { Console.WriteLine(typeof(WinForms::Button)); Console.WriteLine(typeof(WebForms::Button)); } 3. 全局命名空間別名 C#2 引入的全局命名空間別名，可以指示全局命名空間中的類別，也可以用於類別完全限定名的一個「根」命名空間。 global using global::System.DateTime; 4. 外部別名 假設有不同的程式提供了相同的命名空間，而命名空間又有相同的 class 名稱，則需要外部別名(extern)來處理。 extern alias JsonNet; extern alias JsonNetAlternative; using JsonNet::Newtonsoft.Json.Linq; using AltJObject = JsonNetAlternative::Newtonsoft.Json.Linq.JObject; JObject obj = new JObject(); AltJObject alt = new AltJObject(); ","permalink":"https://intervalrain.github.io/csharp/namespace_alias/","summary":"\u003ch2 id=\"1-命名空間別名\"\u003e1. 命名空間別名\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e命名空間(namespace)的作用是允許在不同的命名空間下定義多個同名 class。\u003c/li\u003e\n\u003cli\u003e使用命名空間別名(namespace alias)可以避免為了保證命名唯一而使用命名空間而導致的命名過度冗長。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode class=\"language-Cs\" data-lang=\"Cs\"\u003eusing System;\nusing WinForms = System.Windows.Forms;\nusing WebForms = System.Web.UI.WebControls;\n\nclass Program\n{\n    public static void Main()\n    {\n        Console.WriteLine(typeof(WinForms.Button));\n        Console.WriteLine(typeof(WebForms.Button));\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"2-命名空間別名限定字符\"\u003e2. 命名空間別名限定字符\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e上例的程式碼存在一個潛在的問題，如果程式中同時引用了一個同名類別，如 \u003ccode\u003eclass WinForms\u003c/code\u003e，那麼 \u003ccode\u003eWinForms.Button\u003c/code\u003e 就會被判斷成該類別的 \u003ccode\u003eButton\u003c/code\u003e 成員。\u003c/li\u003e\n\u003cli\u003e為了避免上面的情形發生，在 C#2 引入了命名空間別名限定字符(\u003ccode\u003e::\u003c/code\u003e)，使用 \u003ccode\u003e::\u003c/code\u003e 代表前面接的一定是命名空間。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode class=\"language-Cs\" data-lang=\"Cs\"\u003epublic static void Main()\n{\n    Console.WriteLine(typeof(WinForms::Button));\n    Console.WriteLine(typeof(WebForms::Button));\n}\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"3-全局命名空間別名\"\u003e3. 全局命名空間別名\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eC#2 引入的全局命名空間別名，可以指示全局命名空間中的類別，也可以用於類別完全限定名的一個「根」命名空間。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode class=\"language-Cs\" data-lang=\"Cs\"\u003eglobal using global::System.DateTime;\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"4-外部別名\"\u003e4. 外部別名\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e假設有不同的程式提供了相同的命名空間，而命名空間又有相同的 class 名稱，則需要外部別名(extern)來處理。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode class=\"language-Cs\" data-lang=\"Cs\"\u003eextern alias JsonNet;\nextern alias JsonNetAlternative;\n\nusing JsonNet::Newtonsoft.Json.Linq;\nusing AltJObject = JsonNetAlternative::Newtonsoft.Json.Linq.JObject;\n\nJObject obj = new JObject();       \nAltJObject alt = new AltJObject(); \n\u003c/code\u003e\u003c/pre\u003e","title":"[C#] Namespace Alias 命名空間別名"},{"content":"1. getter/setter 的訪問權限分離 在 C#1 中，getter 跟 setter 共用一個 access modifier，意思是 getter 與 setter 擁有同樣的訪問權限，這個顯然是不合理的。 private string text; public string Text { get { return text; } set { text = value; } } 更常見的情境應該是 setter 的訪問權限比 getter 的訪問權限更小，這在 C#2 中可以透過下面例子的方式來達到： private string text; public string Text { get { return text; } private set { text = value; } } ","permalink":"https://intervalrain.github.io/csharp/getter_setter_access_separate/","summary":"\u003ch2 id=\"1-gettersetter-的訪問權限分離\"\u003e1. getter/setter 的訪問權限分離\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e在 C#1 中，getter 跟 setter 共用一個 access modifier，意思是 getter 與 setter 擁有同樣的訪問權限，這個顯然是不合理的。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode class=\"language-Cs\" data-lang=\"Cs\"\u003eprivate string text;\npublic string Text\n{\n    get { return text; }\n    set { text = value; }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003e更常見的情境應該是 setter 的訪問權限比 getter 的訪問權限更小，這在 C#2 中可以透過下面例子的方式來達到：\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode class=\"language-Cs\" data-lang=\"Cs\"\u003eprivate string text;\npublic string Text\n{\n    get { return text; }\n    private set { text = value; }\n}\n\u003c/code\u003e\u003c/pre\u003e","title":"[C#] Property getter/setter access separate 訪問權限分離"},{"content":"1. 介紹 靜態類別指的是使用 static 修飾類別，可以用於裝載一個全部由靜態方法組成的工具類別。 雖然宣告一個僅包含靜態方法的非靜態類別完成是合法的，但是加註 static 關鍵字可以表明該類別的用途，並且防之該類別被當作變數類型或是類型實參使用。 public static class Util { public static string getCOL(string str, char del, int col) { string[] arr = str.Split(\u0026#39;_\u0026#39;); int n = arr.Length; try { return arr[col-1]; } catch { string text = $\u0026#34;Index out of bound.\\nIndex should be between 1 and {n}\u0026#34;; throw new Exception(text); } } } 另外，擴充方法(extension method) 也只能在非嵌套、非泛型類的靜態類別中宣告。 ","permalink":"https://intervalrain.github.io/csharp/static/","summary":"\u003ch2 id=\"1-介紹\"\u003e1. 介紹\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e靜態類別指的是使用 \u003ccode\u003estatic\u003c/code\u003e 修飾類別，可以用於裝載一個全部由\u003cstrong\u003e靜態方法\u003c/strong\u003e組成的工具類別。\u003c/li\u003e\n\u003cli\u003e雖然宣告一個僅包含靜態方法的非靜態類別完成是合法的，但是加註 \u003ccode\u003estatic\u003c/code\u003e 關鍵字可以表明該類別的用途，並且防之該類別被當作變數類型或是類型實參使用。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode class=\"language-Cs\" data-lang=\"Cs\"\u003epublic static class Util\n{\n    public static string getCOL(string str, char del, int col)\n    {\n        string[] arr = str.Split(\u0026#39;_\u0026#39;);\n        int n = arr.Length;\n        try \n        {\n            return arr[col-1];\n        }\n        catch\n        {\n            string text = $\u0026#34;Index out of bound.\\nIndex should be between 1 and {n}\u0026#34;;\n            throw new Exception(text);\n        }\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003e另外，擴充方法(extension method) 也只能在非嵌套、非泛型類的靜態類別中宣告。\u003c/li\u003e\n\u003c/ul\u003e","title":"[C#] static class 靜態類別"},{"content":"C#2 Generic 泛型 Nullable 可空值類型 Delegate 委派 Iterator 迭代器 Partial 局部類型 Yield Static Class 靜態類別 Property getter/setter access separate 訪問權限分離 Namespace Alias 空間命名別名 C#3 Linq 及其相關特性 ","permalink":"https://intervalrain.github.io/csharp/csharp/","summary":"\u003ch3 id=\"c2\"\u003eC#2\u003c/h3\u003e\n\u003ch4 id=\"generic-泛型csharpgeneric\"\u003e\u003ca href=\"/csharp/generic\"\u003eGeneric 泛型\u003c/a\u003e\u003c/h4\u003e\n\u003ch4 id=\"nullable-可空值類型csharpnullable\"\u003e\u003ca href=\"/csharp/nullable\"\u003eNullable 可空值類型\u003c/a\u003e\u003c/h4\u003e\n\u003ch4 id=\"delegate-委派csharpdelegate\"\u003e\u003ca href=\"/csharp/delegate\"\u003eDelegate 委派\u003c/a\u003e\u003c/h4\u003e\n\u003ch4 id=\"iterator-迭代器csharpiterator\"\u003e\u003ca href=\"/csharp/iterator\"\u003eIterator 迭代器\u003c/a\u003e\u003c/h4\u003e\n\u003ch4 id=\"partial-局部類型csharppartial\"\u003e\u003ca href=\"/csharp/partial\"\u003ePartial 局部類型\u003c/a\u003e\u003c/h4\u003e\n\u003ch4 id=\"yieldcsharpyield\"\u003e\u003ca href=\"/csharp/yield\"\u003eYield\u003c/a\u003e\u003c/h4\u003e\n\u003ch4 id=\"static-class-靜態類別csharpstatic\"\u003e\u003ca href=\"/csharp/static\"\u003eStatic Class 靜態類別\u003c/a\u003e\u003c/h4\u003e\n\u003ch4 id=\"property-gettersetter-access-separate-訪問權限分離csharpgetter_setter_access_separate\"\u003e\u003ca href=\"/csharp/getter_setter_access_separate\"\u003eProperty getter/setter access separate 訪問權限分離\u003c/a\u003e\u003c/h4\u003e\n\u003ch4 id=\"namespace-alias-空間命名別名csharpnamespace_alias\"\u003e\u003ca href=\"/csharp/namespace_alias\"\u003eNamespace Alias 空間命名別名\u003c/a\u003e\u003c/h4\u003e\n\u003ch3 id=\"c3\"\u003eC#3\u003c/h3\u003e\n\u003ch4 id=\"linq-及其相關特性csharplinq_props\"\u003e\u003ca href=\"/csharp/linq_props\"\u003eLinq 及其相關特性\u003c/a\u003e\u003c/h4\u003e","title":"[C#] C# 筆記"},{"content":"1. 用法 partial 關鍵字可用於 class、interface、struct，可將之拆開於不同的檔案撰寫。 可以方便不同的工程師在不同的檔案中共同開發同一個 class、interface、struct。 public partial class Util { public static IEnumerable\u0026lt;int\u0026gt; GetFibonacci() { ... } } public partial class Util { public static IEnumerable\u0026lt;int\u0026gt; GetPrime() { ... } } 2. Partial Method 局部方法 可以在一個局部類別中只宣告方法，在另一個局部類別中可選擇實作或不實作，若不實作，編譯器會直接省略這個宣告而不編譯。 局部方法預設是 private 的 局部方法的返回值必須是 void 且不能使用 out 參數，但可以使用 ref 參數。 partial class Demo { public Demo() { OnConstruction(); // 調用未實現的局部方法 } public override string ToString() { string ret = \u0026#34;Original return value\u0026#34;; CustomizeToString(ref ret); return ret; } partial void OnConstruction(); // 宣告局部方法 partial void CustomizeToString(ref string text); // 宣告局部方法 } partial class Demo { partial void CustomizeToString(ref string text) // 實作局部方法 { text += \u0026#34; - Customized!\u0026#34;; } public static void Main(string[] args) { Demo d = new Demo(); Console.WriteLine(d.ToString()); } } 注意到上例宣告了兩個局部方法 OnStruction() 與 CustomizeToString(ref string text)，但由於前者並沒有被實作，故編譯器會直接將它移除。 利用上面的這個性質，我們可以搭配使用 IDE 的 auto generation 來生成 partial 類別的部分，這樣可以便於管理與組織檔案。 ","permalink":"https://intervalrain.github.io/csharp/partial/","summary":"\u003ch2 id=\"1-用法\"\u003e1. 用法\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003epartial\u003c/code\u003e 關鍵字可用於 \u003ccode\u003eclass\u003c/code\u003e、\u003ccode\u003einterface\u003c/code\u003e、\u003ccode\u003estruct\u003c/code\u003e，可將之拆開於不同的檔案撰寫。\u003c/li\u003e\n\u003cli\u003e可以方便不同的工程師在不同的檔案中共同開發同一個 \u003ccode\u003eclass\u003c/code\u003e、\u003ccode\u003einterface\u003c/code\u003e、\u003ccode\u003estruct\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode class=\"language-Cs\" data-lang=\"Cs\"\u003epublic partial class Util\n{\n    public static IEnumerable\u0026lt;int\u0026gt; GetFibonacci() { ... }\n}\n\npublic partial class Util\n{\n    public static IEnumerable\u0026lt;int\u0026gt; GetPrime() { ... }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"2-partial-method-局部方法\"\u003e2. Partial Method 局部方法\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e可以在一個局部類別中只宣告方法，在另一個局部類別中可選擇實作或不實作，若不實作，編譯器會直接省略這個宣告而不編譯。\u003c/li\u003e\n\u003cli\u003e局部方法預設是 \u003ccode\u003eprivate\u003c/code\u003e 的\u003c/li\u003e\n\u003cli\u003e局部方法的返回值必須是 \u003ccode\u003evoid\u003c/code\u003e 且不能使用 \u003ccode\u003eout\u003c/code\u003e 參數，但可以使用 \u003ccode\u003eref\u003c/code\u003e 參數。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode class=\"language-Cs\" data-lang=\"Cs\"\u003epartial class Demo\n{\n    public Demo()\n    {\n        OnConstruction();                               // 調用未實現的局部方法\n    }\n    public override string ToString()\n    {\n        string ret = \u0026#34;Original return value\u0026#34;;\n        CustomizeToString(ref ret);\n        return ret;\n    }\n    partial void OnConstruction();                      // 宣告局部方法\n    partial void CustomizeToString(ref string text);    // 宣告局部方法\n}\n\npartial class Demo\n{\n    partial void CustomizeToString(ref string text)     // 實作局部方法\n    {\n        text += \u0026#34; - Customized!\u0026#34;;\n    }\n    \n    public static void Main(string[] args)\n    {\n        Demo d = new Demo();\n        Console.WriteLine(d.ToString());\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003e注意到上例宣告了兩個局部方法 \u003ccode\u003eOnStruction()\u003c/code\u003e 與 \u003ccode\u003eCustomizeToString(ref string text)\u003c/code\u003e，但由於前者並沒有被實作，故編譯器會直接將它移除。\u003c/li\u003e\n\u003cli\u003e利用上面的這個性質，我們可以搭配使用 IDE 的 auto generation 來生成 partial 類別的部分，這樣可以便於管理與組織檔案。\u003c/li\u003e\n\u003c/ul\u003e","title":"[C#] Partial Type 局部類型"},{"content":"1. 簡介 迭代器包含了以下四種類型 IEnumerable IEnumerable\u0026lt;T\u0026gt; IEnumerator IEnumerator\u0026lt;T\u0026gt; 根據迭代器的返回類型，每個迭代器都有一個 yield type。 IEnuerable 返回 object IEnuerable\u0026lt;string\u0026gt; 返回 string 基本的語法為： public static IEnumerable\u0026lt;int\u0026gt; GetFibonacciSeries(int end) { int cnt = 0; int prev = 0; int curr = 1; while (true) { if (cnt == end) yield break; cnt++; int tmp = curr + prev; yield return curr; prev = curr; curr = tmp; } } public static void Main(string[] args) { foreach(int val in GetFibonacciSeries(10)) { Console.WriteLine(val); } } 2. 延遲執行 雖然同樣的程式可以用 List\u0026lt;T\u0026gt; 的方式重新寫成下面的程式碼，其列印結果也會一樣，但在執行期卻會有很大的差異。 public static List\u0026lt;int\u0026gt; GetFibonacciSeriesList(int end) { int cnt = 0; int prev = 0; int curr = 1; List\u0026lt;int\u0026gt; res = new List\u0026lt;int\u0026gt;(); while (true) { if (cnt == end) break; cnt++; int tmp = curr + prev; res.Add(curr); prev = curr; curr = tmp; } return res; } public static void Main(string[] args) { foreach(int val in GetFibonacciSeriesList(10)) { Console.WriteLine(val); } } 延遲執行屬於 lambda 演算的一部分，目的是「只在需要獲取計算結果時執行程式」。 public static void Main(string[] args) { // 調用迭代器的方法，從 IEnumerable\u0026lt;T\u0026gt; 取得 IEnumerator\u0026lt;T\u0026gt; using (var reader = GetFibonacciSeries(10).GetEnumerator()) { while (reader.MoveNext()) { int val = reader.Current; Console.WriteLine(val); } } } 以上兩段程式碼兩段程式碼在執行期的差別為： 前者在執行到 foreach(int val in GetFibonacciSeriesList(10)) 時，會先將 GetFibonacciSeriesList(10) 執行完取得 List\u0026lt;int\u0026gt; 之後才開始 for loop。 後者在執行到 MoveNext() 時，程式碼才真正被執行。 執行 yield 語句時，程式碼會停止執行： 拋出 exception 方法執行完畢 遇到 yield break 執行到 yield return，迭代器準備返回值。 那麼延遲執行有什麼好處呢？ 不必預先創建一個 List\u0026lt;int\u0026gt;，在 List 本身很大的情況下，可以節省空間。 試想今天的數列是無窮無盡的(如上例的 fibonacci 數列)，使用 List\u0026lt;int\u0026gt; 就顯得太冗餘了。 使用迭代器可以達到 Design Pattern 中的關注點分離(Iteration/Process 分離)，也就是說，在叫用迭代器時，只需關心有沒有辦法迭代到下一個元素。 程式只需完成需求即可退出，大大的增加效率。 試想今天需要向資料庫拿去十筆最新的資料，若不用延遲執行的話，需要將整筆資料庫的資料用某種資料結構儲存下來，再 for-loop 取出十筆。 若使用延遲執行，取得十筆資料就立即退出，可以大大減少執行時間。 3. finally 的處理 觀察下面的程式碼，並對照輸出結果，可以發現，只有出現一次的 In finally block。 只有在執行了 IEnumerator\u0026lt;T\u0026gt;.Dispose() 方法時，才會調用 finally 的區塊。 而每次的 IEnumerator\u0026lt;T\u0026gt;.MoveNext() 都會使程式停止在 yield return。 不管是用 using 搭配 IEnumerable.GetEnumerator()，或是使用 foreach(var val in Iterator()) 回傳的結果都是只有出現一次的 In finally block，代表後者隱含了一條 using 的語句。 public static IEnumerable\u0026lt;string\u0026gt; Iterator() { try { Console.WriteLine(\u0026#34;Before first yield\u0026#34;); yield return \u0026#34;first\u0026#34;; Console.WriteLine(\u0026#34;Between yields\u0026#34;); yield return \u0026#34;second\u0026#34;; Console.WriteLine(\u0026#34;After yields\u0026#34;); } finally { Console.WriteLine(\u0026#34;In finally block\u0026#34;); } } public static void Main(string[] args) { using (var reader = Iterator().GetEnumerator()) { while (reader.MoveNext()) { string val = reader.Current; Console.WriteLine(val); } } } // Before first yield // first // Between yields // second // After yields // In finally block 更多詳細的介紹詳見 [C#] Yield Return ","permalink":"https://intervalrain.github.io/csharp/iterator/","summary":"\u003ch2 id=\"1-簡介\"\u003e1. 簡介\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e迭代器包含了以下四種類型\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eIEnumerable\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eIEnumerable\u0026lt;T\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eIEnumerator\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eIEnumerator\u0026lt;T\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e根據迭代器的返回類型，每個迭代器都有一個 \u003ccode\u003eyield type\u003c/code\u003e。\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eIEnuerable\u003c/code\u003e 返回 \u003ccode\u003eobject\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eIEnuerable\u0026lt;string\u0026gt;\u003c/code\u003e 返回 \u003ccode\u003estring\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e基本的語法為：\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode class=\"language-Cs\" data-lang=\"Cs\"\u003epublic static IEnumerable\u0026lt;int\u0026gt; GetFibonacciSeries(int end)\n{\n    int cnt = 0;\n    int prev = 0;\n    int curr = 1;\n    while (true)\n    {\n        if (cnt == end) yield break;\n        cnt++;\n        int tmp = curr + prev;\n        yield return curr;\n        prev = curr;   \n        curr = tmp;\n    }\n}\npublic static void Main(string[] args)\n{\n    \n    foreach(int val in GetFibonacciSeries(10))\n    {\n        Console.WriteLine(val);\n    }\n}    \n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"2-延遲執行\"\u003e2. 延遲執行\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e雖然同樣的程式可以用 \u003ccode\u003eList\u0026lt;T\u0026gt;\u003c/code\u003e 的方式重新寫成下面的程式碼，其列印結果也會一樣，但在執行期卻會有很大的差異。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode class=\"language-Cs\" data-lang=\"Cs\"\u003epublic static List\u0026lt;int\u0026gt; GetFibonacciSeriesList(int end)\n{\n    int cnt = 0;\n    int prev = 0;\n    int curr = 1;\n    List\u0026lt;int\u0026gt; res = new List\u0026lt;int\u0026gt;();\n    while (true)\n    {\n        if (cnt == end) break;\n        cnt++;\n        int tmp = curr + prev;\n        res.Add(curr);\n        prev = curr;\n        curr = tmp;\n    }\n    return res;\n}\npublic static void Main(string[] args)\n{\n    foreach(int val in GetFibonacciSeriesList(10))\n    {\n        Console.WriteLine(val);\n    }\n}    \n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003e延遲執行屬於 lambda 演算的一部分，目的是「\u003cstrong\u003e只在需要獲取計算結果時執行程式\u003c/strong\u003e」。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode class=\"language-Cs\" data-lang=\"Cs\"\u003epublic static void Main(string[] args)\n{\n    // 調用迭代器的方法，從 IEnumerable\u0026lt;T\u0026gt; 取得 IEnumerator\u0026lt;T\u0026gt;\n    using (var reader = GetFibonacciSeries(10).GetEnumerator())\n    {\n        while (reader.MoveNext())\n        {\n            int val = reader.Current;\n            Console.WriteLine(val);\n        }\n    }\n} \n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003e以上兩段程式碼兩段程式碼在執行期的差別為：\n\u003cul\u003e\n\u003cli\u003e前者在執行到 \u003ccode\u003eforeach(int val in GetFibonacciSeriesList(10))\u003c/code\u003e 時，會先將 \u003ccode\u003eGetFibonacciSeriesList(10)\u003c/code\u003e 執行完取得 \u003ccode\u003eList\u0026lt;int\u0026gt;\u003c/code\u003e 之後才開始 \u003ccode\u003efor loop\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e後者在執行到 \u003ccode\u003eMoveNext()\u003c/code\u003e 時，程式碼才真正被執行。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e執行 \u003ccode\u003eyield\u003c/code\u003e 語句時，程式碼會停止執行：\n\u003cul\u003e\n\u003cli\u003e拋出 exception\u003c/li\u003e\n\u003cli\u003e方法執行完畢\u003c/li\u003e\n\u003cli\u003e遇到 yield break\u003c/li\u003e\n\u003cli\u003e執行到 yield return，迭代器準備返回值。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e那麼延遲執行有什麼好處呢？\n\u003cul\u003e\n\u003cli\u003e不必預先創建一個 \u003ccode\u003eList\u0026lt;int\u0026gt;\u003c/code\u003e，在 List 本身很大的情況下，可以節省空間。\u003c/li\u003e\n\u003cli\u003e試想今天的數列是無窮無盡的(如上例的 fibonacci 數列)，使用 \u003ccode\u003eList\u0026lt;int\u0026gt;\u003c/code\u003e 就顯得太冗餘了。\u003c/li\u003e\n\u003cli\u003e使用迭代器可以達到 Design Pattern 中的\u003cstrong\u003e關注點分離\u003c/strong\u003e(Iteration/Process 分離)，也就是說，在叫用迭代器時，只需關心有沒有辦法迭代到下一個元素。\u003c/li\u003e\n\u003cli\u003e程式只需完成需求即可退出，大大的增加效率。\n\u003cul\u003e\n\u003cli\u003e試想今天需要向資料庫拿去十筆最新的資料，若不用延遲執行的話，需要將整筆資料庫的資料用某種資料結構儲存下來，再 for-loop 取出十筆。\u003c/li\u003e\n\u003cli\u003e若使用延遲執行，取得十筆資料就立即退出，可以大大減少執行時間。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"3-finally-的處理\"\u003e3. finally 的處理\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e觀察下面的程式碼，並對照輸出結果，可以發現，只有出現一次的 \u003ccode\u003eIn finally block\u003c/code\u003e。\n\u003cul\u003e\n\u003cli\u003e只有在執行了 \u003ccode\u003eIEnumerator\u0026lt;T\u0026gt;.Dispose()\u003c/code\u003e 方法時，才會調用 finally 的區塊。\u003c/li\u003e\n\u003cli\u003e而每次的 \u003ccode\u003eIEnumerator\u0026lt;T\u0026gt;.MoveNext()\u003c/code\u003e 都會使程式停止在 \u003ccode\u003eyield return\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e不管是用 \u003ccode\u003eusing\u003c/code\u003e 搭配 \u003ccode\u003eIEnumerable.GetEnumerator()\u003c/code\u003e，或是使用 \u003ccode\u003eforeach(var val in Iterator())\u003c/code\u003e 回傳的結果都是只有出現一次的 \u003ccode\u003eIn finally block\u003c/code\u003e，代表後者隱含了一條 \u003ccode\u003eusing\u003c/code\u003e 的語句。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode class=\"language-Cs\" data-lang=\"Cs\"\u003epublic static IEnumerable\u0026lt;string\u0026gt; Iterator()\n{\n    try \n    {\n        Console.WriteLine(\u0026#34;Before first yield\u0026#34;);\n        yield return \u0026#34;first\u0026#34;;\n        Console.WriteLine(\u0026#34;Between yields\u0026#34;);\n        yield return \u0026#34;second\u0026#34;;\n        Console.WriteLine(\u0026#34;After yields\u0026#34;);    \n    }\n    finally\n    {\n        Console.WriteLine(\u0026#34;In finally block\u0026#34;);\n    }\n    \n}\npublic static void Main(string[] args)\n{\n    using (var reader = Iterator().GetEnumerator())\n    {\n        while (reader.MoveNext())\n        {\n            string val = reader.Current;\n            Console.WriteLine(val);\n        }\n    }\n}   \n// Before first yield\n// first\n// Between yields\n// second\n// After yields\n// In finally block\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003e更多詳細的介紹詳見 \u003ca href=\"/csharp/yield/\"\u003e[C#] Yield Return\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"[C#] IEnumerable \u0026 IEnumerator 迭代器"},{"content":"1. 委派語法 委派 (Delegate) 類似於 C/C++ 中的函式指針，是可存有對某個方法的引用的一種引用類型變數。 宣告語法：delegate \u0026lt;return type\u0026gt; \u0026lt;delegate-name\u0026gt; \u0026lt;parameter list\u0026gt; // 宣告一個委派，裝載 void function(string) public delegate void PrintString(string text); public static void Main(string[] args) { // 新增一個委派事件，指向 ToUpperCase PrintString e = new PrintString(ToUpperCase); string text = \u0026#34;Hello World!\u0026#34;; e.Invoke(text); // HELLO WORLD! // 將另一個事件加到委派中，指向 ToLowerCase e += ToLowerCase; e.Invoke(text); // HELLO WORLD! // hello world! // 將委派中的 ToUpperCase 取消掉 e -= ToUpperCase; e.Invoke(text); // hello world! } public static void ToUpperCase(string text) { Console.WriteLine(text.ToUpper()); } public static void ToLowerCase(string text) =\u0026gt; Console.WriteLine(text.ToLower()); 2. 簡化事件註冊 假設想為一個按鍵註冊事件： // 定義 EventHandler 為可以接收物件與傳參的委派 public delegate void EventHandler(object sender, EventArgs e); // 定義傳參可以儲存的內容 public class HandleClickEventArgs : EventArgs { public string Message; } // 創建一個按鍵並為其創建一個可以註冊事件的委派 public class Button { public string name; public Button(string _name) { name = _name; } // 在物件內部定義一個委派存放事件 private event EventHandler Click; public notify() { // 執行委派 // Handler.Invoke(this, e); Handler(this, e); } } // 註冊事件的傳參需與委派的傳參一致 private static void Click(object sender, EventArgs e) { Console.WriteLine( sender.GetType() + \u0026#34; \u0026#34; + (e as HandleClickEventArgs)?.Message ); } public void static Main(string[] args) { EventArgs = new HandleClikEventArgs() { Message = \u0026#34;is clicked!\u0026#34; }; Button button = new Button(\u0026#34;TV Remote Button\u0026#34;); button.Click += new EventHandler(Click); button.Click += Click; button.Click += delegate { Console.WriteLine(\u0026#34;Check! Check!\u0026#34;); }; button.Click += (sender, e) =\u0026gt; Console.WriteLine( (sender as Button)?.name + \u0026#34; \u0026#34; + (e as HandleClickEventArgs)?.Message ); button.notify(e); // Button is clicked! // Button is clicked! // Check! Check! // TV Remote Button is clicked! } 注意到 Button 內有一個委派被定義為 delegate void function(object sender, EventArgs e)，並被命名為 Click，故我們會向它註冊事件。 在 C#1 中，完整的寫法是： button.Click += new EventHandler(Click); 在 C#2，透過 Method group conversion 可將其簡化成(條件是兩者的傳參要相同)： button.Click += Click; 如果方法較簡單也可以透過匿名方法(anonymous method)註冊： 需要傳參時： button.Click += delegate(object sender, EventArgs e) { Console.WriteLine(\u0026quot;Click!\u0026quot;); }; 不需要傳參時： button.Click += delegate { Console.WriteLine(\u0026quot;Click!\u0026quot;); }; 在 C#3 中，可以透過 Lambda 表達式來創建。 button.Click += (sender, e) =\u0026gt; Console.WriteLine(\u0026quot;Click!\u0026quot;); ","permalink":"https://intervalrain.github.io/csharp/delegate/","summary":"\u003ch2 id=\"1-委派語法\"\u003e1. 委派語法\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e委派 (Delegate) 類似於 C/C++ 中的函式指針，是可存有對某個方法的引用的一種引用類型變數。\u003c/li\u003e\n\u003cli\u003e宣告語法：\u003ccode\u003edelegate \u0026lt;return type\u0026gt; \u0026lt;delegate-name\u0026gt; \u0026lt;parameter list\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode class=\"language-Cs\" data-lang=\"Cs\"\u003e// 宣告一個委派，裝載 void function(string)\npublic delegate void PrintString(string text);\npublic static void Main(string[] args)\n{\n    // 新增一個委派事件，指向 ToUpperCase\n    PrintString e = new PrintString(ToUpperCase);\n    string text = \u0026#34;Hello World!\u0026#34;;\n    e.Invoke(text);\n    // HELLO WORLD!\n\n    // 將另一個事件加到委派中，指向 ToLowerCase   \n    e += ToLowerCase;\n    e.Invoke(text);\n    // HELLO WORLD!\n    // hello world!\n    \n    // 將委派中的 ToUpperCase 取消掉\n    e -= ToUpperCase;\n    e.Invoke(text);\n    // hello world!\n}\npublic static void ToUpperCase(string text) {\n    Console.WriteLine(text.ToUpper());\n}\npublic static void ToLowerCase(string text) =\u0026gt; Console.WriteLine(text.ToLower());\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"2-簡化事件註冊\"\u003e2. 簡化事件註冊\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e假設想為一個按鍵註冊事件：\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode class=\"language-Cs\" data-lang=\"Cs\"\u003e// 定義 EventHandler 為可以接收物件與傳參的委派\npublic delegate void EventHandler(object sender, EventArgs e);\n\n// 定義傳參可以儲存的內容\npublic class HandleClickEventArgs : EventArgs\n{\n    public string Message;\n}\n// 創建一個按鍵並為其創建一個可以註冊事件的委派\npublic class Button\n{\n    public string name;\n    public Button(string _name)\n    {\n        name = _name;\n    }\n    // 在物件內部定義一個委派存放事件\n    private event EventHandler Click;\n    public notify()\n    {\n        // 執行委派\n        // Handler.Invoke(this, e);\n        Handler(this, e);\n    }\n}\n// 註冊事件的傳參需與委派的傳參一致\nprivate static void Click(object sender, EventArgs e)\n{\n    Console.WriteLine(\n        sender.GetType() + \u0026#34; \u0026#34; + \n        (e as HandleClickEventArgs)?.Message\n    );\n}\npublic void static Main(string[] args)\n{\n    EventArgs = new HandleClikEventArgs()\n    {\n        Message = \u0026#34;is clicked!\u0026#34;\n    };\n        Button button = new Button(\u0026#34;TV Remote Button\u0026#34;);\n        button.Click += new EventHandler(Click);\n        button.Click += Click;\n        button.Click += delegate\n        {\n            Console.WriteLine(\u0026#34;Check! Check!\u0026#34;);\n        };\n        button.Click += (sender, e) =\u0026gt; Console.WriteLine(\n            (sender as Button)?.name + \u0026#34; \u0026#34; +\n            (e as HandleClickEventArgs)?.Message\n        );\n        button.notify(e);\n    // Button is clicked!\n    // Button is clicked!\n    // Check! Check!\n    // TV Remote Button is clicked!\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003e注意到 \u003ccode\u003eButton\u003c/code\u003e 內有一個委派被定義為 \u003ccode\u003edelegate void function(object sender, EventArgs e)\u003c/code\u003e，並被命名為 \u003ccode\u003eClick\u003c/code\u003e，故我們會向它註冊事件。\n\u003cul\u003e\n\u003cli\u003e在 C#1 中，完整的寫法是：\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ebutton.Click += new EventHandler(Click);\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e在 C#2，透過 Method group conversion 可將其簡化成(條件是兩者的傳參要相同)：\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ebutton.Click += Click;\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e如果方法較簡單也可以透過匿名方法(anonymous method)註冊：\n\u003cul\u003e\n\u003cli\u003e需要傳參時：\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ebutton.Click += delegate(object sender, EventArgs e) { Console.WriteLine(\u0026quot;Click!\u0026quot;); };\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e不需要傳參時：\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ebutton.Click += delegate { Console.WriteLine(\u0026quot;Click!\u0026quot;); };\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e在 C#3 中，可以透過 Lambda 表達式來創建。\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ebutton.Click += (sender, e) =\u0026gt; Console.WriteLine(\u0026quot;Click!\u0026quot;);\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","title":"[C#] Delegate 委派"},{"content":"1. 簡寫 以後綴 ? 之前接在類型名稱後面，也就是 T? 可以視同為 Nullable\u0026lt;T\u0026gt; 舉例來說，下列四個變數類型名稱完全等價： Nullable\u0026lt;int\u0026gt; Nullable\u0026lt;int32\u0026gt; int? int32 2. 定義 Nullable 的核心程式碼為: public struct Nullable\u0026lt;T\u0026gt; where struct // 類型約束為非空值類型 { private readonly T value; private readonly bool hasValue; public Nullable(T value) { this.value = value; this.hasValue = true; } public bool HasValue { get { return hasValue; } } public T Value { get { if (!hasValue) { threw new InvalidOperationException(); } return value; } } } 由於 Nullable 的空值定義為 hasValue == false, 故以下兩者為等價 int? x = new int?(); int? x = null; 3. 轉換 允許 T 到 Nullable 的隱式轉換 int x = 5; int? y = x; 允許 Nullable 到 T 的顯式轉換 int? x = 5; int y = (int)x; 通過填充 null 值擴展已有功能的過程稱為 提升 lifting。\nC# 允許對非可空類型 T 做運算子重載，但 Nullable\u0026lt;T\u0026gt; 同時也會重載相同的運算子，稱為 提升運算子 lifting operator。\n可重載的運算子包含： 一元運算子： +, ++, -, --, !, ~, true, false 二元運算子： +, -, *, /, %, \u0026amp;, |, ^, \u0026gt;\u0026gt;, \u0026lt;\u0026lt; 等價運算子： ==, != 關係運算子： \u0026lt;, \u0026gt;, \u0026lt;=, \u0026gt;= 提升運算子的規則： true 和 false 運算子不能被提升。 T 必須是非可空值，其運算子才能被提升。 對於等價運算子和關係運算子，原運算子的返回類型必須是 bool 類型 對於 Nullable\u0026lt;bool\u0026gt; 的 \u0026amp; 與 | 運算子有單獨定義 提升運算子範例： int? nullInt = null; int? five = 5; int? four = 4; Console.WriteLine(-nullInt); // null Console.WriteLine(-five); // -5 Console.WriteLine(five + nullInt); // null Console.WriteLine(five + four); // 4 Console.WriteLine(four \u0026amp; nullInt); // null Console.WriteLine(four \u0026amp; five); // 4 Console.WriteLine(nullInt == nullInt); // true Console.WriteLine(five == five); // true Console.WriteLine(five == nullInt); // false Console.WriteLine(five == four); // false Console.WriteLine(four \u0026lt; five); // true Console.WriteLine(nullInt \u0026lt; five); // false Console.WriteLine(four \u0026lt; nullInt); // false Console.WriteLine(nullInt \u0026lt; nullInt); // false Console.WriteLine(nullInt \u0026lt;= nullInt); // false 可空值邏輯真值表： x y x\u0026amp;y x|y x^y !x true true true true false false true false false true true false true null null true null false false true false true true true false false false false false true false null false null null true null true null true null null null false false null null null null null null null null null 注意 C# 2中，比較操作的結果不能為 null\n在 SQL 中，比較中的兩者中若有一者為 null 則結果不能預期\n4. as 運算子 在 C# 2，as 除了可用於物件，也可用於可空值類型。 當原始引用的類型不匹配，或為 null 時，返回 null 值： public static void Main() { object[] obj = new object[]{ null, \u0026#34;3\u0026#34;, \u0026#39;3\u0026#39;, 3, 5.5 }; foreach (var o in obj) print(o); } public static void print(object o) { int? num = o as int?; Console.WriteLine(num.HasValue ? num : \u0026#34;something\u0026#34;); } // something // something // something // 3 // something 5. ?? 運算子 當 ?? 前非 null 時依原本的值代入，若為 null 則以 ?? 後的值代入。 int a = 5; int? b = 10; int? c = null; Console.WriteLine(\u0026#34;a + b = {0}\u0026#34;, a + (b ?? 0)); // 15 Console.WriteLine(\u0026#34;a + b = {0}\u0026#34;, a + (c ?? 0)); // 5 6. ?. 運算子 當 ?. 前為非 null 時，繼續往下做，可連續 List\u0026lt;int\u0026gt; a = null; List\u0026lt;int\u0026gt; b = default; List\u0026lt;int\u0026gt; c = new List\u0026lt;int\u0026gt;{ 1,3,5,7,9 }; Console.WriteLine(a?.Count); // Console.WriteLine(b?.Count); // Console.WriteLine(c?.Count); // 5 ","permalink":"https://intervalrain.github.io/csharp/nullable/","summary":"\u003ch2 id=\"1-簡寫\"\u003e1. 簡寫\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e以後綴 \u003ccode\u003e?\u003c/code\u003e 之前接在類型名稱後面，也就是 \u003ccode\u003eT?\u003c/code\u003e 可以視同為 \u003ccode\u003eNullable\u0026lt;T\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e舉例來說，下列四個變數類型名稱完全等價：\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eNullable\u0026lt;int\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eNullable\u0026lt;int32\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eint?\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eint32\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"2-定義\"\u003e2. 定義\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eNullable 的核心程式碼為:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode class=\"language-Cs\" data-lang=\"Cs\"\u003epublic struct Nullable\u0026lt;T\u0026gt; where struct  // 類型約束為非空值類型\n{\n    private readonly T value;\n    private readonly bool hasValue;\n\n    public Nullable(T value)\n    {\n        this.value = value;\n        this.hasValue = true;\n    }\n    public bool HasValue { get { return hasValue; } }\n    public T Value\n    {\n        get\n        {\n            if (!hasValue)\n            {\n                threw new InvalidOperationException();\n            }\n            return value;\n        }\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003e由於 Nullable 的空值定義為 \u003ccode\u003ehasValue == false\u003c/code\u003e, 故以下兩者為等價\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eint? x = new int?();\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eint? x = null;\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"3-轉換\"\u003e3. 轉換\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e允許 T 到 Nullable\u003cT\u003e 的隱式轉換\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode class=\"language-Cs\" data-lang=\"Cs\"\u003eint x = 5;\nint? y = x;\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003e允許 Nullable\u003cT\u003e 到 T 的顯式轉換\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode class=\"language-Cs\" data-lang=\"Cs\"\u003eint? x = 5;\nint y = (int)x;\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e通過填充 null 值擴展已有功能的過程稱為 \u003cstrong\u003e提升 lifting\u003c/strong\u003e。\u003c/p\u003e","title":"[C#] Nullable 可空值類型"},{"content":"1. 數組到泛型集合 數組缺少初始化時大小的彈性 string[] names = new string[4]; // 需指定大小 普通對象集合缺少類型安全 ArrayList names = new ArrayList(); names.AddRange(new object[] { \u0026#34;Rose\u0026#34;, \u0026#34;Jack\u0026#34;, new int?(5) // 可合法進行編譯, 因為符合 object }); foreach (string name in names) Console.WriteLine(name); // 缺少型別檢查, 在執行隱性類型轉換(int? 轉 string)時會出錯 專用對象集合缺少撰寫程式碼的靈活性(如無法以靜態方式寫通用方法)、且維護成本較高 StringCollection names = new StringCollection(); names.AddRange(new string[] { \u0026#34;Rose\u0026#34;, \u0026#34;Jack\u0026#34;, \u0026#34;Gozilla\u0026#34; }); static void printNames(StringCollection names) { foreach (string name in names) Console.WriteLine(name); } 泛型可以解決以上問題 在初始化時不須先設定大小 在添加錯誤型別的元素，在編譯時期就會報錯 兼容各種類型，省去撰寫與維護的成本 List\u0026lt;string\u0026gt; names = new List\u0026lt;string\u0026gt;{ \u0026#34;Rose\u0026#34;, \u0026#34;Jack\u0026#34;, \u0026#34;Gozilla\u0026#34; }; static void printList(List\u0026lt;T\u0026gt; list) { foreach (T item in list) Console.WriteLine(item); } 2. 靜態方法取代建構式 由於在泛型函式調用時，會進行類型推斷，故可以透過靜態方法簡化建構式，可以省去指定泛型類型： // 靜態泛型函式 public static Tuple\u0026lt;T1, T2\u0026gt; CreateTuple(T1 item1, T2 item2) { return new Tuple\u0026lt;T1, T2\u0026gt;(item1, item2); } // 泛型建構式 var tuple1 = new Tuple\u0026lt;string, int\u0026gt;(\u0026#34;Jack\u0026#34;, 18); var tuple2 = CreateTuple(\u0026#34;Jack\u0026#34;, 18); // 由於類型推斷, 省去寫泛型型別 3. 類型約束 類型約束可用來限制類型實參的類別： public static void SortList\u0026lt;T\u0026gt;(List\u0026lt;T\u0026gt; items) where T : IComparable\u0026lt;T\u0026gt; { // 因為限定 T 需要繼承 IComparable, 所以可以叫用其 CompareTo 方法 items.Sort((x,y) =\u0026gt; x.CompareTo(y)); } 4. 泛型類型的初始化與狀態 List\u0026lt;int\u0026gt; 與 List\u0026lt;string\u0026gt; 雖油桐一個泛型類型 List\u0026lt;T\u0026gt; 限定，但在執行期會被當作兩個不同的類型 範例1. 用 typeof 測試 public static void PrintType\u0026lt;T\u0026gt;() { Console.WriteLine($\u0026#34;typeof(T) = {typeof(T)}\u0026#34;); Console.WriteLine($\u0026#34;typeof(List\u0026lt;T\u0026gt;) = {typeof(List\u0026lt;T\u0026gt;)}\u0026#34;); } public static void Main() { PrintType\u0026lt;string\u0026gt;(); PrintType\u0026lt;int\u0026gt;(); } // typeof(T) = System.String // typeof(List\u0026lt;T\u0026gt;) = System.Collections.Generic.List`1[System.String] // typeof(T) = System.Int32 // typeof(List\u0026lt;T\u0026gt;) = System.Collections.Generic.List`1[System.Int32] 範例2. 檢查靜態域 class GenericCounter\u0026lt;T\u0026gt; { private static int value; static GenericCounter() { Console.WriteLine($\u0026#34;Initializing counter for {typeof(T)}\u0026#34;); } public static void Increment() { value++; } public static void Display() { Console.WriteLine($\u0026#34;Counter for {typeof(T)}: {value}\u0026#34;); } } public static void Main() { GenericCounter\u0026lt;string\u0026gt;.Increment(); GenericCounter\u0026lt;string\u0026gt;.Increment(); GenericCounter\u0026lt;string\u0026gt;.Display(); GenericCounter\u0026lt;int\u0026gt;.Display(); GenericCounter\u0026lt;int\u0026gt;.Increment(); GenericCounter\u0026lt;int\u0026gt;.Display(); } // Initializing counter for System.String // Counter for System.String: 2 // Initializing counter for System.Int32 // Counter for System.Int32: 0 // Counter for System.Int32: 1 ","permalink":"https://intervalrain.github.io/csharp/generic/","summary":"\u003ch2 id=\"1-數組到泛型集合\"\u003e1. 數組到泛型集合\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e數組缺少初始化時大小的彈性\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode class=\"language-Cs\" data-lang=\"Cs\"\u003estring[] names = new string[4];     // 需指定大小\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003e普通對象集合缺少類型安全\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode class=\"language-Cs\" data-lang=\"Cs\"\u003e    ArrayList names = new ArrayList();\n    names.AddRange(new object[]\n    {\n        \u0026#34;Rose\u0026#34;,\n        \u0026#34;Jack\u0026#34;,\n        new int?(5)     // 可合法進行編譯, 因為符合 object\n    });\n    foreach (string name in names) Console.WriteLine(name); \n    // 缺少型別檢查, 在執行隱性類型轉換(int? 轉 string)時會出錯\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003e專用對象集合缺少撰寫程式碼的靈活性(如無法以靜態方式寫通用方法)、且維護成本較高\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode class=\"language-Cs\" data-lang=\"Cs\"\u003e    StringCollection names = new StringCollection();\n    names.AddRange(new string[]\n    {\n        \u0026#34;Rose\u0026#34;,\n        \u0026#34;Jack\u0026#34;,\n        \u0026#34;Gozilla\u0026#34;\n    });\n    static void printNames(StringCollection names) \n    {\n        foreach (string name in names) Console.WriteLine(name);\n    }\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003e泛型可以解決以上問題\n\u003col\u003e\n\u003cli\u003e在初始化時不須先設定大小\u003c/li\u003e\n\u003cli\u003e在添加錯誤型別的元素，在編譯時期就會報錯\u003c/li\u003e\n\u003cli\u003e兼容各種類型，省去撰寫與維護的成本\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode class=\"language-Cs\" data-lang=\"Cs\"\u003eList\u0026lt;string\u0026gt; names = new List\u0026lt;string\u0026gt;{\n    \u0026#34;Rose\u0026#34;,\n    \u0026#34;Jack\u0026#34;,\n    \u0026#34;Gozilla\u0026#34;\n};\nstatic void printList(List\u0026lt;T\u0026gt; list) {\n    foreach (T item in list) Console.WriteLine(item);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"2-靜態方法取代建構式\"\u003e2. 靜態方法取代建構式\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e由於在泛型函式調用時，會進行類型推斷，故可以透過靜態方法簡化建構式，可以省去指定泛型類型：\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode class=\"language-Cs\" data-lang=\"Cs\"\u003e// 靜態泛型函式\npublic static Tuple\u0026lt;T1, T2\u0026gt; CreateTuple(T1 item1, T2 item2) \n{\n    return new Tuple\u0026lt;T1, T2\u0026gt;(item1, item2);\n}\n// 泛型建構式   \nvar tuple1 = new Tuple\u0026lt;string, int\u0026gt;(\u0026#34;Jack\u0026#34;, 18);\nvar tuple2 = CreateTuple(\u0026#34;Jack\u0026#34;, 18);   // 由於類型推斷, 省去寫泛型型別\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"3-類型約束\"\u003e3. 類型約束\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e類型約束可用來限制類型實參的類別：\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode class=\"language-Cs\" data-lang=\"Cs\"\u003epublic static void SortList\u0026lt;T\u0026gt;(List\u0026lt;T\u0026gt; items) where T : IComparable\u0026lt;T\u0026gt;\n{\n    // 因為限定 T 需要繼承 IComparable, 所以可以叫用其 CompareTo 方法\n    items.Sort((x,y) =\u0026gt; x.CompareTo(y));\n}\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"4-泛型類型的初始化與狀態\"\u003e4. 泛型類型的初始化與狀態\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eList\u0026lt;int\u0026gt;\u003c/code\u003e 與 \u003ccode\u003eList\u0026lt;string\u0026gt;\u003c/code\u003e 雖油桐一個泛型類型 \u003ccode\u003eList\u0026lt;T\u0026gt;\u003c/code\u003e 限定，但在執行期會被當作兩個不同的類型\n\u003cul\u003e\n\u003cli\u003e範例1. 用 typeof 測試\n\u003cpre tabindex=\"0\"\u003e\u003ccode class=\"language-Cs\" data-lang=\"Cs\"\u003epublic static void PrintType\u0026lt;T\u0026gt;()\n{\n    Console.WriteLine($\u0026#34;typeof(T) = {typeof(T)}\u0026#34;);\n    Console.WriteLine($\u0026#34;typeof(List\u0026lt;T\u0026gt;) = {typeof(List\u0026lt;T\u0026gt;)}\u0026#34;);\n}\npublic static void Main()\n{\n    PrintType\u0026lt;string\u0026gt;();\n    PrintType\u0026lt;int\u0026gt;();\n}  \n// typeof(T) = System.String\n// typeof(List\u0026lt;T\u0026gt;) = System.Collections.Generic.List`1[System.String]\n// typeof(T) = System.Int32\n// typeof(List\u0026lt;T\u0026gt;) = System.Collections.Generic.List`1[System.Int32]  \n\u003c/code\u003e\u003c/pre\u003e\u003c/li\u003e\n\u003cli\u003e範例2. 檢查靜態域\n\u003cpre tabindex=\"0\"\u003e\u003ccode class=\"language-Cs\" data-lang=\"Cs\"\u003eclass GenericCounter\u0026lt;T\u0026gt;\n{\n    private static int value;\n    static GenericCounter()\n    {\n        Console.WriteLine($\u0026#34;Initializing counter for {typeof(T)}\u0026#34;);\n    }\n    public static void Increment()\n    {\n        value++;\n    }\n    public static void Display()\n    {\n        Console.WriteLine($\u0026#34;Counter for {typeof(T)}: {value}\u0026#34;);\n    }\n}\npublic static void Main()\n{\n    GenericCounter\u0026lt;string\u0026gt;.Increment();\n    GenericCounter\u0026lt;string\u0026gt;.Increment();\n    GenericCounter\u0026lt;string\u0026gt;.Display();\n    GenericCounter\u0026lt;int\u0026gt;.Display();\n    GenericCounter\u0026lt;int\u0026gt;.Increment();\n    GenericCounter\u0026lt;int\u0026gt;.Display();\n}\n// Initializing counter for System.String\n// Counter for System.String: 2\n// Initializing counter for System.Int32\n// Counter for System.Int32: 0\n// Counter for System.Int32: 1\n\u003c/code\u003e\u003c/pre\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","title":"[C#] Generic 泛型"},{"content":" 與這本書的相遇是某次在 Costco 瞎逛，隨手拿起來翻了幾頁，卻改變了我的人生觀。\n戒菸的人 書中最令我印象深刻的一個例子是，書中提到，習慣的演成，在於你怎麼定義三個核心觀念，這三個核心便是：\n目標：戒菸 過程：花費減半 角色定位：戒菸的人 以戒菸為例，我的目標是戒菸，所以我制定了一個戒菸的過程，比方說每個禮拜花費在買菸的錢減少一半，那麼有一天，我會達到戒菸的目的，而我的角色定位，是「戒菸的人」。\n若某天，在某個應酬的場合，朋友遞上了菸。\n「我在戒菸。」我說。\n「哎呀！三八！明天再戒，難得聚在一起。」\n「好吧！就一根。」我說。\n那麼我便在這個戒菸的過程，因為壞的習慣而達成不了目標，因為在定義自己的角色定位是，「戒菸的人」，暗示了自己，還是在抽菸。\n但若今天我將三個核心翻轉，我先定義自己的角色定位，再設定過程，最後自然而然的達成目標，那麼心境上便完全不一樣了。\n角色定位：不抽菸的人 過程：我不碰菸 目標：戒菸\n同樣地，在同樣的應酬場合，朋友遞上了菸。\n「我不抽菸。」我說。 我說這樣的答案，應該很難有人會硬把菸塞到你手裡。 生病的人 自從大一下學期，被診斷出慢性腎炎，我便為自己貼上了「生病的人」的標籤，從此之後，我便開始把體力變差怪罪於生病的緣故，故開始怠惰於運動，而因為不運動，導致體力愈來愈差，惡性循環。直至今日，出社會四年，我幾乎沒有再碰過籃球，儘管我一直視籃球是我最喜愛的運動，甚至在大學前兩年，我都還很積極的參與系隊，且當了系隊的副隊長。但是因為一個念頭的差異，便會對一個人的生活產生重大的轉變。\n「生病的人」這個標籤，對我的生活造成的影響，是全面的影響，甚至造成我個性上的歧變，從活潑外向變成陰陰鬱自卑，對很多事情都沒有信心，我害怕被異樣看待，所以把「秘密」封鎖起來，同時也把自己關起來，最終，心理的不健康與對疾病的抗拒，轉化成表象 \u0026ndash; 我從外觀上看起來就變成一個生病的人。\n直到我開始接受、認識它，我才感受到明顯的變化。我的確是生病的人，但它並不影響我是個什麼樣的人，的確生活會產生有些不便，但是人生要過得怎麼樣，還是由自己決定的。我只是一個需要比較多時間充電，當我充滿了電，其實就跟普通人沒什麼兩樣吧。\n獨特的人 出社會第 4 年，我從半導體研發工程師轉職成軟體開發工程師。起初是因為我需要常常回診的緣故，我需要準時上下班，而繁忙的工作，可能會因為我的時間限制而拖延，所以我開始在放個的時間，研究怎麼將手上的工作自動化，加上小時候寫過遊戲外掛的經驗，很快的就對程式語言上手。我開始著手於自動將數據自動的變成報表、圖像，更甚至自動輸出成報告，在這過程中我開始感受到寫程式的美好，因為寫程式可以讓我突破時間的限制，讓我可以快速的統整數據，使我有更多的時間專注於其它的研究上。同時我也開始著迷於演算法，怎麼在快速的自動化中，再偷取更多時間，為自己爭取更多時間。我從小工具開始，到著手一個人進行專案的開發，到現在，著手一個團隊進行的專案，我想我已經可以稱作一個軟體開發工程師。\n對社會而言，若相入為主的看待一個人是「生病的人」，往往會認為他沒有作為，需要被可憐。 在同樣的環境中，就算有著同樣的能力，也常常因為標籤而被眨視。但是我必須要撕掉標籤，致力於發展自己的獨特性，在生活也好、工作也好，在人生中當自己的主人。在同樣的環境中，我有著獨特的能力，那麼我的標籤就會被換掉。我不是生病的人，我是獨特的人。\n","permalink":"https://intervalrain.github.io/life/20230218/","summary":"\u003cblockquote\u003e\n\u003cp\u003e與這本書的相遇是某次在 Costco 瞎逛，隨手拿起來翻了幾頁，卻改變了我的人生觀。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"戒菸的人\"\u003e戒菸的人\u003c/h3\u003e\n\u003cp\u003e書中最令我印象深刻的一個例子是，書中提到，習慣的演成，在於你怎麼定義三個核心觀念，這三個核心便是：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e目標：戒菸\u003c/li\u003e\n\u003cli\u003e過程：花費減半\u003c/li\u003e\n\u003cli\u003e角色定位：\u003cstrong\u003e戒菸的人\u003c/strong\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e以戒菸為例，我的目標是戒菸，所以我制定了一個戒菸的過程，比方說每個禮拜花費在買菸的錢減少一半，那麼有一天，我會達到戒菸的目的，而我的角色定位，是「戒菸的人」。\u003cbr\u003e\n若某天，在某個應酬的場合，朋友遞上了菸。\u003cbr\u003e\n「我在戒菸。」我說。\u003cbr\u003e\n「哎呀！三八！明天再戒，難得聚在一起。」\u003cbr\u003e\n「好吧！就一根。」我說。\u003cbr\u003e\n那麼我便在這個戒菸的過程，因為壞的習慣而達成不了目標，因為在定義自己的角色定位是，「戒菸的人」，暗示了自己，\u003cstrong\u003e還是在抽菸\u003c/strong\u003e。\u003cbr\u003e\n但若今天我將三個核心翻轉，我先定義自己的角色定位，再設定過程，最後自然而然的達成目標，那麼心境上便完全不一樣了。\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e角色定位：\u003cstrong\u003e不抽菸的人\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e過程：我不碰菸\u003c/li\u003e\n\u003cli\u003e目標：戒菸\u003cbr\u003e\n同樣地，在同樣的應酬場合，朋友遞上了菸。\u003cbr\u003e\n「我不抽菸。」我說。\n我說這樣的答案，應該很難有人會硬把菸塞到你手裡。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"生病的人\"\u003e生病的人\u003c/h3\u003e\n\u003cp\u003e自從大一下學期，被診斷出慢性腎炎，我便為自己貼上了「生病的人」的標籤，從此之後，我便開始把體力變差怪罪於生病的緣故，故開始怠惰於運動，而因為不運動，導致體力愈來愈差，惡性循環。直至今日，出社會四年，我幾乎沒有再碰過籃球，儘管我一直視籃球是我最喜愛的運動，甚至在大學前兩年，我都還很積極的參與系隊，且當了系隊的副隊長。但是因為一個念頭的差異，便會對一個人的生活產生重大的轉變。\u003c/p\u003e\n\u003cp\u003e「生病的人」這個標籤，對我的生活造成的影響，是全面的影響，甚至造成我個性上的歧變，從活潑外向變成陰陰鬱自卑，對很多事情都沒有信心，我害怕被異樣看待，所以把「秘密」封鎖起來，同時也把自己關起來，最終，心理的不健康與對疾病的抗拒，轉化成表象 \u0026ndash; \u003cstrong\u003e我從外觀上看起來就變成一個生病的人\u003c/strong\u003e。\u003c/p\u003e\n\u003cp\u003e直到我開始接受、認識它，我才感受到明顯的變化。我的確是生病的人，但它並不影響我是個什麼樣的人，的確生活會產生有些不便，但是人生要過得怎麼樣，還是由自己決定的。我只是一個需要比較多時間\u003cstrong\u003e充電\u003c/strong\u003e，當我充滿了電，其實就跟普通人沒什麼兩樣吧。\u003c/p\u003e\n\u003ch3 id=\"獨特的人\"\u003e獨特的人\u003c/h3\u003e\n\u003cp\u003e出社會第 4 年，我從半導體研發工程師轉職成軟體開發工程師。起初是因為我需要常常回診的緣故，我需要準時上下班，而繁忙的工作，可能會因為我的時間限制而拖延，所以我開始在放個的時間，研究怎麼將手上的工作自動化，加上小時候寫過遊戲外掛的經驗，很快的就對程式語言上手。我開始著手於自動將數據自動的變成報表、圖像，更甚至自動輸出成報告，在這過程中我開始感受到寫程式的美好，因為寫程式可以讓我突破時間的限制，讓我可以快速的統整數據，使我有更多的時間專注於其它的研究上。同時我也開始著迷於演算法，怎麼在快速的自動化中，再偷取更多時間，為自己爭取更多時間。我從小工具開始，到著手一個人進行專案的開發，到現在，著手一個團隊進行的專案，我想我已經可以稱作一個軟體開發工程師。\u003cbr\u003e\n對社會而言，若相入為主的看待一個人是「生病的人」，往往會認為他沒有作為，需要被可憐。\n在同樣的環境中，就算有著同樣的能力，也常常因為標籤而被眨視。但是我必須要撕掉標籤，致力於發展自己的獨特性，在生活也好、工作也好，在人生中當自己的主人。在同樣的環境中，我有著獨特的能力，那麼我的標籤就會被換掉。\u003cstrong\u003e我不是生病的人，我是獨特的人。\u003c/strong\u003e\u003c/p\u003e","title":"[Life] 原子習慣"},{"content":"一、回溯法 回溯法與 dfs 相當類似，本質上都是暴力窮舉的演算法，但細微的差異在於： dfs 在遍歷節點。 backtracking 在遍歷樹枝。 站在回溯樹上的一個節點，需要考慮的只有三件事情： 路徑 選擇 終止條件 以全排列問題([Leetcode] 46. permutation)來舉例 全排列問題即給定一組數組 nums，需返回這些數字的所有排列組合，舉例來說，給定一個數組 nums = [1,2,3]，那麼它可能的排列會有： [1,2,3] [1,3,2] [2,1,3] [2,3,1] [3,1,2] [3,2,1] 對應上圖的回溯樹來看，我們在每個樹的節點，都會面臨一次決策，站在樹的根時，相當於我們要選擇排列的第一位，而我們有三個選擇，即 1 或 2 或 3。若我們的第一位選擇了 1，代表我們選擇了 \\(\\text{x}_1=1\\) 的路徑，故接下來我們的選擇只剩下兩個，即 2 或 3。當我們繼續往下做，直到子葉節點時，代表我們已經沒有選擇可選，此時就是我們的終止條件。 回憶我們在二叉樹中練習過前序、中序、後序的思維，前序與後序代表我們在遍歷節點前與後的時間點，而在回溯法，這兩個時間點，各自代表了 將選擇加入路徑 從路徑中撤銷選擇 用二叉樹程式碼來說明即： void traverse(TreeNode* root){ if (!root) return; // preorder: do option traverse(root-\u0026gt;left); traverse(root-\u0026gt;right); // postorder: retrieve option } N-ary 樹： class Node{ int val; vector\u0026lt;Node*\u0026gt; children; }; void traverse(Node* root){ if (!root) return; for (Node* child : root-\u0026gt;children) { // preorder: do option traverse(child); // postorder: retrieve option } } 二、回溯法的框架 藉由上面的思維練習，我們可以拼湊出回溯法的基本框架： vector\u0026lt;Node*\u0026gt; path; vector\u0026lt;vector\u0026lt;Node*\u0026gt;\u0026gt; res; void backtrack(Node* root) { if (terminate_condition) { // 當終止條件時 res.push_back(path); // 將路徑加入結果 return; // 治原路徑返回 } for (auto\u0026amp; next : root-\u0026gt;children) { path.push_back(next); // 將選擇加入路徑 backtrack(next); path.pop_back(); // 從路徑中撤銷選擇 } } 試著解題[Leetcode] 46. permutation： void backtrack(vector\u0026lt;int\u0026gt;\u0026amp; nums, vector\u0026lt;bool\u0026gt;\u0026amp; visited, vector\u0026lt;int\u0026gt;\u0026amp; path) { if (path.size() == nums.size()) { res.push_back(path); return; } for (int i = 0; i \u0026lt; nums.size(); i++) { if (visited[i]) continue; visited[i] = true; path.push_back(nums[i]); backtrack(nums, visited, path); visited[i] = false; path.pop_back(); } } 三、例題 1. [Leetcode] 51. N-Queens 經典的 N-Queen 問題，在一個 N x N 的棋盤上，每個橫排、直排與斜線都不能出現 2 個以上的皇后，試求有幾種皇后的排法。 此題就可以用到回溯法，以 4 x 4 的棋盤為例，我們會建構一個深度為 16 的決策樹： 路徑：之前做過的選擇 選擇：選擇要放置皇后，或是不要放置皇后 終止條件：16 個棋格都走完(4列都走完) 注意：因為在第 i 列放了皇后，則同列的其它格子就不能放皇后了，故我們可以直接往第 i+1 列前進。故到了第 n 列，代表達到終止條件。 程式碼： int sz; vector\u0026lt;vector\u0026lt;string\u0026gt;\u0026gt; solveNQueens(int n) { sz = n; vector\u0026lt;vector\u0026lt;string\u0026gt;\u0026gt; res; vector\u0026lt;string\u0026gt; board(n, string(n, \u0026#39;.\u0026#39;)); backtrack(board, 0, res); return res; } void backtrack(vector\u0026lt;string\u0026gt;\u0026amp; board, int row, vector\u0026lt;vector\u0026lt;string\u0026gt;\u0026gt;\u0026amp; res){ if (row == sz){ // 終止條件：走完 n 行 res.push_back(board); return; } for (int col = 0; col \u0026lt; sz; col++){ if (!isValid(board, row, col)) continue; board[row][col] = \u0026#39;Q\u0026#39;; // 放皇后 backtrack(board, row+1, res); board[row][col] = \u0026#39;.\u0026#39;; // 撤銷皇后 } } // 直行、橫列、斜線都不能出線皇后 bool isValid(vector\u0026lt;string\u0026gt;\u0026amp; board, int\u0026amp; row, int\u0026amp; col){ if (row == sz) return true; for (int i = row - 1; i \u0026gt;= 0; i--) if (board[i][col] == \u0026#39;Q\u0026#39;) return false; for (int i = row - 1, j = col - 1; i \u0026gt;= 0 \u0026amp;\u0026amp; j \u0026gt;= 0; i--, j--){ if (board[i][j] == \u0026#39;Q\u0026#39;) return false; } for (int i = row - 1, j = col + 1; i \u0026gt;= 0 \u0026amp;\u0026amp; j \u0026lt; sz; i--, j++){ if (board[i][j] == \u0026#39;Q\u0026#39;) return false; } return true; } 2. [Leetcode] 797. All Paths From Source to Target 給定一個 DAG(directed acyclic graph)，各用 0 到 n-1 的數字標示，找出所以可能從 0 走到 n-1 的路徑。其中 graph[i] 代表從 i 可以到達的下一個節點。 vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; allPathsSourceTarget(vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; graph) { vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; res; vector\u0026lt;int\u0026gt; path; path.push_back(0); // 站在起點 0 backtrack(graph, res, path, 0, -1); return res; } void backtrack(vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; graph, vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; res, vector\u0026lt;int\u0026gt;\u0026amp; path, int curr, int last) { if (curr == graph.size()-1) { // 到達終點 n-1 res.push_back(path); return; } for (const auto\u0026amp; next : graph[curr]) { // if (last == next) continue; // 若是 directed 或是 cyclic graph，需要避免走回頭路 path.push_back(next); // 做選擇 backtrack(graph, res, path, next, curr); path.pop_back(); // 做撤銷 } } 3. [Leetcode] 980. Unique Path III 機器人必須走過除了牆外的所有棋格，必且到達指定的位置，試求機器人有幾種走法。其中 1 代表起點。 2 代表終點。 0 代表空白棋格，即機器人必須要經過的棋格。 -1 代表牆，即機器人無須經過且不能經過的棋格。 注意此題的選擇、與撤銷的位置與框架中的前序、後序位置不同，試想會有什麼效果 int res; int uniquePathsIII(vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; grid) { res = 0; int m = grid.size(), n = grid[0].size(); // 先記錄機器人的起點與終點 pair\u0026lt;int,int\u0026gt; start, end; // 記錄機器人所需走多少步(選擇的次數): 棋格數-障礙-1 int left = m*n; for (int i = 0; i \u0026lt; m; i++) { for (int j = 0; j \u0026lt; n; j++) { if (grid[i][j] == 1) { start = {i, j}; left--; } else if (grid[i][j] == -1) { left--; } } } backtrack(grid, start.first, start.second, left); return res; } int dir[4][2] = {{1,0},{0,1},{-1,0},{0,-1}}; void backtrack(vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; grid, int row, int col, int left) { // 超出棋格、或是已經走過 if (row \u0026lt; 0 || row \u0026gt;= grid.size() || col \u0026lt; 0 || col \u0026gt;= grid[0].size() || grid[row][col] == -1) return; // 終止條件：到達目標且每一個空白棋格都走完(left == 0) if (grid[row][col] == 2 \u0026amp;\u0026amp; left == 0) { res++; return; } int tmp = grid[row][col]; // 做選擇 grid[row][col] = -1; // 做標記，代表已走過 for (const auto\u0026amp; d : dir) { backtrack(grid, row+d[0], col+d[1], left-1); } grid[row][col] = tmp; // 做撤銷 } 回到目錄：[Algo] 演算法筆記 想要複習：[Algo] 2-3. 分治法 接著閱讀：[Algo] 2-5. 動態規劃 ","permalink":"https://intervalrain.github.io/cs/algo/backtracking/","summary":"\u003ch2 id=\"一回溯法\"\u003e一、回溯法\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e回溯法與 \u003ccode\u003edfs\u003c/code\u003e 相當類似，本質上都是暴力窮舉的演算法，但細微的差異在於：\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003edfs\u003c/code\u003e 在遍歷\u003cstrong\u003e節點\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebacktracking\u003c/code\u003e 在遍歷\u003cstrong\u003e樹枝\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e站在回溯樹上的一個節點，需要考慮的只有三件事情：\n\u003col\u003e\n\u003cli\u003e路徑\u003c/li\u003e\n\u003cli\u003e選擇\u003c/li\u003e\n\u003cli\u003e終止條件\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003e以\u003ca href=\"https://leetcode.com/problems/permutations/\"\u003e全排列問題([Leetcode] 46. permutation)\u003c/a\u003e來舉例\n\u003cimg alt=\"permutation tree\" loading=\"lazy\" src=\"https://i.stack.imgur.com/9qEB6.jpg\"\u003e\n\u003cul\u003e\n\u003cli\u003e全排列問題即給定一組數組 \u003ccode\u003enums\u003c/code\u003e，需返回這些數字的所有排列組合，舉例來說，給定一個數組 \u003ccode\u003enums = [1,2,3]\u003c/code\u003e，那麼它可能的排列會有：\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e[1,2,3]\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e[1,3,2]\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e[2,1,3]\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e[2,3,1]\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e[3,1,2]\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e[3,2,1]\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e對應上圖的回溯樹來看，我們在每個樹的節點，都會面臨一次決策，站在樹的根時，相當於我們要選擇排列的第一位，而我們有三個\u003cstrong\u003e選擇\u003c/strong\u003e，即 \u003ccode\u003e1\u003c/code\u003e 或 \u003ccode\u003e2\u003c/code\u003e 或 \u003ccode\u003e3\u003c/code\u003e。若我們的第一位選擇了 \u003ccode\u003e1\u003c/code\u003e，代表我們選擇了 \\(\\text{x}_1=1\\) 的\u003cstrong\u003e路徑\u003c/strong\u003e，故接下來我們的選擇只剩下兩個，即 \u003ccode\u003e2\u003c/code\u003e 或 \u003ccode\u003e3\u003c/code\u003e。當我們繼續往下做，直到子葉節點時，代表我們已經沒有選擇可選，此時就是我們的\u003cstrong\u003e終止條件\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e回憶我們在二叉樹中練習過\u003ca href=\"/cs/algo/binary_tree/#%E4%BA%8C%E5%89%8D%E5%BA%8F%E4%B8%AD%E5%BA%8F%E5%BE%8C%E5%BA%8F\"\u003e前序、中序、後序\u003c/a\u003e的思維，前序與後序代表我們在遍歷節點\u003cstrong\u003e前\u003c/strong\u003e與\u003cstrong\u003e後\u003c/strong\u003e的時間點，而在回溯法，這兩個時間點，各自代表了\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e將選擇加入路徑\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e從路徑中撤銷選擇\u003c/strong\u003e\n\u003cimg alt=\"order_traversal\" loading=\"lazy\" src=\"https://labuladong.github.io/algo/images/backtracking/4.jpg\"\u003e\n\u003cimg alt=\"backtrack_option\" loading=\"lazy\" src=\"https://labuladong.github.io/algo/images/backtracking/5.jpg\"\u003e\u003c/li\u003e\n\u003cli\u003e用二叉樹程式碼來說明即：\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Cpp\" data-lang=\"Cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etraverse\u003c/span\u003e(TreeNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e root){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003eroot) \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// preorder: do option\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    traverse(root\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eleft);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    traverse(root\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eright);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// postorder: retrieve option\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eN-ary 樹：\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Cpp\" data-lang=\"Cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eNode\u003c/span\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e val;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eNode\u003cspan style=\"color:#f92672\"\u003e*\u0026gt;\u003c/span\u003e children;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etraverse\u003c/span\u003e(Node\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e root){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003eroot) \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (Node\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e child : root\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003echildren) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// preorder: do option\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        traverse(child);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// postorder: retrieve option\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"二回溯法的框架\"\u003e二、回溯法的框架\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e藉由上面的思維練習，我們可以拼湊出回溯法的基本框架：\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Cpp\" data-lang=\"Cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003evector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eNode\u003cspan style=\"color:#f92672\"\u003e*\u0026gt;\u003c/span\u003e path;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003evector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003evector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eNode\u003cspan style=\"color:#f92672\"\u003e*\u0026gt;\u0026gt;\u003c/span\u003e res;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ebacktrack\u003c/span\u003e(Node\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e root) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (terminate_condition) {  \u003cspan style=\"color:#75715e\"\u003e// 當終止條件時\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        res.push_back(path);    \u003cspan style=\"color:#75715e\"\u003e// 將路徑加入結果\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e;                 \u003cspan style=\"color:#75715e\"\u003e// 治原路徑返回\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eauto\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e next : root\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003echildren) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        path.push_back(next);   \u003cspan style=\"color:#75715e\"\u003e// 將選擇加入路徑\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        backtrack(next);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        path.pop_back();        \u003cspan style=\"color:#75715e\"\u003e// 從路徑中撤銷選擇\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e試著解題\u003ca href=\"https://leetcode.com/problems/permutations/\"\u003e[Leetcode] 46. permutation\u003c/a\u003e：\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Cpp\" data-lang=\"Cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ebacktrack\u003c/span\u003e(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e nums, vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003ebool\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e visited, vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e path) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (path.size() \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e nums.size()) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        res.push_back(path);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e nums.size(); i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (visited[i]) \u003cspan style=\"color:#66d9ef\"\u003econtinue\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        visited[i] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e true;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        path.push_back(nums[i]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        backtrack(nums, visited, path);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        visited[i] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e false;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        path.pop_back();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"三例題\"\u003e三、例題\u003c/h2\u003e\n\u003ch3 id=\"1-leetcode-51-n-queenshttpsleetcodecomproblemsn-queens\"\u003e1. \u003ca href=\"https://leetcode.com/problems/n-queens/\"\u003e[Leetcode] 51. N-Queens\u003c/a\u003e\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e經典的 N-Queen 問題，在一個 N x N 的棋盤上，每個橫排、直排與斜線都不能出現 2 個以上的皇后，試求有幾種皇后的排法。\n\u003cimg alt=\"nqueen\" loading=\"lazy\" src=\"https://assets.leetcode.com/uploads/2020/11/13/queens.jpg\"\u003e\u003c/li\u003e\n\u003cli\u003e此題就可以用到回溯法，以 4 x 4 的棋盤為例，我們會建構一個深度為 16 的決策樹：\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e路徑\u003c/strong\u003e：之前做過的選擇\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e選擇\u003c/strong\u003e：選擇要放置皇后，或是不要放置皇后\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e終止條件\u003c/strong\u003e：16 個棋格都走完(4列都走完)\u003c/li\u003e\n\u003cli\u003e注意：因為在第 \u003ccode\u003ei\u003c/code\u003e 列放了皇后，則同列的其它格子就不能放皇后了，故我們可以直接往第 \u003ccode\u003ei+1\u003c/code\u003e 列前進。故到了第 \u003ccode\u003en\u003c/code\u003e 列，代表達到終止條件。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e程式碼：\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Cpp\" data-lang=\"Cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e sz;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003evector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003evector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003estring\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e solveNQueens(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    sz \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e n;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003evector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003estring\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e res;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003estring\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e board(n, string(n, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;.\u0026#39;\u003c/span\u003e));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    backtrack(board, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, res);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e res;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ebacktrack\u003c/span\u003e(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003estring\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e board, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e row, vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003evector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003estring\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u0026amp;\u003c/span\u003e res){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (row \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e sz){         \u003cspan style=\"color:#75715e\"\u003e// 終止條件：走完 n 行\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        res.push_back(board);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e col \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; col \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e sz; col\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003eisValid(board, row, col)) \u003cspan style=\"color:#66d9ef\"\u003econtinue\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        board[row][col] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;Q\u0026#39;\u003c/span\u003e;      \u003cspan style=\"color:#75715e\"\u003e// 放皇后\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        backtrack(board, row\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, res);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        board[row][col] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;.\u0026#39;\u003c/span\u003e;      \u003cspan style=\"color:#75715e\"\u003e// 撤銷皇后\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 直行、橫列、斜線都不能出線皇后\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003ebool\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eisValid\u003c/span\u003e(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003estring\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e board, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e row, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e col){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (row \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e sz) \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e true;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e row \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (board[i][col] \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;Q\u0026#39;\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e false;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e row \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, j \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e col \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e j \u003cspan style=\"color:#f92672\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003e, j\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (board[i][j] \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;Q\u0026#39;\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e false;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e row \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, j \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e col \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e j \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e sz; i\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003e, j\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (board[i][j] \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;Q\u0026#39;\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e false;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e true;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"2-leetcode-797-all-paths-from-source-to-targethttpsleetcodecomproblemsall-paths-from-source-to-target\"\u003e2. \u003ca href=\"https://leetcode.com/problems/all-paths-from-source-to-target/\"\u003e[Leetcode] 797. All Paths From Source to Target\u003c/a\u003e\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e給定一個 DAG(directed acyclic graph)，各用 \u003ccode\u003e0\u003c/code\u003e 到 \u003ccode\u003en-1\u003c/code\u003e 的數字標示，找出所以可能從 \u003ccode\u003e0\u003c/code\u003e 走到 \u003ccode\u003en-1\u003c/code\u003e 的路徑。其中 \u003ccode\u003egraph[i]\u003c/code\u003e 代表從 \u003ccode\u003ei\u003c/code\u003e 可以到達的下一個節點。\n\u003cimg alt=\"dag\" loading=\"lazy\" src=\"https://assets.leetcode.com/uploads/2020/09/28/all_1.jpg\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Cpp\" data-lang=\"Cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003evector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003evector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e allPathsSourceTarget(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003evector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u0026amp;\u003c/span\u003e graph) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003evector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e res;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e path;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    path.push_back(\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e);      \u003cspan style=\"color:#75715e\"\u003e// 站在起點 0\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    backtrack(graph, res, path, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e res;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ebacktrack\u003c/span\u003e(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003evector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u0026amp;\u003c/span\u003e graph, vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003evector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u0026amp;\u003c/span\u003e res, vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e path, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e curr, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e last) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (curr \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e graph.size()\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e) {       \u003cspan style=\"color:#75715e\"\u003e// 到達終點 n-1\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        res.push_back(path);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eauto\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e next : graph[curr]) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// if (last == next) continue;      // 若是 directed 或是 cyclic graph，需要避免走回頭路\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        path.push_back(next);               \u003cspan style=\"color:#75715e\"\u003e// 做選擇\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        backtrack(graph, res, path, next, curr);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        path.pop_back();                    \u003cspan style=\"color:#75715e\"\u003e// 做撤銷\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"3-leetcode-980-unique-path-iiihttpsleetcodecomproblemsunique-paths-iii\"\u003e3. \u003ca href=\"https://leetcode.com/problems/unique-paths-iii/\"\u003e[Leetcode] 980. Unique Path III\u003c/a\u003e\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e機器人必須走過除了牆外的所有棋格，必且到達指定的位置，試求機器人有幾種走法。其中\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e1\u003c/code\u003e 代表起點。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e2\u003c/code\u003e 代表終點。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e0\u003c/code\u003e 代表空白棋格，即機器人必須要經過的棋格。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e-1\u003c/code\u003e 代表牆，即機器人無須經過且不能經過的棋格。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e注意此題的選擇、與撤銷的位置與框架中的前序、後序位置不同，試想會有什麼效果\n\u003cimg alt=\"unique_path_iii\" loading=\"lazy\" src=\"https://assets.leetcode.com/uploads/2021/08/02/lc-unique1.jpg\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Cpp\" data-lang=\"Cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e res;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003euniquePathsIII\u003c/span\u003e(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003evector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u0026amp;\u003c/span\u003e grid) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    res \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e m \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e grid.size(), n \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e grid[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e].size();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// 先記錄機器人的起點與終點\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    pair\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e,\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e start, end;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// 記錄機器人所需走多少步(選擇的次數): 棋格數-障礙-1\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e left \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e m\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003en;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e m; i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e j \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; j \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e n; j\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (grid[i][j] \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                start \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {i, j};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                left\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (grid[i][j] \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                left\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    backtrack(grid, start.first, start.second, left);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e res;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e dir[\u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e][\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {{\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e},{\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e},{\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e},{\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e,\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e}};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ebacktrack\u003c/span\u003e(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003evector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u0026amp;\u003c/span\u003e grid, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e row, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e col, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e left) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// 超出棋格、或是已經走過\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (row \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e||\u003c/span\u003e row \u003cspan style=\"color:#f92672\"\u003e\u0026gt;=\u003c/span\u003e grid.size() \u003cspan style=\"color:#f92672\"\u003e||\u003c/span\u003e col \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e||\u003c/span\u003e col \u003cspan style=\"color:#f92672\"\u003e\u0026gt;=\u003c/span\u003e grid[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e].size() \u003cspan style=\"color:#f92672\"\u003e||\u003c/span\u003e grid[row][col] \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// 終止條件：到達目標且每一個空白棋格都走完(left == 0)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (grid[row][col] \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e left \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        res\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e tmp \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e grid[row][col];       \u003cspan style=\"color:#75715e\"\u003e// 做選擇\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    grid[row][col] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;            \u003cspan style=\"color:#75715e\"\u003e// 做標記，代表已走過\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eauto\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e d : dir) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        backtrack(grid, row\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003ed[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e], col\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003ed[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e], left\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    grid[row][col] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e tmp;           \u003cspan style=\"color:#75715e\"\u003e// 做撤銷\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003cul\u003e\n\u003cli\u003e回到目錄：\u003ca href=\"/cs/algo\"\u003e[Algo] 演算法筆記\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e想要複習：\u003ca href=\"/cs/algo/divice_and_conquer\"\u003e[Algo] 2-3. 分治法\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e接著閱讀：\u003ca href=\"/cs/algo/dp\"\u003e[Algo] 2-5. 動態規劃\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"[Algo] 2-4. 回溯法 Backtracking"},{"content":"一、分治法 分治法，簡而言之就是分而治之，把複雜的問題分成兩個或更多個相似或相似的子問題，直到子問題可以直接求解，最後再將子問題的解做合併。 三步驟：Divide、Conquer、Merge 以 pseudo code 來表示大概像： void func(collection set) { // 子問題求解 if (base_case) { // 根據要求將子問題解合併成母問題解 do_something return; } // 將母問題分解成子問題 for (collection subset : set) { func(subset); } } graph LR; 母問題--\u003e子問題1; 母問題--\u003e子問題2; subgraph Divide 子問題1--\u003e最小子問題1; 子問題1--\u003e最小子問題2; 子問題2--\u003e最小子問題3; 子問題2--\u003e最小子問題4; end subgraph Conquer 最小子問題1--\u003e最小子問題解1; 最小子問題2--\u003e最小子問題解2; 最小子問題3--\u003e最小子問題解3; 最小子問題4--\u003e最小子問題解4; end subgraph Merge 最小子問題解1--\u003e合併; 最小子問題解2--\u003e合併; 最小子問題解3--\u003e合併; 最小子問題解4--\u003e合併; end 合併--\u003e母問題解 舉例說明，河內塔遊戲： 河內塔是由三根桿子以大小不同碟片所組成的遊戲，僧人一次可以從一根桿子移動一個碟片到另一根桿子，但是小的碟片若放憂大的碟片下面會使得小的碟片裂開(也就是碟片只能由上而下從小排到大)，試問將一座塔從一根桿子完整的移動到另一根桿子需要移動多少次。 思考上面的情形，以三個碟片為例，若我們要從 A 到 C 移動一座塔，我們可以將之分解成「如何把上面兩個碟片移動到 B」，因為剩下的一個大碟片，可以很簡單的從 A 移動到 C。也就是說 f3(A-\u0026gt;C) = f2(A-\u0026gt;B) + f1(A-\u0026gt;C) + f2(B-\u0026gt;C)。 再更進一步，f2(A-\u0026gt;B) 和 f2(B-\u0026gt;C) 其實就是移動兩個碟片到另一座塔，所以可以分解成 f2(A-\u0026gt;C) = f1(A-\u0026gt;B) + f1(A-\u0026gt;C) + f1(B-\u0026gt;C)，至此，我們已經把 f3 都分解成可以代表一次移動的最小子問題的解 f1 了： graph TD; A[f3,A-\u003eC] B[f2,A-\u003eB] C[f1,A-\u003eC] D[f2,B-\u003eC] E[f1,A-\u003eC] F[f1,A-\u003eB] G[f1,C-\u003eB] H[f1,B-\u003eA] I[f1,B-\u003eC] J[f1,A-\u003eC] A--\u003eB A---\u003eC A--\u003eD B--\u003eE B--\u003eF B--\u003eG D--\u003eH D--\u003eI D--\u003eJ 故我們可以以數學方式證明：\n\\(\\begin{array}{l} T(n)=T(n-1)+T(1)+T(n-1)=2T(n-1)+T(1)\\\\ T(n-1)=T(n-2)+T(1)+T(n-2)=2T(n-2)+T(1)\\\\ T(n)=2[2T(n-2)+T(1)]+T(1)\\\\ T(n)=2\\times2T(n-2)+(1+2)T(1)\\\\ T(n)=2^k\\times T(n-k)+(1+2+\u0026hellip;+2^k)T(1)\\\\ 令k=n-1\\\\ T(n)=2^{n-1}\\times T(1)+(1+2+\u0026hellip;+2^{n-1})T(1)\\\\ T(n)=2^{n-1}\\times T(1)+\\frac{2^{n-1}-1}{2-1}T(1)\\\\ T(n)=(2^n-1)\\times T(1) \\end{array}\\) 得所需要的移動次數為 \\(2^n-1\\) 次 分治法的特色 要解決的問題有一定的規模 該問題可以分解成若干個規模較小的問題 可以找到一個 base case，可以直接求解(如上述數學證明的\\(T(1)\\)) 分解出來的子問題都是相互獨立的。(若有相依性，則無法使用分治法) 分治法的時間複雜度 將規模為 n 的問題分為 k個規模為 n/m 的子問題去解，那麼可以得到\n\\(T(n)=kT(n/m)+f(n)\\) 二、分治法的應用 1. 二元搜索法 Binary Search 令有一已排序的數列，欲查找該數列中是否有數值 x。 由於該數列已經過排序，所以我們無需遍歷整個數列，我們可以選擇每次挑選數列的中間值，若目標比中間值大，則選擇大的那側再繼續做篩選，此法稱為二元搜索法，其時間複雜度可以從線性搜索法的 \\(O(n)\\) 降低到 \\(O(n\\log n)\\)。 int binarySearch(vector\u0026lt;int\u0026gt;\u0026amp; nums, int target) { int left = 0, right = nums.size()-1; while (left \u0026lt;= right) { int mid = left + (right-left)/2; if (nums[mid] == target) return mid; else if (nums[mid] \u0026lt; target) left = mid + 1; else if (nums[mid] \u0026gt; target) right = mid - 1; } return -1; } 2. Strassen 矩陣乘法 試做一個矩陣\\(A\\)與矩陣\\(B\\)內積。 \\( A=\\left[\\begin{matrix}A_{11}\u0026amp;A_{12}\\\\A_{21}\u0026amp;A_{22}\\end{matrix}\\right], B=\\left[\\begin{matrix}B_{11}\u0026amp;B_{12}\\\\B_{21}\u0026amp;B_{22}\\end{matrix}\\right], C=\\left[\\begin{matrix}C_{11}\u0026amp;C_{12}\\\\C_{21}\u0026amp;C_{22}\\end{matrix}\\right],其中\\\\ \\left[\\begin{matrix}C_{11}\u0026amp;C_{12}\\\\C_{21}\u0026amp;C_{22}\\end{matrix}\\right]=\\left[\\begin{matrix}A_{11}\u0026amp;A_{12}\\\\A_{21}\u0026amp;A_{22}\\end{matrix}\\right]\\cdot\\left[\\begin{matrix}B_{11}\u0026amp;B_{12}\\\\B_{21}\u0026amp;B_{22}\\end{matrix}\\right] \\) 若通過一般展開可得\n\\( C_{11}=A_{11}\\cdot B_{11}+A_{12}\\cdot B_{21}\\\\ C_{12}=A_{11}\\cdot B_{12}+A_{12}\\cdot B_{22}\\\\ C_{21}=A_{21}\\cdot B_{11}+A_{22}\\cdot B_{21}\\\\ C_{22}=A_{21}\\cdot B_{12}+A_{22}\\cdot B_{22} \\) 從上可得計算兩個 \\(n\\cdot n\\) 的矩陣內積需要 兩個 \\(\\frac{n}{2}\\cdot\\frac{n}{2}\\) 的矩陣做 8 次的乘法加上 4 次的加法，其時間複雜度可以表示成： \\( T(n)=8T(\\frac{n}{2})+\\Theta(n^2)\\\\ T(\\frac{n}{2})=8T(\\frac{n}{4})+\\Theta({\\frac{n}{2}}^2)\\\\ T(n)=8\\left[{8T(\\frac{n}{4})+\\Theta({{(\\frac{n}{2}})}^2)}\\right]+\\Theta(n^2)\\\\ T(n)=8^2T(\\frac{n}{4})+\\Theta(n^2)+8\\Theta(\\frac{n^2}{4})=8^2T(\\frac{n}{4})+(1+2)\\Theta(n^2)\\\\ T(n)=8^kT(\\frac{n}{2^k})+(1+2+\u0026hellip;+2^{k-1})\\Theta(n^2)\\\\ 令n=2^k\\\\ T(n)=n^3T(1)+(\\frac{n/2-1}{2-1})\\Theta(n^2)\\approx \\Theta(n^3) \\) 若使用 Strassen 演算法 同樣將矩陣\\(A,B,C\\)作分解，\\(時間\\Theta(1)\\) 創建 10 個 \\(\\frac{n}{2}\\cdot\\frac{n}{2}\\) 的矩陣 \\(S_1,S_2,\u0026hellip;,S_{10}\\)，時間\\(\\Theta(n^2)\\)\n\\( S_1=B_{12}-B_{22}\\\\ S_2=A_{11}+A_{12}\\\\ S_3=A_{21}+A_{22}\\\\ S_4=B_{21}-B_{11}\\\\ S_5=A_{11}+A_{22}\\\\ S_6=B_{11}+B_{22}\\\\ S_7=A_{12}-A_{22}\\\\ S_8=B_{21}+B_{22}\\\\ S_9=A_{11}-A_{21}\\\\ S_{10}=B_{11}+B_{12}\\\\ \\) 遞迴的計算 7 個矩陣積 \\(P_1,P_2,\u0026hellip;,P_7\\)，其中每個矩陣\\(P_i\\)都是\\(\\frac{n}{2}\\cdot\\frac{n}{2}\\)的。\n\\( P_1=A_{11}\\cdot S_1=A_{11}\\cdot B_{12}-A_{11}\\cdot B_{22}\\\\ P_2=S_2\\cdot B_{22}=A_{11}\\cdot B_{22}+A_{12}\\cdot B_{22}\\\\ P_3=S_3\\cdot B_{11}=A_{21}\\cdot B_{11}+A_{22}\\cdot B_{11}\\\\ P_4=A_{22}\\cdot S_4=A_{22}\\cdot B_{21}-A_{22}\\cdot B_{11}\\\\ P_5=S_5\\cdot S_6=A_{11}\\cdot B_{11}+A_{11}\\cdot B_{22}+A_{22}\\cdot B_{11}+A_{22}\\cdot B_{22}\\\\ P_6=S_7\\cdot S_8=A_{12}\\cdot B_{21}+A_{12}\\cdot B_{22}-A_{22}\\cdot B_{21}-A_{22}\\cdot B_{22}\\\\\\\\ P_7=S_9\\cdot S_{10}=A_{11}\\cdot B_{11}+A_{11}\\cdot B_{12}-A_{21}\\cdot B_{11}-A_{21}\\cdot B_{12}\\\\\\\\\\\\ \\) 藉由 \\(P_i\\) 來計算得到 矩陣 \\(C\\)：時間\\(\\Theta(n^2)\\)\n\\( C_{11}=P_5+P_4-P_2+P_6\\\\ C_{12}=P_1+P_2\\\\ C_{21}=P_3+P_4\\\\ C_{22}=P_5+P_1-P_3-P_7 \\) 綜合已上可得： \\( T(n)=\\bigg\\lbrace \\begin{array}{ll} \\Theta(1)\u0026amp;若n=1\\\\ 7T{\\frac{n}{2}}+\\Theta(n^2)\u0026amp;若n\u0026gt;1 \\end{array} \\) 故時間複雜度可推得 \\(T(n)=\\Theta(n^{\\log_27})\\approx \\Theta(n^{2.807})\\) 參考來源 Wikipedia 3. 合併排序 Merge Sort 在[Algo] 0-4. 二元樹(Binary Tree)中有介紹過，合併排序跟快速排序都有著類似前序、後序的結構， 步驟： 將數列拆成若干個只有 1 個元素的子數列(因為只有一個元素，所有可以視為已排序的數列)。 將已排序的數列兩兩合併，直到所有的數列都合併完成，即完成排序。 程式碼實作：mergeSort 4. 快速排序 Quick Sort 步驟： 選定一個數當作樞紐(pivot)，將小於此數的值都放到左邊，大於此數的都放到右邊。 反覆同樣動作，直到子數列只有一個數，即完成排序。 程式碼實作：quickSort 三、例題 1. 樹類問題 樹相關的問題很常有著類似的解題結構：\n在 base state 時，直接回傳答案(base result)。 對根的節點做遞迴的處理 將遞迴過後的回傳值做處理之後回傳。 T function(TreeNode* root) { if (BASE_STATE) return BASE_RESULT; T left = function(root-\u0026gt;left); T right = function(root-\u0026gt;right); T res = SOME_OPERATION(left, right, root); return res; } 1. Maxmium Binary Tree Leetcode 654. Maximum Binary Tree 給定一個數列，數列中的最大值為根，其索引值比根的索引值還小的子數列形成另一個子節，比根的索引值還大的子數列同樣形成另一個子節，以此類推。 以分治法的想法思考，我們會想得到一個函式 f(nums, s, e)，s 代表數列的最小索引值，e 代表數列的最大索引值，若 r 為該數列最大值的索引值，那麼我們應該會得到一個節點，其左子節點為 f(nums, s, r-1)，右子節點為 f(nums, r+1, e。 分治法的目標是要將問題由大化小，直到 base state 出現(即可以直接得到結果的一個狀態)，以此題而言就是當 s == e 或 s \u0026lt; e 時， s == e 時，應該要回傳 new TreeNode(s)。 s \u0026lt; e 時，應該要回傳 NULL。 根據上面的分析可以得到下面完整的程式碼： TreeNode* constructMaximumBinaryTree(vector\u0026lt;int\u0026gt;\u0026amp; nums) { return build(nums, 0, nums.size()-1); } TreeNode* build(vector\u0026lt;int\u0026gt;\u0026amp; nums, int start, int end) { if (start \u0026gt; end) return nullptr; if (start == end) return new TreeNode(nums[start]); int r = start; for (int i = start; i \u0026lt;= end; i++) { if (nums[i] \u0026gt; nums[r]) r = i; // 找尋最大值的索引值 } TreeNode* left = build(nums, start, r-1); TreeNode* right = build(nums, r+1, end); return new TreeNode(nums[r], left, right); } 2.Balance a Binary Search Tree Leetcode 1382. Balance a Binary Search Tree 這題若想要用 rotate 的方式去思考會很難解，但若把它想成是一個已排序的數列，要進行 BST 的建樹的話，就非常簡單了。 首先我們想得到一個已排序的數列，我們可以用 inorder traversal(中序遍歷) 去收集所有的節點。 剩下的部分就跟Leetcode 108. Convert Sorted Array to Binary Search Tree一樣了，當我們將數列索引值正中間的節點擺在根節點，那麼一定會滿足其兩邊的深度差不超過 1。 用分治法的思維，我們會想得到一個函式f(vec, s, e)，s 代表數列的最小索引值，e代表數列的最大索引值，若 mid 為該數列最中間的索引值，那麼我們會得到一個節點，其左子節點為 f(vec, s, mid-1，右子節點為 f(vec, mid-1, e)。 其 base state 為 s == e 或 s \u0026lt; e 時， s == e 時，回傳 vec[s]。 s \u0026gt; e 時，回傳 NULL。 根據上面的分析可得完整的程式碼： TreeNode* balanceBST(TreeNode* root) { vector\u0026lt;TreeNode*\u0026gt; vec; collect(root, vec); return build(vec, 0, vec.size()-1); } // 中序遍歷以收集到已排序的節點數列 void collect(TreeNode* root, vector\u0026lt;TreeNode*\u0026gt;\u0026amp; vec) { if (!root) return; collect(root-\u0026gt;left,vec); vec.push_back(root); collect(root-\u0026gt;right,vec); root-\u0026gt;left = nullptr; // 預先將節點之間的關係先清除 root-\u0026gt;right = nullptr; } TreeNode* build(vector\u0026lt;TreeNode*\u0026gt;\u0026amp; vec, int start, int end) { if (start \u0026gt; end) return nullptr; if (start == end) return vec[start]; int mid = start + (end-start)/2; // 求中間點 auto left = build(vec, start, mid-1); auto right = build(vec, mid+1, end); vec[mid]-\u0026gt;left = left; vec[mid]-\u0026gt;right = right; return vec[mid]; } 從上面兩個範例可以發現，樹類應用分治法於建樹問題上，基本上有著分常相似的框架，基本上都是想辦法把大問題拆成若干個同質的小問題，直到拆成 base state 之後再將答案組合起來。 2. Quick Select Quick select 跟 quick sort 很類似，只是 quick select 選定一個 pivot 後，只針對一邊繼續做 select，假設每次都可以選到 median，則時間複雜度是 \\(O(n)+O(\\frac{n}{2})+O(\\frac{n}{4})+\u0026hellip;+O(\\frac{n}{2^k})+O(1)=O(n)\\)。但也有可能每次都剛好選到最大值或最小值，則時間複雜度會退化成\\(O(n^2)\\)。 1. Kth Largest Element in an Array Leetcode 215. Kth Largest Element in an Array 這題正好可以運用上 Quick Select，若要用 C++ 中的內建函式 nth_element。 int findKthLargest(vector\u0026lt;int\u0026gt;\u0026amp; nums, int k) { k = nums.size()-k; nth_element(nums.begin(), nums.begin()+k, nums.end()); return nums[k]; } 以下為彷照其核心思想的實作： int findKthLargest(vector\u0026lt;int\u0026gt;\u0026amp; nums, int k) { return nth(nums, nums.size()-k); } int nth(vector\u0026lt;int\u0026gt;\u0026amp; nums, int k) { int left = 0; int right = nums.size()-1; while (left \u0026lt; right) { int pivot = partition(nums, left, right); if (pivot \u0026lt; k) { left = pivot+1; } else if (pivot \u0026gt; k) { right = pivot-1; } else { break; } } return nums[k]; } // 避免時間複雜度退化成 O(n^2) 的方法, 確保每次選到的 pivot 都是相對中間的值 void med(vector\u0026lt;int\u0026gt;\u0026amp; nums, int left, int right) { int mid = left + (right-left)/2; if (nums[left] \u0026gt;= nums[mid] \u0026amp;\u0026amp; nums[mid] \u0026gt;= nums[right]) { return; } else if (nums[left] \u0026gt;= nums[mid] \u0026amp;\u0026amp; nums[left] \u0026gt;= nums[right]) { if (nums[mid] \u0026gt;= nums[right]) { swap(nums[left], nums[mid]); } else { swap(nums[left], nums[right]); } } else if (nums[left] \u0026lt;= nums[mid] \u0026amp;\u0026amp; nums[left] \u0026lt;= nums[right]) { if (nums[mid] \u0026gt;= nums[right]) { swap(nums[left], nums[right]); } else { swap(nums[left], nums[mid]); } } } int partition(vector\u0026lt;int\u0026gt;\u0026amp; nums, int left, int right) { med(nums, left, right); int pivot = left; int i = left; int j = right+1; while (i \u0026lt; j) { while (i \u0026lt; right \u0026amp;\u0026amp; nums[++i] \u0026lt; nums[pivot]); while (j \u0026gt; left \u0026amp;\u0026amp; nums[pivot] \u0026lt; nums[--j]); if (i \u0026gt;= j) break; swap(nums[i], nums[j]); } swap(nums[pivot], nums[j]); return j; } 3. Binary Search 二元搜索法是經典的分治法應用之一，試想一個情景，若你有一本電話簿，已知電話簿是按照 alphabetical order 排序(按字母排序)，那麼你會使用什麼樣的策略快速的找到你想要找的人的電話號碼呢？ 假設我們要找的人叫作 Willy。 若用線性搜索法，從第一頁開始一頁一頁的找，直到找到 Willy，我們需要找完 A, B, C, \u0026hellip;.,U, V 字首的名字才能找到 W 字首的頁面，也就是說其實 A - U 這段查找其實是多餘的，這樣的搜索法時間複雜度是 \\(O(n)\\)，寫成程式碼會是這樣： string findWilly(vector\u0026lt;pair\u0026lt;string, string\u0026gt;\u0026gt; book) { for (int i = 0; i \u0026lt; book.size(); i++) { if (book[i].first == \u0026#34;Willy\u0026#34;) return book[i].second; } return \u0026#34;Not Found\u0026#34;; } 若用二元搜索法，我們可以任意從書的中間選一頁，若選到的字首在 W 之前，我們只需從這頁開始往後，再任選一頁；反之，若選到的字首在 W 之後，我們只需從這頁開始往前，再任選一頁，重覆上面的動作直到找到 W，再依同樣的方法，找第二個字母。這樣的搜索法，時間複雜度是 \\(O(\\log n)\\)，寫成程式碼會是這樣： string findWilly(vector\u0026lt;pair\u0026lt;string, string\u0026gt;\u0026gt; book) { int left = 0, right = book.size()-1; while (left \u0026lt;= right) { int mid = left + (right-left)/2; if (nums[mid].first == \u0026#34;Willy\u0026#34;) return nums[mid].second; else if (nums[mid].first \u0026lt; \u0026#34;Willy\u0026#34;) left = mid + 1; else if (nums[mid].first \u0026gt; \u0026#34;Willy\u0026#34;) right = mid -1; } return \u0026#34;Not Found\u0026#34;; } + 其中 `int mid = left + (right-left)/2` 是求中間值的寫法，為什麼不寫成 `int mid = (left+right)/2` 的原因是，避免兩數相加會溢數。 遇到 strictly increase 的題目，二元搜索法的基本寫法如上，是左閉右閉的寫法，另一種常見的寫法是左閉右開的寫法。 當遇到非 strictly increase 的題型，就會伴隨著左限跟右限的題型出現，這部分的詳細內容會在之後二元搜索篇詳細介紹。 1. Binary Search 這題是最簡單的 Binary Search 實作，可以試試看。 Leetcode 704. Binary Search 回到目錄：[Algo] 演算法筆記 想要複習：[Algo] 2-2. 貪心演算法 接著閱讀：[Algo] 2-4. 回溯法 ","permalink":"https://intervalrain.github.io/cs/algo/divide_and_conquer/","summary":"\u003ch2 id=\"一分治法\"\u003e一、分治法\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e分治法，簡而言之就是分而治之，把複雜的問題分成兩個或更多個相似或相似的子問題，直到子問題可以直接求解，最後再將子問題的解做合併。\u003c/li\u003e\n\u003cli\u003e三步驟：\u003ccode\u003eDivide\u003c/code\u003e、\u003ccode\u003eConquer\u003c/code\u003e、\u003ccode\u003eMerge\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e以 pseudo code 來表示大概像：\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efunc\u003c/span\u003e(collection set) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// 子問題求解\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (base_case) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// 根據要求將子問題解合併成母問題解\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        do_something\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// 將母問題分解成子問題\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (collection subset : set) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        func(subset);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"mermaid\"\u003e\n    \ngraph LR;\n    母問題--\u003e子問題1;\n    母問題--\u003e子問題2;\n    subgraph Divide\n    子問題1--\u003e最小子問題1;\n    子問題1--\u003e最小子問題2;\n    子問題2--\u003e最小子問題3;\n    子問題2--\u003e最小子問題4;\n    end\n    subgraph Conquer\n    最小子問題1--\u003e最小子問題解1;\n    最小子問題2--\u003e最小子問題解2;\n    最小子問題3--\u003e最小子問題解3;\n    最小子問題4--\u003e最小子問題解4;\n    end\n    subgraph Merge\n    最小子問題解1--\u003e合併;\n    最小子問題解2--\u003e合併;\n    最小子問題解3--\u003e合併;\n    最小子問題解4--\u003e合併;\n    end\n    合併--\u003e母問題解\n\n\u003c/div\u003e\n\u003cul\u003e\n\u003cli\u003e舉例說明，河內塔遊戲：\n\u003cimg alt=\"hanoi\" loading=\"lazy\" src=\"https://pic3.zhimg.com/v2-62f8246d7a1c955f1b7206171cca14ce_r.jpg\"\u003e\n\u003cul\u003e\n\u003cli\u003e河內塔是由三根桿子以大小不同碟片所組成的遊戲，僧人一次可以從一根桿子移動一個碟片到另一根桿子，但是小的碟片若放憂大的碟片下面會使得小的碟片裂開(也就是碟片只能由上而下從小排到大)，試問將一座塔從一根桿子完整的移動到另一根桿子需要移動多少次。\n\u003cimg alt=\"solve\" loading=\"lazy\" src=\"http://notepad.yehyeh.net/Content/DS/CH02/img/TowerOfHanoiStep.png\"\u003e\u003c/li\u003e\n\u003cli\u003e思考上面的情形，以三個碟片為例，若我們要從 \u003ccode\u003eA\u003c/code\u003e 到 \u003ccode\u003eC\u003c/code\u003e 移動一座塔，我們可以將之分解成「如何把上面兩個碟片移動到 \u003ccode\u003eB\u003c/code\u003e」，因為剩下的一個大碟片，可以很簡單的從 \u003ccode\u003eA\u003c/code\u003e 移動到 \u003ccode\u003eC\u003c/code\u003e。也就是說 \u003ccode\u003ef3(A-\u0026gt;C) = f2(A-\u0026gt;B) + f1(A-\u0026gt;C) + f2(B-\u0026gt;C)\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e再更進一步，\u003ccode\u003ef2(A-\u0026gt;B)\u003c/code\u003e 和 \u003ccode\u003ef2(B-\u0026gt;C)\u003c/code\u003e 其實就是移動兩個碟片到另一座塔，所以可以分解成 \u003ccode\u003ef2(A-\u0026gt;C) = f1(A-\u0026gt;B) + f1(A-\u0026gt;C) + f1(B-\u0026gt;C)\u003c/code\u003e，至此，我們已經把 \u003ccode\u003ef3\u003c/code\u003e 都分解成可以代表\u003cstrong\u003e一次移動\u003c/strong\u003e的最小子問題的解 \u003ccode\u003ef1\u003c/code\u003e 了：\n\u003cdiv class=\"mermaid\"\u003e\n    \n    graph TD;\n    A[f3,A-\u003eC]\n    B[f2,A-\u003eB]\n    C[f1,A-\u003eC]\n    D[f2,B-\u003eC]\n    E[f1,A-\u003eC]\n    F[f1,A-\u003eB]\n    G[f1,C-\u003eB]\n    H[f1,B-\u003eA]\n    I[f1,B-\u003eC]\n    J[f1,A-\u003eC]\n        A--\u003eB\n        A---\u003eC\n        A--\u003eD\n        B--\u003eE\n        B--\u003eF\n        B--\u003eG\n        D--\u003eH\n        D--\u003eI\n        D--\u003eJ\n    \n\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e故我們可以以數學方式證明：\u003cbr\u003e\n\\(\\begin{array}{l}\nT(n)=T(n-1)+T(1)+T(n-1)=2T(n-1)+T(1)\\\\\nT(n-1)=T(n-2)+T(1)+T(n-2)=2T(n-2)+T(1)\\\\\nT(n)=2[2T(n-2)+T(1)]+T(1)\\\\\nT(n)=2\\times2T(n-2)+(1+2)T(1)\\\\\nT(n)=2^k\\times T(n-k)+(1+2+\u0026hellip;+2^k)T(1)\\\\\n令k=n-1\\\\\nT(n)=2^{n-1}\\times T(1)+(1+2+\u0026hellip;+2^{n-1})T(1)\\\\\nT(n)=2^{n-1}\\times T(1)+\\frac{2^{n-1}-1}{2-1}T(1)\\\\\nT(n)=(2^n-1)\\times T(1)\n\\end{array}\\)\u003c/li\u003e\n\u003cli\u003e得所需要的移動次數為 \\(2^n-1\\) 次\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e分治法的特色\n\u003col\u003e\n\u003cli\u003e要解決的問題有一定的規模\u003c/li\u003e\n\u003cli\u003e該問題可以分解成若干個規模較小的問題\u003c/li\u003e\n\u003cli\u003e可以找到一個 base case，可以直接求解(如上述數學證明的\\(T(1)\\))\u003c/li\u003e\n\u003cli\u003e分解出來的子問題都是相互獨立的。(若有相依性，則無法使用分治法)\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003e分治法的時間複雜度\n\u003cul\u003e\n\u003cli\u003e將規模為 \u003ccode\u003en\u003c/code\u003e 的問題分為 \u003ccode\u003ek\u003c/code\u003e個規模為 \u003ccode\u003en/m\u003c/code\u003e 的子問題去解，那麼可以得到\u003cbr\u003e\n\\(T(n)=kT(n/m)+f(n)\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"二分治法的應用\"\u003e二、分治法的應用\u003c/h2\u003e\n\u003ch3 id=\"1-二元搜索法-binary-search\"\u003e1. 二元搜索法 Binary Search\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e令有一\u003cstrong\u003e已排序\u003c/strong\u003e的數列，欲查找該數列中是否有數值 \u003ccode\u003ex\u003c/code\u003e。\n\u003cul\u003e\n\u003cli\u003e由於該數列已經過排序，所以我們無需遍歷整個數列，我們可以選擇每次挑選數列的中間值，若目標比中間值大，則選擇大的那側再繼續做篩選，此法稱為二元搜索法，其時間複雜度可以從線性搜索法的 \\(O(n)\\) 降低到 \\(O(n\\log n)\\)。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ebinarySearch\u003c/span\u003e(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e nums, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e target) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e left \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, right \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e nums.size()\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (left \u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e right) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e mid \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e left \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e (right\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003eleft)\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (nums[mid] \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e target)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e mid;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (nums[mid] \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e target) \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            left \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e mid \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (nums[mid] \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e target)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            right \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e mid \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"2-strassen-矩陣乘法\"\u003e2. Strassen 矩陣乘法\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e試做一個矩陣\\(A\\)與矩陣\\(B\\)內積。\n\u003cul\u003e\n\u003cli\u003e\\(\nA=\\left[\\begin{matrix}A_{11}\u0026amp;A_{12}\\\\A_{21}\u0026amp;A_{22}\\end{matrix}\\right],\nB=\\left[\\begin{matrix}B_{11}\u0026amp;B_{12}\\\\B_{21}\u0026amp;B_{22}\\end{matrix}\\right],\nC=\\left[\\begin{matrix}C_{11}\u0026amp;C_{12}\\\\C_{21}\u0026amp;C_{22}\\end{matrix}\\right],其中\\\\\n\\left[\\begin{matrix}C_{11}\u0026amp;C_{12}\\\\C_{21}\u0026amp;C_{22}\\end{matrix}\\right]=\\left[\\begin{matrix}A_{11}\u0026amp;A_{12}\\\\A_{21}\u0026amp;A_{22}\\end{matrix}\\right]\\cdot\\left[\\begin{matrix}B_{11}\u0026amp;B_{12}\\\\B_{21}\u0026amp;B_{22}\\end{matrix}\\right]\n\\)\u003c/li\u003e\n\u003cli\u003e若通過一般展開可得\u003cbr\u003e\n\\(\nC_{11}=A_{11}\\cdot B_{11}+A_{12}\\cdot B_{21}\\\\\nC_{12}=A_{11}\\cdot B_{12}+A_{12}\\cdot B_{22}\\\\\nC_{21}=A_{21}\\cdot B_{11}+A_{22}\\cdot B_{21}\\\\\nC_{22}=A_{21}\\cdot B_{12}+A_{22}\\cdot B_{22}\n\\)\u003c/li\u003e\n\u003cli\u003e從上可得計算兩個 \\(n\\cdot n\\) 的矩陣內積需要 兩個 \\(\\frac{n}{2}\\cdot\\frac{n}{2}\\) 的矩陣做 8 次的乘法加上 4 次的加法，其時間複雜度可以表示成：\n\u003cul\u003e\n\u003cli\u003e\\(\nT(n)=8T(\\frac{n}{2})+\\Theta(n^2)\\\\\nT(\\frac{n}{2})=8T(\\frac{n}{4})+\\Theta({\\frac{n}{2}}^2)\\\\\nT(n)=8\\left[{8T(\\frac{n}{4})+\\Theta({{(\\frac{n}{2}})}^2)}\\right]+\\Theta(n^2)\\\\\nT(n)=8^2T(\\frac{n}{4})+\\Theta(n^2)+8\\Theta(\\frac{n^2}{4})=8^2T(\\frac{n}{4})+(1+2)\\Theta(n^2)\\\\\nT(n)=8^kT(\\frac{n}{2^k})+(1+2+\u0026hellip;+2^{k-1})\\Theta(n^2)\\\\\n令n=2^k\\\\\nT(n)=n^3T(1)+(\\frac{n/2-1}{2-1})\\Theta(n^2)\\approx \\Theta(n^3)\n\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e若使用 Strassen 演算法\n\u003col\u003e\n\u003cli\u003e同樣將矩陣\\(A,B,C\\)作分解，\\(時間\\Theta(1)\\)\u003c/li\u003e\n\u003cli\u003e創建 10 個 \\(\\frac{n}{2}\\cdot\\frac{n}{2}\\) 的矩陣 \\(S_1,S_2,\u0026hellip;,S_{10}\\)，時間\\(\\Theta(n^2)\\)\u003cbr\u003e\n\\(\nS_1=B_{12}-B_{22}\\\\\nS_2=A_{11}+A_{12}\\\\\nS_3=A_{21}+A_{22}\\\\\nS_4=B_{21}-B_{11}\\\\\nS_5=A_{11}+A_{22}\\\\\nS_6=B_{11}+B_{22}\\\\\nS_7=A_{12}-A_{22}\\\\\nS_8=B_{21}+B_{22}\\\\\nS_9=A_{11}-A_{21}\\\\\nS_{10}=B_{11}+B_{12}\\\\\n\\)\u003c/li\u003e\n\u003cli\u003e遞迴的計算 7 個矩陣積 \\(P_1,P_2,\u0026hellip;,P_7\\)，其中每個矩陣\\(P_i\\)都是\\(\\frac{n}{2}\\cdot\\frac{n}{2}\\)的。\u003cbr\u003e\n\\(\nP_1=A_{11}\\cdot S_1=A_{11}\\cdot B_{12}-A_{11}\\cdot B_{22}\\\\\nP_2=S_2\\cdot B_{22}=A_{11}\\cdot B_{22}+A_{12}\\cdot B_{22}\\\\\nP_3=S_3\\cdot B_{11}=A_{21}\\cdot B_{11}+A_{22}\\cdot B_{11}\\\\\nP_4=A_{22}\\cdot S_4=A_{22}\\cdot B_{21}-A_{22}\\cdot B_{11}\\\\\nP_5=S_5\\cdot S_6=A_{11}\\cdot B_{11}+A_{11}\\cdot B_{22}+A_{22}\\cdot B_{11}+A_{22}\\cdot B_{22}\\\\\nP_6=S_7\\cdot S_8=A_{12}\\cdot B_{21}+A_{12}\\cdot B_{22}-A_{22}\\cdot B_{21}-A_{22}\\cdot B_{22}\\\\\\\\\nP_7=S_9\\cdot S_{10}=A_{11}\\cdot B_{11}+A_{11}\\cdot B_{12}-A_{21}\\cdot B_{11}-A_{21}\\cdot B_{12}\\\\\\\\\\\\\n\\)\u003c/li\u003e\n\u003cli\u003e藉由 \\(P_i\\) 來計算得到 矩陣 \\(C\\)：時間\\(\\Theta(n^2)\\)\u003cbr\u003e\n\\(\nC_{11}=P_5+P_4-P_2+P_6\\\\\nC_{12}=P_1+P_2\\\\\nC_{21}=P_3+P_4\\\\\nC_{22}=P_5+P_1-P_3-P_7\n\\)\u003c/li\u003e\n\u003c/ol\u003e\n\u003cul\u003e\n\u003cli\u003e綜合已上可得：\n\u003cul\u003e\n\u003cli\u003e\\(\nT(n)=\\bigg\\lbrace\n\\begin{array}{ll}\n\\Theta(1)\u0026amp;若n=1\\\\\n7T{\\frac{n}{2}}+\\Theta(n^2)\u0026amp;若n\u0026gt;1\n\\end{array}\n\\)\u003c/li\u003e\n\u003cli\u003e故時間複雜度可推得 \\(T(n)=\\Theta(n^{\\log_27})\\approx \\Theta(n^{2.807})\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e參考來源 \u003ca href=\"https://zh.wikipedia.org/wiki/%E6%96%BD%E7%89%B9%E6%8B%89%E6%A3%AE%E6%BC%94%E7%AE%97%E6%B3%95\"\u003eWikipedia\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"3-合併排序-merge-sort\"\u003e3. 合併排序 Merge Sort\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e在\u003ca href=\"/cs/algo/binary_tree\"\u003e[Algo] 0-4. 二元樹(Binary Tree)\u003c/a\u003e中有介紹過，\u003cstrong\u003e合併排序\u003c/strong\u003e跟\u003cstrong\u003e快速排序\u003c/strong\u003e都有著類似前序、後序的結構，\u003c/li\u003e\n\u003cli\u003e步驟：\n\u003col\u003e\n\u003cli\u003e將數列拆成若干個只有 1 個元素的子數列(因為只有一個元素，所有可以視為已排序的數列)。\u003c/li\u003e\n\u003cli\u003e將已排序的數列兩兩合併，直到所有的數列都合併完成，即完成排序。\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003e程式碼實作：\u003ca href=\"https://github.com/intervalrain/Cpp/blob/main/algo/sorting/mergeSort.cpp\"\u003emergeSort\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"4-快速排序-quick-sort\"\u003e4. 快速排序 Quick Sort\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e步驟：\n\u003col\u003e\n\u003cli\u003e選定一個數當作樞紐(pivot)，將小於此數的值都放到左邊，大於此數的都放到右邊。\u003c/li\u003e\n\u003cli\u003e反覆同樣動作，直到子數列只有一個數，即完成排序。\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003e程式碼實作：\u003ca href=\"https://github.com/intervalrain/Cpp/blob/main/algo/sorting/quickSort.cpp\"\u003equickSort\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"三例題\"\u003e三、例題\u003c/h2\u003e\n\u003ch3 id=\"1-樹類問題\"\u003e1. 樹類問題\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e樹相關的問題很常有著類似的解題結構：\u003c/p\u003e","title":"[Algo] 2-3. 分治法 Divide and Conquer"},{"content":"一、貪心演算法 是一種在每一步都採前當下看起來最好的選擇的一種策略。 由於是當下看起來最好的選擇，故也有可能選到錯的路線，導致最終的答案不是最佳解。 先舉個生活中常見的例子： 今天小明的撲滿裡存滿了大大小小的1塊、5塊跟10塊，今天小明打算要要幫撲滿瘦身，令它的重量降低，那麼小明可以到銀行換鈔，將幣值小、重量重的硬幣集結起來換成幣值大、重量輕的紙鈔。 用貪心演算法的思維，我們一定是從幣值大的 1000 開始換起，再來 500、100、50、10，以此類推，有多少換多少。 // vector\u0026lt;int\u0026gt;\u0026amp; nums = {1000, 500, 100, 50, 10, 5, 1}; vector\u0026lt;int\u0026gt; coinChange(vector\u0026lt;int\u0026gt;\u0026amp; nums, int money) { vector\u0026lt;int\u0026gt; res(nums.size(), 0); for (int i = 0; i \u0026lt; nums.size(); i++) { res[i] += (money / nums[i]); money %= nums[i]; } return res; } 但若我們新增了一個幣值是 23，那麼上面這個思路就有可能會導致錯誤。 貪心演算法的特點 直覺且快速 通常不是最佳的 需要會被要求證明 always stays ahead：跑者每個時間點都在第一名，最後結果會是第一名 用歸納法證明。 exchange argument 用反證法，找到原解的 inversions，並作交換，證明交換後並不影響最佳解。 二、貪心演算法的應用 0. 核心思維 貪心演算法是從某一個初始狀態出發，每次通過選取區域性最優解向目標前進，並最終期望取得整體最優解的一種演算法。由這個定義可知，貪心選擇標準就是選擇當前最好的決策，貪心演算法根據這個標準進行決策，將原問題變成一個相似但規模更小的子問題，而後每一步選出來的一定是原問題整體最優解的一部分。\n如果一個問題貪心後只剩下一個子問題且有最優子結構，那麼該問題就可以使用貪心演算法。當一個問題的整體最優解包含其子問題的最優解時，我們稱次問題具有最優子結構性質。 解題一般步驟 設計資料結構並找規律 進心貪心猜想 正確性證明(歸納法證明或是列舉反例進行反證) 實現程式碼 1. 找零錢問題(Coin Change) 先用剛剛提到的那一題來試做： 以貪心法的思維來做就是，幣值愈大先換，換到不能再換時再往次大的幣值換。 vector\u0026lt;int\u0026gt; coinChange(vector\u0026lt;int\u0026gt;\u0026amp; nums, int money) { vector\u0026lt;int\u0026gt; res(nums.size(), 0); for (int i = 0; i \u0026lt; nums.size(); i++) { res[i] += (money / nums[i]); money %= nums[i]; } return res; } 以範例 nums = {1000, 500, 100, 50, 23, 10, 5, 1}，money = 1069 來測試看看，以上述得到的結果應該是：(參考例題Leetcode 322. Coin Change) {1000, 500, 100, 50, 23, 10, 5, 1} = {1, 0, 0, 1, 0, 1, 1, 4}，也就是說，得到的硬幣總數是 8(假設所有幣值都是硬幣)。 因為夾雜了 23，使得問題變得稍微有點不一樣，因為最佳解可以是：\n{1000, 500, 100, 50, 23, 10, 5, 1} = {1, 0, 0, 0, 3, 0, 0, 0}，總數 4。 從上面此例來觀察，貪心法是需要有適用時機的，當今天少掉 23 的時候，使用貪心法是可以得到最佳解的，因為所有數字互為因數、倍數關係，也就是說，當今天可以用 1 張 1000 解決的情況，必定可以用其它幣值用更多的代價來替換，如 2 張 500，或 10 張 100。但是 23 可以替換的是 2 個 10 塊加上 3 個 1 塊。用數字為例的話如下 \\(\\boxed{\\begin{array}{ll} 1069\u0026amp;=1\\times1000+1\\times50+1\\times10+1\\times5+4\\times1\\\\ \u0026amp;=1\\times(2\\times500)+1\\times50+1\\times10+1\\times5+4\\times1\\\\ \u0026amp;=1\\times(10\\times100)+1\\times50+1\\times10+1\\times5+4\\times1\\\\ \u0026amp;=1\\times(20\\times50)+1\\times50+1\\times10+1\\times5+4\\times1\\\\ \\end{array}} \\) 不管怎麼換，總數都是變大。 如果要解出上述的最佳解，需要做一點修正，或是使用暴力破解法，例如 bfs 來遍歷所有情形來獲得最小值。 試想要怎麼改寫可以使貪法仍然可以適用，「將23拿掉」那麼貪心法就仍可以適用，那要怎麼有技巧的將 23 拿掉呢。 23 能夠有效的替換表示我們一定會使用到 23，也就是說我們可以找到反例使 23 不能有效的替換就好了。 23 = 23*1(1) 換 10*2 + 1*3(5) 46 = 23*2(2) 換 10*4 + 5*1 + 1*1(6) 69 = 23*3(3) 換 50*1 + 10*1 + 1*4(6) 92 = 23*4(4) 換 50*1 + 10*4 + 1*2(7) 115 = 23*5(5) 換 100*1 + 10*1 + 5*1(3) 我們可以發現當 23 替換到第 5 個的時候已經不能有效的替換了，表示我們只有嘗試替換 0~4 個 23 硬幣，其餘剩下的錢用貪心法去計算，仍然可以得到有效的解。(在此只是為了展示失去「局部最佳性」的範例，不做嚴謹的數學證明) 即求 min(f(1069)+0, f(1046)+1, f(1023)+2, f(1000)+3, f(976)+4。 vector\u0026lt;int\u0026gt; coinChange(vector\u0026lt;int\u0026gt;\u0026amp;nums, int money) { ... } // implement by greedy vector\u0026lt;int\u0026gt; coinChangePlus(vector\u0026lt;int\u0026gt;\u0026amp;nums, int money) { vector\u0026lt;int\u0026gt; res; int coins = INT_MAX; for (int i = 0; i \u0026lt;= 4; i++) { vector\u0026lt;int\u0026gt; tmp = coinChange(nums, money-23*i); tmp[4]+=i; int cnt = accumulate(tmp.begin(), tmp.end(), 0); if (cnt \u0026lt; coins) { res = tmp; coins = cnt; } } return res; } 以上方法當遇到單一奇異數(無因倍數關係)的時候還可以用，但遇到多個奇異數的時候，複雜度就會明顯上升，到時後我們會遇用其它方法來解構。在後面的動態規劃篇，有深入的介紹，如何利用其它技巧達到剪枝得到最佳解。 由此可發現，貪心法不一定會得到最佳解，需要嚴格的驗證「局部最佳性」，才能保證最後的解是最佳解。 2. 背包問題(Knapsack Problem) 常見的背包問題分為分數背包問題與0-1背包問題。 今天在某個場合，你有一個載重5kg的背包，面前有3kg的金沙、3kg的銀沙與2kg的銅沙，已知金的價格比銀高，銀的價格比銅高。你可以任意決定怎麼將它們裝進背包，最後換取對應價值的獎金，試問怎麼裝可以得到最高的獎金？ 同樣的場合，金沙、銀沙、銅沙換成了金塊、銀塊、銅塊，分別也是 3kg、3kg、2kg，且不可切割，試問要怎麼裝可以得到最高的獎金？ 第1題(分數背包)，顯而易見，用貪心法來做一定是盡可能先裝滿價值高的金沙，再用剩餘的空間以此類推裝填其它的。(3kg金沙+2kg銀沙) 第2題(0-1背包)，由於拿完金塊，無法再拿銀塊，所以最佳解變成了拿金塊與銅塊。(3kg金塊+2kg銅塊) 三、例題 1. 餅乾分配問題 Leetcode 455. Assign Cookies 有若干個不同份量的餅乾，與若干個需要不同份量才能滿足的小孩，試問餅乾最多可以讓幾個小孩滿意。 把餅乾的份量從小排到大，把小孩從需求小排到需求大。 盡可能的滿足需求小的小孩。(若需求小的都滿足不了，那麼需求大的就不可能滿足了) int findContentChildren(vector\u0026lt;int\u0026gt;\u0026amp; children, vector\u0026lt;int\u0026gt;\u0026amp; cookies) { sort(children.begin(), children.end()); sort(cookies.begin(), cookies.end()); int child = 0, cookie = 0; while (child \u0026lt; children.size() \u0026amp;\u0026amp; cookie \u0026lt; cookies.size()) { if (children[child] \u0026lt;= cookies[cookie]) child++; cookie++; } return child; } 2. 股票買賣問題 Leetcode 122. Best Timer to Buy and Sell Stock II 有一數列為某上市公司每日的股價，若手上最多只能有一張股票，要怎麼樣買賣可以得到最高獲利。 最高獲利代表所有上升波段的總和，忽略所有下降波段。 int maxProfit(vector\u0026lt;int\u0026gt;\u0026amp; prices) { int sum = 0; int last = prices[0]; for (const auto\u0026amp; price : prices) { sum += (price \u0026gt; last) ? price - last : 0; last = price } return sum; } 3. 跳躍遊戲 55. Jump Game 有一數列表示，在該 i 索引位置起，最多可以跳幾個索引長度，試問從索引值為 0 開始，可否到達索引值為 n-1。 盡可能的往前跳，不斷的更新最遠可以到達的位置。 bool canJump(vector\u0026lt;int\u0026gt;\u0026amp; nums) { int reach = nums[0]; for (int i = 0; i \u0026lt; nums.size() \u0026amp;\u0026amp; i \u0026lt;= reach; i++) { if (i == nums.size()-1) return true; reach = max(reach, nums[i]+i); } return false; } 回到目錄：[Algo] 演算法筆記 想要複習：[Algo] 2-1. 暴力演算法 接著閱讀：[Algo] 2-3. 分治法 ","permalink":"https://intervalrain.github.io/cs/algo/greedy/","summary":"\u003ch2 id=\"一貪心演算法\"\u003e一、貪心演算法\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e是一種\u003cstrong\u003e在每一步都採前當下看起來最好的選擇\u003c/strong\u003e的一種策略。\u003c/li\u003e\n\u003cli\u003e由於是當下看起來最好的選擇，故也有可能選到錯的路線，導致最終的答案不是最佳解。\u003c/li\u003e\n\u003cli\u003e先舉個生活中常見的例子：\n\u003cul\u003e\n\u003cli\u003e今天小明的撲滿裡存滿了大大小小的1塊、5塊跟10塊，今天小明打算要要幫撲滿瘦身，令它的重量降低，那麼小明可以到銀行換鈔，將幣值小、重量重的硬幣集結起來換成幣值大、重量輕的紙鈔。\u003c/li\u003e\n\u003cli\u003e用貪心演算法的思維，我們一定是從幣值大的 1000 開始換起，再來 500、100、50、10，以此類推，有多少換多少。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// vector\u0026lt;int\u0026gt;\u0026amp; nums = {1000, 500, 100, 50, 10, 5, 1};\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003evector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e coinChange(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e nums, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e money) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e res(nums.size(), \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e nums.size(); i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        res[i] \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e (money \u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e nums[i]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        money \u003cspan style=\"color:#f92672\"\u003e%=\u003c/span\u003e nums[i];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e res;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e但若我們新增了一個幣值是 \u003ccode\u003e23\u003c/code\u003e，那麼上面這個思路就有可能會導致錯誤。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e貪心演算法的特點\n\u003cul\u003e\n\u003cli\u003e直覺且快速\u003c/li\u003e\n\u003cli\u003e通常不是最佳的\u003c/li\u003e\n\u003cli\u003e需要會被要求證明\n\u003col\u003e\n\u003cli\u003ealways stays ahead：跑者每個時間點都在第一名，最後結果會是第一名\n\u003cul\u003e\n\u003cli\u003e用歸納法證明。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eexchange argument\n\u003cul\u003e\n\u003cli\u003e用反證法，找到原解的 inversions，並作交換，證明交換後並不影響最佳解。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"二貪心演算法的應用\"\u003e二、貪心演算法的應用\u003c/h2\u003e\n\u003ch3 id=\"0-核心思維\"\u003e0. 核心思維\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e貪心演算法是從某一個初始狀態出發，每次通過選取區域性最優解向目標前進，並最終期望取得整體最優解的一種演算法。由這個定義可知，貪心選擇標準就是選擇\u003cstrong\u003e當前最好\u003c/strong\u003e的決策，貪心演算法根據這個標準進行決策，將原問題變成一個相似但規模更小的子問題，而後每一步選出來的一定是原問題整體最優解的一部分。\u003cbr\u003e\n如果一個問題貪心後只剩下一個子問題且有最優子結構，那麼該問題就可以使用貪心演算法。當一個問題的整體最優解包含其子問題的最優解時，我們稱次問題具有最優子結構性質。\u003c/li\u003e\n\u003cli\u003e解題一般步驟\n\u003col\u003e\n\u003cli\u003e設計資料結構並找規律\u003c/li\u003e\n\u003cli\u003e進心貪心猜想\u003c/li\u003e\n\u003cli\u003e正確性證明(歸納法證明或是列舉反例進行反證)\u003c/li\u003e\n\u003cli\u003e實現程式碼\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"1-找零錢問題coin-change\"\u003e1. 找零錢問題(Coin Change)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e先用剛剛提到的那一題來試做：\u003c/li\u003e\n\u003cli\u003e以貪心法的思維來做就是，幣值愈大先換，換到不能再換時再往次大的幣值換。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003evector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e coinChange(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e nums, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e money) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e res(nums.size(), \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e nums.size(); i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        res[i] \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e (money \u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e nums[i]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        money \u003cspan style=\"color:#f92672\"\u003e%=\u003c/span\u003e nums[i];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e res;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e以範例 \u003ccode\u003enums = {1000, 500, 100, 50, 23, 10, 5, 1}\u003c/code\u003e，\u003ccode\u003emoney = 1069\u003c/code\u003e 來測試看看，以上述得到的結果應該是：(參考例題\u003ca href=\"https://leetcode.com/problems/coin-change/\"\u003eLeetcode 322. Coin Change\u003c/a\u003e)\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e{1000, 500, 100, 50, 23, 10, 5, 1} = {1, 0, 0, 1, 0, 1, 1, 4}\u003c/code\u003e，也就是說，得到的硬幣總數是 \u003ccode\u003e8\u003c/code\u003e(假設所有幣值都是硬幣)。\u003c/li\u003e\n\u003cli\u003e因為夾雜了 \u003ccode\u003e23\u003c/code\u003e，使得問題變得稍微有點不一樣，因為最佳解可以是：\u003cbr\u003e\n\u003ccode\u003e{1000, 500, 100, 50, 23, 10, 5, 1} = {1, 0, 0, 0, 3, 0, 0, 0}\u003c/code\u003e，總數 \u003ccode\u003e4\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e從上面此例來觀察，貪心法是需要有適用時機的，當今天少掉 \u003ccode\u003e23\u003c/code\u003e 的時候，使用貪心法是可以得到最佳解的，因為所有數字互為因數、倍數關係，也就是說，當今天可以用 \u003ccode\u003e1\u003c/code\u003e 張 \u003ccode\u003e1000\u003c/code\u003e 解決的情況，必定可以用其它幣值用更多的代價來替換，如 \u003ccode\u003e2\u003c/code\u003e 張 \u003ccode\u003e500\u003c/code\u003e，或 \u003ccode\u003e10\u003c/code\u003e 張 \u003ccode\u003e100\u003c/code\u003e。但是 \u003ccode\u003e23\u003c/code\u003e 可以替換的是 \u003ccode\u003e2\u003c/code\u003e 個 \u003ccode\u003e10\u003c/code\u003e 塊加上 \u003ccode\u003e3\u003c/code\u003e 個 \u003ccode\u003e1\u003c/code\u003e 塊。用數字為例的話如下\n\u003cul\u003e\n\u003cli\u003e\\(\\boxed{\\begin{array}{ll}\n1069\u0026amp;=1\\times1000+1\\times50+1\\times10+1\\times5+4\\times1\\\\\n\u0026amp;=1\\times(2\\times500)+1\\times50+1\\times10+1\\times5+4\\times1\\\\\n\u0026amp;=1\\times(10\\times100)+1\\times50+1\\times10+1\\times5+4\\times1\\\\\n\u0026amp;=1\\times(20\\times50)+1\\times50+1\\times10+1\\times5+4\\times1\\\\\n\\end{array}}\n\\)\u003c/li\u003e\n\u003cli\u003e不管怎麼換，總數都是變大。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e如果要解出上述的最佳解，需要做一點修正，或是使用暴力破解法，例如 \u003ccode\u003ebfs\u003c/code\u003e 來遍歷所有情形來獲得最小值。\n\u003cul\u003e\n\u003cli\u003e試想要怎麼改寫可以使貪法仍然可以適用，「將23拿掉」那麼貪心法就仍可以適用，那要怎麼有技巧的將 \u003ccode\u003e23\u003c/code\u003e 拿掉呢。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e23\u003c/code\u003e 能夠有效的替換表示我們一定會使用到 \u003ccode\u003e23\u003c/code\u003e，也就是說我們可以找到反例使 \u003ccode\u003e23\u003c/code\u003e 不能有效的替換就好了。\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e23\u003c/code\u003e = \u003ccode\u003e23*1(1)\u003c/code\u003e 換 \u003ccode\u003e10*2 + 1*3(5)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e46\u003c/code\u003e = \u003ccode\u003e23*2(2)\u003c/code\u003e 換 \u003ccode\u003e10*4 + 5*1 + 1*1(6)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e69\u003c/code\u003e = \u003ccode\u003e23*3(3)\u003c/code\u003e 換 \u003ccode\u003e50*1 + 10*1 + 1*4(6)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e92\u003c/code\u003e = \u003ccode\u003e23*4(4)\u003c/code\u003e 換 \u003ccode\u003e50*1 + 10*4 + 1*2(7)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e115\u003c/code\u003e = \u003ccode\u003e23*5(5)\u003c/code\u003e 換 \u003ccode\u003e100*1 + 10*1 + 5*1(3)\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e我們可以發現當 \u003ccode\u003e23\u003c/code\u003e 替換到第 \u003ccode\u003e5\u003c/code\u003e 個的時候已經不能有效的替換了，表示我們只有嘗試替換 \u003ccode\u003e0~4\u003c/code\u003e 個 \u003ccode\u003e23\u003c/code\u003e 硬幣，其餘剩下的錢用貪心法去計算，仍然可以得到有效的解。(在此只是為了展示失去「局部最佳性」的範例，不做嚴謹的數學證明)\u003c/li\u003e\n\u003cli\u003e即求 \u003ccode\u003emin(f(1069)+0, f(1046)+1, f(1023)+2, f(1000)+3, f(976)+4\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e coinChange(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003enums, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e money) { ... } \u003cspan style=\"color:#75715e\"\u003e// implement by greedy\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e coinChangePlus(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003enums, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e money) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e res;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e coins \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e INT_MAX;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e; i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e tmp \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e coinChange(nums, money\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e23\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003ei);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            tmp[\u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e]\u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003ei;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e cnt \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e accumulate(tmp.begin(), tmp.end(), \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (cnt \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e coins) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                res \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e tmp;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                coins \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e cnt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e res;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e以上方法當遇到單一奇異數(無因倍數關係)的時候還可以用，但遇到多個奇異數的時候，複雜度就會明顯上升，到時後我們會遇用其它方法來解構。在後面的\u003ca href=\"/cs/algo/dp\"\u003e動態規劃\u003c/a\u003e篇，有深入的介紹，如何利用其它技巧達到剪枝得到最佳解。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e由此可發現，貪心法不一定會得到最佳解，需要嚴格的驗證「局部最佳性」，才能保證最後的解是最佳解。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"2-背包問題knapsack-problem\"\u003e2. 背包問題(Knapsack Problem)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e常見的背包問題分為\u003cstrong\u003e分數背包問題\u003c/strong\u003e與\u003cstrong\u003e0-1背包問題\u003c/strong\u003e。\n\u003cul\u003e\n\u003cli\u003e今天在某個場合，你有一個載重5kg的背包，面前有3kg的金沙、3kg的銀沙與2kg的銅沙，已知金的價格比銀高，銀的價格比銅高。你可以任意決定怎麼將它們裝進背包，最後換取對應價值的獎金，試問怎麼裝可以得到最高的獎金？\u003c/li\u003e\n\u003cli\u003e同樣的場合，金沙、銀沙、銅沙換成了金塊、銀塊、銅塊，分別也是 3kg、3kg、2kg，且不可切割，試問要怎麼裝可以得到最高的獎金？\n\u003cul\u003e\n\u003cli\u003e第1題(分數背包)，顯而易見，用貪心法來做一定是盡可能先裝滿價值高的金沙，再用剩餘的空間以此類推裝填其它的。(3kg金沙+2kg銀沙)\u003c/li\u003e\n\u003cli\u003e第2題(0-1背包)，由於拿完金塊，無法再拿銀塊，所以最佳解變成了拿金塊與銅塊。(3kg金塊+2kg銅塊)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"三例題\"\u003e三、例題\u003c/h2\u003e\n\u003ch3 id=\"1-餅乾分配問題\"\u003e1. 餅乾分配問題\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://leetcode.com/problems/assign-cookies/\"\u003eLeetcode 455. Assign Cookies\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e有若干個不同份量的餅乾，與若干個需要不同份量才能滿足的小孩，試問餅乾最多可以讓幾個小孩滿意。\n\u003cul\u003e\n\u003cli\u003e把餅乾的份量從小排到大，把小孩從需求小排到需求大。\u003c/li\u003e\n\u003cli\u003e盡可能的滿足需求小的小孩。(若需求小的都滿足不了，那麼需求大的就不可能滿足了)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efindContentChildren\u003c/span\u003e(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e children, vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e cookies) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    sort(children.begin(), children.end());\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    sort(cookies.begin(), cookies.end());\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e child \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, cookie \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (child \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e children.size() \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e cookie \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e cookies.size()) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (children[child] \u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e cookies[cookie]) child\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        cookie\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e child;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"2-股票買賣問題\"\u003e2. 股票買賣問題\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/\"\u003eLeetcode 122. Best Timer to Buy and Sell Stock II\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e有一數列為某上市公司每日的股價，若手上最多只能有一張股票，要怎麼樣買賣可以得到最高獲利。\n\u003cul\u003e\n\u003cli\u003e最高獲利代表所有上升波段的總和，忽略所有下降波段。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emaxProfit\u003c/span\u003e(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e prices) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e sum \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e last \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e prices[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eauto\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e price : prices) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        sum \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e (price \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e last) \u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e price \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e last : \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        last \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e price\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e sum;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"3-跳躍遊戲\"\u003e3. 跳躍遊戲\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://leetcode.com/problems/jump-game/\"\u003e55. Jump Game\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e有一數列表示，在該 \u003ccode\u003ei\u003c/code\u003e 索引位置起，最多可以跳幾個索引長度，試問從索引值為 \u003ccode\u003e0\u003c/code\u003e 開始，可否到達索引值為 \u003ccode\u003en-1\u003c/code\u003e。\n\u003cul\u003e\n\u003cli\u003e盡可能的往前跳，不斷的更新最遠可以到達的位置。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003ebool\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecanJump\u003c/span\u003e(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e nums) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e reach \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e nums[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e nums.size() \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e reach; i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (i \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e nums.size()\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e true;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        reach \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e max(reach, nums[i]\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003ei);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e false;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003cul\u003e\n\u003cli\u003e回到目錄：\u003ca href=\"/cs/algo\"\u003e[Algo] 演算法筆記\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e想要複習：\u003ca href=\"/cs/algo/brute_force\"\u003e[Algo] 2-1. 暴力演算法\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e接著閱讀：\u003ca href=\"/cs/algo/divide_and_conquer\"\u003e[Algo] 2-3. 分治法\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"[Algo] 2-2. 貪心演算法 Greedy"},{"content":"一、暴力演算法 暴力演算法就是枚舉法，試想今天有一個行李箱的密碼鎖為四個一組，但你又忘記密碼，那要怎麼辦？你會試著從 0000 轉到 9999 共 10000 種組合都試過，必定會找出密碼，把所有可能都枚舉過一遍，遍是暴力演算法。\n暴力演算法可以應用於很多問題，包含數論、樹、圖論等等，而暴力演算法的重點在於枚舉所有可能，以樹來說就是樹的遍歷。\n舉例來說：\nLeetcode 1. Two Sum\n給定一個數列，找數列中任兩個數的和為 target，回傳兩個數的索引值。 在還沒有認識任何資料結構之前，我們能想到最簡單的方法就是遍歷整個數列，用兩個指標 i 與 j，各指向一個數，將所有可能檢查過一遍，直到找到目標。 vector\u0026lt;int\u0026gt; twoSum(vector\u0026lt;int\u0026gt;\u0026amp; nums, int target) { for (int i = 0; i \u0026lt; nums.size() - 1; i++) for (int j = i + 1; j \u0026lt; nums.size(); j++) if (nums[i] + nums[j] == target) return {i, j}; return {-1, -1}; } 以上例來說，用暴力破解法求解時，求兩數和的時候，我們需進行兩個維度的 for-loop 迴圈來求解。若進一步到三數和、四數和、五數和時，我們會發現，維度會隨著多少個數字和增加。也就是三數和為 3 個迴圈，四數和為 4 個迴圈，以此類推。 以 複雜度分析 Algorithmic complexity / Big-O / Asymptotic analysis來分析，也就相當於 k 數和的時間複雜度為 \\(O(n^k)\\)，這個增長是相當恐怖的。 暴力演算法的特點\n簡單粗暴 將所有可能枚舉出來，藉由電腦的運算力高於人腦的特性。 執行效率低 由於所有的情形都需列舉出來，所以執行效率低。 只適用於規模小的問題。 可作用衡量效率問題的基礎算法 暴力法可以看成是某問題時間效能的底限，所以可以用來衡量其它演算法的效率。 二、暴力演算法應用 1. 數組 線性搜索法(Linear Search) 將一個資料集合的所有元素遍歷一次，找到所需的目標。 例：有一個數列共有 n 個元素，找數列中是否含有某數 target，若有則回傳其索引值，若無則回傳 -1。 int findTarget(vector\u0026lt;int\u0026gt;\u0026amp; nums, int target) { for (int i = 0; i \u0026lt; nums.size(); i++) { if (nums[i] == target) return i; } return -1; } 2. 樹 深度優先搜索法(Depth-First Search, DFS) 一直往樹的子節點搜索，直到子葉再退回。 相關的遍歷法有：pre-ordered traversal(前序遍歷)、post-ordered traversal(後序遍歷)、in-ordered traversal(中序遍歷)。 bool find(TreeNode* root, int target) { if (!root) return false; if (root-\u0026gt;val == target) return true; return find(root-\u0026gt;left, target) || find(root-\u0026gt;right, target); } 廣度優先搜索法(Breadth-First Search, BFS) 從樹的一根點出發，將此根節點所有的子節點都遍歷完在進行下一次的搜索。 相關的遍歷法有：level-ordered traversal(層序遍歷)。 bool find(TreeNode* root, int target) { queue\u0026lt;TreeNode*\u0026gt; q; q.push(root); while (!q.empty()) { int sz = q.size(); while (sz--) { TreeNode* curr = q.front(); q.pop(); if (curr-\u0026gt;val == target) return true; if (curr-\u0026gt;left) q.push(curr-\u0026gt;left); if (curr-\u0026gt;right) q.push(curr-\u0026gt;right); } } return false; } 3. 圖論 圖跟樹的差別在於 圖可能有多個子節點。 圖可能是單向或雙向的。 以 DFS, BFS 處理圖論，需要額外處理已經遍歷過的節點。 深度優先搜索法(Depth-First Search, DFS) unordered_set\u0026lt;Node*\u0026gt; visited; bool find(Node* root, int target) { if (!root) return false; if (visited.count(root)) return false; visited.insert(root); if (root-\u0026gt;val == target) return true; for (TreeNode* child : root-\u0026gt;children) { if (find(child, target)) return true; } return false; } 廣度優先搜索法(Breadth-First Search, BFS) unordered_set\u0026lt;Node*\u0026gt; visited bool find(Node* root, int target) { queue\u0026lt;TreeNode*\u0026gt; q; q.push(root); visited.insert(root); while (!q.empty()) { int sz = q.size(); while (sz--) { TreeNode* curr = q.front(); q.pop(); if (curr-\u0026gt;val == target) return true; for (TreeNode* child : root-\u0026gt;children) { if (visited.count(child)) continue; q.push(child); visited.insert(child); } } } return false; } 三、例題 最後用一題 Leetcode 的密碼鎖問題來作結。 Leetcode 752. Open the Lock 這題密碼鎖多加了一些條件，當轉到某些暗鎖時，會鎖死，所以必須要避開這些數字組合。 這題可以套用圖論的 bfs，把暗鎖放入到已經遍歷過的組合 visited，接著就是模擬轉動密碼的動作，即可解題。 string plus(string s, int i) { if (s[i] == \u0026#39;9\u0026#39;) { s[i] = \u0026#39;0\u0026#39;; } else { s[i]++; } return s; } string minus(string s, int i) { if (s[i] == \u0026#39;0\u0026#39;) { s[i] = \u0026#39;9\u0026#39;; } else { s[i]--; } return s; } int openLock(vector\u0026lt;string\u0026gt;\u0026amp; deadends, string target) { unordered_set\u0026lt;string\u0026gt; set(deadends.begin(), deadends.end()); string start = \u0026#34;0000\u0026#34;; if (set.count(start)) return -1; queue\u0026lt;string\u0026gt; q; q.push(start); int step = 0; while (!q.empty()) { int sz = q.size(); while (sz--) { string curr = q.front(); q.pop(); if (curr == target) return step; for (int i = 0; i \u0026lt; 4; i++) { string next; next = plus(curr, i); if (!set.count(next)) q.push(next); set.insert(next); next = minus(curr, i); if (!set.count(next)) q.push(next); set.insert(next); } } step++; } return -1; } 回到目錄：[Algo] 演算法筆記 接著閱讀：[Algo] 2-2. 貪心演算法 ","permalink":"https://intervalrain.github.io/cs/algo/brute_force/","summary":"\u003ch2 id=\"一暴力演算法\"\u003e一、暴力演算法\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e暴力演算法就是枚舉法，試想今天有一個行李箱的密碼鎖為四個一組，但你又忘記密碼，那要怎麼辦？你會試著從 \u003ccode\u003e0000\u003c/code\u003e 轉到 \u003ccode\u003e9999\u003c/code\u003e 共 10000 種組合都試過，必定會找出密碼，把所有可能都枚舉過一遍，遍是暴力演算法。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e暴力演算法可以應用於很多問題，包含數論、樹、圖論等等，而暴力演算法的重點在於\u003cstrong\u003e枚舉所有可能\u003c/strong\u003e，以樹來說就是樹的遍歷。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e舉例來說：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://leetcode.com/problems/two-sum/\"\u003eLeetcode 1. Two Sum\u003c/a\u003e\u003cbr\u003e\n給定一個數列，找數列中任兩個數的和為 \u003ccode\u003etarget\u003c/code\u003e，回傳兩個數的索引值。\n\u003cul\u003e\n\u003cli\u003e在還沒有認識任何資料結構之前，我們能想到最簡單的方法就是遍歷整個數列，用兩個指標 \u003ccode\u003ei\u003c/code\u003e 與 \u003ccode\u003ej\u003c/code\u003e，各指向一個數，將所有可能檢查過一遍，直到找到目標。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003evector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e twoSum(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e nums, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e target) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e nums.size() \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e; i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e j \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e; j \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e nums.size(); j\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (nums[i] \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e nums[j] \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e target)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e {i, j};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e {\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e以上例來說，用暴力破解法求解時，求兩數和的時候，我們需進行兩個維度的 for-loop 迴圈來求解。若進一步到三數和、四數和、五數和時，我們會發現，維度會隨著多少個數字和增加。也就是三數和為 3 個迴圈，四數和為 4 個迴圈，以此類推。\u003c/li\u003e\n\u003cli\u003e以 \u003ca href=\"/cs/algo/bigo\"\u003e複雜度分析 Algorithmic complexity / Big-O / Asymptotic analysis\u003c/a\u003e來分析，也就相當於 \u003ccode\u003ek\u003c/code\u003e 數和的時間複雜度為 \\(O(n^k)\\)，這個增長是相當恐怖的。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e暴力演算法的特點\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e簡單粗暴\n\u003cul\u003e\n\u003cli\u003e將所有可能枚舉出來，藉由電腦的運算力高於人腦的特性。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e執行效率低\n\u003cul\u003e\n\u003cli\u003e由於所有的情形都需列舉出來，所以執行效率低。\u003c/li\u003e\n\u003cli\u003e只適用於規模小的問題。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e可作用衡量效率問題的基礎算法\n\u003cul\u003e\n\u003cli\u003e暴力法可以看成是某問題時間效能的底限，所以可以用來衡量其它演算法的效率。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"二暴力演算法應用\"\u003e二、暴力演算法應用\u003c/h2\u003e\n\u003ch3 id=\"1-數組\"\u003e1. 數組\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e線性搜索法(Linear Search)\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e將一個資料集合的所有元素遍歷一次，找到所需的目標。\u003c/li\u003e\n\u003cli\u003e例：有一個數列共有 \u003ccode\u003en\u003c/code\u003e 個元素，找數列中是否含有某數 \u003ccode\u003etarget\u003c/code\u003e，若有則回傳其索引值，若無則回傳 \u003ccode\u003e-1\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efindTarget\u003c/span\u003e(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e nums, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e target) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e nums.size(); i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (nums[i] \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e target) \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e i;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"2-樹\"\u003e2. 樹\u003c/h3\u003e\n\u003cp\u003e\u003cimg alt=\"tree\" loading=\"lazy\" src=\"https://res.cloudinary.com/practicaldev/image/fetch/s---f65OlYQ--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/e2ru41fjhqs4ombbcedf.png\"\u003e\u003c/p\u003e","title":"[Algo] 2-1. 暴力演算法 Brute Force"},{"content":"491. Non-decreasing Subsequences\nHardness: \\(\\color{orange}\\textsf{Medium}\\) Ralated Topics: Array、Hash Table、Backtracking、Bit Manipulation 一、題目 Given an integer array nums, return all the different possible non-decreasing subsequences of the given array with at least two elements. You may return the answer in any order.\nExample 1:\nInput: nums = [4,6,7,7] Output: [[4,6],[4,6,7],[4,6,7,7],[4,7],[4,7,7],[6,7],[6,7,7],[7,7]] Explanation: Example 2:\nInput: nums = [4,4,3,2,1] Output: [[4,4]] Constraints:\n\u0026lt;= nums.length \u0026lt;= 15 -100 \u0026lt;= nums[i] \u0026lt;= 100 二、分析 這一很典型的是一個 backtrack 的問題，只要熟悉回溯法的框架並注意終止條件與處理重覆子序列即可。 終止條件為 i == nums.size()，此時將遍歷過的 path 加入 res，但要注意題目有規定至少要 2 個元素的子序列，故需要再加入前做確認。 注意題目傳回的子序列不可重覆，故需要額外做處理。 三、解題 1. Backtracking Time complexity: \\(O(2^n)\\) Space complexity: \\(O(n)\\) vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; findSubsequences(vector\u0026lt;int\u0026gt;\u0026amp; nums) { vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; res; vector\u0026lt;int\u0026gt; path; dfs(nums, 0, path, res); sort(res.begin(), res.end()); // 先做排序後 for (int i = res.size()-1; i \u0026gt;= 1; i--) { // 從後面往前迭代 if (res[i] == res[i-1]) { res.erase(res.begin()+i); // 刪除重覆的序列 } } return res; } void dfs(vector\u0026lt;int\u0026gt;\u0026amp; nums, int i, vector\u0026lt;int\u0026gt;\u0026amp; path, vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; res) { if (i == nums.size()) { // 終止條件 if (path.size() \u0026gt; 1) { // 滿足子序列元素大於等於2個，則加入答案 res.push_back(path); } return; } if (path.size() == 0 || nums[i] \u0026gt;= path.back()) { // 注意需滿足題意為上升序列 path.push_back(nums[i]); // 加入子序列 dfs(nums, i+1, path, res); path.pop_back(); // 回溯法需將元素 pop 掉 } dfs(nums, i+1, path, res); // 跳過不取 } 2. Backtracking(optimized) Time complexity: \\(O(2^n)\\) Space complexity: \\(O(n)\\) vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; findSubsequences(vector\u0026lt;int\u0026gt;\u0026amp; nums) { vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; res; vector\u0026lt;int\u0026gt; path; dfs(nums, 0, path, res); return res; } void dfs(vector\u0026lt;int\u0026gt;\u0026amp; nums, int i, vector\u0026lt;int\u0026gt;\u0026amp; path, vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; res) { if (i == nums.size()) { if (path.size() \u0026gt; 1) { res.push_back(path); } return; } if (path.size() == 0 || nums[i] \u0026gt;= path.back()) { path.push_back(nums[i]); dfs(nums, i+1, path, res); path.pop_back(); } if (path.size() == 0 || nums[i] != path.back()) { // 處理重覆子序列 dfs(nums, i+1, path, res); } } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/491/","summary":"\u003cp\u003e\u003cstrong\u003e491. Non-decreasing Subsequences\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{orange}\\textsf{Medium}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eArray\u003c/code\u003e、\u003ccode\u003eHash Table\u003c/code\u003e、\u003ccode\u003eBacktracking\u003c/code\u003e、\u003ccode\u003eBit Manipulation\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eGiven an integer array \u003ccode\u003enums\u003c/code\u003e, return \u003cem\u003eall the different possible non-decreasing subsequences of the given array with at least two elements.\u003c/em\u003e You may return the answer in \u003cstrong\u003eany order\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInput:\u003c/strong\u003e nums = [4,6,7,7]\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e [[4,6],[4,6,7],[4,6,7,7],[4,7],[4,7,7],[6,7],[6,7,7],[7,7]]\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInput:\u003c/strong\u003e nums = [4,4,3,2,1]\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e [[4,4]]\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e \u0026lt;= nums.length \u0026lt;= 15\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e-100 \u0026lt;= nums[i] \u0026lt;= 100\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"二分析\"\u003e二、分析\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e這一很典型的是一個 \u003ccode\u003ebacktrack\u003c/code\u003e 的問題，只要熟悉回溯法的框架並注意\u003cstrong\u003e終止條件\u003c/strong\u003e與\u003cstrong\u003e處理重覆子序列\u003c/strong\u003e即可。\u003c/li\u003e\n\u003cli\u003e終止條件為 \u003ccode\u003ei == nums.size()\u003c/code\u003e，此時將遍歷過的 \u003ccode\u003epath\u003c/code\u003e 加入 \u003ccode\u003eres\u003c/code\u003e，但要注意題目有規定至少要 \u003ccode\u003e2\u003c/code\u003e 個元素的子序列，故需要再加入前做確認。\u003c/li\u003e\n\u003cli\u003e注意題目傳回的子序列不可重覆，故需要額外做處理。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"三解題\"\u003e三、解題\u003c/h3\u003e\n\u003ch4 id=\"1-backtracking\"\u003e1. Backtracking\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eTime complexity: \\(O(2^n)\\)\u003c/li\u003e\n\u003cli\u003eSpace complexity: \\(O(n)\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003evector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003evector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e findSubsequences(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e nums) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003evector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e res;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e path;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    dfs(nums, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, path, res);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    sort(res.begin(), res.end());               \u003cspan style=\"color:#75715e\"\u003e// 先做排序後\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e res.size()\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e; i\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003e) {   \u003cspan style=\"color:#75715e\"\u003e// 從後面往前迭代\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (res[i] \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e res[i\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            res.erase(res.begin()\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003ei);           \u003cspan style=\"color:#75715e\"\u003e// 刪除重覆的序列\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e res;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edfs\u003c/span\u003e(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e nums, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i, vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e path, vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003evector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u0026amp;\u003c/span\u003e res) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (i \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e nums.size()) {         \u003cspan style=\"color:#75715e\"\u003e// 終止條件\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (path.size() \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e) {      \u003cspan style=\"color:#75715e\"\u003e// 滿足子序列元素大於等於2個，則加入答案\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e            res.push_back(path);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (path.size() \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e||\u003c/span\u003e nums[i] \u003cspan style=\"color:#f92672\"\u003e\u0026gt;=\u003c/span\u003e path.back()) {   \u003cspan style=\"color:#75715e\"\u003e// 注意需滿足題意為上升序列\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        path.push_back(nums[i]);    \u003cspan style=\"color:#75715e\"\u003e// 加入子序列\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        dfs(nums, i\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, path, res);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        path.pop_back();            \u003cspan style=\"color:#75715e\"\u003e// 回溯法需將元素 pop 掉\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    dfs(nums, i\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, path, res);      \u003cspan style=\"color:#75715e\"\u003e// 跳過不取\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"2-backtrackingoptimized\"\u003e2. Backtracking(optimized)\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eTime complexity: \\(O(2^n)\\)\u003c/li\u003e\n\u003cli\u003eSpace complexity: \\(O(n)\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003evector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003evector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e findSubsequences(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e nums) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003evector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e res;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e path;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    dfs(nums, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, path, res);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e res;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edfs\u003c/span\u003e(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e nums, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i, vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e path, vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003evector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u0026amp;\u003c/span\u003e res) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (i \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e nums.size()) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (path.size() \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            res.push_back(path);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (path.size() \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e||\u003c/span\u003e nums[i] \u003cspan style=\"color:#f92672\"\u003e\u0026gt;=\u003c/span\u003e path.back()) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        path.push_back(nums[i]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        dfs(nums, i\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, path, res);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        path.pop_back();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (path.size() \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e||\u003c/span\u003e nums[i] \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e path.back()) {   \u003cspan style=\"color:#75715e\"\u003e// 處理重覆子序列\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        dfs(nums, i\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, path, res);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ca href=\"/leetcode\"\u003e回目錄 Catalog\u003c/a\u003e\u003c/p\u003e","title":"[LeetCode] 491. Non-decreasing Subsequences"},{"content":"C# 2 一、泛型 使用泛型(generic type)可以在編寫在編譯時類型安全的通用程式碼，無須事先知道要使用的具體類型。 示例1: array類型: 大小需預先設定，若要添加需要重新分配 public static void Main(string[] args) { PrintNames(GenerateNames()); } public static void PrintNames(string[] names) { foreach (string name in names) { Console.WriteLine(name); } } public static string[] GenerateNames() { string[] names = new string[4]; names[0] = \u0026#34;Mike\u0026#34;; names[1] = \u0026#34;Rain\u0026#34;; names[2] = \u0026#34;Jessica\u0026#34;; names[3] = \u0026#34;Billy\u0026#34;; return names; } 示例2: ArrayList類型: ArrayList.Add是Object的方法，但如果塞入不適合的參數類型，可能會引發InvalidCastException\npublic static void Main(string[] args) { PrintNames(GenerateNames()); } public static void PrintNames(ArrayList names) { foreach (object name in names) { Console.WriteLine(name); } } public static ArrayList GenerateNames() { ArrayList names = new ArrayList(); names.Add(\u0026#34;Mike\u0026#34;); names.Add(\u0026#34;Rain\u0026#34;); names.Add(\u0026#34;Jessica\u0026#34;); names.Add(\u0026#34;Billy\u0026#34;); return names; } 示例3: StringCollection專用類型: 解決前述兩個問題，但也限制了返回值。\npublic static void Main(string[] args) { PrintNames(GenerateNames()); } public static void PrintNames(StringCollection names) { foreach (string name in names) { Console.WriteLine(name); } } public static StringCollection GenerateNames() { StringCollection names = new StringCollection(); names.Add(\u0026#34;Mike\u0026#34;); names.Add(\u0026#34;Rain\u0026#34;); names.Add(\u0026#34;Jessica\u0026#34;); names.Add(\u0026#34;Billy\u0026#34;); return names; } 示例4: List泛型\npublic static void Main(string[] args) { PrintNames(GenerateNames()); } public static void PrintNames(List\u0026lt;string\u0026gt; names) { foreach (string name in names) { Console.WriteLine(name); } } public static List\u0026lt;string\u0026gt; GenerateNames() { var names = new List\u0026lt;string\u0026gt; { \u0026#34;Mike\u0026#34;, \u0026#34;Rain\u0026#34;, \u0026#34;Jessica\u0026#34;, \u0026#34;Billy\u0026#34; }; return names; } 泛型可以解決： 與 Array 不同，不需在創建前先知道集合的大小。 與 ArrayList 不同，在對外提供的 API 中，一切表示元素類型之處皆用 T 來代指。如果向集合添加了錯的元素，在編譯即會報錯。 與 StringCollection 不同，List\u0026lt;T\u0026gt; 可兼容所有類型，省去了實現其它類型的程式碼與處理返回值等的問題。 1. 形參與實參 Parameter and Argument 宣告函數時用於描述函數輸入類別的參數稱為形參(parameter)。 函數調用時實際傳遞給函數的參數稱為實參(argument)。 泛型及兩個參數概念：類型形參(Type parameter)和類型實參(type argument)，相當於把形參和實參的思想套用在表示類型訊息上。 // Type parameter public class List\u0026lt;T\u0026gt; ... { } // Type argument List\u0026lt;string\u0026gt; list = new List\u0026lt;string\u0026gt;(); 同樣，當宣告有繼承母類別或是介面時，泛型形參也可以作為母類別或介面的泛型實參。 public class List\u0026lt;T\u0026gt; : IEnumerable\u0026lt;T\u0026gt; 2. 泛型類型與泛型方法的度(arity) 泛型類型或泛型方法可以宣告多個類型形參。 public class Dictionary\u0026lt;TKey, TValue\u0026gt; 泛型度(arity)是泛型宣告中類型形參的數量，非泛型的宣告可視為泛型度為 0。 泛型度不同的同名接口，就屬於不同的類型。如IEnumerable\u0026lt;T\u0026gt; 與 IEnumerable，但不能僅透過類型形參名稱重載方法。 也不能出現重複的類型形參名稱；但同名類型實參是許可的。 public void Method() {} // arity = 0 public void Method\u0026lt;T\u0026gt;()) {} // arity = 1 public void Method\u0026lt;T1,T2\u0026gt;() {} // arity = 2 public void Method\u0026lt;Tone, Ttwo\u0026gt;() {} // 編譯錯誤, 不能僅透過類型形參名稱重載方法 public void Method\u0026lt;T,T,T\u0026gt;(){} // 編譯錯誤, 重複的類型形參名稱 var dict = new Dictoinary\u0026lt;string,string\u0026gt;(); // 同名類型實參是允許的 3. 泛型的適用範圍 enum 不能宣告為泛型 class, struct, interface, delegate 都可以被宣告成泛型類型。 但 class member 中，有些看似是泛型其實不然，原則是：判斷一個宣告是否為泛型宣告取決於它是否引入新的類型形參。 public class ValidatingList\u0026lt;TItem\u0026gt; { // 實際上 TItem 用作 List\u0026lt;T\u0026gt; 的類型實參，TItem 由 Validating 的宣告來引入類型形參。 private readonly List\u0026lt;TItem\u0026gt; items = new LIst\u0026lt;TItem\u0026gt;(); } 4. 方法類型實參的類型推斷 方法類型在以下情境時，可以省略類型實參，編譯器可以自動推斷實際的類型： public static List\u0026lt;T\u0026gt; CopyList\u0026lt;T\u0026gt;(List\u0026lt;T\u0026gt; input) { ... } public static void Main() { List\u0026lt;int\u0026gt; nums = new List\u0026lt;int\u0026gt;{ 1,2,3,5,8,13 }; List\u0026lt;int\u0026gt; copyList1 = CopyList\u0026lt;int\u0026gt;(nums); List\u0026lt;int\u0026gt; copyList2 = CopyList(nums); // 省略類型實參 } 利用方法類型實參的自動推斷，我們可以靜用靜態方法重載建構式，以簡化建構式。 public static void Main() { var tuple1 = new Tuple\u0026lt;int,int\u0026gt;(3,7); var tuple2 = CreateTuple(4,2); } public static Tuple\u0026lt;T1,T2\u0026gt; CreateTuple\u0026lt;T1,T2\u0026gt;(T1 x, T2 y) { return new Tuple\u0026lt;T1,T2\u0026gt;(x, y); } 5. 類型約束 6. default 與 typeof 7. 泛型類型初始化與狀態 二、可空值類型 三、委托 四、迭代器 五、其它的小特性 ","permalink":"https://intervalrain.github.io/it/csharp_depth_ch2/","summary":"\u003ch1 id=\"c-2\"\u003eC# 2\u003c/h1\u003e\n\u003ch2 id=\"一泛型\"\u003e一、泛型\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e使用泛型(generic type)可以在編寫在編譯時類型安全的通用程式碼，無須事先知道要使用的具體類型。\n\u003cem\u003e示例1: array類型: 大小需預先設定，若要添加需要重新分配\u003c/em\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Csharp\" data-lang=\"Csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e Main(\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e[] args)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    PrintNames(GenerateNames());\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e PrintNames(\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e[] names)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eforeach\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e name \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e names)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Console.WriteLine(name);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e[] GenerateNames()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e[] names = \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e[\u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    names[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e] = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Mike\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    names[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e] = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Rain\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    names[\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e] = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Jessica\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    names[\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e] = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Billy\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e names;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cem\u003e示例2: ArrayList類型: ArrayList.Add是Object的方法，但如果塞入不適合的參數類型，可能會引發InvalidCastException\u003c/em\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Csharp\" data-lang=\"Csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e Main(\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e[] args)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    PrintNames(GenerateNames());\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e PrintNames(ArrayList names)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eforeach\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eobject\u003c/span\u003e name \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e names)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Console.WriteLine(name);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e ArrayList GenerateNames()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ArrayList names = \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e ArrayList();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    names.Add(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Mike\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    names.Add(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Rain\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    names.Add(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Jessica\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    names.Add(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Billy\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e names;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cem\u003e示例3: StringCollection專用類型: 解決前述兩個問題，但也限制了返回值。\u003c/em\u003e\u003c/p\u003e","title":"[IT] C# Depth Ch.2 C# 2"},{"content":"974. Subarray Sums Divisible by K\nHardness: \\(\\color{orange}\\textsf{Medium}\\) Ralated Topics: Array、Hash Table、Prefix Sum 一、題目 Given an integer array nums and an integer k, return the number of non-empty subarrays that have a sum divisible by k.\nA subarray is a contiguous part of an array.\nExample 1:\nInput: nums = [4,5,0,-2,-3,1], k = 5 Output: 7 Explanation: There are 7 subarrays with a sum divisible by k = 5:\n[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3] Example 2:\nInput: nums = [5], k = 9 Output: 0 Constraints:\n1 \u0026lt;= nums.length \u0026lt;= 3 * 10^4 -10^4 \u0026lt;= nums[i] \u0026lt;= 10^4 2 \u0026lt;= k \u0026lt;= 10^4 二、分析 觀察此題，要求子序列的和可以被 k 整除，我們可以用 prefix sum 來做這一題，那麼就可以利用 prefix[j] - prefix[j] 來檢查是否被 k 整除，若可以整除代表從 i+1 到 j 的子序列，為符合題意的子序列。 為了方便起見，要檢查 0 到 j 是否滿足，那麼 i 需要為 -1，故我們可以預先將 0 加入 prefix array 中，代表，到 j 為止沒有跳過任一元素。 由於我們要查找兩數相減可以被 k整除，我們可以預先將 prefix sum 處理成範為在 0~k 之間的數，那麼我們需要查找的，便是 prefix[i] == prefix[j]，證明： \\(0\u0026lt;a\u0026lt;k,0\u0026lt;b\u0026lt;k\\) \\(-k\u0026lt;b-a\u0026lt;k\\) \\(在 -k與 k之間，只有 0 滿足 k 的倍數，也就是a=b\\) 根據上述關係，我們可以利用 Hash Table，更高效的查找我們需要的找的對象，而不必真的存一個 prefix array。 三、解題 1. prefix sum Time complexity: \\(O(n)\\) Space complexity: \\(O(1)\\) int subarraysDivByK(vector\u0026lt;int\u0026gt;\u0026amp; nums, int k) { // vector\u0026lt;int\u0026gt; prefix = {0}; int sum = 0; int res = 0; unordered_map\u0026lt;int,int\u0026gt; map; map[0] = 1; for (const auto\u0026amp; x : nums) { sum += x; int val = sum % k; if (val \u0026lt; 0) val += k; // prefix.push_back(val); if (map.count(val)) res += map[val]; map[val]++; } return res; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/974/","summary":"\u003cp\u003e\u003cstrong\u003e974. Subarray Sums Divisible by K\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{orange}\\textsf{Medium}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eArray\u003c/code\u003e、\u003ccode\u003eHash Table\u003c/code\u003e、\u003ccode\u003ePrefix Sum\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eGiven an integer array \u003ccode\u003enums\u003c/code\u003e and an integer \u003ccode\u003ek\u003c/code\u003e, return \u003cem\u003ethe number of non-empty\u003c/em\u003e \u003cstrong\u003esubarrays\u003c/strong\u003e \u003cem\u003ethat have a sum divisible by\u003c/em\u003e \u003ccode\u003ek\u003c/code\u003e.\u003cbr\u003e\nA \u003cstrong\u003esubarray\u003c/strong\u003e is a \u003cstrong\u003econtiguous\u003c/strong\u003e part of an array.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInput:\u003c/strong\u003e nums = [4,5,0,-2,-3,1], k = 5\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e 7\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e There are 7 subarrays with a sum divisible by k = 5:\u003cbr\u003e\n[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e","title":"[LeetCode] 974. Subarray Sums Divisible by K"},{"content":"53. Maxmimum Subarray\nHardness: \\(\\color{orange}\\textsf{Medium}\\) Ralated Topics: Array、Divide and Conquer、Dynamic Programming 一、題目 Given an integer array num, find the subarray with the largest sum, and return its sum.\nExample 1:\nInput: nums = [-2,1,-3,4,-1,2,1,-5,4] Output: 6 Explanation: The subarray [4,-1,2,1] has the largest sum 6. Example 2:\nInput: nums = [1] Output: 1 Explanation: The subarray [1] has the largest sum 1. Example 3:\nInput: [5,4,-1,7,8] Output: 23 Explanation: The subarray [5,4,-1,7,8] has the largest sum 23. Constraints:\n1 \u0026lt;= nums.length \u0026lt;= 10^5 -10^4 \u0026lt;= nums[i] \u0026lt;= 10^4 Follow up: If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.\n二、分析 這題可以用動態規劃的思維下去解題，將 dp[i] 定為，到第 i 個數為止，最大子序列的總和。 以上述的定義可以得到狀態轉移方程式：dp[i] = max(nums[i], nums[i] + dp[i-1]，對 i 元素來說，只需考慮兩種狀況： 前面的元素都不拿 拿包含前一個元素，且包含最大子序列的其它元素。 三、解題 1. DP Time complexity: \\(O(n)\\) Space complexity: \\(O(n)\\) int maxSubArray(vector\u0026lt;int\u0026gt;\u0026amp; nums) { int res = nums[0]; // int curr = INT_MIN; vector\u0026lt;int\u0026gt; dp(nums.size(), 0); dp[0] = nums[0]; for (int i = 1; i \u0026lt; nums.size(); i++) { dp[i] = max(nums[i], nums[i] + dp[i-1]); res = max(dp[i], res); } return res; } 2. DP(space optimized) Time complexity: \\(O(n)\\) Space complexity: \\(O(1)\\) int maxSubArray(vector\u0026lt;int\u0026gt;\u0026amp; nums) { int curr = INT_MIN, res = INT_MIN; for (const auto\u0026amp; x : nums) { curr = curr \u0026lt; 0 ? x : curr + x; res = max(res, curr); } return res; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/53/","summary":"\u003cp\u003e\u003cstrong\u003e53. Maxmimum Subarray\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{orange}\\textsf{Medium}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eArray\u003c/code\u003e、\u003ccode\u003eDivide and Conquer\u003c/code\u003e、\u003ccode\u003eDynamic Programming\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eGiven an integer array \u003ccode\u003enum\u003c/code\u003e, find the subarray with the largest sum, and return \u003cem\u003eits sum\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInput:\u003c/strong\u003e nums = [-2,1,-3,4,-1,2,1,-5,4]\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e 6\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e The subarray [4,-1,2,1] has the largest sum 6.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInput:\u003c/strong\u003e nums = [1]\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e 1\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e The subarray [1] has the largest sum 1.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInput:\u003c/strong\u003e [5,4,-1,7,8]\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e 23\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e The subarray [5,4,-1,7,8] has the largest sum 23.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e","title":"[LeetCode] 53. Maximum Subarray"},{"content":"918. Maximum Sum Circular Subarray\nHardness: \\(\\color{orange}\\textsf{Medium}\\) Ralated Topics: Array、Divide and Conquer、Dynamic Programming、Queue、Monotonic Queue 一、題目 Given a circular integer array nums of length n, return the maximum possible sum of a non-empty subarray of nums.\nA circular array means the end of the array connects to the beginning of the array. Formally, the next element of nums[i] is nums[(i + 1) % n] and the previous element of nums[i] is nums[(i - 1 + n) % n].\nA subarray may only include each element of the fixed buffer nums at most once. Formally, for a subarray nums[i], nums[i + 1], ..., nums[j], there does not exist i \u0026lt;= k1, k2 \u0026lt;= j with k1 % n == k2 % n.\nExample 1:\nInput: nums = [1,-2,3,-2] Output: 3 Explanation: Subarray [3] has maximum sum 3. Example 2:\nInput: nums = [5,-3,5] Output: 10 Explanation: Subarray [5,5] has maximum sum 5 + 5 = 10. Example 3:\nInput: nums = [-3,-2,-3] Output: -2 Explanation: Subarray [-2] has maximum sum -2. Constraints:\nn == nums.length 1 \u0026lt;= n \u0026lt;= 3 * 10^4 -3 * 10^4 \u0026lt;= nums[i] \u0026lt;= 3 * 10^4 二、分析 這一題是 [53. MaximumSubArray] 的進階題，如果沒有解題方向的話可以先解看看這題。 可以取 circular 代表，可以取頭尾合併，去掉中間的子序列，換個方式思考就是求「總和-最小子序列」。 注意子序列至少要有一個元素，故當最小子序列等於總和是，要特別處理 三、解題 1. DP Time complexity: \\(O(n)\\) Space complexity: \\(O(1)\\) int maxSubarraySumCircular(vector\u0026lt;int\u0026gt;\u0026amp; nums) { int neg_cur = INT_MAX; int pos_cur = INT_MIN; int total = 0; int neg_max = INT_MAX; int pos_max = INT_MIN; for (int i = 0; i \u0026lt; nums.size(); i++) { neg_cur = neg_cur \u0026gt; 0 ? nums[i] : (neg_cur + nums[i]); pos_cur = pos_cur \u0026lt; 0 ? nums[i] : (pos_cur + nums[i]); neg_max = min(neg_cur, neg_max); // 記錄最小子序列 pos_max = max(pos_cur, pos_max); // 記錄最大子序列 total += nums[i]; // 記錄總和 } if (total == neg_max) return pos_max; // 當總和等於最小子序列時，因為至少需拿一個元素，特例處理 return max(pos_max, total - neg_max); // 解為最大子序列或總和-最小子序列(環狀) } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/918/","summary":"\u003cp\u003e\u003cstrong\u003e918. Maximum Sum Circular Subarray\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{orange}\\textsf{Medium}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eArray\u003c/code\u003e、\u003ccode\u003eDivide and Conquer\u003c/code\u003e、\u003ccode\u003eDynamic Programming\u003c/code\u003e、\u003ccode\u003eQueue\u003c/code\u003e、\u003ccode\u003eMonotonic Queue\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eGiven a \u003cstrong\u003ecircular integer array\u003c/strong\u003e \u003ccode\u003enums\u003c/code\u003e of length \u003ccode\u003en\u003c/code\u003e, return \u003cem\u003ethe maximum possible sum of a non-empty \u003cem\u003e\u003cstrong\u003esubarray\u003c/strong\u003e\u003c/em\u003e of\u003c/em\u003e \u003ccode\u003enums\u003c/code\u003e.\u003cbr\u003e\nA \u003cstrong\u003ecircular array\u003c/strong\u003e means the end of the array connects to the beginning of the array. Formally, the next element of \u003ccode\u003enums[i]\u003c/code\u003e is \u003ccode\u003enums[(i + 1) % n]\u003c/code\u003e and the previous element of \u003ccode\u003enums[i]\u003c/code\u003e is \u003ccode\u003enums[(i - 1 + n) % n]\u003c/code\u003e.\u003cbr\u003e\nA \u003cstrong\u003esubarray\u003c/strong\u003e may only include each element of the fixed buffer \u003ccode\u003enums\u003c/code\u003e at most once. Formally, for a subarray \u003ccode\u003enums[i], nums[i + 1], ..., nums[j]\u003c/code\u003e, there does not exist \u003ccode\u003ei \u0026lt;= k1\u003c/code\u003e, \u003ccode\u003ek2 \u0026lt;= j\u003c/code\u003e with \u003ccode\u003ek1 % n == k2 % n\u003c/code\u003e.\u003c/p\u003e","title":"[LeetCode] 918. Maximum Sum Circular Subarray"},{"content":"與時俱進的語言 一、System Class 1. 泛型(genric) 可更清楚的描述序列中每個元素的類型。 C#1 示例\npublic class Bookshelf { public IEnumerable Books { get { ... } } } C#2 示例：泛型\npublic class Bookshelf { public IEnumerable\u0026lt;Book\u0026gt; Books { get { ... } } } 2. 可空值類型(nullable value type) 可有效的表示未定的變量值，以擺脫魔數(用-1當集合索引，用 MinValue 或 MaxValue 做為初始值)。 示例\nstring? a = null; Console.WriteLine(a ?? \u0026#34;null\u0026#34;);\t// null a = \u0026#34;abc\u0026#34;; Console.WriteLine(a ?? \u0026#34;null\u0026#34;);\t// abc 3. 匿名類型(anonymous type)、隱式局部變數(var) 兩者皆可解決靜態類型語言的缺陷：程式碼冗長。 示例1: 匿名類型(anonymous type)\nvar book = new { Title = \u0026#34;Harry Potter\u0026#34;, Author = \u0026#34;J.K. Rowling\u0026#34; } string title = book.Title; string author = book.Author; 若已經調用了建構式的話，就無需顯式的宣該告變數的類型了。 示例2: 隱式類型(implicit typing)\nDictionary\u0026lt;string, string\u0026gt; map1 = new Dictionary\u0026lt;string, string\u0026gt;(); var map2 = new Dictionary\u0026lt;string, string\u0026gt;(); 4. 簡潔化 示例1:委托\nbutton.Click += new EventHandler(HandleButtonClick);\t// C#1 button.Click += HandleButtonClick;\t// C#2 方法組轉換+匿名方法 button.Click += delegate { MessageBox.Show(\u0026#34;Clicked!\u0026#34;) };\t// C#2 委托 button.Click += (sender, args) =\u0026gt; MessageBox.Show(\u0026#34;Clicked!\u0026#34;);\t// C#3 lamnda 表達式 void HandleButtonClick(object sender, EventArgs args) { MessageBox.Show(\u0026#34;Clicked!\u0026#34;); } 示例2:自動實現\n下面兩段 code 可以經由自動實現視為相同\nprivate string name; public string Name { get { return name; } set { name = value; } } public string Name { get; set; } 示例3:表達式主體成員\n下面兩段 code 可以經由表達式主體成員(expression-bodied member)視為相同\npublic int Count { get { return list.Count; } } public IEnumerator\u0026lt;string\u0026gt; GetEnumerator() { return list.GetEnumerator(); } public int Count =\u0026gt; list.Count; public IEnumerator GetEnumerator =\u0026gt; list.GetEnumerator(); 示例4:字串處理:內插內串字面量(interpolated string literal)\nthrow new KeyNotFoundException(\u0026#34;No calendar system for Id \u0026#34; + id + \u0026#34; exists\u0026#34;);\t// 字串拼接 throw new KeyNotFoundException(string.Format(\u0026#34;No calendar system for Id {0} exists\u0026#34;, id));\t// 字串格式化 throw new KeyNotFoundException($\u0026#34;No calendar system for Id {id} exists\u0026#34;);\t// 內插字串字面量 示例5: 利用LINQ進行數據訪問\nvar offers = from product in db.Products where product.SalePrice \u0026lt;= product.Price / 2 orderby product.SalePrice select new { producdt.Id, product.Description, product.SalePrice, priduct.Price }; 示例6: 非同步\nprivate async Task UpdateStatus() { Task\u0026lt;Weather\u0026gt; weatherTask = GetWeatherAsync(); Task\u0026lt;EmailStatus\u0026gt; emailTask = GetEmailStatusAsync(); Weather weather = await weatherTask; EmailStatus emai = await emailTask; weatherLabel.Text = weather.Description; inboxLabel.Text = email.InboxCount.ToString(); } ","permalink":"https://intervalrain.github.io/it/csharp_depth_ch1/","summary":"\u003ch1 id=\"與時俱進的語言\"\u003e與時俱進的語言\u003c/h1\u003e\n\u003ch2 id=\"一system-class\"\u003e一、System Class\u003c/h2\u003e\n\u003ch3 id=\"1-泛型genric\"\u003e1. 泛型(genric)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e可更清楚的描述序列中每個元素的類型。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cem\u003eC#1 示例\u003c/em\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Csharp\" data-lang=\"Csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eBookshelf\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e IEnumerable Books { \u003cspan style=\"color:#66d9ef\"\u003eget\u003c/span\u003e { ... } }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cem\u003eC#2 示例：泛型\u003c/em\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Csharp\" data-lang=\"Csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eBookshelf\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e IEnumerable\u0026lt;Book\u0026gt; Books { \u003cspan style=\"color:#66d9ef\"\u003eget\u003c/span\u003e { ... } }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch3 id=\"2-可空值類型nullable-value-type\"\u003e2. 可空值類型(nullable value type)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e可有效的表示未定的變量值，以擺脫魔數(用\u003ccode\u003e-1\u003c/code\u003e當集合索引，用 \u003ccode\u003eMinValue\u003c/code\u003e 或 \u003ccode\u003eMaxValue\u003c/code\u003e 做為初始值)。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cem\u003e示例\u003c/em\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Csharp\" data-lang=\"Csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estring?\u003c/span\u003e a = \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eConsole.WriteLine(a ?? \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;null\u0026#34;\u003c/span\u003e);\t\t\u003cspan style=\"color:#75715e\"\u003e// null\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ea = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;abc\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eConsole.WriteLine(a ?? \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;null\u0026#34;\u003c/span\u003e);\t\t\u003cspan style=\"color:#75715e\"\u003e// abc\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch3 id=\"3-匿名類型anonymous-type隱式局部變數var\"\u003e3. 匿名類型(anonymous type)、隱式局部變數(var)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e兩者皆可解決靜態類型語言的缺陷：程式碼冗長。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cem\u003e示例1: 匿名類型(anonymous type)\u003c/em\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Csharp\" data-lang=\"Csharp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e book = \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tTitle = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Harry Potter\u0026#34;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tAuthor = \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;J.K. Rowling\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e title = book.Title;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e author = book.Author;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e若已經調用了建構式的話，就無需顯式的宣該告變數的類型了。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cem\u003e示例2: 隱式類型(implicit typing)\u003c/em\u003e\u003c/p\u003e","title":"[IT] C# Depth Ch.1 與時俱進的語言"},{"content":"926. Flip String to Monotone Increasing\nHardness: \\(\\color{orange}\\textsf{Medium}\\) Ralated Topics: String、Dynamic Programming 一、題目 A binary string is monotone increasing if it consists of some number of 0\u0026rsquo;s (possibly none), followed by some number of 1\u0026rsquo;s (also possibly none).\nYou are given a binary string s. You can flip s[i] changing 0 to 1 or from 1 to 0.\nReturn the minimum number of flips to make s monotone increasing.\nExample 1:\nInput: s = \u0026ldquo;00110\u0026rdquo; Output: 1 Explanation: We flip the last digit to get 00111. Example 2:\nInput: s = \u0026ldquo;010110\u0026rdquo; Output: 2 Explanation: We flip to get 011111, or alternatively 000111. Example 3:\nInput: s = \u0026ldquo;00011000\u0026rdquo; Output: 2 Explanation: We flip to get 00000000. Constraints:\n1 \u0026lt;= s.length \u0026lt;= 10^5 s[i] is either '0' or '1'. 二、分析 這題可以使用動態規劃來解題，將 dp[0][i] 訂為將 s[i] 翻成 0 可以符合題目需求的最少次數，dp[1][i] 為將 s[i] 翻成 1 可以符合題目需求的最少次數。 當 s[i] == 0 時，前者一定要是 0；當 s[i] == 1 時，前者可以為 0 或 1。 根據上述可以得到狀態轉移方程式為： if (s[i] == \u0026#39;1\u0026#39;) { dp[0][i] = dp[0][i-1] + 1; dp[1][i] = min(dp[0][i-1], dp[1][i-1]); } else { dp[0][i] = dp[0][i-1]; dp[1][i] = min(dp[0][i-1], dp[1][i-1]) + 1; } 三、解題 1. DP Time complexity: \\(O(n)\\) Space complexity: \\(O(n)\\) int minFlipsMonoIncr(string s) { int n = s.length(); vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; dp(2, vector\u0026lt;int\u0026gt;(n, 0)); if (s[0] == \u0026#39;0\u0026#39;) dp[1][0] = 1; else dp[0][0] = 1; for (int i = 1; i \u0026lt; n; i++) { if (s[i] == \u0026#39;1\u0026#39;) { dp[0][i] = dp[0][i-1] + 1; // 將 1 翻成 0 dp[1][i] = min(dp[0][i-1], dp[1][i-1]); } else { dp[0][i] = dp[0][i-1]; dp[1][i] = min(dp[0][i-1], dp[1][i-1]) + 1; // 將 0 翻成 1 } } return min(dp[0][n-1], dp[1][n-1]); } 1. DP(space optimized) 從狀態轉移方程式觀察，可發現只與「前一狀態」相關，故可以進行狀態壓縮 Time complexity: \\(O(n)\\) Space complexity: \\(O(1)\\) int minFlipsMonoIncr(string s) { int n = s.length(); int zero = 0; int one = 0; if (s[0] == \u0026#39;0\u0026#39;) one = 1; else zero = 1; for (int i = 1; i \u0026lt; n; i++) { if (s[i] == \u0026#39;1\u0026#39;) { one = min(zero, one); zero++; } else { one = min(zero, one) + 1; } } return min(zero, one); } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/926/","summary":"\u003cp\u003e\u003cstrong\u003e926. Flip String to Monotone Increasing\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{orange}\\textsf{Medium}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eString\u003c/code\u003e、\u003ccode\u003eDynamic Programming\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eA binary string is monotone increasing if it consists of some number of \u003ccode\u003e0\u003c/code\u003e\u0026rsquo;s (possibly none), followed by some number of \u003ccode\u003e1\u003c/code\u003e\u0026rsquo;s (also possibly none).\u003cbr\u003e\nYou are given a binary string \u003ccode\u003es\u003c/code\u003e. You can flip \u003ccode\u003es[i]\u003c/code\u003e changing \u003ccode\u003e0\u003c/code\u003e to \u003ccode\u003e1\u003c/code\u003e or from \u003ccode\u003e1\u003c/code\u003e to \u003ccode\u003e0\u003c/code\u003e.\u003cbr\u003e\nReturn \u003cem\u003ethe minimum number of flips to make\u003c/em\u003e \u003ccode\u003es\u003c/code\u003e \u003cem\u003emonotone increasing\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e","title":"[LeetCode] 926. Flip String to Monotone Increasing"},{"content":" Reference\nhttps://blog.csdn.net/w918589859/article/details/108752592\nhttps://www.w3cschool.cn/linux/linux-Shell.html\n一、Shell 簡介 什麼是 Shell?\nShell 是一個用 C 語言編寫的程式，它是使用者使用 Linux 的橋樑。Shell 既是一種命令語言，又是一種程式設計語言。\nShell 是指一種應用程式，這個應用程式提供了一個界面，使用者通過這個界面訪問作業系統核心(kernel)的服務。 為什麼要學習和使用 Shell?\nShell 屬於內建的腳本，程序開發的效率非常高，依賴於功能強大的命令可以迅速的完成開發任務(批次處理)。 Shell 腳本(Shell script)\n是一種為 Shell 編寫的腳本程式。業界所說的 Shell 通常都是指 Shell 腳本。 二、 Shell 入門 1. Shell 環境 Shell 編程需要能編寫程式碼的文本編輯器和一個能解釋執行的腳本解釋器。 在 linux 中有很多類型的 Shell，不同的 Shell 具備不同的功能，Shell 還決定了腳本中函數的語法。 Bash 是 Linux 中默認的 Shell。一般情況下，人們不區分 Bourne Shell 和 Bourne Again Shell，所以 #!/bin/sh 也可以被替換成 #!/bin/bash Linux 的 Shell 種類眾多，不同的 Shell 都有自己的特點以及用途，常見的有： Bourne Shell (/usr/bin/sh 或 /bin/sh) Bourne Again Shell (/bin/bash) C Shell (/usr/bin/csh) K Shell (/usr/bin/ksh) Shell for Root(sbin/sh) \u0026hellip;\u0026hellip; 2. Bash 常用快捷鏈 快捷鏈 功能 Ctrl+A 把游標移動到命令行開頭。 Ctrl+E 把游標移動到命令行結尾。 Ctrl+C 強制終止當前的命令。 Ctrl+L 清除螢幕，等於 clear 指令。 Ctrl+U 清除並剪下當前命令。 Ctrl+K 刪除並剪下游標以後的命令。 Ctrl+Y 貼上。 Ctrl+R 在歷史命令中搜索，按下 Ctrl+R 之後，就會出現搜索界面，只要輸入搜索內容，就會從歷史命令中搜索。 Ctrl+D 退出當前終端機。 Ctrl+Z 暫停，並放入後台。 Ctrl+S 暫停螢幕輸出。 Ctrl+Q 恢復螢幕輸出。 3. 輸入與輸出 I/O linux 的標準輸入與輸出\n設備 設備名 文件描述符 類型 鍵盤 /dev/stdin 0 標準輸入 顯示器 /dev/stdout 1 標準輸出 顯示器 /dev/stderr 2 標準錯誤輸出 輸入重定向\n輸入重定向：是指不使用系統提供的標準輸入界面，而進行重新的指定。換言之，輸入重定向就是不使用標準輸入界面輸入文件，而是使用指定的文件作為標準輸入設備。\n(簡言之就是用 \u0026lt; 來修改標準輸入設備)\n類型 語法 功能 標準輸入 command \u0026lt; file 命令把文件中的內容作為標準輸入設備。 標識限定輸入 command \u0026lt;\u0026lt; tag 命令讀取標準輸入中的內容，直到遇到標識符號為止。 輸入輸出重定向(同時使用) command \u0026lt; file1 \u0026gt; file2 命令把文件1中的內容作為標準輸入，把文件2作為標準輸出。 輸出重定向\n輸出重定向：將輸出的文件訊息寫入到指定文件。\n\u0026amp;表示全部文件，文件不管對錯，1表示標準輸出文件、2表示標準錯誤輸出。\n類型 語法 功能 標註輸出重定向 command \u0026gt; file 以覆蓋方式，把命令的正確輸出內容輸出到指定的文件或設備中 標註輸出重定向 command \u0026gt;\u0026gt; file 以追加方式，把命令的正確輸出內容輸出到指定的文件或設備中 標準錯誤輸出重重定向 err_command 2\u0026gt; file 以覆蓋方式，把命令的錯誤輸出輸出到指定的文件或設備當中 標準錯誤輸出重重定向 err_command 2\u0026gt;\u0026gt; file 以追加方式，把令命的錯誤輸出輸出到指定的文件或設備中 正確輸出和錯誤輸出同時保存 command \u0026gt; file \u0026gt; 2\u0026gt;\u0026amp;1 以覆蓋的方式，把正確輸出和錯誤輸出都保存到同一個文件 正確輸出和錯誤輸出同時保存 command \u0026gt;\u0026gt; file 2\u0026gt;\u0026amp;1 以追加方式，把正確輸出和錯誤輸出都保存到同一個文件 正確輸出和錯誤輸出同時保存 command \u0026amp;\u0026gt; file 以覆蓋的方式，把正確輸出和錯誤輸出都保存到同一個文件 正確輸出和錯誤輸出同時保存 command \u0026amp;\u0026gt;\u0026gt; file 以追加方式，把正確輸出和錯誤輸出都保存到同一個文件 正確輸出和錯誤輸出同時保存 command \u0026gt;\u0026gt; file1 2\u0026gt;\u0026gt; file2 把正確的輸出追加到文件1，把錯誤的輸出追加到文件2中。 /dev/null\n若希望執行某個命令，但又不希望在螢幕上顯示輸出結果，那麼可以將輸出重定向到 /dev/null 中。\n[root@localhost ~]$ command \u0026gt; dev/null 4. 多命令順序執行 多命令執行符 作用 格式 ; 命令1;命令2 多個命令順序執行，命令之間沒有任何邏輯關係。 \u0026amp;\u0026amp; 命令1\u0026amp;\u0026amp;命令2 當命令1正確執行，命令2才會執行；當命令1執行不正確，則命令2不會執行。 || 命令1||命令2 當命令1正確執行，命令2不執行；當命令1執行不正確，則命令2才會執行。 5. Shell 腳本(Shell script) 撰寫腳本\n[root@localhost ~]$ vim test.sh #!/bin/bash echo \u0026#34;hello world\u0026#34; #! 是一個約定的標記，它告訴系統這個腳本需要什麼解釋器來執行，即使用哪一種 Shell。 echo 命令用於向 Console 輸出文本。 file.sh .sh是linux下 bash Shell 的預設副檔名 執行方法\n增加執行權限 [root@localhost ~]$ chmod u+x test.sh // 對所有user增加對當前目錄下的test.sh文件的執行權限 [root@localhost ~]$ ./test.sh chmod: change the permissions mode of a file u: user +x: 增加執行權限 通過 bash 調用執行腳本 [root@localhost ~]$ bash test.sh 三、 Shell 變數 1. 變數的命名規則 首個字元必須為英文字母 (a-z，A-Z) 中間不能有空格，可以用底線(_)取代。 不能使用標點符號。 不能使用關鍵字(可用 help 查看保留關鍵字)。 環境變數習慣大寫，便於區分。 調用變數示例\n[root@localhost ~]$ test=123 [root@localhost ~]$ test=\u0026#34;$test\u0026#34;456 [root@localhost ~]$ echo $test 123456 [root@localhost ~]$ test=${test}789 [root@localhost ~]$ echo $test 123456789 Shell 中的特殊符號\n符號 作用 '' 在單引號中所有字元都是普通字元，照原樣輸出。 \u0026quot;\u0026quot; 在雙引號中只有 $ 與 ` 和 \\ 是有特殊含義，分別是調用變數、引用命令和轉義。 `` 在反引號中的內容是系統命令，在 Bash 中會先執行，與 () 作用一樣，但不推薦使用。 $() 和反引號作用相同，用來引用系統命令。 () 用於一串命令執行時，() 中的命令會在子 Shell 中運行。 {} 用於一串命令執行時，{} 中的命令會在當前 Shell 中執行。也可以用於變數變形與替換。 [] 用於變數的測試。 # 用於注釋。 $ 用於調用變數的值。 \\ 用於轉義。 單引號與雙引號示例\n[root@localhost ~]$ name=rain [root@localhost ~]$ echo \u0026#39;$name\u0026#39; $name [root@localhost ~]$ echo \u0026#34;$name\u0026#34; rain [root@localhost ~]$ echo `date` 2023年 1月17日 週二 21時23分45秒 CST [root@localhost ~]$ echo \u0026#39;`date`\u0026#39; `date` [root@localhost ~]$ echo \u0026#34;`date`\u0026#34; 2023年 1月17日 週二 21時24分00秒 CST 反引號示例\n[root@localhost ~]$ echo ls ls [root@localhost ~]$ echo `ls` words.txt [root@localhost ~]$ echo $(date) 2023年 1月17日 週二 21時28分42秒 CST 2. 變數的分類 變數分類 名稱 作用 內容 自定義變數 自定義 自定義 自定義 使用自定義環境變數 自定義 自定義 自定義 系統環境變數 預定 預定 自定義 位置參數變數 預定 自定義 自定義 預定義變數 預定 自定義 自定義 2.1. 自定義變數： 最常見的變數，由使用者自由定義變數名稱與值。 使用 $ 調用變數。 使用 set [選項] 設定 -u：調用未宣告變數時會報錯(預設未無提示) -x：在命令執行之前，會把命令先輸出一次 +\u0026lt;參數\u0026gt;：取消某個曾啟動過的參數 set：查詢系統中所有的變量，包含自定義變數與環境變數 unset 變數名稱：刪除變數 2.2. 環境變數： 主要保存和系統操作環境相關的數據，比如當前登錄的使用者名稱，使用者的根目錄、命令的提示符等。一般對系統起作用的環境變數名稱是系統預定好的。 使用 export 宣告的變數即是環境變數 使用 env 查看環境變數 2.3. 位置參數變數： 用來向腳本當中傳遞參數或數據的，變數名稱不能自定義，變數作用是固定的。 $n：n 為數字，$0表示當前 Shell 腳本程式的名稱，10以上需加大括號。 $*：代表命令行中所有參數，$把所有參數看成一個整體。 $@：代表命令行中所有參數，不過$把每個參數區分對待。 $#：代表命令行中所有參數的個數 腳本示例1\n#!/bin/sh echo \u0026#34;shell\u0026#39;s name: $0\u0026#34; echo \u0026#34;shell\u0026#39;s first argument: $1\u0026#34; echo \u0026#34;shell\u0026#39;s second argument: $2\u0026#34; [root@localhost ~]$ bash test.sh 1 2 shell\u0026#39;s name: test.sh shell\u0026#39;s first argument: 1 shell\u0026#39;s second arguemnt: 2 腳本示例2\n#!/bin/sh for i in \u0026#34;$*\u0026#34; do echo \u0026#34;The parameter is: $i\u0026#34; done x=1 for y in \u0026#34;$@\u0026#34; do echo \u0026#34;The parameter$x is: $y\u0026#34; x=$(( $x +1 )) done [root@localhost ~]$ bash par.sh 1 2 3 4 5 6 The parameter is: 1 2 3 4 5 6 The parameter1 is: 1 The parameter2 is: 2 The parameter3 is: 3 The parameter4 is: 4 The parameter5 is: 5 The parameter6 is: 6 2.4. 預定義變數： 是Bash中已經定義好的變數，變數名稱不能自定義，變數作用也是固定的。 預定義變數 作用 $? 最後一次執行的命令的返回狀態。如果這個變數的值為 0，表示上一個命令正確執行；如果這個變數的值非 0(具體為哪個數，由命令自己決定)，則表示上一個命令執行不正確。 $$ 當前程式的程式號(PID) $! 後台運行的最後一個程式的程式號(PID) 腳本示例1\n[root@localhost ~]$ ls count.sh hello.sh parameter.sh [root@localhost ~]$ echo $? 0 [root@localhost ~]$ ls install.log ls: install.log: No such file or directory [root@localhost ~]$ echo $? 1 ","permalink":"https://intervalrain.github.io/it/shell/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eReference\u003c/strong\u003e\u003cbr\u003e\n\u003ca href=\"https://blog.csdn.net/w918589859/article/details/108752592\"\u003ehttps://blog.csdn.net/w918589859/article/details/108752592\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"https://www.w3cschool.cn/linux/linux-Shell.html\"\u003ehttps://www.w3cschool.cn/linux/linux-Shell.html\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"一shell-簡介\"\u003e一、Shell 簡介\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e什麼是 Shell?\u003cbr\u003e\nShell 是一個用 C 語言編寫的程式，它是使用者使用 Linux 的橋樑。Shell 既是一種命令語言，又是一種程式設計語言。\u003cbr\u003e\nShell 是指一種應用程式，這個應用程式提供了一個界面，使用者通過這個界面訪問作業系統核心(kernel)的服務。\u003c/li\u003e\n\u003cli\u003e為什麼要學習和使用 Shell?\u003cbr\u003e\nShell 屬於內建的腳本，程序開發的效率非常高，依賴於功能強大的命令可以迅速的完成開發任務(批次處理)。\u003c/li\u003e\n\u003cli\u003eShell 腳本(Shell script)\u003cbr\u003e\n是一種為 Shell 編寫的腳本程式。業界所說的 Shell 通常都是指 Shell 腳本。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"二-shell-入門\"\u003e二、 Shell 入門\u003c/h2\u003e\n\u003ch3 id=\"1-shell-環境\"\u003e1. Shell 環境\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eShell 編程需要能編寫程式碼的\u003cstrong\u003e文本編輯器\u003c/strong\u003e和一個能解釋執行的\u003cstrong\u003e腳本解釋器\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e在 linux 中有很多類型的 Shell，不同的 Shell 具備不同的功能，Shell 還決定了腳本中函數的語法。\u003c/li\u003e\n\u003cli\u003eBash 是 Linux 中默認的 Shell。一般情況下，人們不區分 Bourne Shell 和 Bourne Again Shell，所以 \u003ccode\u003e#!/bin/sh\u003c/code\u003e 也可以被替換成 \u003ccode\u003e#!/bin/bash\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eLinux 的 Shell 種類眾多，不同的 Shell 都有自己的特點以及用途，常見的有：\n\u003cul\u003e\n\u003cli\u003eBourne Shell (\u003ccode\u003e/usr/bin/sh\u003c/code\u003e 或 \u003ccode\u003e/bin/sh\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003eBourne Again Shell (\u003ccode\u003e/bin/bash\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003eC Shell (\u003ccode\u003e/usr/bin/csh\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003eK Shell (\u003ccode\u003e/usr/bin/ksh\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003eShell for Root(\u003ccode\u003esbin/sh\u003c/code\u003e)\u003c/li\u003e\n\u003cli\u003e\u0026hellip;\u0026hellip;\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"2-bash-常用快捷鏈\"\u003e2. Bash 常用快捷鏈\u003c/h3\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth style=\"text-align: center\"\u003e快捷鏈\u003c/th\u003e\n          \u003cth style=\"text-align: left\"\u003e功能\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003eCtrl+A\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e把游標移動到命令行開頭。\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003eCtrl+E\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e把游標移動到命令行結尾。\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003eCtrl+C\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e強制終止當前的命令。\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003eCtrl+L\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e清除螢幕，等於 \u003ccode\u003eclear\u003c/code\u003e 指令。\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003eCtrl+U\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e清除並剪下當前命令。\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003eCtrl+K\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e刪除並剪下游標以後的命令。\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003eCtrl+Y\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e貼上。\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003eCtrl+R\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e在歷史命令中搜索，按下 Ctrl+R 之後，就會出現搜索界面，只要輸入搜索內容，就會從歷史命令中搜索。\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003eCtrl+D\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e退出當前終端機。\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003eCtrl+Z\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e暫停，並放入後台。\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003eCtrl+S\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e暫停螢幕輸出。\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd style=\"text-align: center\"\u003eCtrl+Q\u003c/td\u003e\n          \u003ctd style=\"text-align: left\"\u003e恢復螢幕輸出。\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003chr\u003e\n\u003ch3 id=\"3-輸入與輸出-io\"\u003e3. 輸入與輸出 I/O\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003elinux 的標準輸入與輸出\u003c/strong\u003e\u003c/p\u003e","title":"[IT] Shell 筆記"},{"content":"1519. Number of Nodes in the Sub-Tree With the Same Level\nHardness: \\(\\color{orange}\\textsf{Medium}\\) Ralated Topics: Hash Table、Tree、Depth-First Search、Breadth-First Search、Counting 一、題目 You are given a tree (i.e. a connected, undirected graph that has no cycles) consisting of n nodes numbered from 0 to n - 1 and exactly n - 1 edges. The root of the tree is the node 0, and each node of the tree has a label which is a lower-case character given in the string labels (i.e. The node with the number i has the label labels[i]).\nThe edges array is given on the form edges[i] = [ai, bi], which means there is an edge between nodes ai and bi in the tree.\nReturn an array of size n where ans[i] is the number of nodes in the subtree of the ith node which have the same label as node i.\nA subtree of a tree T is the tree consisting of a node in T and all of its descendant nodes.\nExample 1:\nInput: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], labels = \u0026ldquo;abaedcd\u0026rdquo; Output: [2,1,1,1,1,1,1] Explanation: Node 0 has label \u0026lsquo;a\u0026rsquo; and its sub-tree has node 2 with label \u0026lsquo;a\u0026rsquo; as well, thus the answer is 2. Notice that any node is part of its sub-tree.\nNode 1 has a label \u0026lsquo;b\u0026rsquo;. The sub-tree of node 1 contains nodes 1,4 and 5, as nodes 4 and 5 have different labels than node 1, the answer is just 1 (the node itself). Example 2: Input: n = 4, edges = [[0,1],[1,2],[0,3]], labels = \u0026ldquo;bbbb\u0026rdquo; Output: [4,2,1,1] Explanation: The sub-tree of node 2 contains only node 2, so the answer is 1.\nThe sub-tree of node 3 contains only node 3, so the answer is 1.\nThe sub-tree of node 1 contains nodes 1 and 2, both have label \u0026lsquo;b\u0026rsquo;, thus the answer is 2.\nThe sub-tree of node 0 contains nodes 0, 1, 2 and 3, all with label \u0026lsquo;b\u0026rsquo;, thus the answer is 4. Example 3: Input: n = 5, edges = [[0,1],[0,2],[1,3],[0,4]], labels = \u0026ldquo;aabab\u0026rdquo; Output: [3,2,1,1,1] Constraints:\n1 \u0026lt;= n \u0026lt;= 10^5 edges.length == n - 1 edges[i].length == 2 0 \u0026lt;= ai, bi \u0026lt; n ai != bi labels.length == n labels is consisting of only of lowercase English letters. 二、分析 這一題是後序遍歷，利用後序遍歷可以得到遍歷過後的訊息來解題。 我們要的訊息是：當遍歷完子節點之後，每個字元已出現了幾遍，而根節點以下的所有節點出現過的字元次數，就是所有子節點統計數字的相加再加上根節點自己。 這邊要注意的是，因為每次深入子節點，都需要新增一組陣列，會大量使用到記憶體，所以在處理上要小心空間複雜度的處理。技巧是，能用參考就用參考。 由於這題的 n 的限制較大，只能運用陣列的加法，時間複雜度為\\(O(26)\\)，若場景有確認過，每個字符出現的次數限定在 10 以內，可以改用 int 來記錄，其加法的時間複雜度可以大大的下降。 三、解題 1. DFS Time complexity: \\(O(26\\times n)\\) Space complexity: \\(O(26\\times k), k 為深度\\) vector\u0026lt;int\u0026gt; res; vector\u0026lt;int\u0026gt; countSubTrees(int n, vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; edges, string labels) { vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; graph(n); // 先將 undirected graph 轉成每個節點有哪些鄰居 for (const auto\u0026amp; e : edges) { graph[e[0]].push_back(e[1]); graph[e[1]].push_back(e[0]); } res.assign(n, 0); dfs(graph, labels, -1, 0); // 起點為 0，而節點不為負，過 last 可假定為任意負數 return res; } vector\u0026lt;int\u0026gt; dfs(vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; graph, string\u0026amp; labels, int last, int curr) { vector\u0026lt;int\u0026gt; path(26, 0); // 用一陣列記錄字符出現的次數 path[labels[curr]-\u0026#39;a\u0026#39;]++; for (const auto\u0026amp; next : graph[curr]) { if (last == next) continue; // 進到上一輪的數字則跳過 vector\u0026lt;int\u0026gt; tmp = dfs(graph, labels, curr, next); add(path, tmp); // 將遍歷完的結果加起來 } res[curr] = path[labels[curr]-\u0026#39;a\u0026#39;]; // 在後序的時間點，把統計完的結果記錄下來 return path; } void add(vector\u0026lt;int\u0026gt;\u0026amp; a, vector\u0026lt;int\u0026gt;\u0026amp; b) { // 用參考的方法做陣列的加法，也不回傳，可以省下空間 for (int i = 0; i \u0026lt; 26; i++) a[i] += b[i]; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/1519/","summary":"\u003cp\u003e\u003cstrong\u003e1519. Number of Nodes in the Sub-Tree With the Same Level\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{orange}\\textsf{Medium}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eHash Table\u003c/code\u003e、\u003ccode\u003eTree\u003c/code\u003e、\u003ccode\u003eDepth-First Search\u003c/code\u003e、\u003ccode\u003eBreadth-First Search\u003c/code\u003e、\u003ccode\u003eCounting\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eYou are given a tree (i.e. a connected, undirected graph that has no cycles) consisting of \u003ccode\u003en\u003c/code\u003e nodes numbered from \u003ccode\u003e0\u003c/code\u003e to \u003ccode\u003en - 1\u003c/code\u003e and exactly \u003ccode\u003en - 1\u003c/code\u003e \u003ccode\u003eedges\u003c/code\u003e. The \u003cstrong\u003eroot\u003c/strong\u003e of the tree is the node \u003ccode\u003e0\u003c/code\u003e, and each node of the tree has \u003cstrong\u003ea label\u003c/strong\u003e which is a lower-case character given in the string \u003cstrong\u003elabels\u003c/strong\u003e (i.e. The node with the number \u003ccode\u003ei\u003c/code\u003e has the label \u003ccode\u003elabels[i]\u003c/code\u003e).\u003cbr\u003e\nThe \u003ccode\u003eedges\u003c/code\u003e array is given on the form \u003ccode\u003eedges[i] = [ai, bi]\u003c/code\u003e, which means there is an edge between nodes \u003ccode\u003eai\u003c/code\u003e and \u003ccode\u003ebi\u003c/code\u003e in the tree.\u003cbr\u003e\nReturn \u003cem\u003ean array of size \u003ccode\u003en\u003c/code\u003e\u003c/em\u003e where \u003ccode\u003eans[i]\u003c/code\u003e is the number of nodes in the subtree of the \u003ccode\u003eith\u003c/code\u003e node which have the same label as node \u003ccode\u003ei\u003c/code\u003e.\u003cbr\u003e\nA subtree of a tree \u003ccode\u003eT\u003c/code\u003e is the tree consisting of a node in \u003ccode\u003eT\u003c/code\u003e and all of its descendant nodes.\u003c/p\u003e","title":"[LeetCode] 1519. Number of Nodes in the Sub-Tree With the Same Level"},{"content":"100. Same Tree\nHardness: \\(\\color{green}\\textsf{Easy}\\) Ralated Topics: Tree、Depth-First Search、Breadth-First Search、Binary Tree 一、題目 Given the roots of two binary tree p and q, write a function to check if they are the same or not.\nTwo binary tree are considered the same if they are structurally iedntical, and the nodes have the same value.\nExample 1:\nInput: p = [1,2,3], q = [1,2,3] Output: true Example 2:\nInput: p = [1,2], q = [1,null,2] Output: false Example 3: Input: p = [1,2,1], q = [1,1,2] Output: false Constraints:\nThe number of nodes in both trees is in the range [0, 100]. -10^4 \u0026lt;= Node.val \u0026lt;= 10^4 二、分析 典型樹的遍歷問題，兩棵樹一起遍歷，注意要處理當 node == null 的情形便可。 兩棵樹相同的條件為：root 的值相同，且左右兩個 leaf 也相同。 三、解題 1. Recursion Time complexity: \\(O(n)\\) Space complexity: \\(O(1)\\) bool isSameTree(TreeNode* p, TreeNode* q) { if (p == NULL \u0026amp;\u0026amp; q == NULL) return true; if (p == NULL || q == NULL) return false; if (p-\u0026gt;val != q-\u0026gt;val) return false; return isSameTree(p-\u0026gt;left, q-\u0026gt;left) \u0026amp;\u0026amp; isSameTree(p-\u0026gt;right, q-\u0026gt;right); } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/100/","summary":"\u003cp\u003e\u003cstrong\u003e100. Same Tree\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{green}\\textsf{Easy}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eTree\u003c/code\u003e、\u003ccode\u003eDepth-First Search\u003c/code\u003e、\u003ccode\u003eBreadth-First Search\u003c/code\u003e、\u003ccode\u003eBinary Tree\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eGiven the roots of two binary tree \u003ccode\u003ep\u003c/code\u003e and \u003ccode\u003eq\u003c/code\u003e, write a function to check if they are the same or not.\u003cbr\u003e\nTwo binary tree are considered the same if they are structurally iedntical, and the nodes have the same value.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003cbr\u003e\n\u003cimg alt=\"ex1\" loading=\"lazy\" src=\"https://assets.leetcode.com/uploads/2020/12/20/ex1.jpg\"\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInput:\u003c/strong\u003e p = [1,2,3], q = [1,2,3]\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e true\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003cbr\u003e\n\u003cimg alt=\"ex2\" loading=\"lazy\" src=\"https://assets.leetcode.com/uploads/2020/12/20/ex2.jpg\"\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInput:\u003c/strong\u003e p = [1,2], q = [1,null,2]\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e false\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 3:\u003c/strong\u003e\n\u003cimg alt=\"ex3\" loading=\"lazy\" src=\"https://assets.leetcode.com/uploads/2020/12/20/ex3.jpg\"\u003e\u003c/p\u003e","title":"[LeetCode] 100. Same Tree"},{"content":"149. Max Points on a Line\nHardness: \\(\\color{red}\\textsf{Hard}\\) Ralated Topics: Array、Hash Table、Math、Geometry 一、題目 Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane, return the maximum number of points that lie on the same straight line.\nExample 1:\nInput: points = [[1,1],[2,2],[3,3]] Output: 3 Example 2: Input: points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]] Output: 4 Constraints:\n1 \u0026lt;= points.length \u0026lt;= 300 points[i].length == 2 -10^4 \u0026lt;= xi, yi \u0026lt;= 10^4 All the points are unique. 二、分析 若干點在同一條線上，表示這些點的斜率都相同，注意題目有提示不會有相同的點，故兩點間必定有斜率。 特別注意當分母為 0 時要特別處理。 題目有限制 -10^4 \u0026lt;= xi, yi \u0026lt;= 10^4，故斜率最大 10^8，所以我們可以將分母為零的斜率暫定為 INT_MAX(2147483647)。 遍歷每個點，並統計該點與其它點之間的斜率，將斜率用 unordered_map 記錄下來，其每個斜率的直線上總共會有 m+1 (加上自己)。 三、解題 1. Time complexity: \\(O(n^2)\\) Space complexity: \\(O(n)\\) int maxPoints(vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; points) { int n = points.size(); int res = 0; for (int i = 0; i \u0026lt; n; i++) { int\u0026amp; x0 = points[i][0]; int\u0026amp; y0 = points[i][1]; unordered_map\u0026lt;double,int\u0026gt; map; for (int j = 0; j \u0026lt; n; j++) { if (i == j) continue; // 若等於自己則跳過 int\u0026amp; x1 = points[j][0]; int\u0026amp; y1 = points[j][1]; if (x0 == x1) { // 當分母為 0 時特別處理 int\u0026amp; cnt = ++map[INT_MAX]; res = max(res, cnt); } else { double m = (y1-y0)/(1.0*(x1-x0)); // 注意將斜率轉成 double int\u0026amp; cnt = ++map[m]; res = max(res, cnt); } } } return res + 1; // 答案記得加 1，加上自己 } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/149/","summary":"\u003cp\u003e\u003cstrong\u003e149. Max Points on a Line\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{red}\\textsf{Hard}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eArray\u003c/code\u003e、\u003ccode\u003eHash Table\u003c/code\u003e、\u003ccode\u003eMath\u003c/code\u003e、\u003ccode\u003eGeometry\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eGiven an array of \u003ccode\u003epoints\u003c/code\u003e where \u003ccode\u003epoints[i] = [xi, yi]\u003c/code\u003e represents a point on the \u003cstrong\u003eX-Y\u003c/strong\u003e plane, return \u003cem\u003ethe maximum number of points that lie on the same straight line\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003cbr\u003e\n\u003cimg alt=\"plane1\" loading=\"lazy\" src=\"https://assets.leetcode.com/uploads/2021/02/25/plane1.jpg\"\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInput:\u003c/strong\u003e points = [[1,1],[2,2],[3,3]]\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e 3\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\n\u003cimg alt=\"plane2\" loading=\"lazy\" src=\"https://assets.leetcode.com/uploads/2021/02/25/plane2.jpg\"\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInput:\u003c/strong\u003e points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e 4\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e1 \u0026lt;= points.length \u0026lt;= 300\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epoints[i].length == 2\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e-10^4 \u0026lt;= xi, yi \u0026lt;= 10^4\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eAll the \u003ccode\u003epoints\u003c/code\u003e are \u003cstrong\u003eunique\u003c/strong\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"二分析\"\u003e二、分析\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e若干點在同一條線上，表示這些點的斜率都相同，注意題目有提示不會有相同的點，故兩點間必定有斜率。\n\u003cul\u003e\n\u003cli\u003e特別注意當分母為 \u003ccode\u003e0\u003c/code\u003e 時要特別處理。\u003c/li\u003e\n\u003cli\u003e題目有限制 \u003ccode\u003e-10^4 \u0026lt;= xi, yi \u0026lt;= 10^4\u003c/code\u003e，故斜率最大 \u003ccode\u003e10^8\u003c/code\u003e，所以我們可以將分母為零的斜率暫定為 \u003ccode\u003eINT_MAX(2147483647)\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e遍歷每個點，並統計該點與其它點之間的斜率，將斜率用 \u003ccode\u003eunordered_map\u003c/code\u003e 記錄下來，其每個斜率的直線上總共會有 \u003ccode\u003em+1\u003c/code\u003e (加上自己)。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"三解題\"\u003e三、解題\u003c/h3\u003e\n\u003ch4 id=\"1\"\u003e1.\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eTime complexity: \\(O(n^2)\\)\u003c/li\u003e\n\u003cli\u003eSpace complexity: \\(O(n)\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emaxPoints\u003c/span\u003e(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003evector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u0026amp;\u003c/span\u003e points) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e points.size();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e res \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e n; i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e x0 \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e points[i][\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e y0 \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e points[i][\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        unordered_map\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003edouble\u003c/span\u003e,\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e map;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e j \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; j \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e n; j\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (i \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e j) \u003cspan style=\"color:#66d9ef\"\u003econtinue\u003c/span\u003e;                   \u003cspan style=\"color:#75715e\"\u003e// 若等於自己則跳過\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e            \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e x1 \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e points[j][\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e y1 \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e points[j][\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (x0 \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e x1) {                         \u003cspan style=\"color:#75715e\"\u003e// 當分母為 0 時特別處理\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e                \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e cnt \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003emap[INT_MAX];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                res \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e max(res, cnt);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003edouble\u003c/span\u003e m \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (y1\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003ey0)\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e1.0\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e(x1\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003ex0));   \u003cspan style=\"color:#75715e\"\u003e// 注意將斜率轉成 double\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e                \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e cnt \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003emap[m];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                res \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e max(res, cnt);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e res \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;                                 \u003cspan style=\"color:#75715e\"\u003e// 答案記得加 1，加上自己\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ca href=\"/leetcode\"\u003e回目錄 Catalog\u003c/a\u003e\u003c/p\u003e","title":"[LeetCode] 149. Max Points on a Line"},{"content":"452. Minimum Number of Arrows to Burst Balloons\nHardness: \\(\\color{orange}\\textsf{Medium}\\) Ralated Topics: Array,Greedy,Sorting 一、題目 There are some spherical balloons taped onto a flat wall that represents the XY-plane. The balloons are represented as a 2D integer array points where points[i] = [x_start, x_end] denotes a balloon whose horizontal diameter stretches between x_start and x_end. You do not know the exact y-coordinates of the balloons.\nArrows can be shot up directly vertically (in the positive y-direction) from different points along the x-axis. A balloon with x_start and x_end is burst by an arrow shot at x if x_start \u0026lt;= x \u0026lt;= x_end. There is no limit to the number of arrows that can be shot. A shot arrow keeps traveling up infinitely, bursting any balloons in its path.\nGiven the array points, return the minimum number of arrows that must be shot to burst all balloons.\nExample 1:\nInput: points = [[10,16],[2,8],[1,6],[7,12]] Output: 2 Explanation: The balloons can be burst by 2 arrows:\nShoot an arrow at x = 6, bursting the balloons [2,8] and [1,6].\nShoot an arrow at x = 11, bursting the balloons [10,16] and [7,12]. Example 2:\nInput: points = [[1,2],[3,4],[5,6],[7,8]] Output: 4 Explanation: One arrow needs to be shot for each balloon for a total of 4 arrows. Example 3:\nInput: points = [[1,2],[2,3],[3,4],[4,5]] Output: 2 Explanation: The balloons can be burst by 2 arrows:\nShoot an arrow at x = 2, bursting the balloons [1,2] and [2,3].\nShoot an arrow at x = 4, bursting the balloons [3,4] and [4,5]. Constraints:\n1 \u0026lt;= points.length \u0026lt;= 10^5 points[i].length == 2 -2^31 \u0026lt;= x_start \u0026lt; x_end \u0026lt;= 2^31 - 1 二、分析 這題是經典的區間問題，可以用 Greedy 的思維解，若要使一個集合的汽球用同一隻箭射破，它們必須要有一段重疊的區間， 必須從左至右，或從右至左開始射箭，以避免兩端的留下汽球的情況發生。 故我們使用 Sort 後，盡可能令愈多汽球與最左邊的汽球有重疊，方法是： 由於 x_start 已經過排序，故只要後一顆汽球的比前一顆汽球的 x_end 還小，就表示有重疊。 但要注意如果後一顆汽球的 x_end 比前一顆還小，那麼表示重疊的範圍需要縮小，故必須更新。 三、解題 1. Greedy Time complexity: \\(O(n\\log n)\\) Space complexity: \\(O(1)\\) int findMinArrowShots(vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; points) { sort(points.begin(), points.end()); int last = points[0][1]; // 右端點 int cnt = 1; for (int i = 1; i \u0026lt; points.size(); i++) { if (points[i][0] \u0026lt;= last) { // 只需比較右端點 last = min(last, points[i][1]); // 重疊的範圍縮小，只需更新右端點 } else { last = points[i][1]; // 若不重疊，則需再加另一隻箭，同時定義另一個重疊的區間 cnt++; } } return cnt; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/452/","summary":"\u003cp\u003e\u003cstrong\u003e452. Minimum Number of Arrows to Burst Balloons\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{orange}\\textsf{Medium}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eArray\u003c/code\u003e,\u003ccode\u003eGreedy\u003c/code\u003e,\u003ccode\u003eSorting\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eThere are some spherical balloons taped onto a flat wall that represents the XY-plane. The balloons are represented as a 2D integer array \u003ccode\u003epoints\u003c/code\u003e where \u003ccode\u003epoints[i] = [x_start, x_end]\u003c/code\u003e denotes a balloon whose \u003cstrong\u003ehorizontal diameter\u003c/strong\u003e stretches between \u003ccode\u003ex_start\u003c/code\u003e and \u003ccode\u003ex_end\u003c/code\u003e. You do not know the exact y-coordinates of the balloons.\u003cbr\u003e\nArrows can be shot up \u003cstrong\u003edirectly vertically\u003c/strong\u003e (in the positive y-direction) from different points along the x-axis. A balloon with \u003ccode\u003ex_start\u003c/code\u003e and \u003ccode\u003ex_end\u003c/code\u003e is \u003cstrong\u003eburst\u003c/strong\u003e by an arrow shot at \u003ccode\u003ex\u003c/code\u003e if \u003ccode\u003ex_start \u0026lt;= x \u0026lt;= x_end\u003c/code\u003e. There is \u003cstrong\u003eno limit\u003c/strong\u003e to the number of arrows that can be shot. A shot arrow keeps traveling up infinitely, bursting any balloons in its path.\u003cbr\u003e\nGiven the array \u003ccode\u003epoints\u003c/code\u003e, return \u003cem\u003ethe \u003cem\u003e\u003cstrong\u003eminimum\u003c/strong\u003e\u003c/em\u003e number of arrows that must be shot to burst all balloons\u003c/em\u003e.\u003c/p\u003e","title":"[LeetCode] 452. Minimum Number of Arrows to Burst Balloons"},{"content":"algorithm \u0026lt;algorithm\u0026gt; 定義了專為元素集合設計的函式。\n元素集合包含可以被迭代器或指標存取的一系列元素，例如陣列或 STL container。但且注意，演算法只會透過迭代器去操作容器中的值，並不會更改其結構或是大小。\n一、函式 1. 無修改值的操作 all_of bool all_of(Iterator first, Iterator last, UnaryPredicate pred)\n檢查是否全部的元素都符合判斷式。 #include \u0026lt;iostream\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;algorithm\u0026gt; using namespace std; int main(){ vector\u0026lt;int\u0026gt; arr1 = {1,2,3,4,5}; vector\u0026lt;int\u0026gt; arr2 = {1,3,5,7,9}; vector\u0026lt;int\u0026gt; arr3 = {2,4,6,8,10}; auto isodd = [](int x)-\u0026gt;bool{ return x%2; }; cout \u0026lt;\u0026lt; all_of(arr1.begin(), arr1.end(), isodd) \u0026lt;\u0026lt; endl; // 0 cout \u0026lt;\u0026lt; all_of(arr2.begin(), arr2.end(), isodd) \u0026lt;\u0026lt; endl; // 1 cout \u0026lt;\u0026lt; all_of(arr3.begin(), arr3.end(), isodd) \u0026lt;\u0026lt; endl; // 0 return 0; } any_of bool any_of(Iterator first, Iterator last, Predicate pred)\n檢查是否有任一元素符合判斷式。 #include \u0026lt;iostream\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;algorithm\u0026gt; using namespace std; int main(){ vector\u0026lt;int\u0026gt; arr1 = {1,2,3,4,5}; vector\u0026lt;int\u0026gt; arr2 = {1,3,5,7,9}; vector\u0026lt;int\u0026gt; arr3 = {2,4,6,8,10}; auto isodd = [](int x)-\u0026gt;bool{ return x%2; }; cout \u0026lt;\u0026lt; any_of(arr1.begin(), arr1.end(), isodd) \u0026lt;\u0026lt; endl; // 1 cout \u0026lt;\u0026lt; any_of(arr2.begin(), arr2.end(), isodd) \u0026lt;\u0026lt; endl; // 1 cout \u0026lt;\u0026lt; any_of(arr3.begin(), arr3.end(), isodd) \u0026lt;\u0026lt; endl; // 0 return 0; } none_of bool none_of(Iterator first, Iterator last, Predicate pred)\n檢查是否沒有任何元素符合判斷式 #include \u0026lt;iostream\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;algorithm\u0026gt; using namespace std; int main(){ vector\u0026lt;int\u0026gt; arr1 = {1,2,3,4,5}; vector\u0026lt;int\u0026gt; arr2 = {1,3,5,7,9}; vector\u0026lt;int\u0026gt; arr3 = {2,4,6,8,10}; auto isodd = [](int x)-\u0026gt;bool{ return x%2; }; cout \u0026lt;\u0026lt; none_of(arr1.begin(), arr1.end(), isodd) \u0026lt;\u0026lt; endl; // 0 cout \u0026lt;\u0026lt; none_of(arr2.begin(), arr2.end(), isodd) \u0026lt;\u0026lt; endl; // 0 cout \u0026lt;\u0026lt; none_of(arr3.begin(), arr3.end(), isodd) \u0026lt;\u0026lt; endl; // 1 return 0; } for_each void for_each(Iterator first, Iterator last, Function fn)\n用 function fn 遍歷範圍 [first,last) 中的元素。 #include \u0026lt;iostream\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;algorithm\u0026gt; using namespace std; int main(){ vector\u0026lt;int\u0026gt; arr = {1,2,3,5,8,13,21}; for_each(arr.begin(), arr.end(), [](int x){ cout \u0026lt;\u0026lt; x \u0026lt;\u0026lt; \u0026#34; \u0026#34;; }); // 1 2 3 5 8 13 21 return 0; } find Iterator find(Iterator first, Iterator last, const T\u0026amp; val)\n在範圍中找與指定元素相等的元素，若沒有與之相符的元素則回傳 last。 #include \u0026lt;iostream\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;algorithm\u0026gt; using namespace std; int main(){ vector\u0026lt;int\u0026gt; arr = {1,3,7,4,9,12,5}; vector\u0026lt;int\u0026gt;::iterator it1 = find(arr.begin(), arr.end(), 12); auto it2 = find(arr.begin(), arr.end(), 8); cout \u0026lt;\u0026lt; distance(arr.begin(), it1) \u0026lt;\u0026lt; endl; // 5 cout \u0026lt;\u0026lt; distance(arr.begin(), it2) \u0026lt;\u0026lt; endl; // 7 return 0; } find_if Iterator find_if(Iterator first, Iterator last, UnaryPredicate pred)\n在範圍中找第一個符合條件的元素，若沒有與之相符的元素則回傳 last。 #include \u0026lt;iostream\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;algorithm\u0026gt; using namespace std; int main(){ auto isOdd = [](int x)-\u0026gt;bool{ return x%2; }; vector\u0026lt;int\u0026gt; arr = {2,3,7,4,9,12,5}; auto it = find_if(arr.begin(), arr.end(), isOdd); cout \u0026lt;\u0026lt; distance(arr.begin(), it) \u0026lt;\u0026lt; endl; // 1 return 0; } find_if_not Iterator find_if_not(Iterator first, Iterator last, UnaryPredicate pred)\n在範圍中找第一個不符合條件的元素，若沒有與之不符的元素則回傳 last。 #include \u0026lt;iostream\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;algorithm\u0026gt; using namespace std; int main(){ vector\u0026lt;int\u0026gt; arr = {1,3,7,4,9,12,5}; auto it1 = find_if_not(arr.begin(), arr.end(), [](int x)-\u0026gt;bool{ return x \u0026lt; 8; }); // 4 auto it2 = find_if_not(arr.begin(), arr.end(), [](int x)-\u0026gt;bool{ return x \u0026lt; 13; }); // 7 auto it3 = find_if_not(arr.begin(), arr.end(), [](int x)-\u0026gt;bool{ return x == 1; }); // 1 cout \u0026lt;\u0026lt; distance(arr.begin(), it1) \u0026lt;\u0026lt; endl; cout \u0026lt;\u0026lt; distance(arr.begin(), it2) \u0026lt;\u0026lt; endl; cout \u0026lt;\u0026lt; distance(arr.begin(), it3) \u0026lt;\u0026lt; endl; return 0; } find_end Iterator find_end(Iterator first1, Iterator last1, Iterator first2, Iterator last2) Iterator find_end(Iterator first1, Iterator last1, Iterator first2, Iterator last2, BinaryPredicate pred)\n在範圍中找出最後一次符合條件的子序列中的第一個元素。 #include \u0026lt;iostream\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;algorithm\u0026gt; #define all(x) x.begin(),x.end() using namespace std; int main(){ vector\u0026lt;int\u0026gt; arr1 = {1,2,3,4,5,1,2,3,4,5}; vector\u0026lt;int\u0026gt; arr2 = {1,2,3}; vector\u0026lt;int\u0026gt; arr3 = {2,3,4}; vector\u0026lt;int\u0026gt; arr4 = {4,5,6,4,5,6}; vector\u0026lt;int\u0026gt; arr5 = {1,3,5}; auto pred = [](int x, int y)-\u0026gt;bool{ return x == y; }; auto pred2 = [](int x, int y)-\u0026gt;bool{ return x == y+3; }; auto it1 = find_end(all(arr1), all(arr2)); auto it2 = find_end(all(arr1), all(arr2), pred); auto it3 = find_end(all(arr1), all(arr3)); auto it4 = find_end(all(arr1), all(arr4)); auto it5 = find_end(all(arr4), all(arr2), pred2); auto it6 = find_end(all(arr1), all(arr5)); cout \u0026lt;\u0026lt; distance(arr1.begin(), it1) \u0026lt;\u0026lt; endl; // 5 cout \u0026lt;\u0026lt; distance(arr1.begin(), it2) \u0026lt;\u0026lt; endl; // 5 cout \u0026lt;\u0026lt; distance(arr1.begin(), it3) \u0026lt;\u0026lt; endl; // 6 cout \u0026lt;\u0026lt; distance(arr1.begin(), it4) \u0026lt;\u0026lt; endl; // 10 cout \u0026lt;\u0026lt; distance(arr4.begin(), it5) \u0026lt;\u0026lt; endl; // 3 cout \u0026lt;\u0026lt; distance(arr1.begin(), it6) \u0026lt;\u0026lt; endl; // 10 return 0; } find_first_of Find element from set in range adjacent_find Find equal adjacent elements in range count Count appearances of value in range count_if Return number of elements in range satisfying conditon mismatch Return first position where two ranges differ equal Test whether the elements in two ranges are equal is_permutation Test whether range is permutation of another search Search range for subsequence search_n Search range for elements 2. 有修改值的操作 3. 分割(partition) 4. 排序(sort) 5. 二分法(binary search) 6. 合併(merge) 7. 堆(heap) 8. 極值(min/max) 9. 其它 回到目錄：[Algo] 演算法筆記 ","permalink":"https://intervalrain.github.io/cs/algo/algorithm/","summary":"\u003ch1 id=\"algorithm\"\u003ealgorithm\u003c/h1\u003e\n\u003cp\u003e\u003ccode\u003e\u0026lt;algorithm\u0026gt;\u003c/code\u003e 定義了專為元素集合設計的函式。\u003cbr\u003e\n元素集合包含可以被迭代器或指標存取的一系列元素，例如陣列或 STL container。但且注意，演算法只會透過迭代器去操作容器中的值，並不會更改其結構或是大小。\u003c/p\u003e\n\u003ch2 id=\"一函式\"\u003e一、函式\u003c/h2\u003e\n\u003ch3 id=\"1-無修改值的操作\"\u003e1. 無修改值的操作\u003c/h3\u003e\n\u003ch4 id=\"all_of\"\u003eall_of\u003c/h4\u003e\n\u003cp\u003e\u003ccode\u003ebool all_of(Iterator first, Iterator last, UnaryPredicate pred)\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e檢查是否\u003cstrong\u003e全部\u003c/strong\u003e的元素都符合判斷式。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;vector\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;algorithm\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eusing\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enamespace\u003c/span\u003e std;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e arr1 \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e arr2 \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e9\u003c/span\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e arr3 \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e8\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eauto\u003c/span\u003e isodd \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e [](\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e x)\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003ebool\u003c/span\u003e{ \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e x\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e; };\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e all_of(arr1.begin(), arr1.end(), isodd) \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e endl;    \u003cspan style=\"color:#75715e\"\u003e// 0\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e all_of(arr2.begin(), arr2.end(), isodd) \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e endl;    \u003cspan style=\"color:#75715e\"\u003e// 1\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e all_of(arr3.begin(), arr3.end(), isodd) \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e endl;    \u003cspan style=\"color:#75715e\"\u003e// 0\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch4 id=\"any_of\"\u003eany_of\u003c/h4\u003e\n\u003cp\u003e\u003ccode\u003ebool any_of(Iterator first, Iterator last, Predicate pred)\u003c/code\u003e\u003c/p\u003e","title":"[Algo] 1-9. Algorithm"},{"content":"944. Delete Columns to Make Sorted\nHardness: \\(\\color{green}\\textsf{Easy}\\) Ralated Topics: Array、String 一、題目 You are given an array of n string strs, all of the same length.\nThe string s can be arranged such that there is one on each line, making a grid. For example, strs = [\u0026quot;abc\u0026quot;, \u0026quot;bce\u0026quot;, \u0026quot;cae\u0026quot; can be arranged as :\nabc bce cae You want to delete the columns that are not sorted lexicographically. In the aove example (0-indexed), columns 0('a','b','c') and 2('c','e','e') are sorted while column 1('b','c','a') is not, so you would delete column 1.\nReturn the number of columns that you will delete.\nExample 1:\nInput: strs = [\u0026ldquo;cba\u0026rdquo;,\u0026ldquo;daf\u0026rdquo;,\u0026ldquo;ghi\u0026rdquo;] Output: 1 Explanation: The grid looks as follows:\ncba\ndaf\nghi\nColumns 0 and 2 are sorted, but column 1 is not, so you only need to delete 1 column. Example 2:\nInput: strs = [\u0026ldquo;a\u0026rdquo;,\u0026ldquo;b\u0026rdquo;] Output: 0 Explanation: The grid looks as follows:\na\nb\nColumn 0 is the only column and is sorted, so you will not delete any columns. Example 3:\nInput: strs = [\u0026ldquo;zyx\u0026rdquo;,\u0026ldquo;wvu\u0026rdquo;,\u0026ldquo;tsr\u0026rdquo;] Output: 3 Explanation: The grid looks as follows:\nzyx\nwvu\ntsr\nAll 3 columns are not sorted, so you will delete 3. Constraints:\nn == strs.length 1 \u0026lt;= n \u0026lt;= 100 1 \u0026lt;= strs[i].length \u0026lt;= 1000 二、分析 根據題意，逐個檢查是否字元有隨著列增加而呈 lexicographically sorted。 注意迴圈的走法，若是外圈為欄，內圈為列的話，在發現沒有排序時，可以提早跳出，加快速度。 三、解題 1. String Time complexity: \\(O(m\\times n)\\) Space complexity: \\(O(1)\\) int minDeletionSize(vector\u0026lt;string\u0026gt;\u0026amp; strs) { int m = strs.size(), n = strs[0].size(); int cnt = 0; for (int col = 0; col \u0026lt; n; ++col) { for (int row = 1; row \u0026lt; m; ++row) { if (strs[row-1][col] \u0026gt; strs[row][col]) { cnt++; break; } } } return cnt; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/944/","summary":"\u003cp\u003e\u003cstrong\u003e944. Delete Columns to Make Sorted\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{green}\\textsf{Easy}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eArray\u003c/code\u003e、\u003ccode\u003eString\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eYou are given an array of \u003ccode\u003en\u003c/code\u003e string \u003ccode\u003estrs\u003c/code\u003e, all of the same length.\u003cbr\u003e\nThe string s can be arranged such that there is one on each line, making a grid. For example, \u003ccode\u003estrs = [\u0026quot;abc\u0026quot;, \u0026quot;bce\u0026quot;, \u0026quot;cae\u0026quot;\u003c/code\u003e can be arranged as :\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eabc\nbce\ncae\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eYou want to \u003cstrong\u003edelete\u003c/strong\u003e the columns that are \u003cstrong\u003enot sorted lexicographically\u003c/strong\u003e. In the aove example (0-indexed), columns 0(\u003ccode\u003e'a'\u003c/code\u003e,\u003ccode\u003e'b'\u003c/code\u003e,\u003ccode\u003e'c'\u003c/code\u003e) and 2(\u003ccode\u003e'c'\u003c/code\u003e,\u003ccode\u003e'e'\u003c/code\u003e,\u003ccode\u003e'e'\u003c/code\u003e) are sorted while column 1(\u003ccode\u003e'b'\u003c/code\u003e,\u003ccode\u003e'c'\u003c/code\u003e,\u003ccode\u003e'a'\u003c/code\u003e) is not, so you would delete column 1.\u003cbr\u003e\nReturn \u003cem\u003ethe number of columns that you will delete\u003c/em\u003e.\u003c/p\u003e","title":"[LeetCode] 944. Delete Columns to Make Sorted"},{"content":"2522. Partition String Into Substrings With Values at Most K\nHardness: \\(\\color{orange}\\textsf{Medium}\\) Ralated Topics: \\(\\color{blue}\\textsf{Weekly Contest 323}\\) 一、題目 You are given a string s consisting of digits from 1 to 9 and an integer k.\nA partition of a string s is called good if:\nEach digit of s is part of exactly one substring. The value of each substring is less than or equal to k. Return the minimum number of substrings in a good partition of s. If no good partition of s exists, return -1.\nNote that: The value of a string is its result when interpreted as an integer. For example, the value of \u0026quot;123\u0026quot; is 123 and the value of \u0026quot;1\u0026quot; is 1. A substring is a contiguous sequence of characters within a string. Example 1:\nInput: s = \u0026ldquo;165462\u0026rdquo;, k = 60 Output: 4 Explanation: We can partition the string into substrings \u0026ldquo;16\u0026rdquo;, \u0026ldquo;54\u0026rdquo;, \u0026ldquo;6\u0026rdquo;, and \u0026ldquo;2\u0026rdquo;. Each substring has a value less than or equal to k = 60.\nIt can be shown that we cannot partition the string into less than 4 substrings. Example 2:\nInput: s = \u0026ldquo;238182\u0026rdquo;, k = 60 Output: -1 Explanation: There is no good partition for this string. Constraints:\n1 \u0026lt;= s.length \u0026lt;= 105 s[i] is a digit from '1' to '9'. 1 \u0026lt;= k \u0026lt;= 10^9 二、分析 用動態規劃的方式解題，將 dp[i] 定義為前 i 個字元的最小 minimumPartition。 動態轉移方程式是，當 s[i:j] 滿足 \u0026lt;= k 的條件時， dp[j] = min(dp[j], dp[i]+1)。 要注意如果直接將字串轉為數字(stoi)比較，可能會有超出整數範圍而報錯。在此我們可能用字串比較，先比較長度，再比較值。 if (s.length() \u0026gt; to_string(k).length()) return false; else if (s.length() \u0026lt; to_string(k).length()) return true; else return s \u0026lt;= to_string(k); 三、解題 1. DP Time complexity: \\(O(n^2)\\) Space complexity: \\(O(n)\\) int minimumPartition(string s, int k) { int n = s.length(); vector\u0026lt;int\u0026gt; dp(n+1, 100001); // 因為 s 長度最大為 100000，故我們假定 dp 初始值為 100001 dp[0] = 0; for (int right = 1; right \u0026lt;= n; right++) { for (int left = right-1; left \u0026gt;= 0; left--) { if (helper(s, left, right, k)) { dp[right] = min(dp[right], dp[left] + 1); // 動態轉移 } else { break; // pruning，如果當下不滿足 k，那麼再加字元也不會滿足，故可以直接 break } } } return dp[n] \u0026gt;= 100001 ? -1 : dp[n]; // 注意最後的回傳值， } bool helper(string\u0026amp; s, int left, int right, int k) { int len = right - left; string subseq = s.substr(left, len); if (subseq.length() \u0026gt; to_string(k).length()) return false; else if (subseq.length() \u0026lt; to_string(k).length()) return true; return subseq \u0026lt;= to_string(k); } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/2522/","summary":"\u003cp\u003e\u003cstrong\u003e2522. Partition String Into Substrings With Values at Most K\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{orange}\\textsf{Medium}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics:\u003c/li\u003e\n\u003cli\u003e\\(\\color{blue}\\textsf{Weekly Contest 323}\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eYou are given a string \u003ccode\u003es\u003c/code\u003e consisting of digits from \u003ccode\u003e1\u003c/code\u003e to \u003ccode\u003e9\u003c/code\u003e and an integer \u003ccode\u003ek\u003c/code\u003e.\u003cbr\u003e\nA partition of a string \u003ccode\u003es\u003c/code\u003e is called \u003cstrong\u003egood\u003c/strong\u003e if:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eEach digit of \u003ccode\u003es\u003c/code\u003e is part of \u003cstrong\u003eexactly\u003c/strong\u003e one substring.\u003c/li\u003e\n\u003cli\u003eThe value of each substring is less than or equal to \u003ccode\u003ek\u003c/code\u003e.\nReturn \u003cem\u003ethe \u003cem\u003e\u003cstrong\u003eminimum\u003c/strong\u003e\u003c/em\u003e number of substrings in a \u003cem\u003e\u003cstrong\u003egood\u003c/strong\u003e\u003c/em\u003e partition of\u003c/em\u003e \u003ccode\u003es\u003c/code\u003e. If no \u003cstrong\u003egood\u003c/strong\u003e partition of \u003ccode\u003es\u003c/code\u003e exists, return \u003ccode\u003e-1\u003c/code\u003e.\u003cbr\u003e\n\u003cstrong\u003eNote\u003c/strong\u003e that:\u003c/li\u003e\n\u003cli\u003eThe \u003cstrong\u003evalue\u003c/strong\u003e of a string is its result when interpreted as an integer. For example, the value of \u003ccode\u003e\u0026quot;123\u0026quot;\u003c/code\u003e is \u003ccode\u003e123\u003c/code\u003e and the value of \u003ccode\u003e\u0026quot;1\u0026quot;\u003c/code\u003e is \u003ccode\u003e1\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eA \u003cstrong\u003esubstring\u003c/strong\u003e is a contiguous sequence of characters within a string.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e","title":"[LeetCode] 2522. Partition String Into Substrings With Values at Most K"},{"content":"2523. Closest Prime Numbers in Range\nHardness: \\(\\color{orange}\\textsf{Medium}\\) Ralated Topics: \\(\\color{blue}\\textsf{Weekly Contest 323}\\) 一、題目 Given two positive integers left and right, find the two integers num1 and num2 such that:\nleft \u0026lt;= nums1 \u0026lt; nums2 \u0026lt;= right. nums1 and nums2 are both prime numbers. nums2 - nums1 is the minimum amongst all other pairs satisfying the above conditions.\nReturn the positive integer array ans = [nums1, nums2]. If there are multiple pairs satisfying these conditions, return the one with the minimum nums1 value or [-1, -1] if such numbers do not exist.\nA number greater than 1 is called prime if it is only divisible by 1 and itself. Example 1:\nInput: left = 10, right = 19 Output: [11,13] Explanation: The prime numbers between 10 and 19 are 11, 13, 17, and 19.\nThe closest gap between any pair is 2, which can be achieved by [11,13] or [17,19].\nSince 11 is smaller than 17, we return the first pair. Example 2:\nInput: left = 4, right = 6 Output: [-1,-1] Explanation: There exists only one prime number in the given range, so the conditions cannot be satisfied. Constraints:\n1 \u0026lt;= left \u0026lt;= right \u0026lt;= 10^6 二、分析 這題基本上也是在實作 prime 的 pre-built table，所以我們就大方的借用 [2521. Distinct Prime Factors of Product of Array] 的 prime table 吧。 再來就是依序求質數中符合範圍且距離最小的兩個質數。 三、解題 1. Sieve of Eratosthenes Time complexity: \\(O((R-L)\\sqrt{R}/\\log R)\\) Space complexity: \\(O((R-L)/\\log R)\\) vector\u0026lt;int\u0026gt; closestPrimes(int left, int right) { // create pre-built table vector\u0026lt;int\u0026gt; table(right+1, 0); iota(table.begin(), table.end(), 0); table[1] = 0; for (int i = 2; i \u0026lt;= right; i++) { if (table[i] != i) continue; for (int j = 2*i; j \u0026lt;= right; j += i) { table[j] = i; } } // 遍歷完所有符圍中的質數，回傳距離最小的兩個質數 stack\u0026lt;int\u0026gt; st; int diff = INT_MAX; vector\u0026lt;int\u0026gt; res = {-1,-1}; for (int i = left; i \u0026lt;= right; i++) { if (table[i] != i) continue; if (!st.empty()) { if (i - st.top() \u0026lt; diff) { diff = i - st.top(); res[0] = st.top(); res[1] = i; } } st.push(i); } return res; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/2523/","summary":"\u003cp\u003e\u003cstrong\u003e2523. Closest Prime Numbers in Range\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{orange}\\textsf{Medium}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics:\u003c/li\u003e\n\u003cli\u003e\\(\\color{blue}\\textsf{Weekly Contest 323}\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eGiven two positive integers \u003ccode\u003eleft\u003c/code\u003e and \u003ccode\u003eright\u003c/code\u003e, find the two integers num1 and num2 such that:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eleft \u0026lt;= nums1 \u0026lt; nums2 \u0026lt;= right\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enums1\u003c/code\u003e and \u003ccode\u003enums2\u003c/code\u003e are both \u003cstrong\u003eprime\u003c/strong\u003e numbers.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enums2 - nums1\u003c/code\u003e is the \u003cstrong\u003eminimum\u003c/strong\u003e amongst all other pairs satisfying the above conditions.\u003cbr\u003e\nReturn \u003cem\u003ethe positive integer array\u003c/em\u003e \u003ccode\u003eans = [nums1, nums2]\u003c/code\u003e. \u003cem\u003eIf there are multiple pairs satisfying these conditions, return the one with the minimum\u003c/em\u003e \u003ccode\u003enums1\u003c/code\u003e \u003cem\u003evalue or\u003c/em\u003e \u003ccode\u003e[-1, -1]\u003c/code\u003e \u003cem\u003eif such numbers do not exist.\u003c/em\u003e\u003cbr\u003e\nA number greater than \u003ccode\u003e1\u003c/code\u003e is called \u003cstrong\u003eprime\u003c/strong\u003e if it is only divisible by \u003ccode\u003e1\u003c/code\u003e and itself.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e","title":"[LeetCode] 2523. Closest Prime Numbers in Range"},{"content":"520. Detect Capital\nHardness: \\(\\color{green}\\textsf{Easy}\\) Ralated Topics: String 一、題目 We define the usage of capitals in a word to be right when one of the following cases holds:\nAll letters in this word are capitals, like \u0026quot;USA\u0026quot;. All letters in this word are not capitals, like \u0026quot;leetcode\u0026quot;. Only the first letter in this word is capital, like \u0026quot;Google\u0026quot;.\nGiven a string word, return true if the usage of capitals in it is right. Example 1:\nInput: word = \u0026ldquo;USA\u0026rdquo; Output: true Example 2:\nInput: word = FlaG\u0026quot; Output: false Constraints:\n1 \u0026lt;= word.length \u0026lt;= 100 word consists of lowercase and uppercase English letters. 二、分析 這題只需要判斷簡單的 if-else 即可解題。 根據題意，要馬全是大寫，要馬全是小寫，不然就是只有首字大寫。 三、解題 1. String Time complexity: \\(O(n)\\) Space complexity: \\(O(1)\\) bool detectCapitalUse(string word) { if (word.length() == 1) return true; if (word[0] \u0026gt;= \u0026#39;a\u0026#39;) { // 小寫 for (int i = 1; i \u0026lt; word.length(); i++){ char\u0026amp; c = word[i]; if (c \u0026lt; \u0026#39;a\u0026#39;) return false; } } else { // 大寫 if (word[1] \u0026lt; \u0026#39;a\u0026#39;) { // 大寫+大寫 for (int i = 2; i \u0026lt; word.length(); i++) { char\u0026amp; c = word[i]; if (c \u0026gt;= \u0026#39;a\u0026#39;) return false; } } else { // 大寫+小寫 for (int i = 2; i \u0026lt; word.length(); i++) { char\u0026amp; c = word[i]; if (c \u0026lt; \u0026#39;a\u0026#39;) return false; } } } return true; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/520/","summary":"\u003cp\u003e\u003cstrong\u003e520. Detect Capital\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{green}\\textsf{Easy}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eString\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eWe define the usage of capitals in a word to be right when one of the following cases holds:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAll letters in this word are capitals, like \u003ccode\u003e\u0026quot;USA\u0026quot;\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eAll letters in this word are not capitals, like \u003ccode\u003e\u0026quot;leetcode\u0026quot;\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eOnly the first letter in this word is capital, like \u003ccode\u003e\u0026quot;Google\u0026quot;\u003c/code\u003e.\u003cbr\u003e\nGiven a string \u003ccode\u003eword\u003c/code\u003e, return \u003ccode\u003etrue\u003c/code\u003e if the usage of capitals in it is right.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e","title":"[LeetCode] 520. Detect Capital"},{"content":"2521. Distinct Prime Factors of Product of Array\nHardness: \\(\\color{orange}\\textsf{Medium}\\) Ralated Topics: \\(\\color{blue}\\textsf{Weekly Contest 323}\\) 一、題目 Given an array of positive integers nums, return the number of distinct prime factors in the product of the elements of nums.\nNote that:\nA number greater than 1 is called prime if it is divisible by only 1 and itself. An integer val1 is a factor of another integer val2 if val2 / val1 is an integer. Example 1:\nInput: nums = [2,4,3,7,10,6] Output: 4 Explanation: The product of all the elements in nums is: 2 * 4 * 3 * 7 * 10 * 6 = 10080 = 2^5 * 3^2 * 5 * 7.\nThere are 4 distinct prime factors so we return 4. Example 2:\nInput: nums = [2,4,8,16] Output: 1 Explanation: The product of all the elements in nums is: 2 * 4 * 8 * 16 = 1024 = 210.\nThere is 1 distinct prime factor so we return 1. Constraints:\n1 \u0026lt;= nums.length \u0026lt;= 10^4 2 \u0026lt;= nums[i] \u0026lt;= 1000 二、分析 這一題是要求所有數字相乘的質因數分解，並求質因數的個數。 我們並不需要真的將所有數字相乘，因為我們的目的是要將之作因數分解，而分解的過程中，可能會重複檢查到每個數字是否為質因數，為了避免重複檢查，可以將檢查過的數，用 dp 的方式記錄起來。或者是用 pre-built table 的方式，將是否為質數先計算出來。 此題我用的方法是數論中，從 2 開始依序由小到大將倍數篩掉，此法有個很長的名子叫作 Sieve of Eratosthenes。 我們只需把 pre-built table 做到數列的最大值。 在此我做了一個改版，我們將這個 table 記錄下最小的因數，方便做因數分解，這個 table 的特性是： 當 table[i] == i 時，i 為質數。 當 table[i] != i 時，table[i] 為 i 最小的質因數。 以下是原始的 table：\n\\(\\begin{array}{|c|c|c|c|c|c|c|c|c|c|}\\hline \u0026amp;2\u0026amp;3\u0026amp;4\u0026amp;5\u0026amp;6\u0026amp;7\u0026amp;8\u0026amp;9\u0026amp;10\\\\\\hline 11\u0026amp;12\u0026amp;13\u0026amp;14\u0026amp;15\u0026amp;16\u0026amp;17\u0026amp;18\u0026amp;19\u0026amp;20\\\\\\hline 21\u0026amp;22\u0026amp;23\u0026amp;24\u0026amp;25\u0026amp;26\u0026amp;27\u0026amp;28\u0026amp;29\u0026amp;30\\\\\\hline 31\u0026amp;32\u0026amp;33\u0026amp;34\u0026amp;35\u0026amp;36\u0026amp;37\u0026amp;38\u0026amp;39\u0026amp;40\\\\\\hline 41\u0026amp;42\u0026amp;43\u0026amp;44\u0026amp;45\u0026amp;46\u0026amp;47\u0026amp;48\u0026amp;49\u0026amp;50\\\\\\hline \\end{array}\\) 改良後的 table：\n\\(\\begin{array}{|c|c|c|c|c|c|c|c|c|c|}\\hline \u0026amp;2\u0026amp;3\u0026amp;2\u0026amp;5\u0026amp;2\u0026amp;7\u0026amp;2\u0026amp;3\u0026amp;2\\\\\\hline 11\u0026amp;2\u0026amp;13\u0026amp;2\u0026amp;3\u0026amp;2\u0026amp;17\u0026amp;2\u0026amp;19\u0026amp;2\\\\\\hline 3\u0026amp;2\u0026amp;23\u0026amp;2\u0026amp;5\u0026amp;2\u0026amp;3\u0026amp;2\u0026amp;29\u0026amp;2\\\\\\hline 31\u0026amp;2\u0026amp;3\u0026amp;2\u0026amp;5\u0026amp;2\u0026amp;37\u0026amp;2\u0026amp;3\u0026amp;2\\\\\\hline 41\u0026amp;2\u0026amp;43\u0026amp;2\u0026amp;3\u0026amp;2\u0026amp;47\u0026amp;2\u0026amp;7\u0026amp;2\\\\\\hline \\end{array}\\) 有了上面這張改良後的表，因式分解就可以簡化成： 當 table[num] == num 時，num 是質數 否則 num = table[num] * num/table[num]，由於 table[num] 是最大因數，所以可以繼續分解直到變成質數。 三、解題 1. Sieve of Eratosthenes Time complexity: \\(O(n\\sqrt{n}/\\log n)\\) Space complexity: \\(O(n/\\log n)\\) vector\u0026lt;int\u0026gt; table; // 在全域建一個 pre-built table int distinctPrimeFactors(vector\u0026lt;int\u0026gt;\u0026amp; nums) { int upbound = *max_element(nums.begin(), nums.end()); // 求整個數列的最大值 table.assign(upbound+1, 0); // table 只需求到最大值即可 iota(table.begin(), table.end(), 0); // 依序將 table[i] = i 填入 table for (int i = 2; i \u0026lt;= upbound; i++) { if (!table[i]) continue; // 當該數為合數時，跳過 for (int j = 2*i; j \u0026lt;= upbound; j += i) { table[j] = i; // 將所有質數的倍數記錄下他 } } unordered_set\u0026lt;int\u0026gt; set; for (const auto\u0026amp; num : nums) { find(num, set); // 質因數分解 } return set.size(); // 求質因數的個數 } void find(int num, unordered_set\u0026lt;int\u0026gt;\u0026amp; set) { if (table[num] == num) { set.insert(num); // 當是質數就用 set 記錄下來 } else { find(num/table[num], set); // 不是質數就繼續分解 find(table[num], set); } } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/2521/","summary":"\u003cp\u003e\u003cstrong\u003e2521. Distinct Prime Factors of Product of Array\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{orange}\\textsf{Medium}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics:\u003c/li\u003e\n\u003cli\u003e\\(\\color{blue}\\textsf{Weekly Contest 323}\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eGiven an array of positive integers \u003ccode\u003enums\u003c/code\u003e, return \u003cem\u003ethe number of \u003cem\u003e\u003cstrong\u003edistinct prime factors\u003c/strong\u003e\u003c/em\u003e in the product of the elements of\u003c/em\u003e \u003ccode\u003enums\u003c/code\u003e.\u003cbr\u003e\n\u003cstrong\u003eNote\u003c/strong\u003e that:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eA number greater than \u003ccode\u003e1\u003c/code\u003e is called \u003cstrong\u003eprime\u003c/strong\u003e if it is divisible by only \u003ccode\u003e1\u003c/code\u003e and itself.\u003c/li\u003e\n\u003cli\u003eAn integer \u003ccode\u003eval1\u003c/code\u003e is a factor of another integer val2 if \u003ccode\u003eval2 / val1\u003c/code\u003e is an integer.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e","title":"[LeetCode] 2521. Distinct Prime Factors of Product of Array"},{"content":"2520. Count the Digits That Divide a Number\nHardness: \\(\\color{green}\\textsf{Easy}\\) Ralated Topics: \\(\\color{blue}\\textsf{Weekly Contest 323}\\) 一、題目 Given an integer num, return the number of digits in num that divide num. An integer val divides nums if nums % val == 0.\nExample 1:\nInput: num = 7 Output: 1 Explanation: 7 divides itself, hence the answer is 1. Example 2:\nInput: num = 121 Output: 2 Explanation: 121 is divisible by 1, but not 2. Since 1 occurs twice as a digit, we return 2. Example 3:\nInput: num = 1248 Output: 4 Explanation: 1248 is divisible by all of its digits, hence answer is 4. Constraints:\n1 \u0026lt;= num \u0026lt;= 10^9 num does not contain 0 as one of its digits. 二、分析 此題會用到遍歷所有 digit 的方法： while (num \u0026gt; 0){ int digit = num % 10; num /= 10; } + 利用上面的方法，再針對題目做相應的統計即可。 三、解題 1. Math Time complexity: \\(O(n)\\) Space complexity: \\(O(1)\\) int countDigits(int num) { int res = 0; int x = num; while (x \u0026gt; 0) { int tmp = x % 10; if (num % tmp == 0) res++; x /= 10; } return res; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/2520/","summary":"\u003cp\u003e\u003cstrong\u003e2520. Count the Digits That Divide a Number\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{green}\\textsf{Easy}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics:\u003c/li\u003e\n\u003cli\u003e\\(\\color{blue}\\textsf{Weekly Contest 323}\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eGiven an integer \u003ccode\u003enum\u003c/code\u003e, return \u003cem\u003ethe number of digits in \u003ccode\u003enum\u003c/code\u003e that divide \u003ccode\u003enum\u003c/code\u003e.\u003c/em\u003e\nAn integer \u003ccode\u003eval\u003c/code\u003e divides \u003ccode\u003enums\u003c/code\u003e if \u003ccode\u003enums % val == 0\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInput:\u003c/strong\u003e num = 7\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e 1\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e 7 divides itself, hence the answer is 1.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInput:\u003c/strong\u003e num = 121\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e 2\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e 121 is divisible by 1, but not 2. Since 1 occurs twice as a digit, we return 2.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e","title":"[LeetCode] 2520. Count the Digits That Divide a Number"},{"content":"290. Word Pattern\nHardness: \\(\\color{green}\\textsf{Easy}\\) Ralated Topics: Hash Table、String 一、題目 Given a pattern and a string s, find if s follows the same pattern.\nHere follow means a full match, such that there is a bijection between a letter in pattern and non-empty word in s.\nExample 1:\nInput: pattern = \u0026ldquo;abba\u0026rdquo;, s = \u0026ldquo;dog cat cat dog\u0026rdquo; Output: true Example 2:\nInput: pattern = \u0026ldquo;abba\u0026rdquo;, s = \u0026ldquo;dog cat cat fish\u0026rdquo; Output: false Example 3:\n**Input:**pattern = \u0026ldquo;aaaa\u0026rdquo;, s = \u0026ldquo;dog cat cat dog\u0026rdquo; Output: false Constraints:\n1 \u0026lt;= pattern.length \u0026lt;= 300 pattern contains only lower-case English letters. 1 \u0026lt;= s.length \u0026lt;= 3000 s contains only lowercase English letters and spaces ' '. s does not contain any leading or trailing spaces. All the words in s are separated by a single space. 二、分析 三、解題 1. Hash Table Time complexity: \\(O(n)\\) Space complexity: \\(O(n)\\) vector\u0026lt;string\u0026gt; split(string\u0026amp; str, char del){ stringstream ss(str); string item; vector\u0026lt;string\u0026gt; res; while (getline(ss, item, del)){ if (!item.empty()){ res.push_back(item); } } return res; } bool wordPattern(string pattern, string s) { unordered_map\u0026lt;char, string\u0026gt; map; unordered_set\u0026lt;string\u0026gt; st; vector\u0026lt;string\u0026gt; svec = split(s, \u0026#39; \u0026#39;); // 將 s 以空白拆開成陣列 if (pattern.length() != svec.size()) return false; // 檢查陣列的個數是否與 pattern 的長度相符 for (int i = 0; i \u0026lt; svec.size(); i++) { char\u0026amp; c = pattern[i]; if (!map.count(c)) { // 定義第一次出現的 pattern if (st.count(svec[i])) return false; // 如果該字串已經被定義過 pattern 則為 false map[c] = svec[i]; // 定義 pattern st.insert(svec[i]); // 將定義過的字串記錄下來 } else { if (map[c] != svec[i]) return false; // 定義的 pattern 不符 } } return true; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/290/","summary":"\u003cp\u003e\u003cstrong\u003e290. Word Pattern\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{green}\\textsf{Easy}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eHash Table\u003c/code\u003e、\u003ccode\u003eString\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eGiven a \u003ccode\u003epattern\u003c/code\u003e and a string \u003ccode\u003es\u003c/code\u003e, find if \u003ccode\u003es\u003c/code\u003e follows the same pattern.\u003cbr\u003e\nHere \u003cstrong\u003efollow\u003c/strong\u003e means a full match, such that there is a bijection between a letter in \u003ccode\u003epattern\u003c/code\u003e and \u003cstrong\u003enon-empty\u003c/strong\u003e word in \u003ccode\u003es\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInput:\u003c/strong\u003e pattern = \u0026ldquo;abba\u0026rdquo;, s = \u0026ldquo;dog cat cat dog\u0026rdquo;\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e true\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInput:\u003c/strong\u003e pattern = \u0026ldquo;abba\u0026rdquo;, s = \u0026ldquo;dog cat cat fish\u0026rdquo;\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e false\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e","title":"[LeetCode] 290. Word Pattern"},{"content":"C# 中的 Yield Return 與 IEnumerable\u0026lt;T\u0026gt; 在使用過 C# 與 Java 兩種語言之後會發現，Java 為了跨平台的特性，鮮少修改 VM 規格，相較 .NET 為了語法簡潔，編譯器往往會做出讓步，也因此 C# 比起 Java 多了許多語法糖。如 delegate 等，在這邊預留一些內容到下一次寫，今天專注於 yield return 與 IEnumerable。\n起源 為何需要 IEnumerable? 1. 目標：依序印出 1 ~ 100 的數字\n一般來說，若要做到以上的目標，只需要用到簡單的 for_loop 即可。\nstatic void Main(string[] args) { for (int i = 1; i \u0026lt;= 100; i++) { Console.Write(\u0026#34;{0} \u0026#34;, i); } } IEnumerable 是什麼？要做什麼用？ IEnumerator 是一種列舉器，它是特化用來專門處理 iteration 的工具。 在 Design Patterns 中有一種設計模式叫作 Iterator，它的目的就是要在：\n不需要知道物件的內部細節，即可依序存取內含的每一個元素。 IEnumerator 物件的實作： public class Enumerator1 : IEnumerator\u0026lt;int\u0026gt; { private int _start; private int _end; private int _curr; public Enumerator1(int start, int end) { _start = start; _end = end; this.Reset(); } public int Current { get { return this._curr; } } public void Dispose() { } object System.Collections.IEnumerator.Current { get { return this._curr; } } public bool MoveNext() { this._curr++; return !(this._curr \u0026gt; this._end); } public void Reset() { this._curr = this._start; } } 於是，我們若要遍歷這個物件的內容，只需要： static void Main(string[] args) { Enumerator1 e = new Enumerator1(1, 100); do { Console.Write(\u0026#34;{0} \u0026#34;, e.Current); } while (e.MoveNext()); } Iteration/Process 分離 當我們今天不想管 collection 裡每一個物件是怎麼擺的，用什麼結構裝、用什麼邏輯或演算法處理的，只想要依序將安排好的元素拿出來。也就是說，我們想把物件遍歷的(iteration) 與拿到它後要做什麼事(process) 分開，那麼就可以用到 Iterator Pattern。 2. 目標：依序印出 1 ~ 100 中的質數\n使用一般的 for_loop 來實現的話會是：\nstatic void Main(string[] args) { for (int i = 1; i \u0026lt;= 100; i++) { if (isPrime(i)) Console.Write(\u0026#34;{0} \u0026#34;, i); } } static bool isPrime(int num) { if (num \u0026lt;= 1) return false; for (int i = 2; i \u0026lt;= Math.Sqrt(num); i++) { if (num % i == 0) return false; } return true; } 會發現，Iteration 與 Process 已經混在一起。\n那用 IEnumerator 來實作呢?\nclass Test { public class PrimeEnumerator : IEnumerator\u0026lt;int\u0026gt; { private int _start; private int _end; private int _curr; private List\u0026lt;int\u0026gt; list; public PrimeEnumerator(int start, int end) { _start = start; _end = end; this.init(); this.Reset(); } private void init() { list = new List\u0026lt;int\u0026gt;(); bool[] arr = new bool[_end+1]; for (int i = 2; i \u0026lt;= _end; i++) { arr[i] = true; } for (int i = 2; i \u0026lt;= _end; i++) { if (!arr[i]) continue; for (int j = 2*i; j \u0026lt;= _end; j += i) { arr[j] = false; } } for (int i = _start; i \u0026lt;= _end; i++) { if (arr[i]) { list.Add(i); } } } public int Current { get { return this.list[this._curr]; } } public void Dispose() { } object System.Collections.IEnumerator.Current { get { return this.list[this._curr]; } } public bool MoveNext() { this._curr++; return !(this._curr+1 \u0026gt; this.list.Count); } public void Reset() { this._curr = 0; } } } 則要遍歷這個物件，跟原本的程式完全一樣：\nstatic void Main(string[] args) { PrimeEnumerator e = new PrimeEnumerator(1, 100); do { Console.Write(\u0026#34;{0} \u0026#34;, e.Current); } while (e.MoveNext()); } IEnumerable 實作 但是若要作到 Process 與 Iteration 分離，每次都要 Implement IEnumerator，那也太累了吧，於是就有了 IEnumerable 這個語法糖： class PrimeArray { static bool isPrime(int num) { if (num \u0026lt;= 1) return false; for (int i = 2; i \u0026lt;= Math.Sqrt(num); i++) { if (num % i == 0) return false; } return true; } static IEnumerable\u0026lt;int\u0026gt; PrimeEnumerable(int _start, int _end) { for (int i = _start; i \u0026lt;= _end; i++) { if (!isPrime(i)) continue; yield return i; } } static void Main(string[] args) { foreach (int i in PrimeEnumerable(1, 100)) { Console.Write(\u0026#34;{0} \u0026#34;, i); } } } 用以上的寫法，Iterator Patterns 變得非常的精簡，但是使用 yeild 使得違背了原本 function call/return 的概念。但其實如果反組譯其程式碼可以發現，yield return的寫法，其實就是編譯器在編譯的時候，電腦幫你實作了一個 IEnumerator，故事實上就是 C# 送你的一個語法糖。\n","permalink":"https://intervalrain.github.io/csharp/yield/","summary":"\u003ch1 id=\"c-中的-yield-return-與-ienumerablet\"\u003eC# 中的 Yield Return 與 \u003ccode\u003eIEnumerable\u0026lt;T\u0026gt;\u003c/code\u003e\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e在使用過 \u003ccode\u003eC#\u003c/code\u003e 與 \u003ccode\u003eJava\u003c/code\u003e 兩種語言之後會發現，\u003ccode\u003eJava\u003c/code\u003e 為了跨平台的特性，鮮少修改 VM 規格，相較 \u003ccode\u003e.NET\u003c/code\u003e 為了語法簡潔，編譯器往往會做出讓步，也因此 \u003ccode\u003eC#\u003c/code\u003e 比起 \u003ccode\u003eJava\u003c/code\u003e 多了許多語法糖。如 \u003ccode\u003edelegate\u003c/code\u003e 等，在這邊預留一些內容到下一次寫，今天專注於 \u003ccode\u003eyield return\u003c/code\u003e 與 \u003ccode\u003eIEnumerable\u003c/code\u003e。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"起源\"\u003e起源\u003c/h2\u003e\n\u003ch3 id=\"為何需要-ienumerable\"\u003e為何需要 \u003ccode\u003eIEnumerable\u003c/code\u003e?\u003c/h3\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003e1. 目標\u003c/strong\u003e：依序印出 1 ~ 100 的數字\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e一般來說，若要做到以上的目標，只需要用到簡單的 \u003ccode\u003efor_loop\u003c/code\u003e 即可。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C#\" data-lang=\"C#\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e Main(\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e[] args)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i = \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e; i \u0026lt;= \u003cspan style=\"color:#ae81ff\"\u003e100\u003c/span\u003e; i++) \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Console.Write(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;{0} \u0026#34;\u003c/span\u003e, i);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eIEnumerable\u003c/code\u003e 是什麼？要做什麼用？\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eIEnumerator\u003c/code\u003e 是一種列舉器，它是特化用來專門處理 \u003ccode\u003eiteration\u003c/code\u003e 的工具。\u003c/li\u003e\n\u003cli\u003e在 \u003ccode\u003eDesign Patterns\u003c/code\u003e 中有一種設計模式叫作 \u003ccode\u003eIterator\u003c/code\u003e，它的目的就是要在：\u003cbr\u003e\n\u003cstrong\u003e不需要知道物件的內部細節，即可依序存取內含的每一個元素。\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eIEnumerator\u003c/code\u003e 物件的實作：\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C#\" data-lang=\"C#\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eEnumerator1\u003c/span\u003e : IEnumerator\u0026lt;\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e _start;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e _end;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e _curr;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e Enumerator1(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e start, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e end)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        _start = start;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        _end = end;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e.Reset();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e Current\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eget\u003c/span\u003e { \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e._curr; }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e Dispose()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eobject\u003c/span\u003e System.Collections.IEnumerator.Current\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eget\u003c/span\u003e { \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e._curr; }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ebool\u003c/span\u003e MoveNext()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e._curr++;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e !(\u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e._curr \u0026gt; \u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e._end);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e Reset()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e._curr = \u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e._start;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e於是，我們若要遍歷這個物件的內容，只需要：\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C#\" data-lang=\"C#\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e Main(\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e[] args)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Enumerator1 e = \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e Enumerator1(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e100\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Console.Write(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;{0} \u0026#34;\u003c/span\u003e, e.Current);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    } \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (e.MoveNext());\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"iterationprocess-分離\"\u003eIteration/Process 分離\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e當我們今天不想管 collection 裡每一個物件是怎麼擺的，用什麼結構裝、用什麼邏輯或演算法處理的，只想要依序將安排好的元素拿出來。也就是說，我們想把物件遍歷的(iteration) 與拿到它後要做什麼事(process) 分開，那麼就可以用到 \u003ccode\u003eIterator Pattern\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003e2. 目標\u003c/strong\u003e：依序印出 1 ~ 100 中的質數\u003c/p\u003e","title":"[C#] Yield Return"},{"content":"1834. Single-Threaded CPU\nHardness: \\(\\color{orange}\\textsf{Medium}\\) Ralated Topics: Array、Sorting、Heap (Priority Queue\u0026gt; 一、題目 You are given n​​​​ tasks labeled from 0 to n - 1 represented by a 2D integer array tasks, where tasks[i] = [enqueueTimei, processingTimei] means that the i​​​​​​th​​​​ task will be available to process at enqueueTimei and will take processingTimei to finish processing.\nYou have a single-threaded CPU that can process at most one task at a time and will act in the following way:\nIf the CPU is idle and there are no available tasks to process, the CPU remains idle. If the CPU is idle and there are available tasks, the CPU will choose the one with the shortest processing time. If multiple tasks have the same shortest processing time, it will choose the task with the smallest index. Once a task is started, the CPU will process the entire task without stopping. The CPU can finish a task then start a new one instantly. Return the order in which the CPU will process the tasks. Example 1:\nInput: tasks = [[1,2],[2,4],[3,2],[4,1]] Output: [0,2,3,1] Explanation: The events go as follows: At time = 1, task 0 is available to process. Available tasks = {0}. Also at time = 1, the idle CPU starts processing task 0. Available tasks = {}. At time = 2, task 1 is available to process. Available tasks = {1}. At time = 3, task 2 is available to process. Available tasks = {1, 2}. Also at time = 3, the CPU finishes task 0 and starts processing task 2 as it is the shortest. Available tasks = {1}. At time = 4, task 3 is available to process. Available tasks = {1, 3}. At time = 5, the CPU finishes task 2 and starts processing task 3 as it is the shortest. Available tasks = {1}. At time = 6, the CPU finishes task 3 and starts processing task 1. Available tasks = {}. At time = 10, the CPU finishes task 1 and becomes idle. Example 2:\nInput: tasks = [[7,10],[7,12],[7,5],[7,4],[7,2]] Output: [4,3,2,0,1] Explanation: The events go as follows: At time = 7, all the tasks become available. Available tasks = {0,1,2,3,4}. Also at time = 7, the idle CPU starts processing task 4. Available tasks = {0,1,2,3}. At time = 9, the CPU finishes task 4 and starts processing task 3. Available tasks = {0,1,2}. At time = 13, the CPU finishes task 3 and starts processing task 2. Available tasks = {0,1}. At time = 18, the CPU finishes task 2 and starts processing task 0. Available tasks = {1}. At time = 28, the CPU finishes task 0 and starts processing task 1. Available tasks = {}. At time = 40, the CPU finishes task 1 and becomes idle. Constraints:\ntasks.length == n 1 \u0026lt;= n \u0026lt;= 10^5 1 \u0026lt;= enqueueTimei, processingTimei \u0026lt;= 10^9 二、分析 執行緒排程問題，直覺會將所有的 task 排序後，依據時間從 0 走到最後來處理這個問題，但是當秒數很大時，就會浪費很多時間，所以我們應該注意的時每個 trigger point，也就是新的 task 任務加入與結束的時候。 討論兩個情況， 當 Thread 是閒置時，直接跳到最前面的 task(即 trigger point 是任務加入時)。 當 Thread 不是閒置時，會將當下的 task 執行完後，所以得到結束的時間後，一次將符合 enqueueTime 的 task 加入佇列(即 trigger point 是任務結束時)。 由於這裡會優先處理 processingTime 較短的，所以在這裡可以用 min heap 來處理。 需注意，在排序前需先標記索引值。 需注意，timestamp 可能是大數。 三、解題 1. Heap (Priority Queue) Time complexity: \\(O(n\\log n)\\) Space complexity: \\(O(n)\\) vector\u0026lt;int\u0026gt; getOrder(vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; tasks) { auto comp = [](const auto\u0026amp; a, const auto\u0026amp; b){return a.first == b.first ? a.second \u0026gt; b.second : a.first \u0026gt; b.first;}; priority_queue\u0026lt;pair\u0026lt;int,int\u0026gt;, vector\u0026lt;pair\u0026lt;int,int\u0026gt;\u0026gt;, decltype(comp)\u0026gt; pq(comp); // min heap long long int timestamp = 0; int n = tasks.size(); vector\u0026lt;int\u0026gt; res; for (int i = 0; i \u0026lt; tasks.size(); i++) { tasks[i].push_back(i); // 標記索引值 } sort(tasks.begin(), tasks.end()); // 排序 int i = 0; while (res.size() \u0026lt; n) { if (pq.empty()) { // 閒置時，時間標籤移動到佇列最前面的任務 timestamp = tasks[i][0]; } else { // 非閒置時，將時間標籤移動到任務結束時 auto top = pq.top(); timestamp += top.first; res.push_back(top.second); pq.pop(); } while (i \u0026lt; n \u0026amp;\u0026amp; tasks[i][0] \u0026lt;= timestamp) { // 加入所有比時間標籤早的任務 pq.push({tasks[i][1], tasks[i][2]}); // 以 {processingTime, index} 的方式加入 min heap i++; } } return res; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/1834/","summary":"\u003cp\u003e\u003cstrong\u003e1834. Single-Threaded CPU\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{orange}\\textsf{Medium}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eArray\u003c/code\u003e、\u003ccode\u003eSorting\u003c/code\u003e、\u003ccode\u003eHeap (Priority Queue\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eYou are given \u003ccode\u003en\u003c/code\u003e​​​​ tasks labeled from \u003ccode\u003e0\u003c/code\u003e to \u003ccode\u003en - 1\u003c/code\u003e represented by a 2D integer array \u003ccode\u003etasks\u003c/code\u003e, where \u003ccode\u003etasks[i] = [enqueueTimei, processingTimei]\u003c/code\u003e means that the \u003ccode\u003ei​​​​​​th​​​​\u003c/code\u003e task will be available to process at \u003ccode\u003eenqueueTimei\u003c/code\u003e and will take \u003ccode\u003eprocessingTimei\u003c/code\u003e to finish processing.\u003cbr\u003e\nYou have a single-threaded CPU that can process \u003cstrong\u003eat most one\u003c/strong\u003e task at a time and will act in the following way:\u003c/p\u003e","title":"[LeetCode] 1834. Single-Threaded CPU"},{"content":"1962. Remove Stones to Minimize the Total\nHardness: \\(\\color{orange}\\textsf{Medium}\\) Ralated Topics: Array、Heap (Priority Queue) 一、題目 You are given a 0-indexed integer array piles, where piles[i] represents the number of stones in the ith pile, and an integer k. You should apply the following operation exactly k times:\nChoose any piles[i] and remove floor(piles[i] / 2) stones from it. Notice that you can apply the operation on the same pile more than once.\nReturn the minimum possible total number of stones remaining after applying the k operations.\nfloor(x) is the greatest integer that is smaller than or equal to x (i.e., rounds x down).\nExample 1:\nInput: piles = [5,4,9], k = 2 Output: 12 Explanation: Steps of a possible scenario are: Apply the operation on pile 2. The resulting piles are [5,4,5]. Apply the operation on pile 0. The resulting piles are [3,4,5].\nThe total number of stones in [3,4,5] is 12. Example 2:\nInput: piles = [4,3,6,7], k = 3 Output: 12 Explanation: Steps of a possible scenario are: Apply the operation on pile 2. The resulting piles are [4,3,3,7]. Apply the operation on pile 3. The resulting piles are [4,3,3,4]. Apply the operation on pile 0. The resulting piles are [2,3,3,4].\nThe total number of stones in [2,3,3,4] is 12. Constraints:\n1 \u0026lt;= piles.length \u0026lt;= 10^5 1 \u0026lt;= piles[i] \u0026lt;= 10^4 1 \u0026lt;= k \u0026lt;= 10^5 二、分析 用 greedy 的思維來思考這一題，每次動作會減去 piles[i] 一半的石頭，要使 k 次後石頭總數最小，那必定是每次都要選在石頭最多的堆來動作。 由於石頭最多的堆是動態更新的，也就是說不能單純用 sort 來解決。舉例來說，每堆的石頭有非常多，那它執行許多次動作仍可能是最多的。 利用 max heap 將最多石頭的堆重覆推到 top，反覆動作 k 次即可解。 三、解題 1. Heap (Priority Queue) Time complexity: \\(O(k\\log n+n)\\) Space complexity: \\(O(n)\\) int minStoneSum(vector\u0026lt;int\u0026gt;\u0026amp; piles, int k) { priority_queue\u0026lt;int\u0026gt; pq; int res = 0; for (const auto\u0026amp; pile : piles) { pq.push(pile); // 先將所有堆都推到 priority queue 上 res += pile; // 順便將原本的石頭總數算出來 } while (k--) { int curr = pq.top(); pq.pop(); int loss = curr \u0026gt;\u0026gt; 1; // 當下的 max heap 的堆頂除於 2 即為當下可以一次取到最多的石頭 pq.push(curr - loss); // 將取完的堆放回 priority queue 上 res -= loss; // 將總數減掉拿掉的石頭 } return res; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/1962/","summary":"\u003cp\u003e\u003cstrong\u003e1962. Remove Stones to Minimize the Total\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{orange}\\textsf{Medium}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eArray\u003c/code\u003e、\u003ccode\u003eHeap (Priority Queue)\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eYou are given a \u003cstrong\u003e0-indexed\u003c/strong\u003e integer array \u003ccode\u003epiles\u003c/code\u003e, where \u003ccode\u003epiles[i]\u003c/code\u003e represents the number of stones in the \u003ccode\u003eith\u003c/code\u003e pile, and an integer \u003ccode\u003ek\u003c/code\u003e. You should apply the following operation \u003cstrong\u003eexactly\u003c/strong\u003e \u003ccode\u003ek\u003c/code\u003e times:\u003cbr\u003e\nChoose any \u003ccode\u003epiles[i]\u003c/code\u003e and \u003cstrong\u003eremove\u003c/strong\u003e \u003ccode\u003efloor(piles[i] / 2)\u003c/code\u003e stones from it.\n\u003cstrong\u003eNotice\u003c/strong\u003e that you can apply the operation on the \u003cstrong\u003esame\u003c/strong\u003e pile more than once.\u003cbr\u003e\nReturn \u003cem\u003ethe minimum possible total number of stones remaining after applying the\u003c/em\u003e \u003ccode\u003ek\u003c/code\u003e \u003cem\u003eoperations.\u003c/em\u003e\u003cbr\u003e\n\u003ccode\u003efloor(x)\u003c/code\u003e is the \u003cstrong\u003egreatest\u003c/strong\u003e integer that is \u003cstrong\u003esmaller\u003c/strong\u003e than or \u003cstrong\u003eequal\u003c/strong\u003e to \u003ccode\u003ex\u003c/code\u003e (i.e., rounds \u003ccode\u003ex\u003c/code\u003e down).\u003c/p\u003e","title":"[LeetCode] 1962. Remove Stones to Minimize the Total"},{"content":"2279. Maximum Bags With Full Capacity of Rocks\nHardness: \\(\\color{orange}\\textsf{Medium}\\) Ralated Topics: Array、Greedy、Sorting 一、題目 You have n bags numbered from 0 to n - 1. You are given two 0-indexed integer arrays capacity and rocks. The ith bag can hold a maximum of capacity[i] rocks and currently contains rocks[i] rocks. You are also given an integer additionalRocks, the number of additional rocks you can place in any of the bags.\nReturn the maximum number of bags that could have full capacity after placing the additional rocks in some bags.\nExample 1:\nInput: capacity = [2,3,4,5], rocks = [1,2,4,4], additionalRocks = 2 Output: 3 Explanation: Place 1 rock in bag 0 and 1 rock in bag 1.\nThe number of rocks in each bag are now [2,3,4,4].\nBags 0, 1, and 2 have full capacity.\nThere are 3 bags at full capacity, so we return 3.\nIt can be shown that it is not possible to have more than 3 bags at full capacity.\nNote that there may be other ways of placing the rocks that result in an answer of 3. Example 2:\nInput: capacity = [10,2,2], rocks = [2,2,0], additionalRocks = 100 Output: 3 Explanation: Place 8 rocks in bag 0 and 2 rocks in bag 2.\nThe number of rocks in each bag are now [10,2,2].\nBags 0, 1, and 2 have full capacity.\nThere are 3 bags at full capacity, so we return 3.\nIt can be shown that it is not possible to have more than 3 bags at full capacity.\nNote that we did not use all of the additional rocks. Constraints:\nn == capacity.length == rocks.length 1 \u0026lt;= n \u0026lt;= 5 * 10^4 1 \u0026lt;= capacity[i] \u0026lt;= 10^9 0 \u0026lt;= rocks[i] \u0026lt;= capacity[i] 1 \u0026lt;= additionalRocks \u0026lt;= 10^9 二、分析 思考如何用現有的 additionalRocks 填滿最多個已裝了 rocks[i] 個石頭且原本容量為 capacity[i] 的背包。 用 greedy 的思維來思考，首先先填滿需要最少額外石頭的背包，依序填到沒有額外的石頭，那麼便可以得到最多個已裝滿的背包。 也就是說先求 capacity[i] - rocks[i]，再將之排序後，逐一累加，直到超過 additionalRocks。 三、解題 1. Greedy Time complexity: \\(O(n)\\) Space complexity: \\(O(1)\\) int maximumBags(vector\u0026lt;int\u0026gt;\u0026amp; capacity, vector\u0026lt;int\u0026gt;\u0026amp; rocks, int additionalRocks) { vector\u0026lt;int\u0026gt;\u0026amp; need = capacity; // 借用 capacity 的空間，減少額外空間使用 for (int i = 0; i \u0026lt; capacity.size(); i++) { need[i] -= rocks[i]; // 算出每個背包還需多少個石頭才裝滿 } sort(need.begin(), need.end()); // 裝背包依所需石頭數從小到大排序 int cnt = 0; int used = 0; while (cnt \u0026lt; capacity.size()) { used += need[cnt]; // 算出累加所需的石頭數 if (used \u0026gt; additionalRocks) break; // 超出 additionalRocks 則跳出 cnt++; // 沒超出則滿足的背包數加 1 } return cnt; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/2279/","summary":"\u003cp\u003e\u003cstrong\u003e2279. Maximum Bags With Full Capacity of Rocks\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{orange}\\textsf{Medium}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eArray\u003c/code\u003e、\u003ccode\u003eGreedy\u003c/code\u003e、\u003ccode\u003eSorting\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eYou have \u003ccode\u003en\u003c/code\u003e bags numbered from \u003ccode\u003e0\u003c/code\u003e to \u003ccode\u003en - 1\u003c/code\u003e. You are given two \u003cstrong\u003e0-indexed\u003c/strong\u003e integer arrays \u003ccode\u003ecapacity\u003c/code\u003e and \u003ccode\u003erocks\u003c/code\u003e. The \u003ccode\u003eith\u003c/code\u003e bag can hold a maximum of \u003ccode\u003ecapacity[i]\u003c/code\u003e rocks and currently contains \u003ccode\u003erocks[i]\u003c/code\u003e rocks. You are also given an integer \u003ccode\u003eadditionalRocks\u003c/code\u003e, the number of additional rocks you can place in \u003cstrong\u003eany\u003c/strong\u003e of the bags.\u003cbr\u003e\nReturn \u003cem\u003ethe \u003cstrong\u003emaximum\u003c/strong\u003e number of bags that could have full capacity after placing the additional rocks in some bags.\u003c/em\u003e\u003c/p\u003e","title":"[LeetCode] 2279. Maximum Bags With Full Capacity of Rocks"},{"content":"2389. Longest Subsequence With Limited Sum\nHardness: \\(\\color{green}\\textsf{Easy}\\) Ralated Topics: Array、Binary Search、Greedy、Sorting、Prefix Sum 一、題目 You are given an integer array nums of length n, and an integer array queries of length m.\nReturn an array answer of length m where answer[i] is the maximum size of a subsequence that you can take from nums such that the sum of its elements is less than or equal to queries[i].\nA subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\nExample 1:\nInput: nums = [4,5,2,1], queries = [3,10,21] Output: [2,3,4] Explanation: We answer the queries as follows: The subsequence [2,1] has a sum less than or equal to 3. It can be proven that 2 is the maximum size of such a subsequence, so answer[0] = 2. The subsequence [4,5,1] has a sum less than or equal to 10. It can be proven that 3 is the maximum size of such a subsequence, so answer[1] = 3. The subsequence [4,5,2,1] has a sum less than or equal to 21. It can be proven that 4 is the maximum size of such a subsequence, so answer[2] = 4. Example 2:\nInput: nums = [2,3,4,5], queries = [1] Output: [0] Explanation: The empty subsequence is the only subsequence that has a sum less than or equal to 1, so answer[0] = 0. Constraints:\nn == nums.length m == queries.length 1 \u0026lt;= n, m \u0026lt;= 1000 1 \u0026lt;= nums[i], queries[i] \u0026lt;= 10^6 二、分析 根據 greedy 的思維出發，子序列中的數字愈小，組成目標數字的數值個數愈多的可能性愈大，換句話說，當我們將陣列 sort 過後，前 n 個數字所組成的數字，即代表組成該數字最多的個數為 n。 由於我們要求的是前 n 個數字的和，故我們可以算出 prefix sum，再利用 binary search 去找到 target 所落在的位置。 舉例來說，nums = [4,5,2,1]，經排序後為 nums = [1,2,4,5]，求得 prefixSum = [1,3,7,12]，再利用 upper_bound 可求得解。 prefixSum = [1,3,7,12] target = [0,1,2,3,4,5,6,7,8,9,10,11,12] ^ ^ ^ ^ answer = [0,1,1,2,2,2,2,3,3,3,3, 3, 4 ] 三、解題 1. Binary Search Time complexity: \\(O((m+n)\\log n)\\)\n排序：\\(O(n\\log n)\\)\nm 次 Binary Search：\\(O(m\\times\\log n)\\) Space complexity: \\(O(n)\\) vector\u0026lt;int\u0026gt; answerQueries(vector\u0026lt;int\u0026gt;\u0026amp; nums, vector\u0026lt;int\u0026gt;\u0026amp; queries) { sort(nums.begin(), nums.end()); // 排序 vector\u0026lt;int\u0026gt; acc; vector\u0026lt;int\u0026gt; res; for (int x : nums) { // 求 prefix sum if (acc.empty()) acc.push_back(x); else acc.push_back(acc.back() + x); } for (const auto\u0026amp; q : queries) { // 用 binary search 求解 res.push_back(distance(acc.begin(), upper_bound(acc.begin(), acc.end(), q))); } return res; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/2389/","summary":"\u003cp\u003e\u003cstrong\u003e2389. Longest Subsequence With Limited Sum\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{green}\\textsf{Easy}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eArray\u003c/code\u003e、\u003ccode\u003eBinary Search\u003c/code\u003e、\u003ccode\u003eGreedy\u003c/code\u003e、\u003ccode\u003eSorting\u003c/code\u003e、\u003ccode\u003ePrefix Sum\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eYou are given an integer array \u003ccode\u003enums\u003c/code\u003e of length \u003ccode\u003en\u003c/code\u003e, and an integer array queries of length \u003ccode\u003em\u003c/code\u003e.\u003cbr\u003e\nReturn \u003cem\u003ean array\u003c/em\u003e \u003ccode\u003eanswer\u003c/code\u003e \u003cem\u003eof length\u003c/em\u003e \u003ccode\u003em\u003c/code\u003e \u003cem\u003ewhere\u003c/em\u003e \u003ccode\u003eanswer[i]\u003c/code\u003e \u003cem\u003eis the\u003c/em\u003e \u003cem\u003e\u003cstrong\u003emaximum\u003c/strong\u003e\u003c/em\u003e \u003cem\u003esize of a\u003c/em\u003e \u003cem\u003e\u003cstrong\u003esubsequence\u003c/strong\u003e\u003c/em\u003e \u003cem\u003ethat you can take from\u003c/em\u003e \u003ccode\u003enums\u003c/code\u003e \u003cem\u003esuch that the\u003c/em\u003e \u003cem\u003e\u003cstrong\u003esum\u003c/strong\u003e\u003c/em\u003e \u003cem\u003eof its elements is less than or equal to\u003c/em\u003e \u003ccode\u003equeries[i]\u003c/code\u003e.\u003cbr\u003e\nA \u003cstrong\u003esubsequence\u003c/strong\u003e is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\u003c/p\u003e","title":"[LeetCode] 2389. Longest Subsequence With Limited Sum"},{"content":"790. Domino and Tromino Tiling\nHardness: \\(\\color{orange}\\textsf{Medium}\\) Ralated Topics: Dynamic Programming 一、題目 You have two types of tiles: a 2 x 1 domino shape and a tromino shape. You may rotate these shapes.\nGiven an integer n, return the number of ways to tile an 2 x n board. Since the answer may be very large, return it modulo 10^9 + 7.\nIn a tiling, every square must be covered by a tile. Two tilings are different if and only if there are two 4-directionally adjacent cells on the board such that exactly one of the tilings has both squares occupied by a tile.\nExample 1:\nInput: n = 3 Output: 5 Explanation: The five different ways are show above. Example 2:\nInput: n = 1 Output: 1 Constraints:\n1 \u0026lt;= n \u0026lt;= 1000 二、分析 直覺上列出前 5 個解為：1,2,5,11,24，若用觀察法猜公式可以猜到dp[n] = 2*dp[n-1] + dp[n-3]，便可以快速解出答案。 以下為網友的分析\n也就是說，\n\\( \\text{dp[n] = dp[n-1]+dp[n-2]+2(dp[n-3]+\u0026hellip;+dp[0])}\\\\ \\text{dp[n-1] = dp[n-2]+dp[n-3]+2(dp[n-4]+\u0026hellip;+dp[0])}\\\\ \\text{dp[n]=2}\\times\\text{dp[n-1]+dp[n-3]} \\) 三、解題 1. DP Time complexity: \\(O(n)\\) Space complexity: \\(O(n)\\) int numTilings(int n) { int MOD = (int)1e9+7; if (n \u0026lt;= 2) return n; if (n == 3) return 5; vector\u0026lt;long long int\u0026gt; dp(n+1); dp[1] = 1; dp[2] = 2; dp[3] = 5; for (int i = 4; i \u0026lt;= n; i++) { dp[i] = (dp[i-1]*2 + dp[i-3]) % MOD; } return (int)dp[n]; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/790/","summary":"\u003cp\u003e\u003cstrong\u003e790. Domino and Tromino Tiling\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{orange}\\textsf{Medium}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eDynamic Programming\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eYou have two types of tiles: a \u003ccode\u003e2 x 1\u003c/code\u003e domino shape and a tromino shape. You may rotate these shapes.\u003cbr\u003e\n\u003cimg alt=\"domino\" loading=\"lazy\" src=\"https://assets.leetcode.com/uploads/2021/07/15/lc-domino.jpg\"\u003e\nGiven an integer n, return \u003cem\u003ethe number of ways to tile an\u003c/em\u003e \u003ccode\u003e2 x n\u003c/code\u003e \u003cem\u003eboard\u003c/em\u003e. Since the answer may be very large, return it \u003cstrong\u003emodulo\u003c/strong\u003e \u003ccode\u003e10^9 + 7\u003c/code\u003e.\u003cbr\u003e\nIn a tiling, every square must be covered by a tile. Two tilings are different if and only if there are two 4-directionally adjacent cells on the board such that exactly one of the tilings has both squares occupied by a tile.\u003c/p\u003e","title":"[LeetCode] 790. Domino and Tromino Tiling"},{"content":"841. Keys and Rooms\nHardness: \\(\\color{orange}\\textsf{Medium}\\) Ralated Topics: Depth-First Search、Breadth-First Search、Graph 一、題目 There are n rooms labeled from 0 to n - 1 and all the rooms are locked except for room 0. Your goal is to visit all the rooms. However, you cannot enter a locked room without having its key.\nWhen you visit a room, you may find a set of distinct keys in it. Each key has a number on it, denoting which room it unlocks, and you can take all of them with you to unlock the other rooms.\nGiven an array rooms where rooms[i] is the set of keys that you can obtain if you visited room i, return true if you can visit all the rooms, or false otherwise.\nExample 1:\nInput: rooms = [[1],[2],[3]] Output: true Explanation: We visit room 0 and pick up key 1.\nWe then visit room 1 and pick up key 2.\nWe then visit room 2 and pick up key 3.\nWe then visit room 3.\nSince we were able to visit every room, we return true. Example 2:\nInput: rooms = [[1,3],[3,0,1],[2],[0]] Output: false Explanation: We can not enter room number 2 since the only key that unlocks it is in that room. Constraints:\nn == rooms.length 2 \u0026lt;= n \u0026lt;= 1000 0 \u0026lt;= rooms[i].length \u0026lt;= 1000 1 \u0026lt;= sum(rooms[i].length) \u0026lt;= 3000 0 \u0026lt;= rooms[i][j] \u0026lt; n All the values of rooms[i] are unique. 二、分析 典型的 Graph 問題，利用 visited 來記錄拜訪過了沒，並用 BFS 來遍歷整個 Graph，每次拜訪一間新的 room 時，將 key 加入到新的佇列中，看是否能能遍歷整個 graph。 三、解題 1. BFS Time complexity: \\(O(n)\\) Space complexity: \\(O(n)\\) bool canVisitAllRooms(vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; rooms) { queue\u0026lt;int\u0026gt; q; q.push(0); int cnt = rooms.size(); vector\u0026lt;bool\u0026gt; used(rooms.size(), false); while (!q.empty()){ int key = q.front(); q.pop(); if (used[key]) continue; cnt--; if (cnt == 0) break; used[key] = true; for (int next : rooms[key]){ if (used[next]) continue; q.push(next); } } return cnt == 0; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/841/","summary":"\u003cp\u003e\u003cstrong\u003e841. Keys and Rooms\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{orange}\\textsf{Medium}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eDepth-First Search\u003c/code\u003e、\u003ccode\u003eBreadth-First Search\u003c/code\u003e、\u003ccode\u003eGraph\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eThere are \u003ccode\u003en\u003c/code\u003e rooms labeled from \u003ccode\u003e0\u003c/code\u003e to \u003ccode\u003en - 1\u003c/code\u003e and all the rooms are locked except for room \u003ccode\u003e0\u003c/code\u003e. Your goal is to visit all the rooms. However, you cannot enter a locked room without having its key.\u003cbr\u003e\nWhen you visit a room, you may find a set of \u003cstrong\u003edistinct keys\u003c/strong\u003e in it. Each key has a number on it, denoting which room it unlocks, and you can take all of them with you to unlock the other rooms.\u003cbr\u003e\nGiven an array \u003ccode\u003erooms\u003c/code\u003e where \u003ccode\u003erooms[i]\u003c/code\u003e is the set of keys that you can obtain if you visited room \u003ccode\u003ei\u003c/code\u003e, return \u003ccode\u003etrue\u003c/code\u003e \u003cem\u003eif you can visit all the rooms, or\u003c/em\u003e \u003ccode\u003efalse\u003c/code\u003e \u003cem\u003eotherwise\u003c/em\u003e.\u003c/p\u003e","title":"[LeetCode] 841. Keys and Rooms"},{"content":"25. Reverse Nodes in k-Group\nHardness: \\(\\color{red}\\textsf{Hard}\\) Ralated Topics: Linked List、Recursion 一、題目 Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.\nk is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.\nYou may not alter the values in the list\u0026rsquo;s nodes, only nodes themselves may be changed.\nExample 1:\nInput: head = [1,2,3,4,5], k = 2 Output: [2,1,4,3,5] Example 2: Input: head = [1,2,3,4,5], k = 3 Output: [3,2,1,4,5] Constraints:\nThe number of nodes in the list is n. 1 \u0026lt;= k \u0026lt;= n \u0026lt;= 5000 0 \u0026lt;= Node.val \u0026lt;= 1000 二、分析 經典的 ListNode 問題，鏈表的後序遍歷，利用後序遍歷回傳值的特性並用 recursion 來完成這一題。 三、解題 1. Recursion Time complexity: \\(O()\\) Space complexity: \\(O()\\) ListNode* reverseKGroup(ListNode* head, int k) { int cnt = k; ListNode* last = head; while (cnt \u0026amp;\u0026amp; last) { last = last-\u0026gt;next; cnt--; } if (cnt == 0) { last = reverseKGroup(last, k); ListNode* prev = nullptr; ListNode* curr = head; ListNode* next = nullptr; cnt = k; while (cnt--) { next = curr-\u0026gt;next; curr-\u0026gt;next = prev; prev = curr; curr = next; } head-\u0026gt;next = last; head = prev; } return head; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/25/","summary":"\u003cp\u003e\u003cstrong\u003e25. Reverse Nodes in k-Group\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{red}\\textsf{Hard}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eLinked List\u003c/code\u003e、\u003ccode\u003eRecursion\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eGiven the \u003ccode\u003ehead\u003c/code\u003e of a linked list, reverse the nodes of the list \u003ccode\u003ek\u003c/code\u003e at a time, and return \u003cem\u003ethe modified list\u003c/em\u003e.\u003cbr\u003e\n\u003ccode\u003ek\u003c/code\u003e is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of \u003ccode\u003ek\u003c/code\u003e then left-out nodes, in the end, should remain as it is.\u003cbr\u003e\nYou may not alter the values in the list\u0026rsquo;s nodes, only nodes themselves may be changed.\u003c/p\u003e","title":"[LeetCode] 25. Reverse Nodes in k-Group"},{"content":"24. Swap Nodes in Pairs\nHardness: \\(\\color{orange}\\textsf{Medium}\\) Ralated Topics: Linked List、Recursion 一、題目 Given a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list\u0026rsquo;s nodes (i.e., only nodes themselves may be changed.)\nExample 1:\nInput: head = [1,2,3,4] Output: [2,1,4,3] Example 2:\nInput: head = [] Output: [] Example 3:\nInput: head = [1] Output: [1] Constraints:\nThe number of nodes in the list in the range [0, 100]. 0 \u0026lt;= Node.val \u0026lt;= 100 二、分析 經典的 ListNode 問題，鏈表的後序遍歷，利用後序遍歷回傳值的特性並用 recursion 來完成這一題。 三、解題 1. Recursion Time complexity: \\(O(n)\\) Space complexity: \\(O(1)\\) ListNode* swapPairs(ListNode* head) { if (!head || !head-\u0026gt;next) return head; // 先確定終止條件 ListNode* next = head-\u0026gt;next; // 兩個節點為單位，所以在每一個遞迴內控制兩個節點 head-\u0026gt;next = swapPairs(next-\u0026gt;next); // 每個單位的尾巴接回傳值的頭部 next-\u0026gt;next = head; // 實做每個單位裡面的反轉 return next; // 因為單位的尾巴要接到下一個單位的頭部，故這裡要回傳單位的頭位 } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/24/","summary":"\u003cp\u003e\u003cstrong\u003e24. Swap Nodes in Pairs\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{orange}\\textsf{Medium}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eLinked List\u003c/code\u003e、\u003ccode\u003eRecursion\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eGiven a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list\u0026rsquo;s nodes (i.e., only nodes themselves may be changed.)\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003cbr\u003e\n\u003cimg alt=\"swap_ex1\" loading=\"lazy\" src=\"https://assets.leetcode.com/uploads/2020/10/03/swap_ex1.jpg\"\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInput:\u003c/strong\u003e head = [1,2,3,4]\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e [2,1,4,3]\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInput:\u003c/strong\u003e head = []\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e []\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInput:\u003c/strong\u003e head = [1]\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e [1]\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e","title":"[LeetCode] 24. Swap Nodes in Pairs"},{"content":"931. Minimum Falling Path Sum\nHardness: \\(\\color{orange}\\textsf{Medium}\\) Ralated Topics: Array、Dynamic Programming、Matrix 一、題目 Given an n x n array of integers matrix, return the minimum sum of any falling path through matrix.\nA falling path starts at any element in the first row and chooses the element in the next row that is either directly below or diagonally left/right. Specifically, the next element from position (row, col) will be (row + 1, col - 1), (row + 1, col), or (row + 1, col + 1).\nExample 1:\nInput: matrix = [[2,1,3],[6,5,4],[7,8,9]] Output: 13 Explanation: There are two falling paths with a minimum sum as shown. Example 2:\nInput: matrix = [[-19,57],[-40,-5]] Output: -59 Explanation: The falling path with a minimum sum is shown. Constraints:\nn == matrix.length == matrix[i].length 1 \u0026lt;= n \u0026lt;= 100 -100 \u0026lt;= matrix[i][j] \u0026lt;= 100 二、分析 這題也是典型的動態規劃問題，每一層可能的最小值，會影響到下一層的最小值，所以我們只需記錄每一層的狀態再將狀態往下一層推移即可。 定義 dp[m][n] 為第 m 層，第 n 欄的累計最小值。 轉移方程式為 dp[m][n] = min({dp[m-1][n-1], dp[m-1][n], dp[m-1][n+1]}) + row[m][n]。 但要注意最左邊跟最右邊要另外處理以避免出界。 從轉移方程式可以注意到，狀態的轉移只跟上一層有關係，故可以做空間壓縮，就空間複雜度壓到 \\(O(n)\\) 三、解題 1. DP Time complexity: \\(O(m\\times n)\\) Space complexity: \\(O(m\\times n)\\) int minFallingPathSum(vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; matrix) { int m = matrix.size(), n = matrix[0].size(); if (m == 1) return matrix[0][0]; vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; dp(m+1, vector\u0026lt;int\u0026gt;(n)); for (int i = 0; i \u0026lt; m; i++) { vector\u0026lt;int\u0026gt;\u0026amp; row = matrix[i]; dp[i+1][0] = min(dp[i][0], dp[i][1]) + row[0]; dp[i+1][n-1] = min(dp[i][n-1], dp[i][n-2]) + row[n-1]; for (int j = 1; j \u0026lt; n-1; j++) { dp[i+1][j] = min({dp[i][j-1], dp[i][j], dp[i][j+1]}) + row[j]; } } int res = INT_MAX; for (int j = 0; j \u0026lt; n; j++) { res = min(res, dp[m][j]); } return res; } 2. DP space-optimized Time complexity: \\(O(m\\times n)\\) Space complexity: \\(O(n)\\) int minFallingPathSum(vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; matrix) { int m = matrix.size(), n = matrix[0].size(); if (m == 1) return matrix[0][0]; // 利用奇數層跟偶數層做切換 vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; dp(2, vector\u0026lt;int\u0026gt;(n)); for (int i = 0; i \u0026lt; m-1; i++) { vector\u0026lt;int\u0026gt;\u0026amp; row = matrix[i]; dp[i%2][0] = min(dp[(i+1)%2][0], dp[(i+1)%2][1]) + row[0]; dp[i%2][n-1] = min(dp[(i+1)%2][n-1], dp[(i+1)%2][n-2]) + row[n-1]; for (int j = 1; j \u0026lt; matrix[0].size()-1; j++) { dp[i%2][j] = min({dp[(i+1)%2][j-1], dp[(i+1)%2][j], dp[(i+1)%2][j+1]}) + row[j]; } } int res = INT_MAX; dp[(m-1)%2][0] = min(dp[m%2][0], dp[m%2][1]) + matrix[m-1][0]; dp[(m-1)%2][n-1] = min(dp[m%2][n-1], dp[m%2][n-2]) + matrix[m-1][n-1]; res = min({res, dp[(m-1)%2][0], dp[(m-1)%2][n-1]}); for (int j = 1; j \u0026lt; matrix[0].size()-1; j++) { dp[(m-1)%2][j] = min({dp[m%2][j-1], dp[m%2][j], dp[m%2][j+1]}) + matrix[m-1][j]; res = min(res, dp[(m-1)%2][j]); } return res; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/931/","summary":"\u003cp\u003e\u003cstrong\u003e931. Minimum Falling Path Sum\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{orange}\\textsf{Medium}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eArray\u003c/code\u003e、\u003ccode\u003eDynamic Programming\u003c/code\u003e、\u003ccode\u003eMatrix\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eGiven an \u003ccode\u003en x n\u003c/code\u003e array of integers \u003ccode\u003ematrix\u003c/code\u003e, return \u003cem\u003ethe \u003cstrong\u003eminimum sum\u003c/strong\u003e of any \u003cstrong\u003efalling path\u003c/strong\u003e through\u003c/em\u003e \u003ccode\u003ematrix\u003c/code\u003e.\u003cbr\u003e\nA \u003cstrong\u003efalling path\u003c/strong\u003e starts at any element in the first row and chooses the element in the next row that is either directly below or diagonally left/right. Specifically, the next element from position \u003ccode\u003e(row, col)\u003c/code\u003e will be \u003ccode\u003e(row + 1, col - 1)\u003c/code\u003e, \u003ccode\u003e(row + 1, col)\u003c/code\u003e, or \u003ccode\u003e(row + 1, col + 1)\u003c/code\u003e.\u003c/p\u003e","title":"[LeetCode] 931. Minimum Falling Path Sum"},{"content":"70. Climbing Stairs\nHardness: \\(\\color{green}\\textsf{Easy}\\) Ralated Topics: Math、Dynamic Programming、Memoization 一、題目 You are climbing a staircase. It takes n steps to reach the top.\nEach time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?\nExample 1:\nInput: n = 2 Output: 2 Explanation: There are two ways to climb to the top. 1 step + 1 step 2 steps Example 2:\nInput: n = 3 Output: 3 Explanation: There are three ways to climb to the top. 1 step + 1 step + 1 step 1 step + 2 steps 2 steps + 1 step Constraints:\n1 \u0026lt;= n \u0026lt;= 45 二、分析 經典的動態規劃問題，因為只有 1-step 與 2-steps 兩個選擇，所以 n 階的樓梯的走法會是 n-1 階與 n-2 階走法的總和。 令 n 階走法的數目為 dp[n]，dp[n] = dp[n-1] + dp[n-2]。 注意初始條件 dp[0] = 1，dp[1] = 1。 可以發現此為費式數列，即 1,1,2,3,5,8,13,21...。 三、解題 1. DP Time complexity: \\(O()\\) Space complexity: \\(O()\\) int climbStairs(int n) { int dp[n+1]; dp[0] = 1, dp[1] = 1; for (int i = 2; i \u0026lt;= n; i++) { dp[i] = dp[i-1] + dp[i-2]; } return dp[n]; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/70/","summary":"\u003cp\u003e\u003cstrong\u003e70. Climbing Stairs\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{green}\\textsf{Easy}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eMath\u003c/code\u003e、\u003ccode\u003eDynamic Programming\u003c/code\u003e、\u003ccode\u003eMemoization\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eYou are climbing a staircase. It takes \u003ccode\u003en\u003c/code\u003e steps to reach the top.\u003cbr\u003e\nEach time you can either climb \u003ccode\u003e1\u003c/code\u003e or \u003ccode\u003e2\u003c/code\u003e steps. In how many distinct ways can you climb to the top?\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInput:\u003c/strong\u003e n = 2\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e 2\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e There are two ways to climb to the top.\u003c/li\u003e\n\u003c/ul\u003e\n\u003col\u003e\n\u003cli\u003e1 step + 1 step\u003c/li\u003e\n\u003cli\u003e2 steps\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e","title":"[LeetCode] 70. Climbing Stairs"},{"content":"2501. Longest Square Streak in an Array\nHardness: \\(\\color{orange}\\textsf{Medium}\\) Ralated Topics: Array、Hash Table、Binary Search、Dynamic Programming、Sorting \\(\\color{blue}\\textsf{Weekly Contest 323}\\) 一、題目 You are given an integer array nums. A subsequence of nums is called a square streak if:\nThe length of the subsequence is at least 2, and after sorting the subsequence, each element (except the first element) is the square of the previous number.\nReturn the length of the longest square streak in nums, or return -1 if there is no square streak.\nA subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements. Example 1:\nInput: nums = [4,3,6,16,8,2] Output: 3 Explanation: Choose the subsequence [4,16,2]. After sorting it, it becomes [2,4,16]. 4 = 2 * 2. 16 = 4 * 4.\nTherefore, [4,16,2] is a square streak.\nIt can be shown that every subsequence of length 4 is not a square streak. Example 2:\nInput: nums = [2,3,5,6,7] Output: -1 Explanation: There is no square streak in nums so return -1. Constraints:\n2 \u0026lt;= nums.length \u0026lt;= 10^5 2 \u0026lt;= nums[i] \u0026lt;= 10^5 二、分析 先將 num 排序過後，遍歷所有的數字，並在遍歷的當下將數值存進 map 中，再找尋有沒有符合題意條件的數值在 map 中。 令一個 dp(n)，代別 nums[n] 所具有的 longestSquareStreak，其中 if (map.count(sqrt(nums[i]))) dp[i] = dp[map[sqrt(nums[i])]] + 1 需注意檢查 sqrt(nums[i]) * sqrt(nums[i] == nums[i] 三、解題 1. DP Time complexity: \\(O(n\\log n)\\) Space complexity: \\(O(n)\\) int longestSquareStreak(vector\u0026lt;int\u0026gt;\u0026amp; nums) { vector\u0026lt;int\u0026gt; dp(nums.size(), 1); unordered_map\u0026lt;int,int\u0026gt; map; sort(nums.begin(), nums.end()); int res = -1; for (int i = 0; i \u0026lt; nums.size(); i++) { int target = sqrt(nums[i]); if (target * target == nums[i]) { if (map.count(target)) { dp[i] = dp[map[target]] + 1; res = max(dp[i], res); } } map[nums[i]] = i; } return res; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/2501/","summary":"\u003cp\u003e\u003cstrong\u003e2501. Longest Square Streak in an Array\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{orange}\\textsf{Medium}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eArray\u003c/code\u003e、\u003ccode\u003eHash Table\u003c/code\u003e、\u003ccode\u003eBinary Search\u003c/code\u003e、\u003ccode\u003eDynamic Programming\u003c/code\u003e、\u003ccode\u003eSorting\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\\(\\color{blue}\\textsf{Weekly Contest 323}\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eYou are given an integer array \u003ccode\u003enums\u003c/code\u003e. A subsequence of \u003ccode\u003enums\u003c/code\u003e is called a \u003cstrong\u003esquare streak\u003c/strong\u003e if:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe length of the subsequence is at least \u003ccode\u003e2\u003c/code\u003e, and\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eafter\u003c/strong\u003e sorting the subsequence, each element (except the first element) is the \u003cstrong\u003esquare\u003c/strong\u003e of the previous number.\u003cbr\u003e\nReturn \u003cem\u003ethe length of the \u003cstrong\u003elongest square streak\u003c/strong\u003e in \u003ccode\u003enums\u003c/code\u003e, or return \u003ccode\u003e-1\u003c/code\u003e if there is no \u003cstrong\u003esquare streak\u003c/strong\u003e\u003c/em\u003e.\u003cbr\u003e\nA \u003cstrong\u003esubsequence\u003c/strong\u003e is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e","title":"[LeetCode] 2501. Longest Square Streak in an Array"},{"content":"2500. Delete Greatest Value in Each Row\nHardness: \\(\\color{green}\\textsf{Easy}\\) Ralated Topics: Array、Hash Table、Binary Search、Dynamic Programming、Sorting \\(\\color{blue}\\textsf{Weekly Contest 323}\\) 一、題目 You are given an m x n matrix grid consisting of positive integers.\nPerform the following operation until grid becomes empty:\nDelete the element with the greatest value from each row. If multiple such elements exist, delete any of them. Add the maximum of deleted elements to the answer.\nNote that the number of columns decreases by one after each operation.\nReturn the answer after performing the operations described above. Example 1:\nInput: grid = [[1,2,4],[3,3,1]] Output: 8 Explanation: The diagram above shows the removed values in each step. In the first operation, we remove 4 from the first row and 3 from the second row (notice that, there are two cells with value 3 and we can remove any of them). We add 4 to the answer. In the second operation, we remove 2 from the first row and 3 from the second row. We add 3 to the answer. In the third operation, we remove 1 from the first row and 1 from the second row. We add 1 to the answer.\nThe final answer = 4 + 3 + 1 = 8. Example 2:\nInput: grid = [[10]] Output: 10 Explanation: The diagram above shows the removed values in each step. In the first operation, we remove 10 from the first row. We add 10 to the answer. The final answer = 10. Constraints:\nm == grid.length n == grid[i].length 1 \u0026lt;= m, n \u0026lt;= 50 1 \u0026lt;= grid[i][j] \u0026lt;= 100 二、分析 將每一列的 vector 都各自排序後，依題意將每一欄取最大值並累加起來。 三、解題 1. Sort Time complexity: \\(O(m\\times n\\log n)\\) Space complexity: \\(O(1)\\) int deleteGreatestValue(vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; grid) { for (int i = 0; i \u0026lt; grid.size(); i++) { auto\u0026amp; row = grid[i]; sort(row.begin(), row.end()); } int res = 0; for (int j = 0; j \u0026lt; grid[0].size(); j++) { int tmp = 0; for (int i = 0; i \u0026lt; grid.size(); i++) { tmp = max(tmp, grid[i][j]); } res += tmp; } return res; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/2500/","summary":"\u003cp\u003e\u003cstrong\u003e2500. Delete Greatest Value in Each Row\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{green}\\textsf{Easy}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eArray\u003c/code\u003e、\u003ccode\u003eHash Table\u003c/code\u003e、\u003ccode\u003eBinary Search\u003c/code\u003e、\u003ccode\u003eDynamic Programming\u003c/code\u003e、\u003ccode\u003eSorting\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\\(\\color{blue}\\textsf{Weekly Contest 323}\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eYou are given an \u003ccode\u003em x n\u003c/code\u003e matrix \u003ccode\u003egrid\u003c/code\u003e consisting of positive integers.\u003cbr\u003e\nPerform the following operation until \u003ccode\u003egrid\u003c/code\u003e becomes empty:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDelete the element with the greatest value from each row. If multiple such elements exist, delete any of them.\u003c/li\u003e\n\u003cli\u003eAdd the maximum of deleted elements to the answer.\u003cbr\u003e\n\u003cstrong\u003eNote\u003c/strong\u003e that the number of columns decreases by one after each operation.\u003cbr\u003e\nReturn \u003cem\u003ethe answer after performing the operations described above\u003c/em\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003cbr\u003e\n\u003cimg alt=\"q1ex1\" loading=\"lazy\" src=\"https://assets.leetcode.com/uploads/2022/10/19/q1ex1.jpg\"\u003e\u003c/p\u003e","title":"[LeetCode] 2500. Delete Greatest Value in Each Row"},{"content":"124. Binary Tree Maximum Path Sum\nHardness: \\(\\color{red}\\textsf{Hard}\\) Ralated Topics: Dynamic Programming、Tree、Depth-First Search、Binary Tree 一、題目 A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.\nThe path sum of a path is the sum of the node\u0026rsquo;s values in the path.\nGiven the root of a binary tree, return the maximum path sum of any non-empty path. Example 1:\nInput: root = [1,2,3] Output: 6 Explanation: The optimal path is 2 -\u0026gt; 1 -\u0026gt; 3 with a path sum of 2 + 1 + 3 = 6 Example 2: Input: root = [-10,9,20,null,null,15,7] Output: 42 Explanation: The optimal path is 15 -\u0026gt; 20 -\u0026gt; 7 with a path sum of 15 + 20 + 7 = 42. Constraints:\nThe number of nodes in the tree is in the range [1, 3*10^4]. -1000 \u0026lt;= Node.val \u0026lt;= 1000 二、分析 此題的解題關鍵在於求單邊子葉的最大 pathSum。 注意 pathSum 只需要是路徑上的任一總和，無需一定要包含子葉節點。 對一個節點而言，可能的路徑包含： 節點本身 節點本身 + 左邊的 pathSum 節點本身 + 右邊的 pathSum 節點本身 + 兩邊的 pathSum 以上可以簡化成 root-\u0026gt;val + max(leftPathSum, 0) + max(rightPathSum, 0) 故我們可以遍歷整棵樹，並同時更新可能的 三、解題 1. DFS Time complexity: \\(O(n)\\) Space complexity: \\(O(1)\\) int res = INT_MIN; int maxPathSum(TreeNode* root) { dfs(root); return res; } int dfs(TreeNode* root) { if (!root) return 0; int left = dfs(root-\u0026gt;left); int right = dfs(root-\u0026gt;right); int sum = root-\u0026gt;val + max(left, 0) + max(right, 0); res = max(res, sum); return root-\u0026gt;val + max(max(left, 0) + max(right, 0)); } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/124/","summary":"\u003cp\u003e\u003cstrong\u003e124. Binary Tree Maximum Path Sum\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{red}\\textsf{Hard}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eDynamic Programming\u003c/code\u003e、\u003ccode\u003eTree\u003c/code\u003e、\u003ccode\u003eDepth-First Search\u003c/code\u003e、\u003ccode\u003eBinary Tree\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eA \u003cstrong\u003epath\u003c/strong\u003e in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence \u003cstrong\u003eat most once\u003c/strong\u003e. Note that the path does not need to pass through the root.\u003cbr\u003e\nThe \u003cstrong\u003epath sum\u003c/strong\u003e of a path is the sum of the node\u0026rsquo;s values in the path.\u003cbr\u003e\nGiven the \u003ccode\u003eroot\u003c/code\u003e of a binary tree, return \u003cem\u003ethe maximum \u003cstrong\u003epath sum\u003c/strong\u003e of any \u003cstrong\u003enon-empty\u003c/strong\u003e path\u003c/em\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003cbr\u003e\n\u003cimg alt=\"exx1\" loading=\"lazy\" src=\"https://assets.leetcode.com/uploads/2020/10/13/exx1.jpg\"\u003e\u003c/p\u003e","title":"[LeetCode] 124. Binary Tree Maximum Path Sum"},{"content":"1339. Maximum Product of Splitted Binary Tree\nHardness: \\(\\color{orange}\\textsf{Medium}\\) Ralated Topics: Tree、Depth-First Search、Binary Tree 一、題目 Given the root of a binary tree, split the bianry tree into two subtrees by removing one edge such that the product of the sums of the subtreesis maximized.\nReturn the maximum product of the sums of the two subtrees. Since the answer may be too large, return it modulo 10^9 + 7.\nNote that you need to maximize the answer before taking the mod and not after taking it.\nExample 1:\nInput: root = [1,2,3,4,5,6] Output: 110 Explanation: Remove the red edge and get 2 binary trees with sum 11 and 10. Their product is 110 (10*10) Example 2: Input: root = [1,null,2,3,4,null,null,5,6] Output: 90 Explanation: Remove the red edge and get 2 binary trees with sum 15 and 6.Their product is 90 (15*6) Constraints:\nThe number of nodes in the tree is in the range [2, 5 * 10^4]. 1 \u0026lt;= Node.val \u0026lt;= 10^4 二、分析 這一題的關鍵在於，求切斷的 edge 兩邊的乘積為最大值。而一但我們知道整棵樹的總和之後，我們便只要知道切斷的其中一邊的和為多少，便可以知道另一邊的和為多少。 one = total - another 經觀察我們可以發現，節點與其所有子葉的和，代表了切斷的 edge 的其中一邊。 故我們只需遍歷整個樹，並把當下節點與所有子葉的和，記錄到 vector 中，再利用 one = total - another 的關係，求得最大乘積。 需要注意此題為大數問題，要注意返回的值要先比較之後才取餘數。 三、解題 1. DFS Time complexity: \\(O(n)\\) Space complexity: \\(O(n)\\) #define ll long long int #define MOD 1000000007 int maxProduct(TreeNode* root) { vector\u0026lt;ll\u0026gt; vec; int total = dfs(root, vec); // 遍歷樹，並算出整棵樹的和 ll res = 0; for (ll\u0026amp; x : vec) { res = max(res, x * (total-x)); // 截斷邊的兩側樹的和分別為 x 與 total - x } return res % MOD; } int dfs(TreeNode* root, vector\u0026lt;ll\u0026gt; vec) { if (!root) return 0; int left = dfs(root-\u0026gt;left, vec); int right = dfs(root-\u0026gt;right, vec); vec.push_back(root-\u0026gt;val + left + right); // 將子樹的總和記到 vector 中 return vec.back(); // 返回子樹的總和，讓父節點可以使用 } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/1339/","summary":"\u003cp\u003e\u003cstrong\u003e1339. Maximum Product of Splitted Binary Tree\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{orange}\\textsf{Medium}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eTree\u003c/code\u003e、\u003ccode\u003eDepth-First Search\u003c/code\u003e、\u003ccode\u003eBinary Tree\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eGiven the \u003ccode\u003eroot\u003c/code\u003e of a binary tree, split the bianry tree into two subtrees by removing one edge such that the product of the sums of the subtreesis maximized.\u003cbr\u003e\nReturn \u003cem\u003ethe maximum product of the sums of the two subtrees\u003c/em\u003e. Since the answer may be too large, return it \u003cstrong\u003emodulo\u003c/strong\u003e \u003ccode\u003e10^9 + 7\u003c/code\u003e.\u003cbr\u003e\n\u003cstrong\u003eNote\u003c/strong\u003e that you need to maximize the answer before taking the mod and not after taking it.\u003c/p\u003e","title":"[LeetCode] 1339. Maximum Product of Splitted Binary Tree"},{"content":"1026. Maximum Difference Between Node and Ancestor\nHardness: \\(\\color{orange}\\textsf{Medium}\\) Ralated Topics: Tree、Depth-First Search、Binary Tree 一、題目 Given the root of a binary tree, find the maximum value v for which there exist different nodes a and b where v = |a.val - b.val| and a is an ancestor of b.\nA node a is an ancestor of b if either: any child of a is equal to b or any child of a is an ancestor of b.\nExample 1:\nInput: root = [8,3,10,1,6,null,14,null,null,4,7,13] Output: 7 Explanation: We have various ancestor-node differences, some of which are given below :\n|8 - 3| = 5\n|3 - 7| = 4\n|8 - 1| = 7\n|10 - 13| = 3\nAmong all possible differences, the maximum value of 7 is obtained by |8 - 1| = 7. Example 2: Input: root = [1,null,2,null,0,3] Output: 3 Constraints:\nThe number of nodes in the tree is in the range [2, 5000]. 0 \u0026lt;= Node.val \u0026lt;= 10^5 二、分析 借用一個 helper 函式，將父節點的值往子葉節點傳，並且記錄過程中的最大值與最小值，並定義一個全域變數記錄其差值。 三、解題 1. DFS Time complexity: \\(O(n)\\) Space complexity: \\(O(1)\\) int res = 0; int maxAncestorDiff(TreeNode* root) { helper(root, root-\u0026gt;val, root-\u0026gt;val); return res; } void helper(TreeNode* root, int maxv, int minv) { if (!root) return; maxv = max(maxv, root-\u0026gt;val); minv = min(minv, root-\u0026gt;val); helper(root-\u0026gt;left, maxv, minv); helper(root-\u0026gt;right, maxv, minv); res = max(res, maxv-minv); } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/1026/","summary":"\u003cp\u003e\u003cstrong\u003e1026. Maximum Difference Between Node and Ancestor\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{orange}\\textsf{Medium}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eTree\u003c/code\u003e、\u003ccode\u003eDepth-First Search\u003c/code\u003e、\u003ccode\u003eBinary Tree\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eGiven the \u003ccode\u003eroot\u003c/code\u003e of a binary tree, find the maximum value \u003ccode\u003ev\u003c/code\u003e for which there exist \u003cstrong\u003edifferent\u003c/strong\u003e nodes \u003ccode\u003ea\u003c/code\u003e and \u003ccode\u003eb\u003c/code\u003e where \u003ccode\u003ev = |a.val - b.val|\u003c/code\u003e and \u003ccode\u003ea\u003c/code\u003e is an ancestor of \u003ccode\u003eb\u003c/code\u003e.\u003cbr\u003e\nA node \u003ccode\u003ea\u003c/code\u003e is an ancestor of \u003ccode\u003eb\u003c/code\u003e if either: any child of \u003ccode\u003ea\u003c/code\u003e is equal to \u003ccode\u003eb\u003c/code\u003e or any child of \u003ccode\u003ea\u003c/code\u003e is an ancestor of \u003ccode\u003eb\u003c/code\u003e.\u003c/p\u003e","title":"[LeetCode] 1026. Maximum Difference Between Node and Ancestor"},{"content":"872. Leaf-Similar Trees\nHardness: \\(\\color{green}\\textsf{Easy}\\) Ralated Topics: Tree、Depth-First Search、Binary Tree 一、題目 Consider all the leaves of a binary tree, from left to right order, the values of those leaves form a leaf value sequence. For example, in the given tree above, the leaf value sequence is (6, 7, 4, 9, 8).\nTwo binary trees are considered leaf-similar if their leaf value sequence is the same.\nReturn true if and only if the two given trees with head nodes root1 and root2 are leaf-similar.\nExample 1:\nInput: root1 = [3,5,1,6,2,9,8,null,null,7,4], root2 = [3,5,1,6,7,4,2,null,null,null,null,null,null,9,8] Output: true Example 2: Input: root1 = [1,2,3], root2 = [1,3,2] Output: false Constraints:\nThe number of nodes in each tree will be in the range [1, 200]. Both of the given trees will have values in the range [0, 200]. 二、分析 將所有的節點遍歷過一遍，並將所有的子葉節點記錄在 vector 中，再逐一比較即可。 三、解題 1. DFS Time complexity: \\(O(n)\\) Space complexity: \\(O(n)\\) bool leafSimilar(TreeNode* root1, TreeNode* root2) { vector\u0026lt;int\u0026gt; vec1, vec2; dfs(root1, vec1); dfs(root2, vec2); return isSame(vec1, vec2); } void dfs(TreeNode* root, vector\u0026lt;int\u0026gt;\u0026amp; vec) { if (!root) return; if (!root-\u0026gt;left \u0026amp;\u0026amp; !root-\u0026gt;right) vec.push_back(root-\u0026gt;val); dfs(root-\u0026gt;left, vec); dfs(root-\u0026gt;right, vec); } bool isSame(vector\u0026lt;int\u0026gt;\u0026amp; vec1, vector\u0026lt;int\u0026gt;\u0026amp; vec2) { if (vec1.size() != vec2.size()) return false; for (int i = 0; i \u0026lt; vec1.size(); i++) { if (vec1[i] != vec2[i]) return false; } return true; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/872/","summary":"\u003cp\u003e\u003cstrong\u003e872. Leaf-Similar Trees\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{green}\\textsf{Easy}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eTree\u003c/code\u003e、\u003ccode\u003eDepth-First Search\u003c/code\u003e、\u003ccode\u003eBinary Tree\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eConsider all the leaves of a binary tree, from left to right order, the values of those leaves form \u003cstrong\u003ea leaf value sequence\u003c/strong\u003e.\n\u003cimg alt=\"tree\" loading=\"lazy\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/16/tree.png\"\u003e\nFor example, in the given tree above, the leaf value sequence is \u003ccode\u003e(6, 7, 4, 9, 8)\u003c/code\u003e.\u003cbr\u003e\nTwo binary trees are considered leaf-similar if their leaf value sequence is the same.\u003cbr\u003e\nReturn \u003ccode\u003etrue\u003c/code\u003e if and only if the two given trees with head nodes \u003ccode\u003eroot1\u003c/code\u003e and \u003ccode\u003eroot2\u003c/code\u003e are leaf-similar.\u003c/p\u003e","title":"[LeetCode] 872. Leaf-Similar Trees"},{"content":"938. Range Sum of BST\nHardness: \\(\\color{green}\\textsf{Easy}\\) Ralated Topics: Tree、Depth-First Search、Binary Search Tree、Binary Tree 一、題目 Given the root node of a binary search tree and two integers low and high, return the sum of values of all nodes with a value in the inclusive range [low, high].\nExample 1:\nInput: root = [10,5,15,3,7,null,18], low = 7, high = 15 Output: 32 Explanation: Nodes 7, 10, and 15 are in the range [7, 15]. 7 + 10 + 15 = 32. Example 2: Input: root = [10,5,15,3,7,13,18,1,null,6], low = 6, high = 10 Output: 23 Explanation: Nodes 6, 7, and 10 are in the range [6, 10]. 6 + 7 + 10 = 23. Constraints:\nThe number of nodes in the tree is in the range [1, 2 * 104]. 1 \u0026lt;= Node.val \u0026lt;= 105 1 \u0026lt;= low \u0026lt;= high \u0026lt;= 105 All Node.val are unique. 二、分析 最簡單的方法可以遍歷過一次，將符合條件的數值加起來，可得到解。 進一步可以思考，可以怎麼樣做到剪枝(pruning)。 當 num \u0026lt; low 時，只有其右子葉有可能有符合條件的子葉。 當 num \u0026gt; high 時，只有其左子葉有可能有符合條件的子葉。 三、解題 1. DFS Time complexity: \\(O(n)\\) Space complexity: \\(O(1)\\) int rangeSumBST(TreeNode* root, int low, int high) { if (!root) return 0; int sum = root-\u0026gt;val \u0026lt;= high \u0026amp;\u0026amp; root-\u0026gt;val \u0026gt;= low ? root-\u0026gt;val : 0; return sum + rangeSumBST(root-\u0026gt;left, low, high) + rangeSumBST(root-\u0026gt;right, low, high); } 2. Binary Search Tree Time complexity: \\(O(n)\\) Space complexity: \\(O(1)\\) int rangeSumBST(TreeNode* root, int low, int high) { if (!root) return 0; int val = root-\u0026gt;val \u0026gt;= low \u0026amp;\u0026amp; root-\u0026gt;val \u0026lt;= high ? root-\u0026gt;val : 0; int left = root-\u0026gt;val \u0026lt; low ? 0 : rangeSumBST(root-\u0026gt;left, low, high); int right = root-\u0026gt;val \u0026gt; high ? 0 : rangeSumBST(root-\u0026gt;right, low, high); return left + right + val; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/938/","summary":"\u003cp\u003e\u003cstrong\u003e938. Range Sum of BST\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{green}\\textsf{Easy}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eTree\u003c/code\u003e、\u003ccode\u003eDepth-First Search\u003c/code\u003e、\u003ccode\u003eBinary Search Tree\u003c/code\u003e、\u003ccode\u003eBinary Tree\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eGiven the \u003ccode\u003eroot\u003c/code\u003e node of a binary search tree and two integers \u003ccode\u003elow\u003c/code\u003e and \u003ccode\u003ehigh\u003c/code\u003e, return \u003cem\u003ethe sum of values of all nodes with a value in the \u003cem\u003e\u003cstrong\u003einclusive\u003c/strong\u003e\u003c/em\u003e range\u003c/em\u003e \u003ccode\u003e[low, high]\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003cbr\u003e\n\u003cimg alt=\"bst1\" loading=\"lazy\" src=\"https://assets.leetcode.com/uploads/2020/11/05/bst1.jpg\"\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInput:\u003c/strong\u003e root = [10,5,15,3,7,null,18], low = 7, high = 15\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e 32\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e Nodes 7, 10, and 15 are in the range [7, 15]. 7 + 10 + 15 = 32.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\n\u003cimg alt=\"bst2\" loading=\"lazy\" src=\"https://assets.leetcode.com/uploads/2020/11/05/bst2.jpg\"\u003e\u003c/p\u003e","title":"[LeetCode] 938. Range Sum of BST"},{"content":"328. Odd Even Linked List\nHardness: \\(\\color{orange}\\textsf{Medium}\\) Ralated Topics: Linked List 一、題目 Given the head of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return the reordered list.\nThe first node is considered odd, and the second node is even, and so on.\nNote that the relative order inside both the even and odd groups should remain as it was in the input.\nYou must solve the problem in O(1) extra space complexity and O(n) time complexity.\nExample 1:\nInput: head = [1,2,3,4,5] Output: [1,3,5,2,4] Example 2: Input: head = [2,1,3,5,6,4,7] Output: [2,3,6,7,1,5,4] Constraints:\nThe number of nodes in the linked list is in the range [0, 10^4]. -10^6 \u0026lt;= Node.val \u0026lt;= 10^6 二、分析 分別將奇偶位置的鏈表分開相接之後再將其頭尾串連。 注意因為我們要拿奇數的尾接偶數的頭，故要注意 iterate 的終止條件是 !even || !even-\u0026gt;next 三、解題 1. Linked List Time complexity: \\(O(n)\\) Space complexity: \\(O(1)\\) ListNode* oddEvenList(ListNode* head) { if (!head) return NULL; ListNode* head2 = head-\u0026gt;next; ListNode* odd = head; ListNode* even = head2; while (even \u0026amp;\u0026amp; even-\u0026gt;next) { odd-\u0026gt;next = odd-\u0026gt;next-\u0026gt;next; even-\u0026gt;next = even-\u0026gt;next-\u0026gt;next; odd = odd-\u0026gt;next; even = even-\u0026gt;next; } odd-\u0026gt;next = head2; return head; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/328/","summary":"\u003cp\u003e\u003cstrong\u003e328. Odd Even Linked List\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{orange}\\textsf{Medium}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eLinked List\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eGiven the \u003ccode\u003ehead\u003c/code\u003e of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return \u003cem\u003ethe reordered list\u003c/em\u003e.\u003cbr\u003e\nThe \u003cstrong\u003efirst\u003c/strong\u003e node is considered \u003cstrong\u003eodd\u003c/strong\u003e, and the \u003cstrong\u003esecond\u003c/strong\u003e node is \u003cstrong\u003eeven\u003c/strong\u003e, and so on.\u003cbr\u003e\nNote that the relative order inside both the even and odd groups should remain as it was in the input.\u003cbr\u003e\nYou must solve the problem in \u003ccode\u003eO(1)\u003c/code\u003e extra space complexity and \u003ccode\u003eO(n)\u003c/code\u003e time complexity.\u003c/p\u003e","title":"[LeetCode] 328. Odd Even Linked List"},{"content":"2472. Maximum Number of Non-overlapping Palindrome Substrings\nHardness: \\(\\color{red}\\textsf{Hard}\\) Ralated Topics: String、Dynamic Programming \\(\\color{blue}\\textsf{weekly Contest 319}\\) 一、題目 You are given a string s and a positive integer k. Select a set of non-overlapping substrings from the string s that satisfy the following conditions:\nThe length of each substring is at least k. Each substring is a palindrome. Return the maximum number of substrings in an optimal selection. A substring is a contiguous sequence of characters within a string. Example 1:\nInput: s = \u0026ldquo;abaccdbbd\u0026rdquo;, k = 3 Output: 2 Explanation: We can select the substrings underlined in s = \u0026ldquo;abaccdbbd\u0026rdquo;. Both \u0026ldquo;aba\u0026rdquo; and \u0026ldquo;dbbd\u0026rdquo; are palindromes and have a length of at least k = 3.\nIt can be shown that we cannot find a selection with more than two valid substrings. Example 2:\nInput: s = \u0026ldquo;adbcda\u0026rdquo;, k = 2 Output: 0 Explanation: There is no palindrome substring of length at least 2 in the string. Constraints:\n1 \u0026lt;= k \u0026lt;= s.length \u0026lt;= 2000 s consists of lowercase English letters. 二、分析 動態規劃，定義 dp[i][j] 為索引 i 到索引 j之間的子序列，是否為 palindrome。 當只有兩個字元時，s[i] == s[j] 時為回文。 當大於兩個字元時，除了要滿足 s[i] == s[j] 之外，i+1 到 j-1 的子序列也需為回文，故 dp[i+1][j-1] 需為 true。 注意題目有規定當子序列長度要大於 k 時才可計作解，所以可以設一個值記錄當前最短長度時，滿足題目要求的索引值 pos。 三、解題 1. DP Time complexity: \\(O(n^2)\\) Space complexity: \\(O(n^2)\\) int maxPalindromes(string s, int k) { int n = s.length(); vector\u0026lt;vector\u0026lt;bool\u0026gt;\u0026gt; dp(n, vector\u0026lt;bool\u0026gt;(n, false)); int left, right; int len = 0; int res = 0; int pos = 0; for (int j = 0; j \u0026lt; n; j++){ for (int i = 0; i \u0026lt;= j; i++){ if (i == j){ dp[i][j] = true; } else if (j - i == 1){ dp[i][j] = s[i] == s[j]; } else { dp[i][j] = (s[i] == s[j] \u0026amp;\u0026amp; dp[i+1][j-1]); } if (dp[i][j] \u0026amp;\u0026amp; j - i + 1 \u0026gt;= k \u0026amp;\u0026amp; i \u0026gt;= pos) { pos = j+1; res++; } } } return res; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/2472/","summary":"\u003cp\u003e\u003cstrong\u003e2472. Maximum Number of Non-overlapping Palindrome Substrings\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{red}\\textsf{Hard}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eString\u003c/code\u003e、\u003ccode\u003eDynamic Programming\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\\(\\color{blue}\\textsf{weekly Contest 319}\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eYou are given a string \u003ccode\u003es\u003c/code\u003e and a \u003cstrong\u003epositive\u003c/strong\u003e integer \u003ccode\u003ek\u003c/code\u003e.\nSelect a set of \u003cstrong\u003enon-overlapping\u003c/strong\u003e substrings from the string \u003ccode\u003es\u003c/code\u003e that satisfy the following conditions:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe \u003cstrong\u003elength\u003c/strong\u003e of each substring is \u003cstrong\u003eat least\u003c/strong\u003e \u003ccode\u003ek\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eEach substring is a \u003cstrong\u003epalindrome\u003c/strong\u003e.\nReturn \u003cem\u003ethe \u003cem\u003e\u003cstrong\u003emaximum\u003c/strong\u003e\u003c/em\u003e number of substrings in an optimal selection\u003c/em\u003e.\nA \u003cstrong\u003esubstring\u003c/strong\u003e is a contiguous sequence of characters within a string.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e","title":"[LeetCode] 2472. Maximum Number of Non-overlapping Palindrome Substrings"},{"content":"2471. Minimum Number of Operations to Sort a Binary Tree by Level\nHardness: \\(\\color{orange}\\textsf{Medium}\\) Ralated Topics: Tree、Breadth-First Search、Binary Tree \\(\\color{blue}\\textsf{weekly Contest 319}\\) 一、題目 You are given the root of a binary tree with unique values. In one operation, you can choose any two nodes at the same level and swap their values. Return the minimum number of operations needed to make the values at each level sorted in a strictly increasing order. The level of a node is the number of edges along the path between it and the root node.\nExample 1:\nInput: root = [1,4,3,7,6,8,5,null,null,null,null,9,null,10] Output: 3 Explanation: Swap 4 and 3. The 2nd level becomes [3,4]. Swap 7 and 5. The 3rd level becomes [5,6,8,7]. Swap 8 and 7. The 3rd level becomes [5,6,7,8].\nWe used 3 operations so return 3.\nIt can be proven that 3 is the minimum number of operations needed. Example 2: Input: root = [1,3,2,7,6,5,4] Output: 3 Explanation: Swap 3 and 2. The 2nd level becomes [2,3]. Swap 7 and 4. The 3rd level becomes [4,6,5,7]. Swap 6 and 5. The 3rd level becomes [4,5,6,7].\nWe used 3 operations so return 3.\nIt can be proven that 3 is the minimum number of operations needed. Example 3: Input: root = [1,2,3,4,5,6] Output: 0 Explanation: Each level is already sorted in increasing order so return 0. Constraints:\nThe number of nodes in the tree is in the range [1, 10^5]. 1 \u0026lt;= Node.val \u0026lt;= 10^5 All the values of the tree are unique. 二、分析 這一題最直觀的想法就是先將所有節點用 vector 記錄下來之後，分層去做 minSwaps。 注意到 minSwaps 的實現：想法是，n 個節點 swap 形成一個 cycle，代表進行了 n-1 次 swap，故我們可以觀察得：minSwaps 的次數會等於 n - cycles。 三、解題 1. DFS Time complexity: \\(O(n\\log n)\\) Space complexity: \\(O(n)\\) int minimumOperations(TreeNode* root) { vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; vec; dfs(root, vec, 0); int res = 0; for (auto v : vec) { res += minSwaps(v); } return res; } void dfs(TreeNode* root, vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; vec, int depth) { if (!root) return; if (depth == vec.size()) { vec.push_back({}); } vec[depth].push_back(root-\u0026gt;val); dfs(root-\u0026gt;left, vec, depth+1); dfs(root-\u0026gt;right, vec, depth+1); } int minSwaps(vector\u0026lt;int\u0026gt;\u0026amp; arr){ int n = arr.size(); map\u0026lt;int,int\u0026gt; map; for (int i = 0; i \u0026lt; n; i++) { map[arr[i]] = i; } vector\u0026lt;bool\u0026gt; vis(n, false); sort(arr.begin(), arr.end()); int ans = 0; for (int i = 0; i \u0026lt; n; i++) { if (vis[i] || map[arr[i]] == i) continue; int j = i, cycle = 0; while (!vis[j]) { vis[j] = true; j = map[arr[j]]; cycle++; } if (cycle \u0026gt; 0) { ans += (cycle-1); } } return ans; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/2471/","summary":"\u003cp\u003e\u003cstrong\u003e2471. Minimum Number of Operations to Sort a Binary Tree by Level\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{orange}\\textsf{Medium}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eTree\u003c/code\u003e、\u003ccode\u003eBreadth-First Search\u003c/code\u003e、\u003ccode\u003eBinary Tree\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\\(\\color{blue}\\textsf{weekly Contest 319}\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eYou are given the \u003ccode\u003eroot\u003c/code\u003e of a binary tree with \u003cstrong\u003eunique values\u003c/strong\u003e.\nIn one operation, you can choose any two nodes \u003cstrong\u003eat the same level\u003c/strong\u003e and swap their values.\nReturn \u003cem\u003ethe minimum number of operations needed to make the values at each level sorted in a \u003cem\u003e\u003cstrong\u003estrictly increasing order\u003c/strong\u003e\u003c/em\u003e\u003c/em\u003e.\nThe \u003cstrong\u003elevel\u003c/strong\u003e of a node is the number of edges along the path between it and the root node.\u003c/p\u003e","title":"[LeetCode] 2471. Minimum Number of Operations to Sort a Binary Tree by Level"},{"content":"2470. Number of Subarrays With LCM Equal to K\nHardness: \\(\\color{orange}\\textsf{Medium}\\) Ralated Topics: Array、Math、Number Theory \\(\\color{blue}\\textsf{weekly Contest 319}\\) 一、題目 Given an integer array nums and an integer k, return the number of subarrays of nums where the least common multiple of the subarray\u0026rsquo;s elements is k. A subarray is a contiguous non-empty sequence of elements within an array. The least common multiple of an array is the smallest positive integer that is divisible by all the array elements.\nExample 1:\nInput: nums = [3,6,2,7,1], k = 6 Output: 4 Explanation: The subarrays of nums where 6 is the least common multiple of all the subarray\u0026rsquo;s elements are: [3,6,2,7,1] [3,6,2,7,1] [3,6,2,7,1] [3,6,2,7,1] Example 2:\nInput: nums = [3], k = 2 Output: 0 Explanation: There are no subarrays of nums where 2 is the least common multiple of all the subarray\u0026rsquo;s elements. Constraints:\n1 \u0026lt;= nums.length \u0026lt;= 1000 1 \u0026lt;= nums[i], k \u0026lt;= 1000 二、分析 1 \u0026lt;= nums.length \u0026lt;= 1000 1 \u0026lt;= nums[i], k \u0026lt;= 1000 三、解題 1. Brute Method Time complexity: \\(O(n^2)\\) Space complexity: \\(O(1)\\) int subarrayLCM(vector\u0026lt;int\u0026gt;\u0026amp; nums, int k) { int res = 0; int n = nums.size(); int left = 0; while (left \u0026lt; n) { int right = left; int tmp = 1; // 從 left 到 right 的公倍數 while (right \u0026lt; n) { if (k % nums[right] == 0) { // 可被 k 整除才可能公倍數為 k tmp = lcm(tmp, nums[right]); if (tmp == k) res++; } else { break; } right++; } left++; } return res; } 2. Hash Table Time complexity: \\(O(n^2)\\) Space complexity: \\(O(n)\\) int subarrayLCM(vector\u0026lt;int\u0026gt;\u0026amp; nums, int k) { int res = 0; int n = nums.size(); unordered_map\u0026lt;int,int\u0026gt; u; for (int i = 0; i \u0026lt; n; i++) { u[nums[i]]++; unordered_map\u0026lt;int,int\u0026gt; v; // 到 i 為止可以被 k 整除的個數 for (auto [d, cnt] : u) { int tmp = lcm(nums[i], d); if (tmp == k) res += cnt; // 若公倍數等於 k 則加入答案 if (k % tmp == 0) v[tmp] += cnt; } swap(u, v); // 將可能的候選再加入下一輪繼續 } return res; 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/2470/","summary":"\u003cp\u003e\u003cstrong\u003e2470. Number of Subarrays With LCM Equal to K\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{orange}\\textsf{Medium}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eArray\u003c/code\u003e、\u003ccode\u003eMath\u003c/code\u003e、\u003ccode\u003eNumber Theory\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\\(\\color{blue}\\textsf{weekly Contest 319}\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eGiven an integer array \u003ccode\u003enums\u003c/code\u003e and an integer \u003ccode\u003ek\u003c/code\u003e, return \u003cem\u003ethe number of \u003cem\u003e\u003cstrong\u003esubarrays\u003c/strong\u003e\u003c/em\u003e of \u003ccode\u003enums\u003c/code\u003e where the least common multiple of the subarray\u0026rsquo;s elements is\u003c/em\u003e \u003ccode\u003ek\u003c/code\u003e.\nA \u003cstrong\u003esubarray\u003c/strong\u003e is a contiguous non-empty sequence of elements within an array.\nThe \u003cstrong\u003eleast common multiple of an array\u003c/strong\u003e is the smallest positive integer that is divisible by all the array elements.\u003c/p\u003e","title":"[LeetCode] 2470. Number of Subarrays With LCM Equal to K"},{"content":"2469. Convert the Temperature\nHardness: \\(\\color{green}\\textsf{Easy}\\) Ralated Topics: Math \\(\\color{blue}\\textsf{weekly Contest 319}\\) 一、題目 You are given a non-negative floating point number rounded to two decimal places celsius, that denotes the temperature in Celsius. You should convert Celsius into Kelvin and Fahrenheit and return it as an array ans = [kelvin, fahrenheit]. Return the array ans. Answers within 10^-5 of the actual answer will be accepted. Note that:\nKelvin = Celsius + 273.15 Fahrenheit = Celsius * 1.80 + 32.00 Example 1:\nInput: celsius = 36.50 Output: [309.65000,97.70000] Explanation: Temperature at 36.50 Celsius converted in Kelvin is 309.65 and converted in Fahrenheit is 97.70. Example 2:\nInput: celsius = 122.11 Output: [395.26000,251.79800] Explanation: Temperature at 122.11 Celsius converted in Kelvin is 395.26 and converted in Fahrenheit is 251.798. Constraints:\n0 \u0026lt;= celsius \u0026lt;= 1000 二、分析 略。 三、解題 1. Math Time complexity: \\(O(1)\\) Space complexity: \\(O(1)\\) vector\u0026lt;double\u0026gt; convertTemperature(double celsius) { return {celsius+273.15, 1.8*celsius+32}; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/2469/","summary":"\u003cp\u003e\u003cstrong\u003e2469. Convert the Temperature\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{green}\\textsf{Easy}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eMath\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\\(\\color{blue}\\textsf{weekly Contest 319}\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eYou are given a non-negative floating point number rounded to two decimal places \u003ccode\u003ecelsius\u003c/code\u003e, that denotes the \u003cstrong\u003etemperature in Celsius\u003c/strong\u003e.\nYou should convert Celsius into \u003cstrong\u003eKelvin\u003c/strong\u003e and \u003cstrong\u003eFahrenheit\u003c/strong\u003e and return it as an array \u003ccode\u003eans = [kelvin, fahrenheit]\u003c/code\u003e.\nReturn \u003cem\u003ethe array \u003ccode\u003eans\u003c/code\u003e\u003c/em\u003e. Answers within \u003ccode\u003e10^-5\u003c/code\u003e of the actual answer will be accepted.\n\u003cstrong\u003eNote that:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKelvin = Celsius + 273.15\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eFahrenheit = Celsius * 1.80 + 32.00\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e","title":"[LeetCode] 2469. Convert the Temperature"},{"content":"446. Arithmetic Slices II - Subsequence\nHardness: \\(\\color{red}\\textsf{Hard}\\) Ralated Topics: Array、Dynamic Programming 一、題目 Given an integer array nums, return the number of all the arithmetic subsequences of nums. A sequence of numbers is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.\nFor example, [1, 3, 5, 7, 9], [7, 7, 7, 7], and [3, -1, -5, -9] are arithmetic sequences. For example, [1, 1, 2, 5, 7] is not an arithmetic sequence. A subsequence of an array is a sequence that can be formed by removing some elements (possibly none) of the array. For example, [2,5,10] is a subsequence of [1,2,1,2,4,1,5,10]. The test cases are generated so that the answer fits in 32-bit integer. Example 1:\nInput: [2,4,6,8,10] Output: 7 Explanation: All arithmetic subsequence slices are:\n[2,4,6]\n[4,6,8]\n[6,8,10]\n[2,4,6,8]\n[4,6,8,10]\n[2,4,6,8,10]\n[2,6,10] Example 2:\nInput: [7,7,7,7,7] Output: 16 Explanation: Any subsequence of this array is arithmetic. Constraints:\n1 \u0026lt;= nums.length \u0026lt;= 1000 -2^31 \u0026lt;= nums[i] \u0026lt;= 2^31 - 1 二、分析 定義 dp[i][j] 為索引為 i ，且間隔為 j 時的子序列個數。 由於間隔可能或大或小，故改用 Hash Map 記錄，故我們使用 vector\u0026lt;unordered_map\u0026lt;int,int\u0026gt;\u0026gt; dp(n) 注意數值的範圍，故 target = nums[j] - diff 若超出範圍，需要剔除。 三、解題 1. DP Time complexity: \\(O(n^2)\\) Space complexity: \\(O(n)\\) int numberOfArithmeticSlices(vector\u0026lt;int\u0026gt;\u0026amp; nums) { int n = nums.size(); int res = 0; vector\u0026lt;unordered_map\u0026lt;int,long long\u0026gt;\u0026gt; dp(n); // dp[index][diff] for (int i = 2; i \u0026lt; n; i++) { unordered_map\u0026lt;int,int\u0026gt; map; for (int j = 0; j \u0026lt; i; j++) { long long diff = (long long)nums[i] - (long long)nums[j]; long long target = nums[j] - diff; // check target is in the range if (target \u0026gt;= INT_MIN \u0026amp;\u0026amp; target \u0026lt;= INT_MAX){ if (map.count(target)) dp[i][diff] += map[target]; // 三個一組的子序列 if (dp[j].count(diff)) dp[i][diff] += dp[j][diff]; // 三個以上的子序列 } map[nums[j]]++; } } for (int i = 0; i \u0026lt; n; i++) { for (auto m : dp[i]) { res += m.second; } } return res; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/446/","summary":"\u003cp\u003e\u003cstrong\u003e446. Arithmetic Slices II - Subsequence\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{red}\\textsf{Hard}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eArray\u003c/code\u003e、\u003ccode\u003eDynamic Programming\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eGiven an integer array \u003ccode\u003enums\u003c/code\u003e, return \u003cem\u003ethe number of all the \u003cem\u003e\u003cstrong\u003earithmetic subsequences\u003c/strong\u003e\u003c/em\u003e of\u003c/em\u003e \u003ccode\u003enums\u003c/code\u003e.\nA sequence of numbers is called arithmetic if it consists of \u003cstrong\u003eat least three elements\u003c/strong\u003e and if the difference between any two consecutive elements is the same.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFor example, \u003ccode\u003e[1, 3, 5, 7, 9]\u003c/code\u003e, \u003ccode\u003e[7, 7, 7, 7]\u003c/code\u003e, and \u003ccode\u003e[3, -1, -5, -9]\u003c/code\u003e are arithmetic sequences.\u003c/li\u003e\n\u003cli\u003eFor example, \u003ccode\u003e[1, 1, 2, 5, 7]\u003c/code\u003e is not an arithmetic sequence.\nA \u003cstrong\u003esubsequence\u003c/strong\u003e of an array is a sequence that can be formed by removing some elements (possibly none) of the array.\u003c/li\u003e\n\u003cli\u003eFor example, \u003ccode\u003e[2,5,10]\u003c/code\u003e is a subsequence of \u003ccode\u003e[1,2,1,2,4,1,5,10]\u003c/code\u003e.\nThe test cases are generated so that the answer fits in \u003cstrong\u003e32-bit\u003c/strong\u003e integer.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e","title":"[LeetCode] 446. Arithmetic Slices II - Subsequence"},{"content":"2488. Count Subarrays With Median K\nHardness: \\(\\color{red}\\textsf{Hard}\\) Ralated Topics: Array、Hash Table、Prefix Sum \\(\\color{blue}\\textsf{Weekly Contest 321}\\) 一、題目 You are given an array nums of size n consisting of distinct integers from 1 to n and a positive integer k.\nReturn the number of non-empty subarrays in nums that have a median equal to k. Note:\nThe median of an array is the middle element after sorting the array in ascending order. If the array is of even length, the median is the left middle element. For example, the median of [2,3,1,4] is 2, and the median of [8,4,3,5,1] is 4. A subarray is a contiguous part of an array. Example 1:\nInput: nums = [3,2,1,4,5], k = 4 Output: 3 Explanation: The subarrays that have a median equal to 4 are: [4], [4,5] and [1,4,5]. Example 2:\nInput: nums = [2,3,1], k = 3 Output: 1 Explanation: [3] is the only subarray that has a median equal to 3. Constraints:\nn == nums.length 1 \u0026lt;= n \u0026lt;= 10^5 1 \u0026lt;= nums[i], k \u0026lt;= n The integers in nums are distinct. 二、分析 注意這一題的 median 不是統計上的 median。 median 必定是含有 k 的子序列。 我的作法是，找到 k 的位置定為 pivot，其餘的若小於 k，定為 -1，大於 k，定為 +1，並將其用 presum 的方式記錄下來。 根據題目的定義，median == k 只會發生在當 presum[i:j] == 0 或 1 時。又子序列一定要包含 k，所以我們會增加一個條件就是，i \u0026gt;= pivot，j \u0026lt; pivot。其中我們可以事先將 presum[0:pivot] 放入 Hash Map 以供後續使用。 三、解題 1. Hash Map Time complexity: \\(O(n)\\) Space complexity: \\(O(n)\\) int countSubarrays(vector\u0026lt;int\u0026gt;\u0026amp; nums, int k) { vector\u0026lt;int\u0026gt; presum = {0}; int pivot; for (int i = 0; i \u0026lt; nums.size(); i++) { int back = presum.back(); if (nums[i] \u0026gt; k) { back += 1; } else if (nums[i] \u0026lt; k){ back -= 1; } else { pivot = i+1; } presum.push_back(back); } int res = 0; unordered_map\u0026lt;int,int\u0026gt; map; for (int i = 0; i \u0026lt; pivot; i++) map[presum[i]]++; for (int i = pivot; i \u0026lt; presum.size(); i++) { res += (map[presum[i]] + map[presum[i]-1]); } return res; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/2488/","summary":"\u003cp\u003e\u003cstrong\u003e2488. Count Subarrays With Median K\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{red}\\textsf{Hard}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eArray\u003c/code\u003e、\u003ccode\u003eHash Table\u003c/code\u003e、\u003ccode\u003ePrefix Sum\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\\(\\color{blue}\\textsf{Weekly Contest 321}\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eYou are given an array \u003ccode\u003enums\u003c/code\u003e of size \u003ccode\u003en\u003c/code\u003e consisting of \u003cstrong\u003edistinct\u003c/strong\u003e integers from \u003ccode\u003e1\u003c/code\u003e to \u003ccode\u003en\u003c/code\u003e and a positive integer \u003ccode\u003ek\u003c/code\u003e.\u003cbr\u003e\nReturn \u003cem\u003ethe number of non-empty subarrays in \u003ccode\u003enums\u003c/code\u003e that have a \u003cem\u003e\u003cstrong\u003emedian\u003c/strong\u003e\u003c/em\u003e equal to k.\u003c/em\u003e\n\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe median of an array is the \u003cstrong\u003emiddle\u003c/strong\u003e element after sorting the array in \u003cstrong\u003eascending\u003c/strong\u003e order. If the array is of even length, the median is the \u003cstrong\u003eleft\u003c/strong\u003e middle element.\n\u003cul\u003e\n\u003cli\u003eFor example, the median of \u003ccode\u003e[2,3,1,4]\u003c/code\u003e is \u003ccode\u003e2\u003c/code\u003e, and the median of \u003ccode\u003e[8,4,3,5,1]\u003c/code\u003e is \u003ccode\u003e4\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eA subarray is a contiguous part of an array.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e","title":"[LeetCode] 2488. Count Subarrays With Median K"},{"content":"2487. Remove Nodes From Linked List\nHardness: \\(\\color{orange}\\textsf{Medium}\\) Ralated Topics: Linked List、Stack、Recursion、Monotonic Stack \\(\\color{blue}\\textsf{Weekly Contest 321}\\) 一、題目 You are given the head of a linked list.\nRemove every node which has a node with strictly greater value anywhere to the right side of it.\nReturn the head of the modified linked list.\nExample 1:\nInput: head = [5,2,13,3,8] Output: [13,8] Explanation: The nodes that should be removed are 5, 2 and 3. Node 13 is to the right of node 5. Node 13 is to the right of node 2. Node 8 is to the right of node 3. Example 2:\nInput: head = [1,1,1,1] Output: [1,1,1,1] Explanation: Every node has value 1, so no nodes are removed. Constraints:\nThe number of the nodes in the given list is in the range [1, 10^5]. 1 \u0026lt;= Node.val \u0026lt;= 10^5 二、分析 這一題可以用 Monotonic Stack，將鏈表遍歷一次，遇到更大的數，就被堆上的值拿掉。 不過因為題目最後要回傳一個 Linked List，所以我會使用 Deque 來實作，遍歷完一次之後再把堆剩下的值，依序連接。 三、解題 1. Monotonic Stack Time complexity: \\(O(n)\\) Space complexity: \\(O(n)\\) ListNode* removeNodes(ListNode* head) { deque\u0026lt;ListNode*\u0026gt; dq; dq.push_back(new ListNode(INT_MAX, head)); // 省去處理 deque 為空的狀況 ListNode* curr = head; while (curr) { while (curr-\u0026gt;val \u0026gt; dq.back()-\u0026gt;val) { dq.pop_back(); } dq.push_back(curr); curr = curr-\u0026gt;next; } ListNode* dummy = new ListNode(dq.front()-\u0026gt;val); curr = dummy; dq.pop_front(); while (!dq.empty() \u0026amp;\u0026amp; curr) { curr-\u0026gt;next = dq.front(); dq.pop_front(); curr = curr-\u0026gt;next; } return dummy-\u0026gt;next; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/2487/","summary":"\u003cp\u003e\u003cstrong\u003e2487. Remove Nodes From Linked List\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{orange}\\textsf{Medium}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eLinked List\u003c/code\u003e、\u003ccode\u003eStack\u003c/code\u003e、\u003ccode\u003eRecursion\u003c/code\u003e、\u003ccode\u003eMonotonic Stack\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\\(\\color{blue}\\textsf{Weekly Contest 321}\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eYou are given the \u003ccode\u003ehead\u003c/code\u003e of a linked list.\u003cbr\u003e\nRemove every node which has a node with \u003cstrong\u003estrictly greater\u003c/strong\u003e value anywhere to the right side of it.\u003cbr\u003e\nReturn \u003cem\u003ethe \u003ccode\u003ehead\u003c/code\u003e of the modified linked list\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003cbr\u003e\n\u003cimg alt=\"drawio\" loading=\"lazy\" src=\"https://assets.leetcode.com/uploads/2022/10/02/drawio.png\"\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInput:\u003c/strong\u003e head = [5,2,13,3,8]\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e [13,8]\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e The nodes that should be removed are 5, 2 and 3.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cul\u003e\n\u003cli\u003eNode 13 is to the right of node 5.\u003c/li\u003e\n\u003cli\u003eNode 13 is to the right of node 2.\u003c/li\u003e\n\u003cli\u003eNode 8 is to the right of node 3.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e","title":"[LeetCode] 2487. Remove Nodes From Linked List"},{"content":"2486. Accept Characters to String to Make Subsequence\nHardness: \\(\\color{orange}\\textsf{Medium}\\) Ralated Topics: Two Pointer、String、Greedy \\(\\color{blue}\\textsf{Weekly Contest 321}\\) 一、題目 You are given two strings s and t consisting of only lowercase English letters. Return the minimum number of characters that need to be appended to the end of s so that t becomes a subsequence of s. A subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.\nExample 1:\nInput: s = \u0026ldquo;coaching\u0026rdquo;, t = \u0026ldquo;coding\u0026rdquo; Output: 4 Explanation: Append the characters \u0026ldquo;ding\u0026rdquo; to the end of s so that s = \u0026ldquo;coachingding\u0026rdquo;.\nNow, t is a subsequence of s (\u0026ldquo;coachingding\u0026rdquo;).\nIt can be shown that appending any 3 characters to the end of s will never make t a subsequence. Example 2:\nInput: s = \u0026ldquo;abcde\u0026rdquo;, t = \u0026ldquo;a\u0026rdquo; Output: 0 Explanation: t is already a subsequence of s (\u0026ldquo;abcde\u0026rdquo;). Example 3:\nInput: s = \u0026ldquo;z\u0026rdquo;, t = \u0026ldquo;abcde\u0026rdquo; Output: 5 Explanation: Append the characters \u0026ldquo;abcde\u0026rdquo; to the end of s so that s = \u0026ldquo;zabcde\u0026rdquo;. Now, t is a subsequence of s (\u0026ldquo;zabcde\u0026rdquo;). It can be shown that appending any 4 characters to the end of s will never make t a subsequence. Constraints:\n1 \u0026lt;= s.length, t.length \u0026lt;= 10^5 s and t consist only of lowercase English letters. 二、分析 這一題是簡單的 Two Pointer，當 s[i] == t[j] 時，j++。i 指標走到盡頭時，t 剩餘多少字元即為 s 需要增加的字元。 三、解題 1. Two Pointer Time complexity: \\(O(n)\\) Space complexity: \\(O(1)\\) int appendCharacters(string s, string t) { int i = 0, j = 0; for (; i \u0026lt; s.length(); i++) { if (s[i] == t[j]) j++; if (j == t.length()) return 0; } return t.length()-j; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/2486/","summary":"\u003cp\u003e\u003cstrong\u003e2486. Accept Characters to String to Make Subsequence\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{orange}\\textsf{Medium}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eTwo Pointer\u003c/code\u003e、\u003ccode\u003eString\u003c/code\u003e、\u003ccode\u003eGreedy\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\\(\\color{blue}\\textsf{Weekly Contest 321}\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eYou are given two strings \u003ccode\u003es\u003c/code\u003e and \u003ccode\u003et\u003c/code\u003e consisting of only lowercase English letters.\nReturn \u003cem\u003ethe minimum number of characters that need to be appended to the end of \u003ccode\u003es\u003c/code\u003e so that \u003ccode\u003et\u003c/code\u003e becomes a \u003cem\u003e\u003cstrong\u003esubsequence\u003c/strong\u003e\u003c/em\u003e of \u003ccode\u003es\u003c/code\u003e.\u003c/em\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eA \u003cstrong\u003esubsequence\u003c/strong\u003e is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.\u003c/p\u003e","title":"[LeetCode] 2486. Accept Characters to String to Make Subsequence"},{"content":"2485. Find the Pivot Integer\nHardness: \\(\\color{green}\\textsf{Easy}\\) Ralated Topics: Math、Prefix Sum \\(\\color{blue}\\textsf{Weekly Contest 321}\\) 一、題目 Given a positive integer n, find the pivot integer x such that:\nThe sum of all elements between 1 and x inclusively equals the sum of all elements between x and n inclusively. Return the pivot integer x. If no such integer exists, return -1. It is guaranteed that there will be at most one pivot index for the given input. Example 1:\nInput: n = 8 Output: 6 Explanation: 6 is the pivot integer since: 1 + 2 + 3 + 4 + 5 + 6 = 6 + 7 + 8 = 21 Example 2:\nInput: n = 1 Output: 1 Explanation: 1 is the pivot integer since: 1 = 1. Example 3:\nInput: n = 4 Output: -1 Explanation: It can be proved that no such integer exists. Constraints:\n1 \u0026lt;= n \u0026lt;= 1000 二、分析 此題要找 sum([1:x]) == sum([x:n]) 當 x=1 開始，即 left = sum([1:1]) 與 right = sum([1:n])。 當指標向右移動，left += (x+1)，而 right -= x。 若指標從 x=1 到 x=n 遍歷過一次都無解，即傳回 -1，若有解則立即傳回 x。 另外也可以也可以用 Prefix Sum 的概念，同樣從 x=1 到 x=n，找 presum[n] - presum[i] == presum[i+1]。 三、解題 1. Array Time complexity: \\(O(n)\\) Space complexity: \\(O(1)\\) int pivotInteger(int n) { if (n == 1) return 1; int right = (1 + n) * n/2; int left = 1; for (int i = 1; i \u0026lt; n; i++) { if (left == right) return i; left += (i+1); right -= i; } return -1; } 2. Prefix Sum Time Complexity int pivotInteger(int n) { if (n == 1) return 1; vector\u0026lt;int\u0026gt; presum; presum.push_back(0); for (int i = 1; i \u0026lt;= n; i++) { presum.push_back(presum.back() + i); } for (int i = 1; i \u0026lt; n; i++) { if (presum[n] - presum[i] == presum[i+1]) return i+1; } return -1; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/2485/","summary":"\u003cp\u003e\u003cstrong\u003e2485. Find the Pivot Integer\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{green}\\textsf{Easy}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eMath\u003c/code\u003e、\u003ccode\u003ePrefix Sum\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\\(\\color{blue}\\textsf{Weekly Contest 321}\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eGiven a positive integer \u003ccode\u003en\u003c/code\u003e, find the \u003cstrong\u003epivot integer\u003c/strong\u003e \u003ccode\u003ex\u003c/code\u003e such that:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe sum of all elements between \u003ccode\u003e1\u003c/code\u003e and \u003ccode\u003ex\u003c/code\u003e inclusively equals the sum of all elements between \u003ccode\u003ex\u003c/code\u003e and \u003ccode\u003en\u003c/code\u003e inclusively.\nReturn \u003cem\u003ethe pivot integer\u003c/em\u003e \u003ccode\u003ex\u003c/code\u003e. If no such integer exists, return \u003ccode\u003e-1\u003c/code\u003e. It is guaranteed that there will be at most one pivot index for the given input.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e","title":"[LeetCode] 2485. Find the Pivot Integer"},{"content":"1235. Maximum Profit in Job Scheduling\nHardness: \\(\\color{red}\\textsf{Hard}\\) Ralated Topics: Array、Binary Search、Dynamic Programming、Sorting 一、題目 We have n jobs, where every job is scheduled to be done from startTime[i] to endTime[i], obtaining a profit of profit[i].\nYou\u0026rsquo;re given the startTime, endTime and profit arrays, return the maximum profit you can take such that there are no two jobs in the subset with overlapping time range.\nIf you choose a job that ends at time X you will be able to start another job that starts at time X.\nExample 1:\nInput: startTime = [1,2,3,3], endTime = [3,4,5,6], profit = [50,10,40,70] Output: 120 Explanation: The subset chosen is the first and fourth job.\nTime range [1-3]+[3-6] , we get profit of 120 = 50 + 70. Example 2: Input: startTime = [1,2,3,4,6], endTime = [3,5,10,6,9], profit = [20,20,100,70,60] Output: 150 Explanation: The subset chosen is the first, fourth and fifth job.\nProfit obtained 150 = 20 + 70 + 60. Example 3: Input: The subset chosen is the first, fourth and fifth job. Profit obtained 150 = 20 + 70 + 60. Output: 6 Constraints:\n1 \u0026lt;= startTime.length == endTime.length == profit.length \u0026lt;= 5 * 10^4 1 \u0026lt;= startTime[i] \u0026lt; endTime[i] \u0026lt;= 10^9 1 \u0026lt;= profit[i] \u0026lt;= 10^4 二、分析 在思考這一題，首先要先有 coin change 的思維，也就是動態規劃： 我們將 dp[n] 定義為在時間 n 時的最大利益。 所以當時間點 i 的最大利益會等於 max(dp[i-1], dp[i - time_cost] + profit 以範例 1 為例即： dp[0] = 0 dp[1] = 0 dp[2] = 0 dp[3] = 50 = max(dp[1]+50, dp[2]) dp[4] = 50 = dp[3] dp[5] = 90 = max(dp[3]+40, dp[4]) \u0026hellip; 其中我們可以發現，有可能發生改變的時間點都是在每一個工作的 endTime，也就是說我們只要針對每個 endTime 去記錄即可，其中我們可將 dp[i - time_cost] 改為搜尋小於 startTime 的最大值，即： dp[0] = 0 dp[3] = 50 = max(dp[0], dp[3]) dp[4] = 10 = max(dp[0]+10, dp[4]) 我們只記錄當下最大利益，故不記錄 dp[5] = 90 = max(dp[3]+40, dp[5]) dp[6] = 120 = max(dp[3]+70, dp[6] 我們可以使用 map 這個資料結構，將所有 trigger point 依 endTime 排序後，逐步更新。 其中注意 upper_bound(x) 這個函式，會找大於 x 的位子，而且我們要找的是比小於等於當前 startTime 的資料，故我們找的是 upper_bound(x)-1。 由於時間 t = 0 時不會有收益，我們可以加入 {0,0}，這樣可以省去解決 iterator out of range(it 指向 -1) 的情形。 三、解題 1. DP + Binary Search Time complexity: \\(O(n\\log n)\\) Space complexity: \\(O(n)\\) int jobScheduling(vector\u0026lt;int\u0026gt;\u0026amp; startTime, vector\u0026lt;int\u0026gt;\u0026amp; endTime, vector\u0026lt;int\u0026gt;\u0026amp; profit) { map\u0026lt;int,int\u0026gt; dp; vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; job; int n = startTime.size(); for (int i = 0; i \u0026lt; n; i++) { job.push_back({endTime[i], startTime[i], profit[i]}); } sort(job.begin(), job.end()); // sort by endTime dp.insert({0,0}); // 省去處理 out of range int res = 0; for (int i = 0; i \u0026lt; n; i++) { auto it = dp.upper_bound(job[i][1]); // \u0026gt; startTime it--; // \u0026lt;= startTime int last = it-\u0026gt;second; int val = last + job[i][2]; // 由當前最大收益往上累積 int pos = job[i][0]; if (val \u0026lt; res) continue; // 若當前最大收益比歷史最大收益還小，則跳過不記錄 dp[pos] = max(dp[pos], val); // 更新當前最大收益 res = max(dp[pos], res); // 更新歷史最大收益 } return res; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/1235/","summary":"\u003cp\u003e\u003cstrong\u003e1235. Maximum Profit in Job Scheduling\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{red}\\textsf{Hard}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eArray\u003c/code\u003e、\u003ccode\u003eBinary Search\u003c/code\u003e、\u003ccode\u003eDynamic Programming\u003c/code\u003e、\u003ccode\u003eSorting\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eWe have \u003ccode\u003en\u003c/code\u003e jobs, where every job is scheduled to be done from \u003ccode\u003estartTime[i]\u003c/code\u003e to \u003ccode\u003eendTime[i]\u003c/code\u003e, obtaining a profit of \u003ccode\u003eprofit[i]\u003c/code\u003e.\u003cbr\u003e\nYou\u0026rsquo;re given the \u003ccode\u003estartTime\u003c/code\u003e, \u003ccode\u003eendTime\u003c/code\u003e and \u003ccode\u003eprofit\u003c/code\u003e arrays, return the maximum profit you can take such that there are no two jobs in the subset with overlapping time range.\u003cbr\u003e\nIf you choose a job that ends at time \u003ccode\u003eX\u003c/code\u003e you will be able to start another job that starts at time \u003ccode\u003eX\u003c/code\u003e.\u003c/p\u003e","title":"[LeetCode] 1235. Maximum Profit in Job Scheduling"},{"content":"1143. Longest Common Subsequence\nHardness: \\(\\color{orange}\\textsf{Medium}\\) Ralated Topics: String、Dynamic Programming 一、題目 Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0. A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.\nFor example, \u0026quot;ace\u0026quot; is a subsequence of \u0026quot;abcde\u0026quot;. A common subsequence of two strings is a subsequence that is common to both strings. Example 1:\nInput: text1 = \u0026ldquo;abcde\u0026rdquo;, text2 = \u0026ldquo;ace\u0026rdquo; Output: 3 Explanation: The longest common subsequence is \u0026ldquo;ace\u0026rdquo; and its length is 3. Example 2:\nInput: text1 = \u0026ldquo;abc\u0026rdquo;, text2 = \u0026ldquo;abc\u0026rdquo; Output: 3 Explanation: The longest common subsequence is \u0026ldquo;abc\u0026rdquo; and its length is 3. Example 3:\nInput: text1 = \u0026ldquo;abc\u0026rdquo;, text2 = \u0026ldquo;def\u0026rdquo; Output: 0 Explanation: There is no such common subsequence, so the result is 0. Constraints:\n1 \u0026lt;= text1.length, text2.length \u0026lt;= 1000 text1 and text2 consist of only lowercase English characters. 二、分析 雙序列型的動態規劃問題。或我習慣稱作 LCS 型。 定義 dp[i][j] 為 s[1:i] 與 t[1:j] 的 LCS 長度。 利用s[i]與t[j]，使dp[i][j]與dp[i-1][j]、dp[i][j-1]、dp[i-1][j-1] 產生關聯。 遍歷兩層迴圈，核心以從 s[i] 和 t[j] 的關係作破口，對 dp[i][j] 作轉移。 s[i] == t[j] 時，dp[i][j] = dp[i-1][j-1]。 相反則，dp[i][j] = max(dp[i-1], dp[j-1]。 最後解為 dp[m][n]，m 為 s 的長度，n 為 t 的長度。 三、解題 1. DP Time complexity: \\(O(m\\times n)\\) Space complexity: \\(O(m\\times n)\\) int longestCommonSubsequence(string text1, string text2) { int m = text1.length(), n = text2.length(); vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; dp(m+1, vector\u0026lt;int\u0026gt;(n+1, 0)); for (int i = 1; i \u0026lt;= m; i++) { for (int j = 1; j \u0026lt;= n; j++) { if (text1[i-1] == text2[j-1]) dp[i][j] = dp[i-1][j-1] + 1; else dp[i][j] = max(dp[i-1][j], dp[i][j-1]); } } return dp[m][n]; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/1143/","summary":"\u003cp\u003e\u003cstrong\u003e1143. Longest Common Subsequence\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{orange}\\textsf{Medium}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eString\u003c/code\u003e、\u003ccode\u003eDynamic Programming\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eGiven two strings \u003ccode\u003etext1\u003c/code\u003e and \u003ccode\u003etext2\u003c/code\u003e, return \u003cem\u003ethe length of their longest \u003cstrong\u003ecommon subsequence\u003c/strong\u003e\u003c/em\u003e. If there is no \u003cstrong\u003ecommon subsequence\u003c/strong\u003e, return \u003ccode\u003e0\u003c/code\u003e.\nA \u003cstrong\u003esubsequence\u003c/strong\u003e of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFor example, \u003ccode\u003e\u0026quot;ace\u0026quot;\u003c/code\u003e is a subsequence of \u003ccode\u003e\u0026quot;abcde\u0026quot;\u003c/code\u003e.\nA \u003cstrong\u003ecommon subsequence\u003c/strong\u003e of two strings is a subsequence that is common to both strings.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e","title":"[LeetCode] 1143. Longest Common Subsequence"},{"content":"300. Longest Increasing Subsequence\nHardness: \\(\\color{orange}\\textsf{Medium}\\) Ralated Topics: Array、Binary Search、Dynamic Programming 一、題目 Given an integer array nums, return the length of the longest strictly increasing subsequence\nExample 1:\nInput: nums = [10,9,2,5,3,7,101,18] Output: 4 Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4. Example 2:\nInput: nums = [0,1,0,3,2,3] Output: 4 Example 3:\nInput: nums = [7,7,7,7,7,7,7] Output: 1 Constraints:\n1 \u0026lt;= nums.length \u0026lt;= 2500 -104 \u0026lt;= nums[i] \u0026lt;= 104 Follow up: Can you come up with an algorithm that runs in O(n log n) time complexity\n二、分析 不定序列型的動態規劃問題。或我習慣稱作 LIS 型或俄羅斯娃娃型 定義 dp[i]：第 i 個元素的最長遞增子序列為多少。 故只要從第 i 個元素往前找到比 nums[i] 還大，同時又擁有最長遞增子序列的元素，再加 1 即可。 dp[i] = max(dp[i], dp[j] + 1) 最終的結果是 max({dp[i]})。 三、解題 1. DP Time complexity: \\(O(n^2)\\) Space complexity: \\(O(n)\\) int lengthOfLIS(vector\u0026lt;int\u0026gt;\u0026amp; nums) { int n = nums.size(); vector\u0026lt;int\u0026gt; dp(n, 1); int res = 1; for (int i = 1; i \u0026lt; n; i++) { for (int j = 0; j \u0026lt; i; j++) { if (nums[i] \u0026gt; nums[j]) { dp[i] = max(dp[i], dp[j] + 1); res = max(res, dp[i]); } } } return res; } 2. DP + Binary Search Time complexity: \\(O(n\\log n)\\) Space complexity: \\(O(n)\\) int lengthOfLIS(vector\u0026lt;int\u0026gt;\u0026amp; nums) { int n = nums.size(); vector\u0026lt;int\u0026gt; dp(n, INT_MAX); // dp[n] 裝的是實際排出來的數字，沒排到的位置以 INT_MAX 填滿，以使用 binary search int res = 0; for (int i = 0; i \u0026lt; n; i++) { auto it = lower_bound(dp.begin(), dp.end(), nums[i]); *it = min(*it, nums[i]); // 用 greedy 的想法，同樣位子上，數字愈小，愈有可能形成最長遞增子序列 res = max(res, (int)(it - dp.begin())+1); } return res; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/300/","summary":"\u003cp\u003e\u003cstrong\u003e300. Longest Increasing Subsequence\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{orange}\\textsf{Medium}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eArray\u003c/code\u003e、\u003ccode\u003eBinary Search\u003c/code\u003e、\u003ccode\u003eDynamic Programming\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eGiven an integer array \u003ccode\u003enums\u003c/code\u003e, return \u003cem\u003ethe length of the longest \u003cem\u003e\u003cstrong\u003estrictly increasing subsequence\u003c/strong\u003e\u003c/em\u003e\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInput:\u003c/strong\u003e nums = [10,9,2,5,3,7,101,18]\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e 4\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e The longest increasing subsequence is [2,3,7,101], therefore the length is 4.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInput:\u003c/strong\u003e nums = [0,1,0,3,2,3]\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e 4\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInput:\u003c/strong\u003e nums = [7,7,7,7,7,7,7]\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e 1\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e1 \u0026lt;= nums.length \u0026lt;= 2500\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e-104 \u0026lt;= nums[i] \u0026lt;= 104\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eFollow up:\u003c/strong\u003e Can you come up with an algorithm that runs in \u003ccode\u003eO(n log n)\u003c/code\u003e time complexity\u003c/p\u003e","title":"[LeetCode] 300. Longest Increasing Subsequence"},{"content":"2468. Split Message Based on Limit\nHardness: \\(\\color{red}\\textsf{Hard}\\) Ralated Topics: String、Binary Search \\(\\color{blue}\\textsf{Biweekly Contest 91}\\) 一、題目 You are given a string, message, and a positive integer, limit.\nYou must split message into one or more parts based on limit. Each resulting part should have the suffix \u0026quot;\u0026lt;a/b\u0026gt;\u0026quot;, where \u0026quot;b\u0026quot; is to be replaced with the total number of parts and \u0026quot;a\u0026quot; is to be replaced with the index of the part, starting from 1 and going up to b. Additionally, the length of each resulting part (including its suffix) should be equal to limit, except for the last part whose length can be at most limit.\nThe resulting parts should be formed such that when their suffixes are removed and they are all concatenated in order, they should be equal to message. Also, the result should contain as few parts as possible.\nReturn the parts message would be split into as an array of strings. If it is impossible to split message as required, return an empty array.\nExample 1:\ninput: message = \u0026ldquo;this is really a very awesome message\u0026rdquo;, limit = 9 Output: [\u0026ldquo;thi\u0026lt;1/14\u0026gt;\u0026rdquo;,\u0026ldquo;s i\u0026lt;2/14\u0026gt;\u0026rdquo;,\u0026ldquo;s r\u0026lt;3/14\u0026gt;\u0026rdquo;,\u0026ldquo;eal\u0026lt;4/14\u0026gt;\u0026rdquo;,\u0026ldquo;ly \u0026lt;5/14\u0026gt;\u0026rdquo;,\u0026ldquo;a v\u0026lt;6/14\u0026gt;\u0026rdquo;,\u0026ldquo;ery\u0026lt;7/14\u0026gt;\u0026rdquo;,\u0026quot; aw\u0026lt;8/14\u0026gt;\u0026quot;,\u0026ldquo;eso\u0026lt;9/14\u0026gt;\u0026rdquo;,\u0026ldquo;me\u0026lt;10/14\u0026gt;\u0026rdquo;,\u0026quot; m\u0026lt;11/14\u0026gt;\u0026quot;,\u0026ldquo;es\u0026lt;12/14\u0026gt;\u0026rdquo;,\u0026ldquo;sa\u0026lt;13/14\u0026gt;\u0026rdquo;,\u0026ldquo;ge\u0026lt;14/14\u0026gt;\u0026rdquo;] Explanation:\nThe first 9 parts take 3 characters each from the beginning of message.\nThe next 5 parts take 2 characters each to finish splitting message.\nIn this example, each part, including the last, has length 9.\nIt can be shown it is not possible to split message into less than 14 parts. Example 2:\nInput: message = \u0026ldquo;short message\u0026rdquo;, limit = 15 Output: [\u0026ldquo;short mess\u0026lt;1/2\u0026gt;\u0026rdquo;,\u0026ldquo;age\u0026lt;2/2\u0026gt;\u0026rdquo;] Explanation:\nUnder the given constraints, the string can be split into two parts: The first part comprises of the first 10 characters, and has a length 15. The next part comprises of the last 3 characters, and has a length 8. Constraints:\n1 \u0026lt;= message.length \u0026lt;= 10^4 message consists only of lowercase English letters and ' '. 1 \u0026lt;= limit \u0026lt;= 10^4 二、分析 令 n 為最後答案 vector 的總數，注意並非 n 愈大，能裝載的 string 就愈多。 limit * n \u0026gt;= f(n) + len 時，message 可以被裝載，其中 len 為其長度，f(n)為 n 時所需額外的字元長度。 觀察可得 f(n) 為： n \u0026lt; 10 時，5*n。 n \u0026lt; 100 時，7*n - 9。 n \u0026lt; 1000 時，9*n - 9 - 99。 n \u0026lt; 10000 時，11*n - 9 - 99 - 999。 \u0026hellip; 三、解題 1. Math Time complexity: \\(O(n)\\) Space complexity: \\(O(n)\\) vector\u0026lt;string\u0026gt; splitMessage(string message, int limit) { if (limit \u0026lt;= 5) return {}; int len = message.length(); int left = 1; for ( ;left \u0026lt; len; left++) { if (limit * left \u0026gt;= f(left) + len) break; } if (limit * left \u0026lt; f(left) + len) return {}; vector\u0026lt;string\u0026gt; res(left); int strlen = to_string(left).length() + 3; int acc = 0; for (int i = 1; i \u0026lt;= left; i++) { len = strlen + to_string(i).length(); res[i-1] = message.substr(acc, limit-len) + \u0026#34;\u0026lt;\u0026#34; + to_string(i) + \u0026#34;/\u0026#34; + to_string(left) + \u0026#34;\u0026gt;\u0026#34;; acc += limit-len; } return res; } int f(int n) { if (n \u0026lt; 10) { return n*5; } else if (n \u0026lt; 100) { return n*7-9; } else if (n \u0026lt; 1000) { return n*9-108; } else if (n \u0026lt; 10000) { return n*11-1107; } return n*13-11106; } 2. Binary Search Time complexity: \\(O(\\log n)\\) Space complexity: \\(O(n)\\) vector\u0026lt;string\u0026gt; splitMessage(string message, int limit) { int b = 0 , cnt = 0 , sm = 0; vector\u0026lt;string\u0026gt; ans; for(int i=1; i\u0026lt;=10000; i++) { sm+=Size(i); // sum of length of (\u0026#39;1\u0026#39;) + (\u0026#39;2\u0026#39;)... (\u0026#39;i\u0026#39;) , we are calculating sum of length of all a\u0026#39;s. int cnt = ((3 + Size(i)) * i) + message.size() + sm; // sum of (3 is \u0026#34;\u0026lt;/\u0026gt;\u0026#34; + i\u0026#39;s size ) * i times , message , sm int len = (i-1) * limit; // till second last if(cnt - len \u0026lt;= limit) { // if last is bigger than limit , its invalid! b = i; break; } } string s = \u0026#34;\u0026#34;; cnt = 1; for(int i=0; i\u0026lt;message.size(); i++) { if(limit - (3 + Size(cnt) + Size(b) + (int)s.size())\u0026gt;0) { s+=message[i]; }else { string word = s + \u0026#34;\u0026lt;\u0026#34; + to_string(cnt) + \u0026#34;/\u0026#34; + to_string(b) + \u0026#34;\u0026gt;\u0026#34;; ans.push_back(word); s = message[i]; cnt++; } } string word = s + \u0026#34;\u0026lt;\u0026#34; + to_string(cnt) + \u0026#34;/\u0026#34; + to_string(b) + \u0026#34;\u0026gt;\u0026#34;; ans.push_back(word); if(cnt\u0026gt;b || word.size()\u0026gt;limit) return {}; // cnt is last value of a which should never be \u0026gt; than b , also last word size should be \u0026lt;= limit! return ans; } int Size(int n) { return to_string(n).size(); } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/2468/","summary":"\u003cp\u003e\u003cstrong\u003e2468. Split Message Based on Limit\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{red}\\textsf{Hard}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eString\u003c/code\u003e、\u003ccode\u003eBinary Search\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\\(\\color{blue}\\textsf{Biweekly Contest 91}\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eYou are given a string, \u003ccode\u003emessage\u003c/code\u003e, and a positive integer, \u003ccode\u003elimit\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eYou must \u003cstrong\u003esplit\u003c/strong\u003e \u003ccode\u003emessage\u003c/code\u003e into one or more \u003cstrong\u003eparts\u003c/strong\u003e based on \u003ccode\u003elimit\u003c/code\u003e. Each resulting part should have the suffix \u003ccode\u003e\u0026quot;\u0026lt;a/b\u0026gt;\u0026quot;\u003c/code\u003e, where \u003ccode\u003e\u0026quot;b\u0026quot;\u003c/code\u003e is to be \u003cstrong\u003ereplaced\u003c/strong\u003e with the total number of parts and \u003ccode\u003e\u0026quot;a\u0026quot;\u003c/code\u003e is to be \u003cstrong\u003ereplaced\u003c/strong\u003e with the index of the part, starting from \u003ccode\u003e1\u003c/code\u003e and going up to \u003ccode\u003eb\u003c/code\u003e. Additionally, the length of each resulting part (including its suffix) should be \u003cstrong\u003eequal\u003c/strong\u003e to \u003ccode\u003elimit\u003c/code\u003e, except for the last part whose length can be \u003cstrong\u003eat most\u003c/strong\u003e \u003ccode\u003elimit\u003c/code\u003e.\u003c/p\u003e","title":"[LeetCode] 2468. Split Message Based on Limit"},{"content":"2467. Most Profitable Path in a Tree\nHardness: \\(\\color{orange}\\textsf{Medium}\\) Ralated Topics: Array、Tree、Depth-First Search、Breadth-First Search、Graph \\(\\color{blue}\\textsf{Biweekly Contest 91}\\) 一、題目 There is an undirected tree with n nodes labeled from 0 to n - 1, rooted at node 0. You are given a 2D integer array edges of length n - 1 where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree. At every node i, there is a gate. You are also given an array of even integers amount, where amount[i] represents:\nthe price needed to open the gate at node i, if amount[i] is negative, or, the cash reward obtained on opening the gate at node i, otherwise. The game goes on as follows: Initially, Alice is at node 0 and Bob is at node bob. At every second, Alice and Bob each move to an adjacent node. Alice moves towards some leaf node, while Bob moves towards node 0. For every node along their path, Alice and Bob either spend money to open the gate at that node, or accept the reward. Note that: If the gate is already open, no price will be required, nor will there be any cash reward. If Alice and Bob reach the node simultaneously, they share the price/reward for opening the gate there. In other words, if the price to open the gate is c, then both Alice and Bob pay c / 2 each. Similarly, if the reward at the gate is c, both of them receive c / 2 each. If Alice reaches a leaf node, she stops moving. Similarly, if Bob reaches node 0, he stops moving. Note that these events are independent of each other. Return the maximum net income Alice can have if she travels towards the optimal leaf node. Example 1:\nInput: edges = [[0,1],[1,2],[1,3],[3,4]], bob = 3, amount = [-2,4,2,-4,6] Output: 6 Explanation:\nThe above diagram represents the given tree. The game goes as follows: Alice is initially on node 0, Bob on node 3. They open the gates of their respective nodes.\nAlice\u0026rsquo;s net income is now -2. Both Alice and Bob move to node 1.\nSince they reach here simultaneously, they open the gate together and share the reward.\nAlice\u0026rsquo;s net income becomes -2 + (4 / 2) = 0. Alice moves on to node 3. Since Bob already opened its gate, Alice\u0026rsquo;s income remains unchanged.\nBob moves on to node 0, and stops moving. Alice moves on to node 4 and opens the gate there. Her net income becomes 0 + 6 = 6.\nNow, neither Alice nor Bob can make any further moves, and the game ends.\nIt is not possible for Alice to get a higher net income. Example 2:\nInput: edges = [[0,1]], bob = 1, amount = [-7280,2350] Output: -7280 Explanation:\nAlice follows the path 0-\u0026gt;1 whereas Bob follows the path 1-\u0026gt;0.\nThus, Alice opens the gate at node 0 only. Hence, her net income is -7280. Constraints:\n2 \u0026lt;= n \u0026lt;= 10^5 edges.length == n - 1 edges[i].length == 2 0 \u0026lt;= ai, bi \u0026lt; n ai != bi edges represents a valid tree. 1 \u0026lt;= bob \u0026lt; n amount.length == n amount[i] is an even integer in the range [-10^4, 10^4]. 二、分析 先將 graph 建起來。 用 dfs 遍歷所有節點，並回傳 {gain, collide}。 三、解題 1. DFS Time complexity: \\(O(n)\\) Space complexity: \\(O(n)\\) int mostProfitablePath(vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; edges, int bob, vector\u0026lt;int\u0026gt;\u0026amp; amount) { vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; graph(amount.size()); for (const auto\u0026amp; edge : edges) { graph[edge[0]].push_back(edge[1]); graph[edge[1]].push_back(edge[0]); } vector\u0026lt;bool\u0026gt; vis(amount.size(), false); return dfs(graph, 0, bob, amount, vis, 1)[0]; } vector\u0026lt;int\u0026gt; dfs(vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; graph, int alice, int bob, vector\u0026lt;int\u0026gt;\u0026amp; amount, vector\u0026lt;bool\u0026gt;\u0026amp; vis, int round) { int res = INT_MIN; vis[alice] = true; int collide = alice == bob ? 1 : 0; for (int\u0026amp; next : graph[alice]) { if (vis[next]) continue; vector\u0026lt;int\u0026gt; tmp = dfs(graph, next, bob, amount, vis, round+1); if (tmp[1] \u0026gt; 0) collide = tmp[1] + 1; res = max(res, tmp[0]); } if (collide \u0026gt; 0 \u0026amp;\u0026amp; collide \u0026lt;= round) { if (collide == round) amount[alice] \u0026gt;\u0026gt;= 1; else amount[alice] = 0; } return {res == INT_MIN ? amount[alice] : amount[alice] + res, collide}; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/2467/","summary":"\u003cp\u003e\u003cstrong\u003e2467. Most Profitable Path in a Tree\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{orange}\\textsf{Medium}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eArray\u003c/code\u003e、\u003ccode\u003eTree\u003c/code\u003e、\u003ccode\u003eDepth-First Search\u003c/code\u003e、\u003ccode\u003eBreadth-First Search\u003c/code\u003e、\u003ccode\u003eGraph\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\\(\\color{blue}\\textsf{Biweekly Contest 91}\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eThere is an undirected tree with \u003ccode\u003en\u003c/code\u003e nodes labeled from \u003ccode\u003e0\u003c/code\u003e to \u003ccode\u003en - 1\u003c/code\u003e, rooted at node \u003ccode\u003e0\u003c/code\u003e. You are given a 2D integer array \u003ccode\u003eedges\u003c/code\u003e of length \u003ccode\u003en - 1\u003c/code\u003e where \u003ccode\u003eedges[i] = [ai, bi]\u003c/code\u003e indicates that there is an edge between nodes \u003ccode\u003eai\u003c/code\u003e and \u003ccode\u003ebi\u003c/code\u003e in the tree.\nAt every node \u003ccode\u003ei\u003c/code\u003e, there is a gate. You are also given an array of even integers \u003ccode\u003eamount\u003c/code\u003e, where \u003ccode\u003eamount[i]\u003c/code\u003e represents:\u003c/p\u003e","title":"[LeetCode] 2467. Most Profitable Path in a Tree"},{"content":"1926. Nearest Exit from Entrance in Maze\nHardness: \\(\\color{orange}\\textsf{Medium}\\) Ralated Topics: Array、Breadth-First Search、Matrix 一、題目 You are given an m x n matrix maze (0-indexed) with empty cells (represented as '.') and walls (represented as '+'). You are also given the entrance of the maze, where entrance = [entrancerow, entrancecol] denotes the row and column of the cell you are initially standing at.\nIn one step, you can move one cell up, down, left, or right. You cannot step into a cell with a wall, and you cannot step outside the maze. Your goal is to find the nearest exit from the entrance. An exit is defined as an empty cell that is at the border of the maze. The entrance does not count as an exit.\nReturn the number of steps in the shortest path from the entrance to the nearest exit, or -1 if no such path exists.\nExample 1:\nInput: maze = [[\u0026quot;+\u0026quot;,\u0026quot;+\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;+\u0026quot;],[\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;+\u0026quot;],[\u0026quot;+\u0026quot;,\u0026quot;+\u0026quot;,\u0026quot;+\u0026quot;,\u0026quot;.\u0026quot;]], entrance = [1,2] Output: 1 Explanation: There are 3 exits in this maze at [1,0], [0,2], and [2,3].\nInitially, you are at the entrance cell [1,2]. You can reach [1,0] by moving 2 steps left. You can reach [0,2] by moving 1 step up.\nIt is impossible to reach [2,3] from the entrance.\nThus, the nearest exit is [0,2], which is 1 step away. Example 2:\nInput: maze = [[\u0026quot;+\u0026quot;,\u0026quot;+\u0026quot;,\u0026quot;+\u0026quot;],[\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;,\u0026quot;.\u0026quot;],[\u0026quot;+\u0026quot;,\u0026quot;+\u0026quot;,\u0026quot;+\u0026quot;]], entrance = [1,0] Output: 2 Explanation: There is 1 exit in this maze at [1,2].\n[1,0] does not count as an exit since it is the entrance cell.\nInitially, you are at the entrance cell [1,0]. You can reach [1,2] by moving 2 steps right.\nThus, the nearest exit is [1,2], which is 2 steps away. Example 3:\nInput: maze = [[\u0026quot;.\u0026quot;,\u0026quot;+\u0026quot;]], entrance = [0,0] Output: -1 Explanation: There are no exits in this maze. Constraints:\nmaze.length == m maze[i].length == n 1 \u0026lt;= m, n \u0026lt;= 100 maze[i][j] is either '.' or '+'. entrance.length == 2 0 \u0026lt;= entrancerow \u0026lt; m 0 \u0026lt;= entrancecol \u0026lt; n entrance will always be an empty cell. 二、分析 經典的 bfs 題型，套用框架： queue\u0026lt;Point\u0026gt; q; int step = 0; while (!q.empty()) { int sz = q.size() while (sz--) { auto curr = q.front(); q.pop(); if (isEnd) return step; for (options) { if (!excludedOptions) continue; q.push(option); visited.insert(option); } } cnt++; } 注意記錄拜訪的時間點，若是在 q.pop() 時才記錄拜訪，有可以造成大量重複的點進入到佇列中，故必須在 q.push() 時就記錄拜訪。 需要排除起始點，故需要排除 cnt == 1。 三、解題 1. BFS Time complexity: \\(O(m\\times n)\\) Space complexity: \\(O(1)\\) int dirc[4][2] = {{1,0},{-1,0},{0,1},{0,-1}}; int nearestExit(vector\u0026lt;vector\u0026lt;char\u0026gt;\u0026gt;\u0026amp; maze, vector\u0026lt;int\u0026gt;\u0026amp; e) { int m = maze.size(), n = maze[0].size(); queue\u0026lt;pair\u0026lt;int,int\u0026gt;\u0026gt; q; q.push({e[0], e[1]}); maze[e[0]][e[1]] = \u0026#39;+\u0026#39;; int cnt = 0; while (!q.empty()) { int sz = q.size(); while (sz--){ auto curr = q.front(); q.pop(); if (cnt \u0026gt; 0 \u0026amp;\u0026amp; (curr.first == 0 || curr.first == m-1 || curr.second == 0 || curr.second == n-1)) return cnt; for (auto d : dirc) { int row = curr.first + d[0]; int col = curr.second + d[1]; if (row \u0026lt; 0 || row \u0026gt;= m || col \u0026lt; 0 || col \u0026gt;= n || maze[row][col] != \u0026#39;.\u0026#39;) continue; q.push({row, col}); maze[row][col] = \u0026#39;+\u0026#39;; } } cnt++; } return -1; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/1926/","summary":"\u003cp\u003e\u003cstrong\u003e1926. Nearest Exit from Entrance in Maze\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{orange}\\textsf{Medium}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eArray\u003c/code\u003e、\u003ccode\u003eBreadth-First Search\u003c/code\u003e、\u003ccode\u003eMatrix\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eYou are given an \u003ccode\u003em x n\u003c/code\u003e matrix \u003ccode\u003emaze\u003c/code\u003e (\u003cstrong\u003e0-indexed\u003c/strong\u003e) with empty cells (represented as \u003ccode\u003e'.'\u003c/code\u003e) and walls (represented as \u003ccode\u003e'+'\u003c/code\u003e). You are also given the \u003ccode\u003eentrance\u003c/code\u003e of the maze, where \u003ccode\u003eentrance = [entrancerow, entrancecol]\u003c/code\u003e denotes the row and column of the cell you are initially standing at.\u003c/p\u003e\n\u003cp\u003eIn one step, you can move one cell \u003cstrong\u003eup\u003c/strong\u003e, \u003cstrong\u003edown\u003c/strong\u003e, \u003cstrong\u003eleft\u003c/strong\u003e, or \u003cstrong\u003eright\u003c/strong\u003e. You cannot step into a cell with a wall, and you cannot step outside the maze. Your goal is to find the nearest exit from the \u003ccode\u003eentrance\u003c/code\u003e. An \u003cstrong\u003eexit\u003c/strong\u003e is defined as an \u003cstrong\u003eempty cell\u003c/strong\u003e that is at the \u003cstrong\u003eborder\u003c/strong\u003e of the \u003ccode\u003emaze\u003c/code\u003e. The \u003ccode\u003eentrance\u003c/code\u003e \u003cstrong\u003edoes not count\u003c/strong\u003e as an exit.\u003c/p\u003e","title":"[LeetCode] 1926. Nearest Exit from Entrance in Maze"},{"content":"279. Perfect Squares\nHardness: \\(\\color{orange}\\textsf{Medium}\\) Ralated Topics: Math、Dynamic Programming、Breadth-First Search 一、題目 Given an integer n, return the least number of perfect square numbers that sum to n. A perfect square is an integer that is the square of an integer; in other words, it is the product of some integer with itself. For example, 1, 4, 9, and 16 are perfect squares while 3 and 11 are not.\nExample 1:\nInput: n = 12 Output: 3 Explanation: 12 = 4 + 4 + 4 Example 2:\nInput: n = 13 Output: 2 Explanation: 13 = 4 + 9 Constraints:\n1 \u0026lt;= n \u0026lt;= 10^4 二、分析 動態規劃，令 dp[i] 為 n = i 時，由最少個 perfect squares 所組合成和為 i 的個數。 當 n 為平方數時，dp[n] = 1。 其餘則 `dp[n] = min(dp[n-i]+1, dp[i]); dp[1] = 1，因為 1 為平方數 dp[2] = 2 dp[3] = 3 dp[4] = 1，因為 4 為平方數 dp[5] = 2，min(dp[4]+1, dp[1]+1) dp[6] = 3，min(dp[5]+1, dp[2]+1) dp[7] = 4，min(dp[6]+1, dp[3]+1) dp[8] = 2，min(dp[7]+1, dp[4]+1) dp[12] = 3, min(dp[12-1]+1, dp[12-4]+1, dp[12-9]+1) 三、解題 1. DP Time complexity: \\(O(n)\\) Space complexity: \\(O(n)\\) int numSquares(int n) { vector\u0026lt;int\u0026gt; dp(n+1, INT_MAX); vector\u0026lt;int\u0026gt; sel; for (int i = 1; i \u0026lt;= n; i++) { int x = sqrt(i); if (x*x == i) { // 平方數時，增加選擇 dp[i] = 1; sel.push_back(i); } else { for (int s : sel) { // 動態規劃轉移方程 dp[i] = min(dp[i-s]+1, dp[i]); } } } return dp[n]; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/279/","summary":"\u003cp\u003e\u003cstrong\u003e279. Perfect Squares\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{orange}\\textsf{Medium}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eMath\u003c/code\u003e、\u003ccode\u003eDynamic Programming\u003c/code\u003e、\u003ccode\u003eBreadth-First Search\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eGiven an integer \u003ccode\u003en\u003c/code\u003e, return \u003cem\u003ethe least number of perfect square numbers that sum to\u003c/em\u003e \u003ccode\u003en\u003c/code\u003e.\nA \u003cstrong\u003eperfect square\u003c/strong\u003e is an integer that is the square of an integer; in other words, it is the product of some integer with itself. For example, \u003ccode\u003e1\u003c/code\u003e, \u003ccode\u003e4\u003c/code\u003e, \u003ccode\u003e9\u003c/code\u003e, and \u003ccode\u003e16\u003c/code\u003e are perfect squares while \u003ccode\u003e3\u003c/code\u003e and \u003ccode\u003e11\u003c/code\u003e are not.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e","title":"[LeetCode] 279. Perfect Squares"},{"content":"337. House Robber III\nHardness: \\(\\color{orange}\\textsf{Medium}\\) Ralated Topics: Dynamic Programming、Tree、Depth-First Search、Binary Tree 一、題目 The thief has found himself a new place for his thievery again. There is only one entrance to this area, called root. Besides the root, each house has one and only one parent house. After a tour, the smart thief realized that all houses in this place form a binary tree. It will automatically contact the police if two directly-linked houses were broken into on the same night. Given the root of the binary tree, return the maximum amount of money the thief can rob without alerting the police.\nExample 1:\nInput: root = [3,2,3,null,3,null,1] Output: 7 Explanation: Maximum amount of money the thief can rob = 3 + 3 + 1 = 7. Example 2:\nInput: root = [3,4,5,1,3,null,1] Output: 9 Explanation: Maximum amount of money the thief can rob = 4 + 5 = 9. Constraints:\nThe number of nodes in the tree is in the range [1, 10^4]. 0 \u0026lt;= Node.val \u0026lt;= 10^4 二、分析 遵循第 i 間房若搶，則前一間房必定不能搶；第 i 間房若不搶，前一間房可搶可不搶： 用一個 pair 來記錄每個節點搶與不搶的結果，最後再將兩者做比較。 dp[i][0] = max(dp[i-1][1], dp[i-1][0]) dp[i][1] = dp[i-1][0] + val[i] 改寫成： int pass = max(left.first, left.second) + max(right.first, right.second) int rob = root-\u0026gt;val + left.second + right.second 三、解題 1. DP Time complexity: \\(O(n)\\) Space complexity: \\(O(n)\\) int rob(TreeNode* root) { pair\u0026lt;int,int\u0026gt; res = helper(root); // {搶, 不搶} return max(res.first); } pair\u0026lt;int,int\u0026gt; helper(TreeNode* root) { if (!root) return {0, 0}; pair\u0026lt;int,int\u0026gt; left = helper(root-\u0026gt;left); pair\u0026lt;int,int\u0026gt; right = helper(root-right); return {root-\u0026gt;val + left.second + right.second, max(left.first, left.second) + max(right.first, right.second)}; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/337/","summary":"\u003cp\u003e\u003cstrong\u003e337. House Robber III\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{orange}\\textsf{Medium}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eDynamic Programming\u003c/code\u003e、\u003ccode\u003eTree\u003c/code\u003e、\u003ccode\u003eDepth-First Search\u003c/code\u003e、\u003ccode\u003eBinary Tree\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eThe thief has found himself a new place for his thievery again. There is only one entrance to this area, called \u003ccode\u003eroot\u003c/code\u003e.\nBesides the \u003ccode\u003eroot\u003c/code\u003e, each house has one and only one parent house. After a tour, the smart thief realized that all houses in this place form a binary tree. It will automatically contact the police if \u003cstrong\u003etwo directly-linked houses were broken into on the same night\u003c/strong\u003e.\nGiven the \u003ccode\u003eroot\u003c/code\u003e of the binary tree, return \u003cem\u003ethe maximum amount of money the thief can rob \u003cem\u003e\u003cstrong\u003ewithout alerting the police\u003c/strong\u003e\u003c/em\u003e\u003c/em\u003e.\u003c/p\u003e","title":"[LeetCode] 337. House Robber III"},{"content":"587. Erect the Rence\nHardness: \\(\\color{red}\\textsf{Hard}\\) Ralated Topics: Array、Math、Geometry 一、題目 You are given an array trees where trees[i] = [xi, yi] represents the location of a tree in the garden. You are asked to fence the entire garden using the minimum length of rope as it is expensive. The garden is well fenced only if all the trees are enclosed. Return the coordinates of trees that are exactly located on the fence perimeter.\nExample 1:\nInput: points = [[1,1],[2,2],[2,0],[2,4],[3,3],[4,2]] Output: [[1,1],[2,0],[3,3],[2,4],[4,2]] Example 2:\nInput: [[1,2],[2,2],[4,2]] Output: [[4,2],[2,2],[1,2]] Constraints:\n1 \u0026lt;= points.length \u0026lt;= 3000 points[i].length == 2 0 \u0026lt;= xi, yi \u0026lt;= 100 All the given points are unique. 二、分析 這題的關鍵在於當一個點已經是最外圍的點時，其相鄰的 fence 會是與之斜率最大與最小的兩點。 可將數組排序後利於解題。 由左到右找斜率大的，可得到上半部的外圍線；由右到左可得到下半部的外圍線。 三、解題 1. Math Time complexity: \\(O(n)\\) Space complexity: \\(O(n)\\) bool biggerSlope(vector\u0026lt;int\u0026gt;\u0026amp; a, vector\u0026lt;int\u0026gt;\u0026amp; b, vector\u0026lt;int\u0026gt;\u0026amp; c) { // slope of ab compares with slope of ac return (b[1]-a[1])*(c[0]-a[0]) \u0026lt; (b[0]-a[0])*(c[1]-a[1]); } vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; outerTrees(vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; trees) { int n = trees.size(); vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; res; sort(trees.begin(), trees.end()); for (int i = 0; i \u0026lt; n; i++) { while (res.size() \u0026gt; 1 \u0026amp;\u0026amp; biggerSlope(res[res.size()-2], res.back(), trees[i])) res.pop_back(); res.push_back(trees[i]); } if (res.size() == n) return res; for (int i = n-2; i \u0026gt;= 0; i--) { while (res.size() \u0026gt; 1 \u0026amp;\u0026amp; biggerSlope(res[res.size()-2], res.back(), trees[i])) res.pop_back(); res.push_back(trees[i]); } res.pop_back(); return res; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/587/","summary":"\u003cp\u003e\u003cstrong\u003e587. Erect the Rence\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{red}\\textsf{Hard}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eArray\u003c/code\u003e、\u003ccode\u003eMath\u003c/code\u003e、\u003ccode\u003eGeometry\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eYou are given an array \u003ccode\u003etrees\u003c/code\u003e where \u003ccode\u003etrees[i] = [xi, yi]\u003c/code\u003e represents the location of a tree in the garden.\nYou are asked to fence the entire garden using the minimum length of rope as it is expensive. The garden is well fenced only \u003cstrong\u003eif all the trees are enclosed\u003c/strong\u003e.\nReturn \u003cem\u003ethe coordinates of trees that are exactly located on the fence perimeter\u003c/em\u003e.\u003c/p\u003e","title":"[LeetCode] 587. Erect the Fence"},{"content":"322. Coin Change\nHardness: \\(\\color{orange}\\textsf{Medium}\\) Ralated Topics: Array、Dynamic Programming、Breadth-First Search 一、題目 You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money. Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1. You may assume that you have an infinite number of each kind of coin.\nExample 1:\nInput: coins = [1,2,5], amount = 11 Output: 3 Explanation: 11 = 5 + 5 + 1 Example 2:\nInput: coins = [2], amount = 3 Output: -1 Example 3:\nInput: coins = [1], amount = 0 Output: 0 Constraints:\n1 \u0026lt;= coins \u0026lt;= 12 1 \u0026lt;= coins[i] \u0026lt;= 2^31 - 1 0 \u0026lt;= amount \u0026lt;= 10^4 二、分析 這一題動態規劃是不定序列型框架的題型： 令 dp[n] 為組成 n 有幾種可能性。 dp[n] = sum(dp[n-nums[i]]) 以題目 coins = [1,2,5] 為例， dp[11] 可以為 dp[11-1] + dp[11-2] + dp[11-5]。 三、解題 1. Dynamic Programming Time complexity: \\(O(n)\\) Space complexity: \\(O(n)\\) int coinChange(vector\u0026lt;int\u0026gt;\u0026amp; coins, int amount) { vector\u0026lt;int\u0026gt; dp(amount+1, 20000); dp[0] = 0; for (int i = 0; i \u0026lt; coins.size(); i++){ for (int j = coins[i]; j \u0026lt;= amount; j++){ dp[j] = min(dp[j], dp[j-coins[i]] + 1); } } return dp[amount] \u0026gt;= 20000 ? -1 : dp[amount]; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/322/","summary":"\u003cp\u003e\u003cstrong\u003e322. Coin Change\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{orange}\\textsf{Medium}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eArray\u003c/code\u003e、\u003ccode\u003eDynamic Programming\u003c/code\u003e、\u003ccode\u003eBreadth-First Search\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eYou are given an integer array \u003ccode\u003ecoins\u003c/code\u003e representing coins of different denominations and an integer \u003ccode\u003eamount\u003c/code\u003e representing a total amount of money.\nReturn \u003cem\u003ethe fewest number of coins that you need to make up that amount\u003c/em\u003e. If that amount of money cannot be made up by any combination of the coins, return \u003ccode\u003e-1\u003c/code\u003e.\nYou may assume that you have an infinite number of each kind of coin.\u003c/p\u003e","title":"[LeetCode] 322. Coin Change"},{"content":"2466. Count Ways To Build Good Strings\nHardness: \\(\\color{orange}\\textsf{Medium}\\) Ralated Topics: Dynamic Programming \\(\\color{blue}\\textsf{Biweekly Contest 91}\\) 一、題目 Given the integers zero, one, low, and high, we can construct a string by starting with an empty string, and then at each step perform either of the following:\nAppend the character '0' zero times. Append the character '1' one times. This can be performed any number of times. A good string is a string constructed by the above process having a length between low and high (inclusive). Return the number of different good strings that can be constructed satisfying these properties. Since the answer can be large, return it modulo 10^9 + 7. Example 1:\nInput: low = 3, high = 3, zero = 1, one = 1 Output: 8 Explanation: One possible valid good string is \u0026ldquo;011\u0026rdquo;.\nIt can be constructed as follows: \u0026quot;\u0026quot; -\u0026gt; \u0026ldquo;0\u0026rdquo; -\u0026gt; \u0026ldquo;01\u0026rdquo; -\u0026gt; \u0026ldquo;011\u0026rdquo;.\nAll binary strings from \u0026ldquo;000\u0026rdquo; to \u0026ldquo;111\u0026rdquo; are good strings in this example. Example 2:\nInput: low = 2, high = 3, zero = 1, one = 2 Output: 5 Explanation: The good strings are \u0026ldquo;00\u0026rdquo;, \u0026ldquo;11\u0026rdquo;, \u0026ldquo;000\u0026rdquo;, \u0026ldquo;110\u0026rdquo;, and \u0026ldquo;011\u0026rdquo;. Constraints:\n1 \u0026lt;= low \u0026lt;= high \u0026lt;= 10^5 1 \u0026lt;= zero, one \u0026lt;= low 二、分析 這一題與 322. Coin Change 有異曲同工之妙。 這一題動態規劃是不定序列型框架的題型： dp[n] 設為組成長度為 n 的 string 的可能性，最後再將符合題目需求的 dp[low] 到 dp[high] 加起來。 dp[n] = sum(dp[n-nums[i]])。 三、解題 1. DP Time complexity: \\(O(n)\\) Space complexity: \\(O(n)\\) int countGoodStrings(int low, int high, int zero, int one) { vector\u0026lt;int\u0026gt; dp(high+1, 0); int res = 0; dp[0] = 1; int start = min(zero, one); for (int i = start; i \u0026lt;= high; i++) { if (i-zero \u0026gt;= 0) dp[i] = (dp[i] + dp[i-zero]) % modulo; if (i-one \u0026gt;= 0) dp[i] = (dp[i] + dp[i-one]) % modulo; if (i \u0026gt;= low) res = (res + dp[i]) % modulo; } return res; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/2466/","summary":"\u003cp\u003e\u003cstrong\u003e2466. Count Ways To Build Good Strings\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{orange}\\textsf{Medium}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eDynamic Programming\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\\(\\color{blue}\\textsf{Biweekly Contest 91}\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eGiven the integers \u003ccode\u003ezero\u003c/code\u003e, \u003ccode\u003eone\u003c/code\u003e, \u003ccode\u003elow\u003c/code\u003e, and \u003ccode\u003ehigh\u003c/code\u003e, we can construct a string by starting with an empty string, and then at each step perform either of the following:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAppend the character \u003ccode\u003e'0'\u003c/code\u003e \u003ccode\u003ezero\u003c/code\u003e times.\u003c/li\u003e\n\u003cli\u003eAppend the character \u003ccode\u003e'1'\u003c/code\u003e \u003ccode\u003eone\u003c/code\u003e times.\nThis can be performed any number of times.\nA \u003cstrong\u003egood\u003c/strong\u003e string is a string constructed by the above process having a \u003cstrong\u003elength\u003c/strong\u003e between \u003ccode\u003elow\u003c/code\u003e and \u003ccode\u003ehigh\u003c/code\u003e (\u003cstrong\u003einclusive\u003c/strong\u003e).\nReturn \u003cem\u003ethe number of \u003cem\u003e\u003cstrong\u003edifferent\u003c/strong\u003e\u003c/em\u003e good strings that can be constructed satisfying these properties\u003c/em\u003e. Since the answer can be large, return it \u003cstrong\u003emodulo\u003c/strong\u003e \u003ccode\u003e10^9 + 7\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e","title":"[LeetCode] 2466. Count Ways To Build Good Strings"},{"content":"2465. Number of Distinct Averages\nHardness: \\(\\color{green}\\textsf{Easy}\\) Ralated Topics: Array、Hash Table、Two Pointers、Sorting \\(\\color{blue}\\textsf{Biweekly Contest 91}\\) 一、題目 You are given a 0-indexed integer array nums of even length. As long as nums is not empty, you must repetitively:\nFind the minimum number in nums and remove it. Find the maximum number in nums and remove it. Calculate the average of the two removed numbers. The average of two numbers a and b is (a + b) / 2. For example, the average of 2 and 3 is (2 + 3) / 2 = 2.5. Return the number of distinct averages calculated using the above process. Note that when there is a tie for a minimum or maximum number, any can be removed. Example 1:\nInput: nums = [4,1,4,0,3,5] Output: 2 Explanation: Remove 0 and 5, and the average is (0 + 5) / 2 = 2.5. Now, nums = [4,1,4,3]. Remove 1 and 4. The average is (1 + 4) / 2 = 2.5, and nums = [4,3]. Remove 3 and 4, and the average is (3 + 4) / 2 = 3.5.\nSince there are 2 distinct numbers among 2.5, 2.5, and 3.5, we return 2. Example 2:\nInput: nums = [1,100] Output: 1 Explanation: There is only one average to be calculated after removing 1 and 100, so we return 1. Constraints:\n2 \u0026lt;= nums.length \u0026lt;= 100 nums.length is even. 0 \u0026lt;= nums[i] \u0026lt;= 100 二、分析 每次取陣列中的最大值與最小值平均，再求有多少個相異的平均值。 可以先用 sort 將陣列排序後，每次取頭尾做平均，再用 unordered_set 記錄。 三、解題 1. sort Time complexity: \\(O(n\\log n)\\) Space complexity: \\(O(n)\\) int distinctAverages(vector\u0026lt;int\u0026gt;\u0026amp; nums) { sort(nums.begin(), nums.end()); unordered_set\u0026lt;double\u0026gt; set; int n = nums.size(); for (int i = 0; i \u0026lt; n/2; i++) { set.insert((nums[i] + nums[n-1-i])/2.0); } return set.size(); } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/2465/","summary":"\u003cp\u003e\u003cstrong\u003e2465. Number of Distinct Averages\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{green}\\textsf{Easy}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eArray\u003c/code\u003e、\u003ccode\u003eHash Table\u003c/code\u003e、\u003ccode\u003eTwo Pointers\u003c/code\u003e、\u003ccode\u003eSorting\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\\(\\color{blue}\\textsf{Biweekly Contest 91}\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eYou are given a \u003cstrong\u003e0-indexed\u003c/strong\u003e integer array \u003ccode\u003enums\u003c/code\u003e of \u003cstrong\u003eeven\u003c/strong\u003e length.\nAs long as \u003ccode\u003enums\u003c/code\u003e is \u003cstrong\u003enot\u003c/strong\u003e empty, you must repetitively:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFind the minimum number in \u003ccode\u003enums\u003c/code\u003e and remove it.\u003c/li\u003e\n\u003cli\u003eFind the maximum number in \u003ccode\u003enums\u003c/code\u003e and remove it.\u003c/li\u003e\n\u003cli\u003eCalculate the average of the two removed numbers.\nThe \u003cstrong\u003eaverage\u003c/strong\u003e of two numbers \u003ccode\u003ea\u003c/code\u003e and \u003ccode\u003eb\u003c/code\u003e is \u003ccode\u003e(a + b) / 2\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eFor example, the average of \u003ccode\u003e2\u003c/code\u003e and \u003ccode\u003e3\u003c/code\u003e is \u003ccode\u003e(2 + 3) / 2 = 2.5\u003c/code\u003e.\nReturn \u003cem\u003ethe number of \u003cem\u003e\u003cstrong\u003edistinct\u003c/strong\u003e\u003c/em\u003e averages calculated using the above process\u003c/em\u003e.\n\u003cstrong\u003eNote\u003c/strong\u003e that when there is a tie for a minimum or maximum number, any can be removed.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e","title":"[LeetCode] 2465. Number of Distinct Averages"},{"content":"223. Rectangle Area\nHardness: \\(\\color{orange}\\textsf{Medium}\\) Ralated Topics: Math、Geometry 一、題目 Given the coordinates of two rectilinear rectangles in a 2D plane, return the total area covered by the two rectangles. The first rectangle is defined by its bottom-left corner (ax1, ay1) and its top-right corner (ax2, ay2). The second rectangle is defined by its bottom-left corner (bx1, by1) and tis top-right corner (bx2, by2).\nExample 1:\nInput: ax1 = -3, ay1 = 0, ax2 = 3, ay2 = 4, bx1 = 0, by1 = -1, bx2 = 9, by2 = 2 Output: 45 Example 2:\nInput: ax1 = -2, ay1 = -2, ax2 = 2, ay2 = 2, bx1 = -2, by1 = -2, bx2 = 2, by2 = 2 Output: 16 Constraints:\n-10^4 \u0026lt;= ax1 \u0026lt;= ax2 \u0026lt;= 10^4 -10^4 \u0026lt;= ay1 \u0026lt;= ay2 \u0026lt;= 10^4 -10^4 \u0026lt;= bx1 \u0026lt;= bx2 \u0026lt;= 10^4 -10^4 \u0026lt;= by1 \u0026lt;= by2 \u0026lt;= 10^4 二、分析 矩形的面積為長寬相加，所以以題目所示，單個矩形的面積為 (x2-x1)*(y2-y1)，但此題需考慮到重疊的情形發生，需將重疊的部分額外扣掉。 兩個矩形重疊的小矩形的 bottom-left corner 為 (max(ax1,bx1),max(ay1,by1))，top-right corner 為 (min(ax2,bx2),min(ay2,by2))。 但注意到當下列情形發生的時候，兩個矩形不發生重疊：cx1 \u0026gt;= cx2 || cy1 \u0026gt;= cy2。 為方便計算，將矩形寫成一個物件。 struct Rect { int x1,x2,y1,y2; }; 三、解題 1. Math Time complexity: \\(O(1)\\) Space complexity: \\(O(1)\\) struct Rect { int x1,y1,x2,y2; Rect(int x1_, int y1_, int x2_, int y2_):x1(x1_),y1(y1_),x2(x2_),y2(y2_) {} int area() { return (x1 \u0026gt;= x2 || y1 \u0026gt;= y2) ? 0 : (x2 - x1) * (y2 - y1); // 不重疊則回傳面積 0 } }; class Solution { public: int computeArea(int ax1, int ay1, int ax2, int ay2, int bx1, int by1, int bx2, int by2) { Rect a(ax1,ay1,ax2,ay2); Rect b(bx1,by1,bx2,by2); Rect c(max(ax1,bx1), max(ay1,by1), min(ax2,bx2), min(ay2,by2)); return a.area() + b.area() - c.area(); } }; 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/223/","summary":"\u003cp\u003e\u003cstrong\u003e223. Rectangle Area\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{orange}\\textsf{Medium}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eMath\u003c/code\u003e、\u003ccode\u003eGeometry\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eGiven the coordinates of two \u003cstrong\u003erectilinear\u003c/strong\u003e rectangles in a 2D plane, return \u003cem\u003ethe total area covered by the two rectangles.\u003c/em\u003e\nThe first rectangle is defined by its \u003cstrong\u003ebottom-left\u003c/strong\u003e corner \u003ccode\u003e(ax1, ay1)\u003c/code\u003e and its \u003cstrong\u003etop-right\u003c/strong\u003e corner \u003ccode\u003e(ax2, ay2)\u003c/code\u003e.\nThe second rectangle is defined by its \u003cstrong\u003ebottom-left\u003c/strong\u003e corner \u003ccode\u003e(bx1, by1)\u003c/code\u003e and tis \u003cstrong\u003etop-right\u003c/strong\u003e corner \u003ccode\u003e(bx2, by2)\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003cbr\u003e\n\u003cimg alt=\"rectangle-plane\" loading=\"lazy\" src=\"https://assets.leetcode.com/uploads/2021/05/08/rectangle-plane.png\"\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInput:\u003c/strong\u003e ax1 = -3, ay1 = 0, ax2 = 3, ay2 = 4, bx1 = 0, by1 = -1, bx2 = 9, by2 = 2\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e 45\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e","title":"[LeetCode] 223. Rectangle Area"},{"content":"374. Guess Number Higher or Lower\nHardness: \\(\\color{green}\\textsf{Easy}\\) Ralated Topics: Binary Search、Interactive 一、題目 We are playing the Guess Game. The game is as follows: I pick a number from 1 to n. You have to guess which number I picked. Every time you guess wrong, I will tell you whether the number I picked is higher or lower than your guess. You call a pre-defined API int guess(int num), which returns three possible results:\n-1: Your guess is higher than the number I picked (i.e. num \u0026gt; pick). 1: Your guess is lower than the number I picked (i.e. num \u0026lt; pick). 0: your guess is equal to the number I picked (i.e. num == pick). Return the number that I picked. Example 1:\nInput: n = 10, pick = 6 Output: 6 Example 2:\nInput: n = 1, pick = 1 Output: 1 Example 3:\nInput: n = 2, pick 1 Output: 1 Constraints:\n1 \u0026lt;= n \u0026lt;= 23^1 - 1 1 \u0026lt;= pick \u0026lt;= n 二、分析 簡單的 Binary Search 問題，題目有提供 API，所以我們只需針對 API 傳回的結果就相對應的事情。 Binary Search 的框架 bool BinarySearch(int x, int lo, int hi) { while (lo \u0026lt;= hi) { int mid = lo + (hi - lo)/2; if (API(mid) == 0) { return true; } else if (API(mid) \u0026gt; 0) { // 往左收斂 right = mid-1; } else if (API(mid) \u0026lt; 0) { // 往右收斂 left = mid+1; } return false } } 三、解題 1. Binary Search Time complexity: \\(O(n\\log n)\\) Space complexity: \\(O(`)\\) int guessNumber(int n) { int left = 1, right = n; while(left \u0026lt;= right) { int mid = left + (right - left)/2; if (guess(mid) == 0) { return mid; } else if (guess(mid) \u0026lt; 0) { right = mid-1; } else { left = mid + 1; } } return -1; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/374/","summary":"\u003cp\u003e\u003cstrong\u003e374. Guess Number Higher or Lower\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{green}\\textsf{Easy}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eBinary Search\u003c/code\u003e、\u003ccode\u003eInteractive\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eWe are playing the Guess Game. The game is as follows:\nI pick a number from \u003ccode\u003e1\u003c/code\u003e to \u003ccode\u003en\u003c/code\u003e. You have to guess which number I picked.\nEvery time you guess wrong, I will tell you whether the number I picked is higher or lower than your guess.\nYou call a pre-defined API \u003ccode\u003eint guess(int num)\u003c/code\u003e, which returns three possible results:\u003c/p\u003e","title":"[LeetCode] 374. Guess Number Higher or Lower"},{"content":"213. House Robber II\nHardness: \\(\\color{orange}\\textsf{Medium}\\) Ralated Topics: Array、Dynamic Programming 一、題目 You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and it will automatically contact the police if two adjacent houses were broken into on the same night.\nGiven an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.\nExample 1:\nInput: nums = [2,3,2] Output: 3 Explanation: You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses. Example 2:\nInput: nums = [1,2,3,1] Output: 4 Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).\nTotal amount you can rob = 1 + 3 = 4. Example 3:\nInput: nums = [1,2,3] Output: 3 Constraints:\n1 \u0026lt;= nums.length \u0026lt;= 100 0 \u0026lt;= nums[i] \u0026lt;= 1000 二、分析 時間序列型的動態規劃問題。 定義 dp[i][j]：第 i 間房子，j == 0 代表不搶，j == 1 代表搶。 第 i 間房若搶，則前一間房必定不能搶；第 i 間房若不搶，前一間房可搶可不搶： dp[i][0] = max(dp[i-1][1], dp[i-1][0]) dp[i][1] = dp[i-1][0] + val[i] 最終的結果是 max(dp[n-1][0], dp[n-1][1])。 多了一個條件是，房子的首尾相連。所以額外增加的條件多了一個限制為： 第一間若搶了，則最後一間必不能搶。 第一間若沒搶，則最後一間可搶可不搶。 故相當於比較 第1間到第n-1間的最大值或第2間到第n間的最大值。 max(rob(nums, 0, n-1), rob(nums, 1, n)) 三、解題 1. Dynamic Programming Time complexity: \\(O(n)\\) Space complexity: \\(O(n)\\) int rob(vector\u0026lt;int\u0026gt;\u0026amp; nums, int lo, int hi) { vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; dp(hi, vector\u0026lt;int\u0026gt;(2, 0)); dp[lo][1] = nums[lo]; for (int i = lo+1; i \u0026lt; hi; i++) { dp[i][0] = max(dp[i-1][1], dp[i-1][0]); dp[i][1] = dp[i-1][0] + nums[i]; } return max(dp[hi-1][0], dp[hi-1][1]); } int rob(vector\u0026lt;int\u0026gt;\u0026amp; nums) { int n = nums.size(); if (n \u0026lt;= 3) return *max_element(nums.begin(), nums.end()); return max(rob(nums, 0, n-1), rob(nums, 1, n)); } 2. Dynamic Programming(SC optimized) Time complexity: \\(O(n)\\) Space complexity: \\(O(1)\\) int rob(vector\u0026lt;int\u0026gt;\u0026amp; nums, int lo, int hi) { int robbed = nums[lo]; int passed = 0; for (int i = lo+1; i \u0026lt; hi; i++) { int tmp = robbed; robbed = passed + nums[i]; passed = max(tmp, passed); } return max(robbed, passed); } int rob(vector\u0026lt;int\u0026gt;\u0026amp; nums) { int n = nums.size(); if (n \u0026lt;= 3) return *max_element(nums.begin(), nums.end()); return max(rob(nums, 0, n-1), rob(nums, 1, n)); } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/213/","summary":"\u003cp\u003e\u003cstrong\u003e213. House Robber II\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{orange}\\textsf{Medium}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eArray\u003c/code\u003e、\u003ccode\u003eDynamic Programming\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eYou are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are \u003cstrong\u003earranged in a circle\u003c/strong\u003e. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and \u003cstrong\u003eit will automatically contact the police if two adjacent houses were broken into on the same night.\u003c/strong\u003e\u003c/p\u003e","title":"[LeetCode] 213. House Robber II"},{"content":"198. House Robber\nHardness: \\(\\color{orange}\\textsf{Medium}\\) Ralated Topics: Array、Dynamic Programming 一、題目 You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night. Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.\nExample 1:\nInput: nums = [1,2,3,1] Output: 4 Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3). Total amount you can rob = 1 + 3 = 4. Example 2:\nInput: nums = [2,7,9,3,1] Output: 12 Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1). Total amount you can rob = 2 + 9 + 1 = 12. Constraints:\n1 \u0026lt;= nums.length \u0026lt;= 100 0 \u0026lt;= nums[i] \u0026lt;= 400 二、分析 時間序列型的動態規劃問題。 定義 dp[i][j]：第 i 間房子，j == 0 代表不搶，j == 1 代表搶。 第 i 間房若搶，則前一間房必定不能搶；第 i 間房若不搶，前一間房可搶可不搶： dp[i][0] = max(dp[i-1][1], dp[i-1][0]) dp[i][1] = dp[i-1][0] + val[i] 最終的結果是 max(dp[n-1][0], dp[n-1][1])。 三、解題 1. Dynamic Programming Time complexity: \\(O(n)\\) Space complexity: \\(O(n)\\) int rob(vector\u0026lt;int\u0026gt;\u0026amp; nums) { int n = nums.size(); vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; dp(n, vector\u0026lt;int\u0026gt;(2, 0)); dp[0][1] = nums[0]; for (int i = 1; i \u0026lt; n; i++) { dp[i][0] = max(dp[i-1][1], dp[i-1][0]); dp[i][1] = dp[i-1][0] + nums[i]; } return max(dp[n-1][0], dp[n-1][1]); } 2. Dynamic Programming(SC optimized) Time complexity: \\(O(n)\\) Space complexity: \\(O(1)\\) int rob(vector\u0026lt;int\u0026gt;\u0026amp; nums) { int n = nums.size(); int robbed = nums[0]; int passed = 0; for (int i = 1; i \u0026lt; n; i++) { int tmp = robbed; robbed = passed + nums[i]; passed = max(tmp, passed); } return max(robbed, passed); } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/198/","summary":"\u003cp\u003e\u003cstrong\u003e198. House Robber\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{orange}\\textsf{Medium}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eArray\u003c/code\u003e、\u003ccode\u003eDynamic Programming\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eYou are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and \u003cstrong\u003eit will automatically contact the police if two adjacent houses were broken into on the same night.\u003c/strong\u003e\nGiven an integer array \u003ccode\u003enums\u003c/code\u003e representing the amount of money of each house, return \u003cem\u003ethe maximum amount of money you can rob tonight\u003c/em\u003e \u003cem\u003e\u003cstrong\u003ewithout alerting the police\u003c/strong\u003e\u003c/em\u003e.\u003c/p\u003e","title":"[LeetCode] 198. House Robber"},{"content":"一、動態規劃的思考藝術 動態規劃其實就是一種暴力枚舉的優化，在暴力枚舉的過程中有著大量的重複，藉由「備忘錄(memoization)」的方式做到剪枝(pruning)來達到優化的一種演算法。 舉例來說： Leetcode 62. Unique Paths\n機器人由左上走到右下角星星有幾種走法，其中機器人只能選擇往右走或往下走。 試想機器人從 (1,1) 走到 (m,n) 的不同路徑中，可見有大量的重複，比如過程中有一點 (i,j)，其 (1,1) 走到 (i,j) 有 k 條不同路徑，麼那對於任何一條固定 (i,j) 到 (m,n) 的路徑，都需走 k 遍來模擬。 但其實我們不必關心具體的走法，我們只關心狀態，也就是走法的數目。 同理，我們若知道 (i,j) 到 (m,n) 共有 t 條不同的路徑，那麼 (1,1) -\u0026gt; (i,j) -\u0026gt; (m,n) 的不同路徑總數就是 k*s。 我們知道最左邊那欄與最上面那列都只有可能有一種路徑可以走，又每一格的路徑來自於上方與左方的和： sum of (i,j) = sum of (i-1,j) + sum of (i,j-1) \\(\\begin{array}{|c|c|c|c|c|c|c|}\\hline \\text{1}\u0026amp;\\text{1}\u0026amp;\\text{1}\u0026amp;\\text{1}\u0026amp;\\text{1}\u0026amp;\\text{1}\u0026amp;\\text{1}\\\\\\hline \\text{1}\u0026amp;\\text{2}\u0026amp;\\text{3}\u0026amp;\\text{4}\u0026amp;\\text{5}\u0026amp;\\text{6}\u0026amp;\\text{7}\\\\\\hline \\text{1}\u0026amp;\\text{3}\u0026amp;\\text{6}\u0026amp;\\text{10}\u0026amp;\\text{15}\u0026amp;\\text{21}\u0026amp;\\text{28}\\\\\\hline \\end{array}\\) 寫成程式碼就是 int uniquePaths(int m, int n) { vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; dp(m+1, vector\u0026lt;int\u0026gt;(n+1,0)); for (int i = 1; i \u0026lt;= m; i++) // 將第一列填成 1 dp[i][1] = 1; for (int j = 1; j \u0026lt;= n; j++) // 將第一欄填成 1 dp[1][j] = 1; for (int i = 2; i \u0026lt;= m; i++) { // 將剩下的格子填完 for (int j = 2; j \u0026lt;= n; j++) { dp[i][j] = dp[i-1][j] + dp[i][j-1]; } } return dp[m][n]; } 注意填格子的順序是有一定的限制的，必須要確保相關聯的子問題已經處理過。 動態規劃 由上例我們可以發現，原本的問題可以拆解成更小的問題(從 (1,1)-\u0026gt;(m,n) 變成從 (1,1)-\u0026gt;(i,j) 和從 (i,j)-\u0026gt;(m,n))。 我們令 f(i,j) 表示從 (1,1)-\u0026gt;(i,j) 的不同路徑數，則我們可以得到轉移方程式 f(i,j)=f(i-1,j)+f(i,j-1)。 我們發現，想求出 f(i,j) 只需要知道幾個更小的 f(i',j')。我們將 f(i',j') 稱為子問題。 我們捨棄冗餘的訊息(具體的走法)，只記錄對解決問題有幫助的結果。 動態規劃的兩大特點(適用前提) 無後效性 一旦 f(i,j) 確定，就不用關心我們如何計算出 f(i,j) 想要確定 f(i,j)，只需要知道 f(i-1,j) 和 f(i,j-1) 的值，而至於它們是如何算出來的，對當前或之後的任何子問題都沒有影響。 過去不依賴未來，未來不影響過去。 最優子結構 f(i,j) 的定義就已經蘊含了最優。 大問題的最優解可以由若干個小問題的最優解推出。(max, min, sum\u0026hellip;) DP 能適用於：能將大問題拆成若干小問題，滿足無後效性、最優子結構性質。 以下介紹幾種刷題會遇到的動態規劃套路： 二、動態規劃框架 1. 定序列型 給定一個陣列，其中一個元素可以認為一天，並且今天的狀態只取決於昨天的狀態。 框架： 定義 dp[i][j]：表示第 ith 輪的第 j 種狀態。 將 dp[i][j] 與前一輪的狀態 dp[i-1][j] 產生關聯。 最終的結果是 dp[n][j] 中的某種 aggression (sum, max, min, \u0026hellip;) 範例：[LeetCode] 198. House Robber 定義 dp[i][j]：第 i 間房子，j == 0 代表不搶，j == 1 代表搶。 第 i 間房若搶，則前一間房必定不能搶；第 i 間房若不搶，前一間房可搶可不搶： dp[i][0] = max(dp[i-1][1], dp[i-1][0]) dp[i][1] = dp[i-1][0] + val[i] 最終的結果是 max(dp[n-1][0], dp[n-1][1])。 例題： [LeetCode] 198. House Robber [LeetCode] 213. House Robber II [LeetCode] 337. House Robber III [LeetCode] 121. Best Time to Buy and Sell Stock [LeetCode] 122. Best Time to Buy and Sell Stock II [LeetCode] 123. Best Time to Buy and Sell Stock III [LeetCode] 188. Best Time to Buy and Sell Stock IV [LeetCode] 309. Best Time to Buy and Sell Stock with Cooldown [LeetCode] 714. Best Time to Buy and Sell Stock with Transcation Fee 2. 不定序列型(LIS) 給定一個陣列，其中一個元素可以認為一天，並且今天的狀態取決於過去某一天的狀態。 框架： 定義 dp[i]：表示第 ith 輪的狀態，一般這個狀態要求和元素 i 直接相關。 將 dp[i] 與之前的某一狀態 dp[i] 產生關聯。 最終的結果為 dp[i] 中的某一個。 範例：[LeetCode] 300. Longest Increasing Subsequence 定義 dp[i] 為 s[1:i] 中以 s[i] 為結尾的最長遞增子序列長度。 尋找最優的前驅狀態 j，將 dp[i] 與 dp[j] 產生關聯。 dp[i] = max(dp[i], dp[j] + 1) 尋找 dp[i] 中的最佳解。 res = max {dp[i]} 3. 雙序列型(LCS) 給定兩組序列，求兩組序列的某些特性。 框架： 定義 dp[i][j]：表示針對 s[1:i] 和 t[1:j] 的子問題求解。 將 dp[i][j] 與之前的某一狀態做關聯，如 dp[i-1][j], dp[i][j-1], dp[i-1][j-1] 最終的結果是 dp[m][n]。 範例：[LeetCode] 1143. Longest Common Subsequence 定義 dp[i][j] 為 s[1:i] 與 t[1:j] 的 LCS 長度。 利用s[i]與t[j]，使dp[i][j]與dp[i-1][j]、dp[i][j-1]、dp[i-1][j-1] 產生關聯。 遍歷兩層迴圈，核心以從 s[i] 和 t[j] 的關係作破口，對 dp[i][j] 作轉移。 s[i] == t[j] 時，dp[i][j] = dp[i-1][j-1]。 相反則，dp[i][j] = max(dp[i-1], dp[j-1]。 最後解為 dp[m][n]，m 為 s 的長度，n 為 t 的長度。 4. 區間型 給定一個序列，明確要求分割成 K 個連續區間，要求計算這些區間的某個最優性質。 框架： 定義 dp[i][k] 表示針對 s[1:i] 分為 k 個區間，此時能夠得到最佳解。 搜尋最後一個區間的起始位置 j，將 dp[i][k] 分割成 dp[j-1][k-1] 和 s[j:i] 兩部分。 最終的結果是 dp[n][k]。 範例：[LeetCode] 1278. Palindrome Partitioning 定義 dp[i][j]：s[1:i] 和 t[1:j] 的最長相同子序列(LCS)。 5. 回文型(LPS) 給定一個序列，求一個針對這個序列的最佳解。 框架： 定義 dp[i][j]：表示針對 s[i:j] 的子問題求解。 將大區間的 dp[i][j] 往小區間的 dp[i'][j'] 轉移。 第一層循環是區間大小，第二層循環是起始點。 最終的結果是 dp[1][n]。 範例：[LeetCode] 516. Longest Palindrome Subsequence 6. 背包型 給定 n 件物品，每個物品可用可不用(或若干不同用法)，要求以某個有上限 C 的代價來實現最大收益。(或下限收益達成最小代價)。 框架： 定義 dp[i][c]：表示只從前 i 件物品的子集裡選擇、代價為 c 的最大收益。 將 dp[i][c] 往 dp[i-1][c'] 轉移，即考慮如何使用物品 i 對代價/收益的影響。 第一層循環是物品編號 i。 第二層循環是遍歷代價的所有可能值。 最終的結果是 max{dp[n][c_i]} 範例：[LeetCode] 494. Target Sum 三、狀態壓縮 方法1 如果轉移方程式很明顯可以省去使用空間，可利用將不需要的空間重複利用來達到狀態壓縮的效果。 如第 n 天的狀態只與前 1 天與前 2 天的狀態有關。那麼就可以將空間限縮到這三天的關係中。 例 dp[n] = dp[n-1] + dp[n-2]。 限縮成 day3 = day1 + day2 + day1 = day2, day2 = day3。 其中在二維動態規劃常用一個手法即是奇偶數交換的手法： 同樣以 Leetcode 62. Unique Paths為例：\n\\(\\begin{array}{|c|c|c|c|c|c|c|}\\hline \\text{1}\u0026amp;\\text{1}\u0026amp;\\text{1}\u0026amp;\\text{1}\u0026amp;\\text{1}\u0026amp;\\text{1}\u0026amp;\\text{1}\\\\\\hline \\text{1}\u0026amp;\\text{2}\u0026amp;\\text{3}\u0026amp;\\text{4}\u0026amp;\\text{5}\u0026amp;\\text{6}\u0026amp;\\text{7}\\\\\\hline \\text{1}\u0026amp;\\text{3}\u0026amp;\\text{6}\u0026amp;\\text{10}\u0026amp;\\text{15}\u0026amp;\\text{21}\u0026amp;\\text{28}\\\\\\hline \\end{array}\\) 原先需要用到 m x n 即 21 個整數空間來實現動態規劃。 但事實上可以利用由上而下，由左而右的方向來填格子，來實現壓縮，最終到到 \\(O(\\text{min}(m,n))\\) 的效果。\n\\(\\begin{array}{|c|c|}\\hline \\text{1}\u0026amp;\\text{1}\\\\\\hline \\text{1}\u0026amp;\\text{2}\\\\\\hline \\text{1}\u0026amp;\\text{3}\\\\\\hline \\end{array}\\rightarrow\\begin{array}{|c|c|}\\hline \\text{1}\u0026amp;\\text{1}\\\\\\hline \\text{3}\u0026amp;\\text{2}\\\\\\hline \\text{6}\u0026amp;\\text{3}\\\\\\hline \\end{array}\\rightarrow\\begin{array}{|c|c|}\\hline \\text{1}\u0026amp;\\text{1}\\\\\\hline \\text{3}\u0026amp;\\text{4}\\\\\\hline \\text{6}\u0026amp;\\text{10}\\\\\\hline \\end{array}\\rightarrow\\begin{array}{|c|c|}\\hline \\text{1}\u0026amp;\\text{1}\\\\\\hline \\text{5}\u0026amp;\\text{4}\\\\\\hline \\text{15}\u0026amp;\\text{10}\\\\\\hline \\end{array}\\rightarrow\\begin{array}{|c|c|}\\hline \\text{1}\u0026amp;\\text{1}\\\\\\hline \\text{5}\u0026amp;\\text{6}\\\\\\hline \\text{15}\u0026amp;\\text{21}\\\\\\hline \\end{array}\\rightarrow\\begin{array}{|c|c|}\\hline \\text{1}\u0026amp;\\text{1}\\\\\\hline \\text{7}\u0026amp;\\text{6}\\\\\\hline \\text{28}\u0026amp;\\text{21}\\\\\\hline \\end{array}\\) 原本的狀態轉移方程式為：dp[m][n] = dp[m-1][n] + dp[m][n-1] 壓縮後的狀態轉移方程式寫成：dp[m%2][n] = dp[(m-1)%2][n] + dp[m%2][n-1] 方法2 如果所需的空間有限制，如在 30 個以內的 bool 值，可以將之轉換成 bit，利用位元運算來達到空間壓縮。 回到目錄：[Algo] 演算法筆記 想要複習：[Algo] 2-4. 回溯法 Backtacking ","permalink":"https://intervalrain.github.io/cs/algo/dp/","summary":"\u003ch2 id=\"一動態規劃的思考藝術\"\u003e一、動態規劃的思考藝術\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e動態規劃其實就是一種暴力枚舉的優化，在暴力枚舉的過程中有著大量的重複，藉由「備忘錄(memoization)」的方式做到剪枝(pruning)來達到優化的一種演算法。\u003c/li\u003e\n\u003cli\u003e舉例來說：\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://leetcode.com/problems/unique-paths/\"\u003eLeetcode 62. Unique Paths\u003c/a\u003e\u003cbr\u003e\n機器人由左上走到右下角星星有幾種走法，其中機器人只能選擇往右走或往下走。\n\u003cimg alt=\"robot_maze\" loading=\"lazy\" src=\"https://assets.leetcode.com/uploads/2018/10/22/robot_maze.png\"\u003e\n\u003cul\u003e\n\u003cli\u003e試想機器人從 \u003ccode\u003e(1,1)\u003c/code\u003e 走到 \u003ccode\u003e(m,n)\u003c/code\u003e 的不同路徑中，可見有大量的重複，比如過程中有一點 \u003ccode\u003e(i,j)\u003c/code\u003e，其 \u003ccode\u003e(1,1)\u003c/code\u003e 走到 \u003ccode\u003e(i,j)\u003c/code\u003e 有 \u003ccode\u003ek\u003c/code\u003e 條不同路徑，麼那對於任何一條固定 \u003ccode\u003e(i,j)\u003c/code\u003e 到 \u003ccode\u003e(m,n)\u003c/code\u003e 的路徑，都需走 \u003ccode\u003ek\u003c/code\u003e 遍來模擬。\u003c/li\u003e\n\u003cli\u003e但其實我們不必關心具體的走法，我們只關心\u003cstrong\u003e狀態\u003c/strong\u003e，也就是走法的數目。\u003c/li\u003e\n\u003cli\u003e同理，我們若知道 \u003ccode\u003e(i,j)\u003c/code\u003e 到 \u003ccode\u003e(m,n)\u003c/code\u003e 共有 \u003ccode\u003et\u003c/code\u003e 條不同的路徑，那麼 \u003ccode\u003e(1,1) -\u0026gt; (i,j) -\u0026gt; (m,n)\u003c/code\u003e 的不同路徑總數就是 \u003ccode\u003ek*s\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e我們知道最左邊那欄與最上面那列都只有可能有一種路徑可以走，又每一格的路徑來自於上方與左方的和：\n\u003ccode\u003esum of (i,j) = sum of (i-1,j) + sum of (i,j-1)\u003c/code\u003e\n\\(\\begin{array}{|c|c|c|c|c|c|c|}\\hline\n\\text{1}\u0026amp;\\text{1}\u0026amp;\\text{1}\u0026amp;\\text{1}\u0026amp;\\text{1}\u0026amp;\\text{1}\u0026amp;\\text{1}\\\\\\hline\n\\text{1}\u0026amp;\\text{2}\u0026amp;\\text{3}\u0026amp;\\text{4}\u0026amp;\\text{5}\u0026amp;\\text{6}\u0026amp;\\text{7}\\\\\\hline\n\\text{1}\u0026amp;\\text{3}\u0026amp;\\text{6}\u0026amp;\\text{10}\u0026amp;\\text{15}\u0026amp;\\text{21}\u0026amp;\\text{28}\\\\\\hline\n\\end{array}\\)\u003c/li\u003e\n\u003cli\u003e寫成程式碼就是\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003euniquePaths\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e m, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003evector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e dp(m\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e(n\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e m; i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e)    \u003cspan style=\"color:#75715e\"\u003e// 將第一列填成 1\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        dp[i][\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e j \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e; j \u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e n; j\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e)    \u003cspan style=\"color:#75715e\"\u003e// 將第一欄填成 1\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        dp[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e][j] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e m; i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {      \u003cspan style=\"color:#75715e\"\u003e// 將剩下的格子填完\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e j \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e; j \u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e n; j\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            dp[i][j] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e dp[i\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e][j] \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e dp[i][j\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e dp[m][n];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e注意填格子的順序是有一定的限制的，必須要確保相關聯的\u003cstrong\u003e子問題\u003c/strong\u003e已經處理過。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e動態規劃\n\u003cul\u003e\n\u003cli\u003e由上例我們可以發現，原本的問題可以拆解成更小的問題(從 \u003ccode\u003e(1,1)-\u0026gt;(m,n)\u003c/code\u003e 變成從 \u003ccode\u003e(1,1)-\u0026gt;(i,j)\u003c/code\u003e 和從 \u003ccode\u003e(i,j)-\u0026gt;(m,n)\u003c/code\u003e)。\u003c/li\u003e\n\u003cli\u003e我們令 \u003ccode\u003ef(i,j)\u003c/code\u003e 表示從 \u003ccode\u003e(1,1)-\u0026gt;(i,j)\u003c/code\u003e 的不同路徑數，則我們可以得到轉移方程式 \u003ccode\u003ef(i,j)=f(i-1,j)+f(i,j-1)\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e我們發現，想求出 \u003ccode\u003ef(i,j)\u003c/code\u003e 只需要知道幾個更小的 \u003ccode\u003ef(i',j')\u003c/code\u003e。我們將 \u003ccode\u003ef(i',j')\u003c/code\u003e 稱為子問題。\u003c/li\u003e\n\u003cli\u003e我們捨棄冗餘的訊息(具體的走法)，只記錄對解決問題有幫助的結果。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e動態規劃的兩大特點(適用前提)\n\u003cul\u003e\n\u003cli\u003e無後效性\n\u003cul\u003e\n\u003cli\u003e一旦 \u003ccode\u003ef(i,j)\u003c/code\u003e 確定，就不用關心我們如何計算出 \u003ccode\u003ef(i,j)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e想要確定 \u003ccode\u003ef(i,j)\u003c/code\u003e，只需要知道 \u003ccode\u003ef(i-1,j)\u003c/code\u003e 和 \u003ccode\u003ef(i,j-1)\u003c/code\u003e 的值，而至於它們是如何算出來的，對當前或之後的任何子問題都沒有影響。\u003c/li\u003e\n\u003cli\u003e過去不依賴未來，未來不影響過去。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e最優子結構\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ef(i,j)\u003c/code\u003e 的定義就已經蘊含了\u003cstrong\u003e最優\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e大問題的最優解可以由若干個小問題的最優解推出。(max, min, sum\u0026hellip;)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDP 能適用於：能將大問題拆成若干小問題，滿足無後效性、最優子結構性質。\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e以下介紹幾種刷題會遇到的動態規劃套路：\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"二動態規劃框架\"\u003e二、動態規劃框架\u003c/h2\u003e\n\u003ch3 id=\"1-定序列型\"\u003e1. 定序列型\u003c/h3\u003e\n\u003cp\u003e\u003cimg alt=\"houserobber\" loading=\"lazy\" src=\"https://th.bing.com/th/id/R.cdccdab761d5e384392455e3b21e1f90?rik=8eL71YYPOIoqXg\u0026pid=ImgRaw\u0026r=0\"\u003e\u003c/p\u003e","title":"[Algo] 2-5. 動態規劃 Dynamic Programming"},{"content":"947. Most Stones Removed with Same Row or Column\nHardness: \\(\\color{orange}\\textsf{Medium}\\) Ralated Topics: Depth-First Search、Union Find、Graph 一、題目 On a 2D plane, we place n stones at some integer coordinate points. Each coordinate point may have at most one stone. A stone can be removed if it shares either the same row or the same column as another stone that has not been removed. Given an array stones of length n where stones[i] = [xi, yi] represents the location of the ith stone, return the largest possible number of stones that can be removed.\nExample 1:\nInput: stones = [[0,0],[0,1],[1,0],[1,2],[2,1],[2,2]] Output: 5 Explanation: One way to remove 5 stones is as follows: Remove stone [2,2] because it shares the same row as [2,1]. Remove stone [2,1] because it shares the same column as [0,1]. Remove stone [1,2] because it shares the same row as [1,0]. Remove stone [1,0] because it shares the same column as [0,0]. Remove stone [0,1] because it shares the same row as [0,0].\nStone [0,0] cannot be removed since it does not share a row/column with another stone still on the plane. Example 2:\nInput: stones = [[0,0],[0,2],[1,1],[2,0],[2,2]] Output: 3 Explanation: One way to make 3 moves is as follows: Remove stone [2,2] because it shares the same row as [2,0]. Remove stone [2,0] because it shares the same column as [0,0]. Remove stone [0,2] because it shares the same row as [0,0].\nStones [0,0] and [1,1] cannot be removed since they do not share a row/column with another stone still on the plane. Example 3:\nInput: stones = [[0,0]] Output: 0 Explanation: [0,0] is the only stone on the plane, so you cannot remove it. Constraints:\n1 \u0026lt;= stones.length \u0026lt;= 1000 0 \u0026lt;= xi, yi \u0026lt;= 10^4 No two stones are at the same coordinate point. 二、分析 典型的圖論問題，若兩個 stone 的 x 座標與 y 座標有一者相等，則可以看作它們之間有一條邊。 所有以邊相連的 stone，最後可以移除到剩下最後一個 stone。 可以移除的 stone 的最大值為所有 stone 數量減去留下的 stone 的數量。 三、解題 1. DFS Time complexity: \\(O(n^2)\\) Space complexity: \\(O(n)\\) void dfs(vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; stones, vector\u0026lt;bool\u0026gt;\u0026amp; vis, int i) { vis[i] = true; // 記錄拜訪 int r1 = stones[i][0], c1 = stones[i][1]; for (int j = 0; j \u0026lt; stones.size(); j++) { if (vis[j]) continue; int r2 = stones[j][0], c2 = stones[j][1]; if (r1 == r2 || c1 == c2) { // 有 x 軸或 y 軸相同 dfs(stones, vis, j); } } } int removeStones(vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; stones) { vector\u0026lt;bool\u0026gt; vis(stones.size(), false); // 用來記錄拜訪過了沒 int cnt = 0; // 可以留下來的石頭個數 for (int i = 0; i \u0026lt; stones.size(); i++) { if (vis[i]) continue; // 拜訪過則跳過 cnt++; dfs(stones, vis, i); // 將相連的石頭都拜訪過一遍 } return stones.size() - cnt; } 2. Union Find Time complexity: \\(O(n\\log n)\\) Space complexity: \\(O(n)\\) class UF { private: unordered_map\u0026lt;int,int\u0026gt; parent; int cnt = 0; public: UF () {} int size() { return cnt; } int find(int x) { if (!parent.count(x)) { parent[x] = x; cnt++; } if (x != parent[x]) { parent[x] = find(parent[x]); } return parent[x]; } void connect(int x, int y) { int rootX = find(x); int rootY = find(y); if (rootX == rootY) return; parent[rootX] = rootY; cnt--; } }; class Solution { public: int removeStones(vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; stones) { int n = stones.size(); UF uf; for (auto stone : stones) { uf.connect(stone[0] + 10001, stone[1]); } return n - uf.size(); } }; 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/947/","summary":"\u003cp\u003e\u003cstrong\u003e947. Most Stones Removed with Same Row or Column\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{orange}\\textsf{Medium}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eDepth-First Search\u003c/code\u003e、\u003ccode\u003eUnion Find\u003c/code\u003e、\u003ccode\u003eGraph\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eOn a 2D plane, we place \u003ccode\u003en\u003c/code\u003e stones at some integer coordinate points. Each coordinate point may have at most one stone.\nA stone can be removed if it shares either \u003cstrong\u003ethe same row or the same column\u003c/strong\u003e as another stone that has not been removed.\nGiven an array \u003ccode\u003estones\u003c/code\u003e of length \u003ccode\u003en\u003c/code\u003e where \u003ccode\u003estones[i] = [xi, yi]\u003c/code\u003e represents the location of the \u003ccode\u003eith\u003c/code\u003e stone, return \u003cem\u003ethe largest possible number of stones that can be removed\u003c/em\u003e.\u003c/p\u003e","title":"[LeetCode] 947. Most Stones Removed with Same Row or Column"},{"content":"151. Reverse Words in a String\nHardness: \\(\\color{orange}\\textsf{Medium}\\) Ralated Topics: Two Pointers、String 一、題目 Given an input string s, reverse the order of the words.\nA word is defined as a sequence of non-space characters. The words in s will be separated by at least one space.\nReturn a string of the words in reverse order concatenated by a single space. Note that s may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.\nExample 1:\nInput: s = \u0026ldquo;the sky is blue\u0026rdquo; Output: \u0026ldquo;blue is sky the\u0026rdquo; Example 2:\nInput: \u0026quot; hello world \u0026quot; Output: \u0026ldquo;world hello\u0026rdquo; Explanation: Your reversed string should not contain leading or trailing spaces. Example 3:\nInput: \u0026ldquo;a good example\u0026rdquo; Output: \u0026ldquo;example good a\u0026rdquo; Explanation: You need to reduce multiple spaces between two words to a single space in the reversed string. Constraints:\n1 \u0026lt;= s.length \u0026lt;= 10^4 s contain English letters (upper-case and lower-case), digits, and spaces ' '. There is at least one word in s. Follow-up: If the string data is mutable in your language, can you solve it int-place with O(1) extra space?\n二、分析 此題如果搭配 string 常用的函式(在 hackerrank 有提供)，可以很簡單的解題： split function vector\u0026lt;string\u0026gt; split(string\u0026amp; s, char del) { stringstream ss(s); vector\u0026lt;string\u0026gt; res; string item; while (getline(ss, item, del)) { if (!item.empty()) res.push_back(item) // 注意，空白不加到陣列中 } return res; } 若要做到 O(1) 的 space complexity 的話，只能用 two pointer 了。 三、解題 1. split function Time complexity: \\(O(n)\\) Space complexity: \\(O(n)\\) string reverseWords(string s) { vector\u0026lt;string\u0026gt; svec = split(s, \u0026#39; \u0026#39;); // 以空白字元作為分隔 string res; for (int i = svec.size()-1; i \u0026gt;= 0; i--) { res = res + \u0026#34; \u0026#34; + svec[i]; // 將陣列反過來組合成字串 } res = res.substr(1); // 移除多出來的空白字元 return res; } vector\u0026lt;string\u0026gt; split(string\u0026amp; s, char del) { stringstream ss(s); vector\u0026lt;string\u0026gt; res; string item; while (getline(ss, item, del)) { if (!item.empty()) res.push_back(item); // 注意，空白不加到陣列中 } return res; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/151/","summary":"\u003cp\u003e\u003cstrong\u003e151. Reverse Words in a String\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{orange}\\textsf{Medium}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eTwo Pointers\u003c/code\u003e、\u003ccode\u003eString\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eGiven an input string \u003ccode\u003es\u003c/code\u003e, reverse the order of the \u003cstrong\u003ewords\u003c/strong\u003e.\u003cbr\u003e\nA \u003cstrong\u003eword\u003c/strong\u003e is defined as a sequence of non-space characters. The \u003cstrong\u003ewords\u003c/strong\u003e in \u003ccode\u003es\u003c/code\u003e will be separated by at least one space.\u003cbr\u003e\nReturn \u003cem\u003ea string of the words in reverse order concatenated by a single space\u003c/em\u003e.\n\u003cstrong\u003eNote\u003c/strong\u003e that \u003ccode\u003es\u003c/code\u003e may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.\u003c/p\u003e","title":"[LeetCode] 151. Reverse Words in a String"},{"content":"23. Merge k Sorted Lists\nHardness: \\(\\color{red}\\textsf{Hard}\\) Ralated Topics: Linked List、Divide and Conquer、Heap (Priority Queue)、Merge Sort 一、題目 You are given an array of k linked-lists lists, each linked-list is sorted in ascending order. Merge all the linked-lists into one sorted linked-list and return it.\nExample 1:\nInput: lists = [[1,4,5],[1,3,4],[2,6]] Output: [1,1,2,3,4,4,5,6] Explanation: The linked-lists are:\n[\n1-\u0026gt;4-\u0026gt;5,\n1-\u0026gt;3-\u0026gt;4,\n2-\u0026gt;6\n]\nmerging them into one sorted list:\n1-\u0026gt;1-\u0026gt;2-\u0026gt;3-\u0026gt;4-\u0026gt;4-\u0026gt;5-\u0026gt;6 Example 2:\nInput: lists = [] Output: [] Example 3:\nInput: lists = [[]] Output: [] Constraints:\nk == lists.length 0 \u0026lt;= k \u0026lt;= 10^4 0 \u0026lt;= lists[i].length \u0026lt;= 500 -10^4 \u0026lt;= lists[i][j] \u0026lt;= 10^4 lists[i] is sorted in ascending order. The sum of lists[i].length will not exceed 10^4. 二、分析 由於所有鏈表都是排序好的，故我們可以同時比較所有鏈表 head 的值，來依序把鏈表建起來。 這裡可以用到 priority_queue，以下是 custom comparator 的寫法： auto comp = [](const auto\u0026amp; a, const auto\u0026amp; b) { return condition; } ; 1. priority_queue\u0026lt;element, container, decltype(comp)\u0026gt; pq(iterator::start, iterator::end, comp); 2. priority_queue\u0026lt;element, container, decltype(comp)\u0026gt; pq(comp); 需要特別 [] 與 [[]] 的差異，都可以藉由加入 heap 時先檢查鏈表來避免， 注意! 直接用 priority_queue 的 initializer 去加入整個 vector 會把 null 加進優先佇列中而導致報錯。 三、解題 1. Heap (Priority Queue) Time complexity: \\(O(k\\times n\\log k)\\) Space complexity: \\(O(k\\times n)\\) ListNode* mergeKLists(vector\u0026lt;ListNode*\u0026gt;\u0026amp; lists) { auto comp = [](const auto\u0026amp; a, const auto\u0026amp; b) {return a-\u0026gt;val \u0026gt; b-\u0026gt;val;}; // min heap 的寫法跟 sort 相反 priority_queue\u0026lt;ListNode*, vector\u0026lt;ListNode*\u0026gt;, decltype(comp)\u0026gt; pq(comp); ListNode* dummy = new ListNode(-1); // 建立 dummy head ListNode* curr = dummy; for (const auto\u0026amp; list : lists) { if (list) pq.push(list); // 排除空鏈表 } while (!pq.empty()) { curr-\u0026gt;next = pq.top(); pq.pop(); if (curr-\u0026gt;next-\u0026gt;next) pq.push(curr-\u0026gt;next-\u0026gt;next); // 若鏈表還有 next，繼續加入 min heap curr = curr-\u0026gt;next; } return dummy-\u0026gt;next; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/23/","summary":"\u003cp\u003e\u003cstrong\u003e23. Merge k Sorted Lists\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{red}\\textsf{Hard}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eLinked List\u003c/code\u003e、\u003ccode\u003eDivide and Conquer\u003c/code\u003e、\u003ccode\u003eHeap (Priority Queue)\u003c/code\u003e、\u003ccode\u003eMerge Sort\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eYou are given an array of \u003ccode\u003ek\u003c/code\u003e linked-lists \u003ccode\u003elists\u003c/code\u003e, each linked-list is sorted in ascending order.\n\u003cem\u003eMerge all the linked-lists into one sorted linked-list and return it\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInput:\u003c/strong\u003e lists = [[1,4,5],[1,3,4],[2,6]]\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e [1,1,2,3,4,4,5,6]\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e The linked-lists are:\u003cbr\u003e\n[\u003cbr\u003e\n1-\u0026gt;4-\u0026gt;5,\u003cbr\u003e\n1-\u0026gt;3-\u0026gt;4,\u003cbr\u003e\n2-\u0026gt;6\u003cbr\u003e\n]\u003cbr\u003e\nmerging them into one sorted list:\u003cbr\u003e\n1-\u0026gt;1-\u0026gt;2-\u0026gt;3-\u0026gt;4-\u0026gt;4-\u0026gt;5-\u0026gt;6\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e","title":"[LeetCode] 23. Merge k Sorted Lists"},{"content":"22. Generate Parentheses\nHardness: \\(\\color{orange}\\textsf{Medium}\\) Ralated Topics: String、Dynamic Programming、Backtracking 一、題目 Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.\nExample 1:\nInput: n = 3 Output: [\u0026quot;((()))\u0026quot;,\u0026quot;(()())\u0026quot;,\u0026quot;(())()\u0026quot;,\u0026quot;()(())\u0026quot;,\u0026quot;()()()\u0026quot;] Example 2:\nInput: n = 1 Output: [\u0026quot;()\u0026quot;] Constraints:\n1 \u0026lt;= n \u0026lt;= 8 二、分析 DFS 演算法是在遍歷「節點」，而回溯法是在遍歷「樹枝」。站在一個節點上，需思考三個問題： 路徑(PATH)：已做出的選擇。 選項(OPTION)：當前可以做的選擇。 終止條件(TERMINATE)：到達決策樹的底層，無法再做其它選擇。 以下為回溯法的框架： vector\u0026lt;PATH\u0026gt; res; void backtrack(PATH, OPTION) { if (TERMINATE) { res.push_back(PATH); return; } for (CHOICE : OPTION) { DO OPTION; backtrack(PATH, OPTION); CANCEL OPTION; } } 本題的終止條件是當 path 的長度為 2n 的時候。 而選項是增加左括號 ( 與增加右括號 )。 加上兩個子節點的條件便完成， 左節點需滿足 left \u0026lt; n。 右節點需滿足 right \u0026lt; n \u0026amp;\u0026amp; right \u0026lt; left。 DP 動態規劃則需觀察轉移方程式。 dp[0] base case： `` dp[1] 很容易得到：() dp[2] 也不難：()()、(()) 接下來觀察 dp[3]，可以分解為下面三個： ( + dp[0] + ) + dp[2]：()()()、()(()) ( + dp[1] + ) + dp[1]：(())() ( + dp[2] + ) + dp[0]：(()())、((())) 換句話說，轉移方程式可以寫成：dp[i] = \u0026quot;(\u0026quot; + dp[j] + \u0026quot;)\u0026quot; + dp[i-j-1] 三、解題 1. Backtrack Time complexity: \\(O(2^{2n})\\)，Wiki - Catalan number Space complexity: \\(O(n)\\) vector\u0026lt;string\u0026gt; generateParenthesis(int n) { string path; vector\u0026lt;string\u0026gt; res; backtrack(n, 0, 0, res, path); return res; } void backtrack(int n, int left, int right, vector\u0026lt;string\u0026gt;\u0026amp; res, string\u0026amp; path) { // terminate if (path.length() == 2*n) { res.push_back(path); return; } // select if (left \u0026lt; n) { path.push_back(\u0026#39;(\u0026#39;); backtrack(n, left+1, right, res, path); path.pop_back(); } if (right \u0026lt; n \u0026amp;\u0026amp; right \u0026lt; left) { path.push_back(\u0026#39;)\u0026#39;); backtrack(n, left, right+1, res, path); path.pop_back(); } } 2. Dynamic Programming Time complexity: \\(O(n^4)\\) Space complexity: \\(O(n)\\) vector\u0026lt;string\u0026gt; generateParenthesis(int n) { vector\u0026lt;vector\u0026lt;string\u0026gt;\u0026gt; dp(n+1); dp[0] = {\u0026#34;\u0026#34;}; for(int i=1;i\u0026lt;=n;i++){ for(int j=0;j\u0026lt;i;j++){ vector\u0026lt;string\u0026gt; left = dp[j]; vector\u0026lt;string\u0026gt; right = dp[i-j-1]; for(int k=0;k\u0026lt;left.size();k++){ for(int l=0;l\u0026lt;right.size();l++){ dp[i].push_back(\u0026#34;(\u0026#34; + left[k] + \u0026#34;)\u0026#34; + right[l]); } } } } return dp[n]; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/22/","summary":"\u003cp\u003e\u003cstrong\u003e22. Generate Parentheses\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{orange}\\textsf{Medium}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eString\u003c/code\u003e、\u003ccode\u003eDynamic Programming\u003c/code\u003e、\u003ccode\u003eBacktracking\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eGiven \u003ccode\u003en\u003c/code\u003e pairs of parentheses, write a function to \u003cem\u003egenerate all combinations of well-formed parentheses\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInput:\u003c/strong\u003e n = 3\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e [\u0026quot;((()))\u0026quot;,\u0026quot;(()())\u0026quot;,\u0026quot;(())()\u0026quot;,\u0026quot;()(())\u0026quot;,\u0026quot;()()()\u0026quot;]\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInput:\u003c/strong\u003e n = 1\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e [\u0026quot;()\u0026quot;]\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e1 \u0026lt;= n \u0026lt;= 8\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"二分析\"\u003e二、分析\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eDFS 演算法是在遍歷「節點」，而回溯法是在遍歷「樹枝」。站在一個節點上，需思考三個問題：\n\u003col\u003e\n\u003cli\u003e路徑(PATH)：已做出的選擇。\u003c/li\u003e\n\u003cli\u003e選項(OPTION)：當前可以做的選擇。\u003c/li\u003e\n\u003cli\u003e終止條件(TERMINATE)：到達決策樹的底層，無法再做其它選擇。\u003c/li\u003e\n\u003c/ol\u003e\n\u003cul\u003e\n\u003cli\u003e以下為回溯法的框架：\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003evector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003ePATH\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e res;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ebacktrack\u003c/span\u003e(PATH, OPTION) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (TERMINATE) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        res.push_back(PATH);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (CHOICE : OPTION) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        DO OPTION;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        backtrack(PATH, OPTION);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        CANCEL OPTION;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e本題的終止條件是當 \u003ccode\u003epath\u003c/code\u003e 的長度為 \u003ccode\u003e2n\u003c/code\u003e 的時候。\u003c/li\u003e\n\u003cli\u003e而選項是增加\u003cstrong\u003e左括號\u003c/strong\u003e \u003ccode\u003e(\u003c/code\u003e 與增加\u003cstrong\u003e右括號\u003c/strong\u003e \u003ccode\u003e)\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e加上兩個子節點的條件便完成，\n\u003cul\u003e\n\u003cli\u003e左節點需滿足 \u003ccode\u003eleft \u0026lt; n\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e右節點需滿足 \u003ccode\u003eright \u0026lt; n \u0026amp;\u0026amp; right \u0026lt; left\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eDP 動態規劃則需觀察轉移方程式。\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003edp[0]\u003c/code\u003e base case： ``\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003edp[1]\u003c/code\u003e 很容易得到：\u003ccode\u003e()\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003edp[2]\u003c/code\u003e 也不難：\u003ccode\u003e()()\u003c/code\u003e、\u003ccode\u003e(())\u003c/code\u003e\n接下來觀察 \u003ccode\u003edp[3]\u003c/code\u003e，可以分解為下面三個：\n\u003col\u003e\n\u003cli\u003e\u003ccode\u003e(\u003c/code\u003e + dp[0] + \u003ccode\u003e)\u003c/code\u003e + dp[2]：\u003ccode\u003e()()()\u003c/code\u003e、\u003ccode\u003e()(())\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e(\u003c/code\u003e + dp[1] + \u003ccode\u003e)\u003c/code\u003e + dp[1]：\u003ccode\u003e(())()\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e(\u003c/code\u003e + dp[2] + \u003ccode\u003e)\u003c/code\u003e + dp[0]：\u003ccode\u003e(()())\u003c/code\u003e、\u003ccode\u003e((()))\u003c/code\u003e\n換句話說，轉移方程式可以寫成：\u003ccode\u003edp[i] = \u0026quot;(\u0026quot; + dp[j] + \u0026quot;)\u0026quot; + dp[i-j-1]\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"三解題\"\u003e三、解題\u003c/h3\u003e\n\u003ch4 id=\"1-backtrack\"\u003e1. Backtrack\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eTime complexity: \\(O(2^{2n})\\)，\u003ca href=\"https://zh.wikipedia.org/wiki/%E5%8D%A1%E5%A1%94%E5%85%B0%E6%95%B0\"\u003eWiki - Catalan number\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSpace complexity: \\(O(n)\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003evector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003estring\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e generateParenthesis(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    string path;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003estring\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e res;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    backtrack(n, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, res, path);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e res;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ebacktrack\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e left, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e right, vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003estring\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e res, string\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e path) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// terminate\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (path.length() \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003en) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        res.push_back(path);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// select\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (left \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e n) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        path.push_back(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;(\u0026#39;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        backtrack(n, left\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, right, res, path);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        path.pop_back();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (right \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e n \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e right \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e left) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        path.push_back(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;)\u0026#39;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        backtrack(n, left, right\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, res, path);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        path.pop_back();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"2-dynamic-programming\"\u003e2. Dynamic Programming\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eTime complexity: \\(O(n^4)\\)\u003c/li\u003e\n\u003cli\u003eSpace complexity: \\(O(n)\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003evector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003estring\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e generateParenthesis(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003evector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003estring\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e dp(n\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    dp[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e}; \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;i\u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003en;i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e j\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;j\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003ei;j\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003estring\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e left \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e dp[j];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003estring\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e right \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e dp[i\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003ej\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e k\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;k\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eleft.size();k\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e l\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;l\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eright.size();l\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    dp[i].push_back(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;(\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e left[k] \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;)\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e right[l]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e dp[n];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ca href=\"/leetcode\"\u003e回目錄 Catalog\u003c/a\u003e\u003c/p\u003e","title":"[LeetCode] 22. Generate Parentheses"},{"content":"21. Merge Two Sorted Lists\nHardness: \\(\\color{green}\\textsf{Easy}\\) Ralated Topics: Linked List、Recursion 一、題目 You are given the heads of two sorted linked lists list1 and list2.\nMerge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.\nReturn the head of the merged linked list.\nExample 1:\nInput: list1 = [1,2,4], list2 = [1,3,4] Output: [1,1,2,3,4,4] Example 2:\nInput: list1 = [], list2 = [] Output: [] Example 3:\nInput: list1 = [], list2 = [0] Output: [0] Constraints:\nThe number of nodes in both lists is in the range [0, 50]. -100 \u0026lt;= Node.val \u0026lt;= 100 Both list1 and list2 are sorted in non-decreasing order. 二、分析 這一題也是 linked list 的經典題型，特別需考慮到空鏈表的情況，所以可以用一個 dummy head 來避免這個情況的發生。 三、解題 1. Iteration Time complexity: \\(O(m+n)\\) Space complexity: \\(O(1)\\) ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) { ListNode* dummy = new ListNode(-1); // 建一個虛假鏈表做為頭 ListNode* curr = dummy; while (list1 \u0026amp;\u0026amp; list2) { // 依序將兩個表由小到大遍歷一遍 if (list1-\u0026gt;val \u0026lt;= list2-\u0026gt;val) { curr-\u0026gt;next = list1; list1 = list1-\u0026gt;next; } else { curr-\u0026gt;next = list2; list2 = list2-\u0026gt;next; } curr = curr-\u0026gt;next; } if (list1) curr-\u0026gt;next = list1; // 將尚未遍歷完的鏈表接到尾巴 if (list2) curr-\u0026gt;next = list2; return dummy-\u0026gt;next; // 最後記得回傳虛假鏈表的下一個節點 } 2. Recursion Time complexity: \\(O(m+n)\\) Space complexity: \\(O(1)\\) ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) { if (!list1) return list2; // 其中一者遍歷完，將剩下的鏈表接到尾巴 if (!list2) return list1; ListNode* res; if (list1-\u0026gt;val \u0026lt;= list2-\u0026gt;val) { res = list1; list1-\u0026gt;next = mergeTwoLists(list1-\u0026gt;next , list2); // 較小的鏈表前進一個節點 } else { res = list2; list2-\u0026gt;next = mergeTwoLists(list1, list2-\u0026gt;next); } return res; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/21/","summary":"\u003cp\u003e\u003cstrong\u003e21. Merge Two Sorted Lists\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{green}\\textsf{Easy}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eLinked List\u003c/code\u003e、\u003ccode\u003eRecursion\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eYou are given the heads of two sorted linked lists \u003ccode\u003elist1\u003c/code\u003e and \u003ccode\u003elist2\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eMerge the two lists in a one \u003cstrong\u003esorted\u003c/strong\u003e list. The list should be made by splicing together the nodes of the first two lists.\u003c/p\u003e\n\u003cp\u003eReturn \u003cem\u003ethe head of the merged linked list\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInput:\u003c/strong\u003e list1 = [1,2,4], list2 = [1,3,4]\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e [1,1,2,3,4,4]\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e","title":"[LeetCode] 21. Merge Two Sorted Lists"},{"content":"1047. Remove All Adjacent Duplicates In String\nHardness: \\(\\color{green}\\textsf{Easy}\\) Ralated Topics: String、Stack 一、題目 You are given a string s consisting of lowercase English letters. A duplicate removal consists of choosing two adjacent and equal letters and removing them.\nWe repeatly make duplicate removals on s until we no longer can.\nReturn the final string after all such duplicate removals have been made. It can be proven that the answer is unique.\nExample 1:\nInput: s = \u0026ldquo;abbaca\u0026rdquo; Output: \u0026ldquo;ca\u0026rdquo; Explanation: For example, in \u0026ldquo;abbaca\u0026rdquo; we could remove \u0026ldquo;bb\u0026rdquo; since the letters are adjacent and equal, and this is the only possible move. The result of this move is that the string is \u0026ldquo;aaca\u0026rdquo;, of which only \u0026ldquo;aa\u0026rdquo; is possible, so the final string is \u0026ldquo;ca\u0026rdquo;. Example 2:\nInput: s = \u0026ldquo;azxxzy\u0026rdquo; Output: \u0026ldquo;ay\u0026rdquo; Constraints:\n1 \u0026lt;= s.length \u0026lt;= 10^5 s consists of lowercase English letters. 二、分析 因為本題是連續移除，可運用 Stack 的概念，只要出現跟堆頂字元相同時，就 pop 掉堆頂。 三、解題 1. Stack Time complexity: \\(O(n)\\) Space complexity: \\(O(n)\\) string removeDuplicates(string s) { string res = \u0026#34;\u0026#34;; for (char c : s) { if (res.empty()) { res.push_back(c); } else { if (res.back() == c) { res.pop_back(); } else { res.push_back(c); } } } return res; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/1047/","summary":"\u003cp\u003e\u003cstrong\u003e1047. Remove All Adjacent Duplicates In String\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{green}\\textsf{Easy}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eString\u003c/code\u003e、\u003ccode\u003eStack\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eYou are given a string \u003ccode\u003es\u003c/code\u003e consisting of lowercase English letters. A \u003cstrong\u003eduplicate removal\u003c/strong\u003e consists of choosing two \u003cstrong\u003eadjacent\u003c/strong\u003e and \u003cstrong\u003eequal\u003c/strong\u003e letters and removing them.\u003c/p\u003e\n\u003cp\u003eWe repeatly make \u003cstrong\u003eduplicate removals\u003c/strong\u003e on \u003ccode\u003es\u003c/code\u003e until we no longer can.\u003c/p\u003e\n\u003cp\u003eReturn \u003cem\u003ethe final string after all such duplicate removals have been made\u003c/em\u003e. It can be proven that the answer is \u003cstrong\u003eunique\u003c/strong\u003e.\u003c/p\u003e","title":"[LeetCode] 1047. Remove All Adjacent Duplicates In String"},{"content":"901. Online Stock Span\nHardness: \\(\\color{orange}\\textsf{Medium}\\) Ralated Topics: Stack、Design、Monotonic Stack、Data Stream 一、題目 Design an algorithm that collects daily price quotes for some stock and returns the span of that stock\u0026rsquo;s price for the current day.\nThe span of the stock\u0026rsquo;s price today is defined as the maximum number of consecutive days (starting from today and going backward) for which the stock price was less than or equal to today\u0026rsquo;s price.\nFor example, if the price of a stock over the next 7 days were [100,80,60,70,60,75,85], then the stock spans would be [1,1,1,2,1,4,6]. Implement the StockSpanner class:\nStockSpanner() Initializes the object of the class.\nint next(int price) Returns the span of the stock\u0026rsquo;s price given that today\u0026rsquo;s price is price.\nExample 1:\nInput: [\u0026ldquo;StockSpanner\u0026rdquo;, \u0026ldquo;next\u0026rdquo;, \u0026ldquo;next\u0026rdquo;, \u0026ldquo;next\u0026rdquo;, \u0026ldquo;next\u0026rdquo;, \u0026ldquo;next\u0026rdquo;, \u0026ldquo;next\u0026rdquo;, \u0026ldquo;next\u0026rdquo;]\n[[], [100], [80], [60], [70], [60], [75], [85]] Output: [null, 1, 1, 1, 2, 1, 4, 6] Explanation:\nStockSpanner stockSpanner = new StockSpanner();\nstockSpanner.next(100); // return 1\nstockSpanner.next(80); // return 1\nstockSpanner.next(60); // return 1\nstockSpanner.next(70); // return 2\nstockSpanner.next(60); // return 1\nstockSpanner.next(75); // return 4, because the last 4 prices (including today\u0026rsquo;s price of 75) were less than or equal to today\u0026rsquo;s price.\nstockSpanner.next(85); // return 6 Constraints:\n1 \u0026lt;= price \u0026lt;= 10^5 At most 10^4 calls will be made to next. 二、分析 可以用 Monotonic Stack 裝載 pair\u0026lt;int,int\u0026gt; 記錄當前 stock 的股價與天數，假如遇到當前股價還低者，便 pop 掉，當前股價與 Stack 頂的位置差即為低於當前股價的連續天數。 三、解題 1. Monotonic Stack Time complexity: \\(O(n)\\) Space complexity: \\(O(n)\\) class StockSpanner { public: stack\u0026lt;pair\u0026lt;int,int\u0026gt;\u0026gt; st; int day = 0; // 記錄第 ith day StockSpanner() { st.push(make_pair(INT_MAX, -1)); // 令 stack 不會為空 } int next(int price) { while (st.top().first \u0026lt;= price) st.pop(); // 遇到小於等於的都 pop掉 int res = day - st.top().second; // 堆頂的位置與當前位置差即為解 st.push(make_pair(price, day++)); // 再將當前股價推到堆中 return res; } }; 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/901/","summary":"\u003cp\u003e\u003cstrong\u003e901. Online Stock Span\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{orange}\\textsf{Medium}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eStack\u003c/code\u003e、\u003ccode\u003eDesign\u003c/code\u003e、\u003ccode\u003eMonotonic Stack\u003c/code\u003e、\u003ccode\u003eData Stream\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eDesign an algorithm that collects daily price quotes for some stock and returns \u003cstrong\u003ethe span\u003c/strong\u003e of that stock\u0026rsquo;s price for the current day.\u003c/p\u003e\n\u003cp\u003eThe \u003cstrong\u003espan\u003c/strong\u003e of the stock\u0026rsquo;s price today is defined as the maximum number of consecutive days (starting from today and going backward) for which the stock price was less than or equal to today\u0026rsquo;s price.\u003c/p\u003e","title":"[LeetCode] 901. Online Stock Span"},{"content":"1544. Make The String Great\nHardness: \\(\\color{green}\\textsf{Easy}\\) Ralated Topics: String、Stack 一、題目 Given a string s of lower and upper case English letters.\nA good string is a string which doesn\u0026rsquo;t have two adjacent characters s[i] and s[i + 1] where:\n0 \u0026lt;= i \u0026lt;= s.length - 2 s[i] is a lower-case letter and s[i + 1] is the same letter but in upper-case or vice-versa.\nTo make the string good, you can choose two adjacent characters that make the string bad and remove them. You can keep doing this until the string becomes good.\nReturn the string after making it good. The answer is guaranteed to be unique under the given constraints.\nNotice that an empty string is also good. Example 1:\nInput: s = \u0026ldquo;leEeetcode\u0026rdquo; Output: \u0026ldquo;leetcode\u0026rdquo; Explanation: In the first step, either you choose i = 1 or i = 2, both will result \u0026ldquo;leEeetcode\u0026rdquo; to be reduced to \u0026ldquo;leetcode\u0026rdquo;. Example 2:\nInput: s = \u0026ldquo;abBAcC\u0026rdquo; Output: \u0026quot;\u0026quot; Explanation: We have many possible scenarios, and all lead to the same answer. For example:\n\u0026ldquo;abBAcC\u0026rdquo; \u0026ndash;\u0026gt; \u0026ldquo;aAcC\u0026rdquo; \u0026ndash;\u0026gt; \u0026ldquo;cC\u0026rdquo; \u0026ndash;\u0026gt; \u0026quot;\u0026quot;\n\u0026ldquo;abBAcC\u0026rdquo; \u0026ndash;\u0026gt; \u0026ldquo;abBA\u0026rdquo; \u0026ndash;\u0026gt; \u0026ldquo;aA\u0026rdquo; \u0026ndash;\u0026gt; \u0026quot;\u0026quot; Example 3:\nInput: s = \u0026ldquo;s\u0026rdquo; Output: \u0026ldquo;s\u0026rdquo; Constraints:\n1 \u0026lt;= s.length \u0026lt;= 100 s contains only lower and upper case English letters. 二、分析 當前後兩個字元互為大小寫的字元時，將之移除。可利用 stack 來操作之。 三、解題 1. Stack Time complexity: \\(O(n)\\) Space complexity: \\(O(1)\\) char trans(char c) { // 大小寫互換 return (\u0026#39;a\u0026#39; \u0026lt;= c \u0026amp;\u0026amp; c \u0026lt;= \u0026#39;z\u0026#39;) ? c - 32 : c + 32; } string makeGood(string s) { string st; for (char c : s) { if (st.empty()) { st.push_back(c); } else { if (st.back() == trans(c)) { // 當 stack 頂端與下一個字元互為大小寫 st.pop_back(); } else { st.push_back(c); } } } return st; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/1544/","summary":"\u003cp\u003e\u003cstrong\u003e1544. Make The String Great\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{green}\\textsf{Easy}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eString\u003c/code\u003e、\u003ccode\u003eStack\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eGiven a string \u003ccode\u003es\u003c/code\u003e of lower and upper case English letters.\u003cbr\u003e\nA good string is a string which doesn\u0026rsquo;t have \u003cstrong\u003etwo adjacent characters\u003c/strong\u003e \u003ccode\u003es[i]\u003c/code\u003e and \u003ccode\u003es[i + 1]\u003c/code\u003e where:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e0 \u0026lt;= i \u0026lt;= s.length - 2\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003es[i]\u003c/code\u003e is a lower-case letter and \u003ccode\u003es[i + 1]\u003c/code\u003e is the same letter but in upper-case or \u003cstrong\u003evice-versa\u003c/strong\u003e.\u003cbr\u003e\nTo make the string good, you can choose \u003cstrong\u003etwo adjacent\u003c/strong\u003e characters that make the string bad and remove them. You can keep doing this until the string becomes good.\u003cbr\u003e\nReturn the string after making it good. The answer is guaranteed to be unique under the given constraints.\u003cbr\u003e\n\u003cstrong\u003eNotice\u003c/strong\u003e that an empty string is also good.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e","title":"[LeetCode] 1544. Make The String Great"},{"content":"2463. Minimum Total Distance Traveled\nHardness: \\(\\color{red}\\textsf{Hard}\\) Ralated Topics: Array、Dynamic Programming、Sorting \\(\\color{blue}\\textsf{Weekly Contest 318}\\) 一、題目 There are some robots and factories on the X-axis. You are given an integer array robot where robot[i] is the position of the ith robot. You are also given a 2D integer array factory where factory[j] = [positionj, limitj] indicates that positionj is the position of the jth factory and that the jth factory can repair at most limitj robots.\nThe positions of each robot are unique. The positions of each factory are also unique. Note that a robot can be in the same position as a factory initially.\nAll the robots are initially broken; they keep moving in one direction. The direction could be the negative or the positive direction of the X-axis. When a robot reaches a factory that did not reach its limit, the factory repairs the robot, and it stops moving.\nAt any moment, you can set the initial direction of moving for some robot. Your target is to minimize the total distance traveled by all the robots.\nReturn the minimum total distance traveled by all the robots. The test cases are generated such that all the robots can be repaired.\nNote that\nAll robots move at the same speed. If two robots move in the same direction, they will never collide. If two robots move in opposite directions and they meet at some point, they do not collide. They cross each other. If a robot passes by a factory that reached its limits, it crosses it as if it does not exist. If the robot moved from a position x to a position y, the distance it moved is |y - x|. Example 1:\nInput: robot = [0,4,6], factory = [[2,2],[6,2]] Output: 4 Explanation: As shown in the figure: The first robot at position 0 moves in the positive direction. It will be repaired at the first factory. The second robot at position 4 moves in the negative direction. It will be repaired at the first factory. The third robot at position 6 will be repaired at the second factory. It does not need to move.\nThe limit of the first factory is 2, and it fixed 2 robots.\nThe limit of the second factory is 2, and it fixed 1 robot.\nThe total distance is |2 - 0| + |2 - 4| + |6 - 6| = 4. It can be shown that we cannot achieve a better total distance than 4. Example 2:\nInput: robot = [1,-1], factory = [[-2,1],[2,1]] Output: 2 Explanation: As shown in the figure: The first robot at position 1 moves in the positive direction. It will be repaired at the second factory. The second robot at position -1 moves in the negative direction. It will be repaired at the first factory.\nThe limit of the first factory is 1, and it fixed 1 robot.\nThe limit of the second factory is 1, and it fixed 1 robot.\nThe total distance is |2 - 1| + |(-2) - (-1)| = 2. It can be shown that we cannot achieve a better total distance than 2. Constraints:\n1 \u0026lt;= robot.length, factory.length \u0026lt;= 100 factory[j].length == 2 -10^9 \u0026lt;= robot[i], positionj \u0026lt;= 10^9 0 \u0026lt;= limitj \u0026lt;= robot.length The input will be generated such that it is always possible to repair every robot. 二、分析 初見此題，最先想到的方法是 Greedy + Binary Search，想法是每個機器人都先找離自己最近的工廠，解法參考如下，但實際上，第一個機器人的選擇會影響接下來的機器人的最近選擇：如 robot = [9,11,99,101], factory = [[7,1],[10,1],[14,1],[96,1][100,1],[103,1]]，若第一個位置在 9 的機器人選擇了位置在 10 的工廠，則會影響位置在 11 的機器人最近的工廠在 14，而這樣的選擇就導致錯過了最近解。所以這種解法還需要一些修正。 long long minimumTotalDistance(vector\u0026lt;int\u0026gt;\u0026amp; robot, vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; factory) { map\u0026lt;int,int\u0026gt; mp; long long res = 0; for (auto f : factory) { if (f[1] == 0) continue; mp[f[0]] = f[1]; } for (auto r : robot) { auto it = mp.lower_bound(r); if (it == mp.end()) { it--; } else if (it != mp.begin()){ auto right = it--; if (r - it-\u0026gt;first \u0026gt; right-\u0026gt;first - r) { it = right; } } res += abs(it-\u0026gt;first - r); if (it-\u0026gt;second == 1) { mp.erase(it); } else { it-\u0026gt;second--; } } 也許可以將透過 sorting 將機器人分為幾個子群對應幾個工廠。 如果用 dfs + memoization 也就是 dynamic programming 的方式應該可解，透過將 factory 扁平化，並經過 sort 的之後，令 dp(i, j) 為總步數，i 為由左數到右第 ith 個機器人，j 為由左數到右第 jth 個工廠的「空位」。 三、解題 1. DP Time complexity: \\(O(m\\times n\\times k)\\) Space complexity: \\(O(m\\times n\\times k)\\) m = robot.size(), n = factory.size(), k = max(factory[i].size()) vector\u0026lt;vector\u0026lt;long long\u0026gt;\u0026gt; dp; long long minimumTotalDistance(vector\u0026lt;int\u0026gt;\u0026amp; robot, vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; factory) { long long res = 0; vector\u0026lt;int\u0026gt; fac; for (auto f : factory) { // 將 factory 扁平化成 1d array int times = f[1]; while (times--) { fac.push_back(f[0]); } } dp = vector\u0026lt;vector\u0026lt;long long\u0026gt;\u0026gt;(robot.size()+1, vector\u0026lt;long long\u0026gt;(fac.size()+1, -1)); sort(robot.begin(), robot.end()); sort(fac.begin(), fac.end()); return dfs(robot, fac, 0, 0); } long long dfs(vector\u0026lt;int\u0026gt;\u0026amp; robot, vector\u0026lt;int\u0026gt;\u0026amp; fac, int i, int j) { if (i == robot.size()) return 0; // 當機器人都排列完畢，為終止條件 if (j == fac.size()) return (long long) (LONG_MAX/2); // 工廠空缺空用了，傳回一個有效的大數，使之不會是答案 if (dp[i][j] != -1) return dp[i][j]; dp[i][j] = min( dfs(robot, fac, i+1, j+1) + (long long)abs(robot[i]-fac[j]), // ith 機器人選擇 jth 工廠空位 dfs(robot, fac, i, j+1) // ith 機器人不選擇 jth 工廠空位 ); return dp[i][j]; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/2463/","summary":"\u003cp\u003e\u003cstrong\u003e2463. Minimum Total Distance Traveled\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{red}\\textsf{Hard}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eArray\u003c/code\u003e、\u003ccode\u003eDynamic Programming\u003c/code\u003e、\u003ccode\u003eSorting\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\\(\\color{blue}\\textsf{Weekly Contest 318}\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eThere are some robots and factories on the X-axis. You are given an integer array \u003ccode\u003erobot\u003c/code\u003e where \u003ccode\u003erobot[i]\u003c/code\u003e is the position of the \u003ccode\u003eith\u003c/code\u003e robot. You are also given a 2D integer array \u003ccode\u003efactory\u003c/code\u003e where \u003ccode\u003efactory[j] = [positionj, limitj]\u003c/code\u003e indicates that \u003ccode\u003epositionj\u003c/code\u003e is the position of the \u003ccode\u003ejth\u003c/code\u003e factory and that the \u003ccode\u003ejth\u003c/code\u003e factory can repair at most \u003ccode\u003elimitj\u003c/code\u003e robots.\u003c/p\u003e","title":"[LeetCode] 2463. Minimum Total Distance Traveled"},{"content":"2462. Total Cost to Hire K\nHardness: \\(\\color{orange}\\textsf{Medium}\\) Ralated Topics: Array、Two Pointer、Heap (Priority Queue)、Simulation \\(\\color{blue}\\textsf{Weekly Contest 318}\\) 一、題目 You are given a 0-indexed integer array costs where costs[i] is the cost of hiring the ith worker. You are also given two integers k and candidates. We want to hire exactly k workers according to the following rules:\nYou will run k sessions and hire exactly one worker in each session. In each hiring session, choose the worker with the lowest cost from either the first candidates workers or the last candidates workers. Break the tie by the smallest index. For example, if costs = [3,2,7,7,1,2] and candidates = 2, then in the first hiring session, we will choose the 4th worker because they have the lowest cost [3,2,7,7,1,2]. In the second hiring session, we will choose 1st worker because they have the same lowest cost as 4th worker but they have the smallest index [3,2,7,7,2]. Please note that the indexing may be changed in the process. If there are fewer than candidates workers remaining, choose the worker with the lowest cost among them. Break the tie by the smallest index. A worker can only be chosen once. Return the total cost to hire exactly k workers. Example 1:\nInput: costs = [17,12,10,2,7,2,11,20,8], k = 3, candidates = 4 Output: 11 Explanation: We hire 3 workers in total. The total cost is initially 0. In the first hiring round we choose the worker from [17,12,10,2,7,2,11,20,8]. The lowest cost is 2, and we break the tie by the smallest index, which is 3. The total cost = 0 + 2 = 2. In the second hiring round we choose the worker from [17,12,10,7,2,11,20,8]. The lowest cost is 2 (index 4). The total cost = 2 + 2 = 4. In the third hiring round we choose the worker from [17,12,10,7,11,20,8]. The lowest cost is 7 (index 3). The total cost = 4 + 7 = 11. Notice that the worker with index 3 was common in the first and last four workers.\nThe total hiring cost is 11. Example 2:\nInput: costs = [1,2,4,1], k = 3, candidates = 3 Output: 4 Explanation: We hire 3 workers in total. The total cost is initially 0. In the first hiring round we choose the worker from [1,2,4,1]. The lowest cost is 1, and we break the tie by the smallest index, which is 0. The total cost = 0 + 1 = 1. Notice that workers with index 1 and 2 are common in the first and last 3 workers. In the second hiring round we choose the worker from [2,4,1]. The lowest cost is 1 (index 2). The total cost = 1 + 1 = 2. In the third hiring round there are less than three candidates. We choose the worker from the remaining workers [2,4]. The lowest cost is 2 (index 0). The total cost = 2 + 2 = 4.\nThe total hiring cost is 4. Constraints:\n1 \u0026lt;= costs.length \u0026lt;= 10^5 1 \u0026lt;= costs[i] \u0026lt;= 10^5 1 \u0026lt;= k, candidates \u0026lt;= costs.length 二、分析 將數組左右兩邊 candidates 長度的數字加入各別的 min heap 中，按順序比較兩個 min heap，將小的加入和中。 注意當從 min heap 中取值之後，要移動指針，將新的值放入 min heap，除非當左右指針相撞(代表整個數組都在 candidate 的範圍內)。 三、解題 1. Heap (Priority Queue) Time complexity: \\(O(n)\\) Space complexity: \\(O(n)\\) long long totalCost(vector\u0026lt;int\u0026gt;\u0026amp; costs, int k, int candidates) { priority_queue\u0026lt;int, vector\u0026lt;int\u0026gt;, greater\u0026lt;int\u0026gt;\u0026gt; front, end; // 宣告兩個 min heap long long res = 0; int cnt = 0; int i = 0, j = costs.size()-1; front.push(INT_MAX); // 當 min heap 為空時，必定傳回另一個 min heap 的值 end.push(INT_MAX); while (i \u0026lt;= j \u0026amp;\u0026amp; cnt \u0026lt; candidates) { front.push(costs[i++]); // 左指針移動 if (i \u0026lt;= j) end.push(costs[j--]); // 右指針移動，左右指針相撞，代表已經包含整個數組 cnt++; } while (k--) { // 取 k 個數字 if (front.top() \u0026lt;= end.top()) { res += front.top(); front.pop(); if (i \u0026lt;= j) front.push(costs[i++]); // 左右指針相撞，不再加入新的值 } else { res += end.top(); end.pop(); if (i \u0026lt;= j) end.push(costs[j--]); // 左右指針相撞，不再加入新的值 } } return res; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/2462/","summary":"\u003cp\u003e\u003cstrong\u003e2462. Total Cost to Hire K\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{orange}\\textsf{Medium}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eArray\u003c/code\u003e、\u003ccode\u003eTwo Pointer\u003c/code\u003e、\u003ccode\u003eHeap (Priority Queue)\u003c/code\u003e、\u003ccode\u003eSimulation\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\\(\\color{blue}\\textsf{Weekly Contest 318}\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eYou are given a \u003cstrong\u003e0-indexed\u003c/strong\u003e integer array \u003ccode\u003ecosts\u003c/code\u003e where \u003ccode\u003ecosts[i]\u003c/code\u003e is the cost of hiring the \u003ccode\u003eith\u003c/code\u003e worker.\nYou are also given two integers \u003ccode\u003ek\u003c/code\u003e and \u003ccode\u003ecandidates\u003c/code\u003e. We want to hire exactly \u003ccode\u003ek\u003c/code\u003e workers according to the following rules:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eYou will run \u003ccode\u003ek\u003c/code\u003e sessions and hire exactly one worker in each session.\u003c/li\u003e\n\u003cli\u003eIn each hiring session, choose the worker with the lowest cost from either the first \u003ccode\u003ecandidates\u003c/code\u003e workers or the last \u003ccode\u003ecandidates\u003c/code\u003e workers. Break the tie by the smallest index.\n\u003cul\u003e\n\u003cli\u003eFor example, if \u003ccode\u003ecosts = [3,2,7,7,1,2]\u003c/code\u003e and \u003ccode\u003ecandidates = 2\u003c/code\u003e, then in the first hiring session, we will choose the \u003ccode\u003e4th\u003c/code\u003e worker because they have the lowest cost \u003ccode\u003e[3,2,7,7,1,2]\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eIn the second hiring session, we will choose \u003ccode\u003e1st\u003c/code\u003e worker because they have the same lowest cost as \u003ccode\u003e4th\u003c/code\u003e worker but they have the smallest index \u003ccode\u003e[3,2,7,7,2]\u003c/code\u003e. Please note that the indexing may be changed in the process.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eIf there are fewer than candidates workers remaining, choose the worker with the lowest cost among them. Break the tie by the smallest index.\u003c/li\u003e\n\u003cli\u003eA worker can only be chosen once.\nReturn \u003cem\u003ethe total cost to hire exactly\u003c/em\u003e \u003ccode\u003ek\u003c/code\u003e \u003cem\u003eworkers\u003c/em\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e","title":"[LeetCode] 2462. Total Cost to Hire K"},{"content":"2461. Maximum Sum of Distinct Subarrays With Length K\nHardness: \\(\\color{orange}\\textsf{Medium}\\) Ralated Topics: Array、Hash Table、Sliding Window \\(\\color{blue}\\textsf{Weekly Contest 318}\\) 一、題目 You are given an integer array nums and an integer k. Find the maximum subarray sum of all the subarrays of nums that meet the following conditions:\nThe length of the subarray is k, and All the elements of the subarray are distinct. Return the maximum subarray sum of all the subarrays that meet the conditions. If no subarray meets the conditions, return 0. A subarray is a contiguous non-empty sequence of elements within an array. Example 1:\nInput: nums = [1,5,4,2,9,9,9], k = 3 Output: 15 Explanation: The subarrays of nums with length 3 are: [1,5,4] which meets the requirements and has a sum of 10. [5,4,2] which meets the requirements and has a sum of 11. [4,2,9] which meets the requirements and has a sum of 15. [2,9,9] which does not meet the requirements because the element 9 is repeated. [9,9,9] which does not meet the requirements because the element 9 is repeated.\nWe return 15 because it is the maximum subarray sum of all the subarrays that meet the conditions Example 2:\nInput: nums = [4,4,4], k = 3 Output: 0 Explanation: The subarrays of nums with length 3 are: [4,4,4] which does not meet the requirements because the element 4 is repeated.\nWe return 0 because no subarrays meet the conditions. Example 3:\nInput: Output: Constraints:\n1 \u0026lt;= k \u0026lt;= nums.length \u0026lt;= 10^5 1 \u0026lt;= nums[i] \u0026lt;= 10^5 二、分析 標準的 Sliding Window 題型，將 window 控制在固定大小 k，並檢查 window 中沒有重複的數字。 三、解題 1. Sliding Window Time complexity: \\(O(n)\\) Space complexity: \\(O(n)\\) long long maximumSubarraySum(vector\u0026lt;int\u0026gt;\u0026amp; nums, int k) { unordered_map\u0026lt;int,int\u0026gt; map; int valid = 0; long long res = 0; long long sum = 0; int left = 0, right = 0; while (right \u0026lt; nums.size()) { int x = nums[right++]; // 右指針移動 sum += x; // 將值加入和 map[x]++; // 記錄右指針移動時數字的個數 if (map[x] == 1) valid++; // 右指針移動時，數字個數為 1 時，有效數加 1 if (right - left == k) { // 將 window 控制在大小為 k if (valid == k) res = max(res, sum); // 滿足條件，比較大小 int y = nums[left++]; // 左指針移動 if (map[y] == 1) valid--; // 左指針移動時，數字個數為 1 時，有效數減 1 map[y]--; // 記錄左指針移動時數字的個數 sum -= y; // 將值移去和 } } return res; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/2461/","summary":"\u003cp\u003e\u003cstrong\u003e2461. Maximum Sum of Distinct Subarrays With Length K\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{orange}\\textsf{Medium}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eArray\u003c/code\u003e、\u003ccode\u003eHash Table\u003c/code\u003e、\u003ccode\u003eSliding Window\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\\(\\color{blue}\\textsf{Weekly Contest 318}\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eYou are given an integer array \u003ccode\u003enums\u003c/code\u003e and an integer \u003ccode\u003ek\u003c/code\u003e. Find the maximum subarray sum of all the subarrays of \u003ccode\u003enums\u003c/code\u003e that meet the following conditions:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe length of the subarray is \u003ccode\u003ek\u003c/code\u003e, and\u003c/li\u003e\n\u003cli\u003eAll the elements of the subarray are \u003cstrong\u003edistinct\u003c/strong\u003e.\nReturn \u003cem\u003ethe maximum subarray sum of all the subarrays that meet the conditions\u003c/em\u003e. If no subarray meets the conditions, return \u003ccode\u003e0\u003c/code\u003e.\n\u003cem\u003eA\u003c/em\u003e \u003cem\u003e\u003cstrong\u003esubarray\u003c/strong\u003e\u003c/em\u003e \u003cem\u003eis a contiguous non-empty sequence of elements within an array.\u003c/em\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e","title":"[LeetCode] 2461. Maximum Sum of Distinct Subarrays With Length K"},{"content":"2460. Apply Operations to an Array\nHardness: \\(\\color{green}\\textsf{Easy}\\) Ralated Topics: Array、Simulation \\(\\color{blue}\\textsf{Weekly Contest 318}\\) 一、題目 You are given a 0-indexed array nums of size n consisting of non-negative integers. You need to apply n - 1 operations to this array where, in the ith operation (0-indexed), you will apply the following on the ith element of nums:\nIf nums[i] == nums[i + 1], then multiply nums[i] by 2 and set nums[i + 1] to 0. Otherwise, you skip this operation. After performing all the operations, shift all the 0\u0026rsquo;s to the end of the array. For example, the array [1,0,2,0,0,1] after shifting all its 0\u0026rsquo;s to the end, is [1,2,1,0,0,0]. Return the resulting array. Note that the operations are applied sequentially, not all at once. Example 1:\nInput: nums = [1,2,2,1,1,0] Output: [1,4,2,0,0,0] Explanation: We do the following operations: i = 0: nums[0] and nums[1] are not equal, so we skip this operation. i = 1: nums[1] and nums[2] are equal, we multiply nums[1] by 2 and change nums[2] to 0. The array becomes [1,4,0,1,1,0]. i = 2: nums[2] and nums[3] are not equal, so we skip this operation. i = 3: nums[3] and nums[4] are equal, we multiply nums[3] by 2 and change nums[4] to 0. The array becomes [1,4,0,2,0,0]. i = 4: nums[4] and nums[5] are equal, we multiply nums[4] by 2 and change nums[5] to 0. The array becomes [1,4,0,2,0,0].\nAfter that, we shift the 0\u0026rsquo;s to the end, which gives the array [1,4,2,0,0,0]. Input: nums = [0,1] Output: [1,0] Explanation: No operation can be applied, we just shift the 0 to the end. Constraints:\n2 \u0026lt;= nums.length \u0026lt;= 2000 0 \u0026lt;= nums[i] \u0026lt;= 1000 二、分析 照題目的指示做兩件事： 將前後重複的數字，把前者乘二，後者歸零。 利用 Two Pointer 的技巧，將零全部丟到後面。 三、解題 1. Two Pointer Time complexity: \\(O(n)\\) Space complexity: \\(O(1)\\) vector\u0026lt;int\u0026gt; applyOperations(vector\u0026lt;int\u0026gt;\u0026amp; nums) { for (int i = 0; i \u0026lt; nums.size()-1; i++) { if (nums[i] == 0) continue; if (nums[i] == nums[i+1]) { // 將前後重複的數字加到前者 nums[i] *= 2; nums[i+1] = 0; } } int i = 0, j = 0; while (i \u0026lt; nums.size()) { if (nums[i] != 0) { // 將零全部移到後面 nums[j++] = nums[i++]; } else { i++; } } while (j \u0026lt; nums.size()) { nums[j++] = 0; } return nums; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/2460/","summary":"\u003cp\u003e\u003cstrong\u003e2460. Apply Operations to an Array\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{green}\\textsf{Easy}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eArray\u003c/code\u003e、\u003ccode\u003eSimulation\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\\(\\color{blue}\\textsf{Weekly Contest 318}\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eYou are given a \u003cstrong\u003e0-indexed\u003c/strong\u003e array \u003ccode\u003enums\u003c/code\u003e of size \u003ccode\u003en\u003c/code\u003e consisting of \u003cstrong\u003enon-negative\u003c/strong\u003e integers.\nYou need to apply \u003ccode\u003en - 1\u003c/code\u003e operations to this array where, in the \u003ccode\u003eith\u003c/code\u003e operation (\u003cstrong\u003e0-indexed\u003c/strong\u003e), you will apply the following on the \u003ccode\u003eith\u003c/code\u003e element of \u003ccode\u003enums\u003c/code\u003e:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eIf \u003ccode\u003enums[i] == nums[i + 1]\u003c/code\u003e, then multiply \u003ccode\u003enums[i]\u003c/code\u003e by \u003ccode\u003e2\u003c/code\u003e and set \u003ccode\u003enums[i + 1]\u003c/code\u003e to \u003ccode\u003e0\u003c/code\u003e. Otherwise, you skip this operation.\nAfter performing \u003cstrong\u003eall\u003c/strong\u003e the operations, \u003cstrong\u003eshift\u003c/strong\u003e all the 0\u0026rsquo;s to the \u003cstrong\u003eend\u003c/strong\u003e of the array.\u003c/li\u003e\n\u003cli\u003eFor example, the array \u003ccode\u003e[1,0,2,0,0,1]\u003c/code\u003e after shifting all its 0\u0026rsquo;s to the end, is \u003ccode\u003e[1,2,1,0,0,0]\u003c/code\u003e.\nReturn \u003cem\u003ethe resulting array\u003c/em\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eNote\u003c/strong\u003e that the operations are applied \u003cstrong\u003esequentially\u003c/strong\u003e, not all at once.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e","title":"[LeetCode] 2460. Apply Operations to an Array"},{"content":"1323. Maximum 69 Number\nHardness: \\(\\color{green}\\textsf{Easy}\\) Ralated Topics: Math、Greedy 一、題目 You are given a positive integer num consisting only of digits 6 and 9.\nReturn the maximum number you can get by changing at most one digit (6 becomes 9, and 9 becomes 6).\nExample 1:\nInput: num = 9669 Output: 9969 Explanation:\nChanging the first digit results in 6669.\nChanging the second digit results in 9969.\nChanging the third digit results in 9699.\nChanging the fourth digit results in 9666.\nThe maximum number is 9969. Example 2:\nInput: num = 9996 Output: 9999 Explanation: Changing the last digit 6 to 9 results in the maximum number. Example 3:\nInput: num = 9999 Output: 9999 Explanation: It is better not to apply any change. Constraints:\n1 \u0026lt;= num \u0026lt;= 10^4 num consists of only 6 and 9 digits. 二、分析 觀察規律，從數字從左開始，將第一個 6 換成 9者為解。 三、解題 1. Greedy Time complexity: \\(O(n)\\) Space complexity: \\(O(1)\\) int maximum69Number (int num) { string s = to_string(num); for (int i = 0; i \u0026lt; s.length(); i++) { if (s[i] == \u0026#39;6\u0026#39;) { s[i] = \u0026#39;9\u0026#39;; break; } } return stoi(s); } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/1323/","summary":"\u003cp\u003e\u003cstrong\u003e1323. Maximum 69 Number\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{green}\\textsf{Easy}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eMath\u003c/code\u003e、\u003ccode\u003eGreedy\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eYou are given a positive integer \u003ccode\u003enum\u003c/code\u003e consisting only of digits \u003ccode\u003e6\u003c/code\u003e and \u003ccode\u003e9\u003c/code\u003e.\u003cbr\u003e\nReturn \u003cem\u003ethe maximum number you can get by changing\u003c/em\u003e \u003cem\u003e\u003cstrong\u003eat most\u003c/strong\u003e\u003c/em\u003e \u003cem\u003eone digit (\u003ccode\u003e6\u003c/code\u003e becomes \u003ccode\u003e9\u003c/code\u003e, and \u003ccode\u003e9\u003c/code\u003e becomes \u003ccode\u003e6\u003c/code\u003e).\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInput:\u003c/strong\u003e num = 9669\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e 9969\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003cbr\u003e\nChanging the first digit results in 6669.\u003cbr\u003e\nChanging the second digit results in 9969.\u003cbr\u003e\nChanging the third digit results in 9699.\u003cbr\u003e\nChanging the fourth digit results in 9666.\u003cbr\u003e\nThe maximum number is 9969.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e","title":"[LeetCode] 1323. Maximum 69 Number"},{"content":"Introduction to ML 統計學與機器學習差在哪裡? 同: 將資料(data)轉為資訊(info)\n異: 有無強烈的人為事先假設\n統計學\n統計學是在資料分析的基礎上，研究如何測定、收集、整理、歸納和分析反映資料，以便給出正確訊息的科學。 機器學習\n機器學習演算法是一類從資料中自動分析獲得規律，並利用規律對未知資料進行預測的演算法。 \\(\\begin{array}{lll} \\text{Item} \u0026amp; \\text{Statistics} \u0026amp; \\text{Machine Learning}\\\\\\hline \\text{特性} \u0026amp; \\text{伴隨事前假設，依賴明確規則，以模型定義資料關聯性，重視模型解釋性} \u0026amp; \\text{幾乎無視前假設，不依賴明確規則，相信經驗}\\\\ \u0026amp; \\text{事前假設(人)}\\rightarrow\\text{模型估計(機器)} \u0026amp; \\text{特徵萃取(機器)}\\rightarrow\\text{網路建構(機器)} \\\\\\hline \\text{優點} \u0026amp; \\text{模型可解釋} \u0026amp; \\text{不須事先假設或了解資料關聯性}\\\\ \u0026amp; \\text{推論有強烈理論根據} \u0026amp; \\text{可抓取資料的所有(幾乎)複雜特徵}\\\\ \u0026amp; \\text{符合事前假設前提下，可做更多的推論}\\\\ \u0026amp; \\text{符合事前假設前提下，不需大量資料} \\\\\\hline \\text{缺點} \u0026amp; \\text{所有推論接基於事前假設，常難以驗證假設的正確性} \u0026amp; \\text{模型難以解釋(黑盒子)}\\\\ \u0026amp; \\text{難以抓取資料中過於複雜的特徵} \u0026amp; \\text{推論無強烈理論根據} \\\\\\hline \\text{專家} \u0026amp; \\text{統計背景} \u0026amp; \\text{資訊背景及統計背景} \\\\\\hline \\end{array}\\) 結論 統計模型的重點是有合理的事前假設 在有合理假設之情況下，統計模型能發揮效力(即使資料量少) 機器學習的重點是大量有代表性的資料 在有大量有效資料之情況下，機器學習能發揮效力(即使人類對資料間的關聯之了解並不多) 何時使用統計方法? 何時使用機器學習? 資料關聯性清楚，容易給予合適的模型假設時，建議使用統計模型 資料無明確規則(如影像及語音辨識)，且資料量夠多時，建議使用機器學習方法(可以佐以人為提示) 統計與機器學習類似的專有名詞 \\(\\begin{array}{ll} \\text{Statistics} \u0026amp; \\text{Machine Learning} \\text{response, dependent variable} \u0026amp; \\text{label} \\\\\\hline \\text{covariate, explanatory variable, independent variable} \u0026amp; \\text{feature} \\\\\\hline \\text{model} \u0026amp; \\text{network} \\\\\\hline \\text{parameter, coefficient} \u0026amp; \\text{weight} \\\\\\hline \\text{fitting} \u0026amp; \\text{learning} \\\\\\hline \\text{refression, classification} \u0026amp; \\text{supervised learning} \\\\\\hline \\text{density estimation, cluster} \u0026amp; \\text{unsupervised learning} \\\\\\hline \\end{array}\\)\n","permalink":"https://intervalrain.github.io/ml/lec1/","summary":"\u003ch1 id=\"introduction-to-ml\"\u003eIntroduction to ML\u003c/h1\u003e\n\u003ch2 id=\"統計學與機器學習差在哪裡\"\u003e統計學與機器學習差在哪裡?\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e同: 將資料(data)轉為資訊(info)\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e異: 有無強烈的人為事先假設\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e統計學\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e統計學是在資料分析的基礎上，研究如何測定、收集、整理、歸納和分析反映資料，以便給出正確訊息的科學。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e機器學習\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e機器學習演算法是一類從資料中自動分析獲得規律，並利用規律對未知資料進行預測的演算法。\n\\(\\begin{array}{lll}\n\\text{Item} \u0026amp; \\text{Statistics} \u0026amp; \\text{Machine Learning}\\\\\\hline\n\\text{特性} \u0026amp; \\text{伴隨事前假設，依賴明確規則，以模型定義資料關聯性，重視模型解釋性} \u0026amp; \\text{幾乎無視前假設，不依賴明確規則，相信經驗}\\\\\n\u0026amp; \\text{事前假設(人)}\\rightarrow\\text{模型估計(機器)} \u0026amp; \\text{特徵萃取(機器)}\\rightarrow\\text{網路建構(機器)} \\\\\\hline\n\\text{優點} \u0026amp; \\text{模型可解釋} \u0026amp; \\text{不須事先假設或了解資料關聯性}\\\\\n\u0026amp; \\text{推論有強烈理論根據} \u0026amp; \\text{可抓取資料的所有(幾乎)複雜特徵}\\\\\n\u0026amp; \\text{符合事前假設前提下，可做更多的推論}\\\\\n\u0026amp; \\text{符合事前假設前提下，不需大量資料} \\\\\\hline\n\\text{缺點} \u0026amp; \\text{所有推論接基於事前假設，常難以驗證假設的正確性} \u0026amp; \\text{模型難以解釋(黑盒子)}\\\\\n\u0026amp; \\text{難以抓取資料中過於複雜的特徵} \u0026amp; \\text{推論無強烈理論根據} \\\\\\hline\n\\text{專家} \u0026amp; \\text{統計背景} \u0026amp; \\text{資訊背景及統計背景} \\\\\\hline\n\\end{array}\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"結論\"\u003e結論\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e統計模型的重點是有合理的事前假設\n\u003cul\u003e\n\u003cli\u003e在有合理假設之情況下，統計模型能發揮效力(即使資料量少)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e機器學習的重點是大量有代表性的資料\n\u003cul\u003e\n\u003cli\u003e在有大量有效資料之情況下，機器學習能發揮效力(即使人類對資料間的關聯之了解並不多)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e何時使用統計方法? 何時使用機器學習?\n\u003cul\u003e\n\u003cli\u003e資料關聯性清楚，容易給予合適的模型假設時，建議使用統計模型\u003c/li\u003e\n\u003cli\u003e資料無明確規則(如影像及語音辨識)，且資料量夠多時，建議使用機器學習方法(可以佐以人為提示)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"統計與機器學習類似的專有名詞\"\u003e統計與機器學習類似的專有名詞\u003c/h2\u003e\n\u003cp\u003e\\(\\begin{array}{ll}\n\\text{Statistics} \u0026amp; \\text{Machine Learning}\n\\text{response, dependent variable} \u0026amp; \\text{label} \\\\\\hline\n\\text{covariate, explanatory variable, independent variable} \u0026amp; \\text{feature} \\\\\\hline\n\\text{model} \u0026amp; \\text{network} \\\\\\hline\n\\text{parameter, coefficient} \u0026amp; \\text{weight} \\\\\\hline\n\\text{fitting} \u0026amp; \\text{learning} \\\\\\hline\n\\text{refression, classification} \u0026amp; \\text{supervised learning} \\\\\\hline\n\\text{density estimation, cluster} \u0026amp; \\text{unsupervised learning} \\\\\\hline\n\\end{array}\\)\u003c/p\u003e","title":"[ML] 機器學習與統計學"},{"content":"79. Word Search\nHardness: \\(\\color{orange}\\textsf{Medium}\\) Ralated Topics: Array、Backtracking、Matrix 一、題目 Given an m x n grid of characters board and a string word, return true if word exists in the grid.\nThe word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.\nExample 1:\nInput: board = [[\u0026ldquo;A\u0026rdquo;,\u0026ldquo;B\u0026rdquo;,\u0026ldquo;C\u0026rdquo;,\u0026ldquo;E\u0026rdquo;],[\u0026ldquo;S\u0026rdquo;,\u0026ldquo;F\u0026rdquo;,\u0026ldquo;C\u0026rdquo;,\u0026ldquo;S\u0026rdquo;],[\u0026ldquo;A\u0026rdquo;,\u0026ldquo;D\u0026rdquo;,\u0026ldquo;E\u0026rdquo;,\u0026ldquo;E\u0026rdquo;]], word = \u0026ldquo;ABCCED\u0026rdquo; Output: true Example 2:\nInput: board = [[\u0026ldquo;a\u0026rdquo;,\u0026ldquo;b\u0026rdquo;],[\u0026ldquo;c\u0026rdquo;,\u0026ldquo;d\u0026rdquo;]], words = [\u0026ldquo;abcb\u0026rdquo;] Output: true Example 3:\nInput: board = [[\u0026ldquo;A\u0026rdquo;,\u0026ldquo;B\u0026rdquo;,\u0026ldquo;C\u0026rdquo;,\u0026ldquo;E\u0026rdquo;],[\u0026ldquo;S\u0026rdquo;,\u0026ldquo;F\u0026rdquo;,\u0026ldquo;C\u0026rdquo;,\u0026ldquo;S\u0026rdquo;],[\u0026ldquo;A\u0026rdquo;,\u0026ldquo;D\u0026rdquo;,\u0026ldquo;E\u0026rdquo;,\u0026ldquo;E\u0026rdquo;]], word = \u0026ldquo;ABCB\u0026rdquo; Output: false Constraints:\nm == board.length n = board[i].length 1 \u0026lt;= m, n \u0026lt;= 6 1 \u0026lt;= word.length \u0026lt;= 15 board and word consists of only lowercase and uppercase English letters. Follow up: Could you use search pruning to make your solution faster with a larger board?\n二、分析 這題是 [LeetCode] 212. Word Search II 的基本題，是 google 愛考的題型，先考你一題基礎題型，再看你能不能進一步微調。如先考最短路徑的「步數」，再考你最短路徑的「路徑」，此種題型容易藏細節，如最短路徑「步數」可以用 bfs，當走到終點立即回傳，但當考題改成路徑時，就不能立即回傳，因為有可能會有多個最短路徑。 這題有許多剪枝技巧： word 的字長不可能大於 board 的總字數，即 m x n。 word 個別的字數需小於 board 各別的字數。 word 如果是重複的字元組成，則重複的字元擺在尾巴可以有分枝的效果。 即 aaaaaaabc 可以處理成，找 cbaaaaaaa。 注意在 search 中回傳 bool 值前，要記得將 backtrack 走完，以免影響其它組解。 三、解題 1. Backtracking Time complexity: \\(O(m\\times n\\times l)\\)，\\(m \\) 為 board.size()，\\(n\\) 為 board[0].size()，\\(l\\) 為 word.length() Space complexity: \\(O(m\\times n)\\) class Board { private: vector\u0026lt;vector\u0026lt;char\u0026gt;\u0026gt; board; int m, n; int cnt[128]; // 用於上、下、左、右 int dirc[4][2] = {{1,0},{0,1},{-1,0},{0,-1}}; // 用於剪枝1與剪枝2，在進行算法前，檢查其是否可能為錯，時間複雜度為 O(1)，所以可以大大降低耗時。 bool isWordNumValid(string\u0026amp; word) { if (word.length() \u0026gt; m * n) return false; // 剪枝1 int charNum[128] = {0}; for (char c : word) charNum[c]++; for (int i = 0; i \u0026lt; 128; i++) { if (charNum[i] \u0026gt; cnt[i]) return false; // 剪枝2 } return true; } void reverseIfNeeded(string\u0026amp; word) { int left = word.find_first_not_of(word[0]); // 左邊重複 int right = word.length() - word.find_last_not_of(word[word.length()-1]); // 右邊重複 if (left \u0026gt; right) reverse(word.begin(), word.end()); // 左邊重複較長，則翻轉字串 } bool backtrack(string\u0026amp; word, int row, int col, int i) { if (i == word.length()) return true; // 到達終止條件，回傳 true if (row \u0026lt; 0 || col \u0026lt; 0 || row \u0026gt;= m || col \u0026gt;= n || board[row][col] != word[i]) return false; // out of bound 或不符合 char tmp = board[row][col]; // 記錄原本的格子 board[row][col] = \u0026#39;#\u0026#39;; // 用 \u0026#39;#\u0026#39; 代表 visited，省去另外創一個 visited 來記錄是否拜訪過 for (const auto\u0026amp; d : dirc) if (backtrack(word, row+d[0], col+d[1], i+1)) { // board[row][col] = tmp; // 記得將 backtrack 更動的部分走完，以免影響其它組解 return true; } board[row][col] = tmp; // 還原格子 return false; } public: Board(vector\u0026lt;vector\u0026lt;char\u0026gt;\u0026gt;\u0026amp; board_) { this-\u0026gt;board = board_; this-\u0026gt;m = board_.size(); this-\u0026gt;n = board_[0].size(); memset(cnt, 0, sizeof(cnt)); for (const auto\u0026amp; row : board) { for (char c : row) { cnt[c]++; } } } bool search(string\u0026amp; word) { for (int i = 0; i \u0026lt; m; i++) { for (int j = 0; j \u0026lt; n; j++) { if (!isWordNumValid(word)) return false; reverseIfNeeded(word); if (backtrack(word, i, j, 0)) return true; } } return false; } }; class Solution { public: bool exist(vector\u0026lt;vector\u0026lt;char\u0026gt;\u0026gt;\u0026amp; board, string word) { Board b(board); return b.search(word); } }; 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/79/","summary":"\u003cp\u003e\u003cstrong\u003e79. Word Search\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{orange}\\textsf{Medium}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eArray\u003c/code\u003e、\u003ccode\u003eBacktracking\u003c/code\u003e、\u003ccode\u003eMatrix\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eGiven an \u003ccode\u003em x n\u003c/code\u003e grid of characters \u003ccode\u003eboard\u003c/code\u003e and a string \u003ccode\u003eword\u003c/code\u003e, return \u003ccode\u003etrue\u003c/code\u003e \u003cem\u003eif\u003c/em\u003e \u003ccode\u003eword\u003c/code\u003e \u003cem\u003eexists in the grid\u003c/em\u003e.\u003cbr\u003e\nThe word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInput:\u003c/strong\u003e board = [[\u0026ldquo;A\u0026rdquo;,\u0026ldquo;B\u0026rdquo;,\u0026ldquo;C\u0026rdquo;,\u0026ldquo;E\u0026rdquo;],[\u0026ldquo;S\u0026rdquo;,\u0026ldquo;F\u0026rdquo;,\u0026ldquo;C\u0026rdquo;,\u0026ldquo;S\u0026rdquo;],[\u0026ldquo;A\u0026rdquo;,\u0026ldquo;D\u0026rdquo;,\u0026ldquo;E\u0026rdquo;,\u0026ldquo;E\u0026rdquo;]], word = \u0026ldquo;ABCCED\u0026rdquo;\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e true\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e","title":"[LeetCode] 79. Word Search"},{"content":"212. Word Search II\nHardness: \\(\\color{red}\\textsf{Hard}\\) Ralated Topics: Array、String、Backtracking、Trie、Matrix 一、題目 Given an m x n board of characters and a list of strings words, return all words on the board.\nEach word must be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.\nExample 1:\nInput: board = [[\u0026ldquo;o\u0026rdquo;,\u0026ldquo;a\u0026rdquo;,\u0026ldquo;a\u0026rdquo;,\u0026ldquo;n\u0026rdquo;],[\u0026ldquo;e\u0026rdquo;,\u0026ldquo;t\u0026rdquo;,\u0026ldquo;a\u0026rdquo;,\u0026ldquo;e\u0026rdquo;],[\u0026ldquo;i\u0026rdquo;,\u0026ldquo;h\u0026rdquo;,\u0026ldquo;k\u0026rdquo;,\u0026ldquo;r\u0026rdquo;],[\u0026ldquo;i\u0026rdquo;,\u0026ldquo;f\u0026rdquo;,\u0026ldquo;l\u0026rdquo;,\u0026ldquo;v\u0026rdquo;]], words = [\u0026ldquo;oath\u0026rdquo;,\u0026ldquo;pea\u0026rdquo;,\u0026ldquo;eat\u0026rdquo;,\u0026ldquo;rain\u0026rdquo;] Output: [\u0026ldquo;eat\u0026rdquo;,\u0026ldquo;oath\u0026rdquo;] Example 2:\nInput: board = [[\u0026ldquo;a\u0026rdquo;,\u0026ldquo;b\u0026rdquo;],[\u0026ldquo;c\u0026rdquo;,\u0026ldquo;d\u0026rdquo;]], words = [\u0026ldquo;abcb\u0026rdquo;] Output: [] Example 3:\nInput: Output: Constraints:\nm == board.length n == board[i].length 1 \u0026lt;= m, n \u0026lt;= 12 board[i][j] is a lowercase English letter. 1 \u0026lt;= words.length \u0026lt;= 3 * 104 1 \u0026lt;= words[i].length \u0026lt;= 10 words[i] consists of lowercase English letters. All the strings of words are unique. 二、分析 這題是 [LeetCode] 79. Word Search 的進階題，是 google 愛考的題型，先考你一題基礎題型，再看你能不能進一步微調。如先考最短路徑的「步數」，再考你最短路徑的「路徑」，此種題型容易藏細節，如最短路徑「步數」可以用 bfs，當走到終點立即回傳，但當考題改成路徑時，就不能立即回傳，因為有可能會有多個最短路徑。 這題有許多剪枝技巧： word 的字長不可能大於 board 的總字數，即 m x n。 word 個別的字數需小於 board 各別的字數。 word 如果是重複的字元組成，則重複的字元擺在尾巴可以有分枝的效果。 即 aaaaaaabc 可以處理成，找 cbaaaaaaa。 注意在 search 中回傳 bool 值前，要記得將 backtrack 走完，以免影響其它組解。 三、解題 1. Backtracking Time complexity: \\(O(m\\times n\\times l)\\)，\\(m \\) 為 board.size()，\\(n\\) 為 board[0].size()，\\(l\\) 為 word.length() Space complexity: \\(O(m\\times n)\\) class Board { private: vector\u0026lt;vector\u0026lt;char\u0026gt;\u0026gt; board; int m, n; int cnt[26]; // 用於上、下、左、右 int dirc[4][2] = {{1,0},{0,1},{-1,0},{0,-1}}; // 用於剪枝1與剪枝2，在進行算法前，檢查其是否可能為錯，時間複雜度為 O(1)，所以可以大大降低耗時。 bool isWordNumValid(string\u0026amp; word) { if (word.length() \u0026gt; m * n) return false; // 剪枝1 int charNum[26] = {0}; for (char c : word) charNum[c-\u0026#39;a\u0026#39;]++; for (int i = 0; i \u0026lt; 26; i++) { if (charNum[i] \u0026gt; cnt[i]) return false; // 剪枝2 } return true; } void reverseIfNeeded(string\u0026amp; word) { int left = word.find_first_not_of(word[0]); // 左邊重複 int right = word.length() - word.find_last_not_of(word[word.length()-1]); // 右邊重複 if (left \u0026gt; right) reverse(word.begin(), word.end()); // 左邊重複較長，則翻轉字串 } bool backtrack(string\u0026amp; word, int row, int col, int i) { if (i == word.length()) return true; // 到達終止條件，回傳 true if (row \u0026lt; 0 || col \u0026lt; 0 || row \u0026gt;= m || col \u0026gt;= n || board[row][col] != word[i]) return false; // out of bound 或不符合 char tmp = board[row][col]; // 記錄原本的格子 board[row][col] = \u0026#39;#\u0026#39;; // 用 \u0026#39;#\u0026#39; 代表 visited，省去另外創一個 visited 來記錄是否拜訪過 for (const auto\u0026amp; d : dirc) if (backtrack(word, row+d[0], col+d[1], i+1)) { board[row][col] = tmp; // 記得將 backtrack 更動的部分走完，以免影響其它組解 return true; } board[row][col] = tmp; // 還原格子 return false; } public: Board(vector\u0026lt;vector\u0026lt;char\u0026gt;\u0026gt;\u0026amp; board_) { this-\u0026gt;board = board_; this-\u0026gt;m = board_.size(); this-\u0026gt;n = board_[0].size(); memset(cnt, 0, sizeof(cnt)); for (const auto\u0026amp; row : board) { for (char c : row) { cnt[c-\u0026#39;a\u0026#39;]++; } } } bool search(string word) { for (int i = 0; i \u0026lt; m; i++) { for (int j = 0; j \u0026lt; n; j++) { if (!isWordNumValid(word)) return false; reverseIfNeeded(word); if (backtrack(word, i, j, 0)) return true; } } return false; } }; class Solution { public: vector\u0026lt;string\u0026gt; findWords(vector\u0026lt;vector\u0026lt;char\u0026gt;\u0026gt;\u0026amp; board, vector\u0026lt;string\u0026gt;\u0026amp; words) { Board b(board); vector\u0026lt;string\u0026gt; res; for (const auto\u0026amp; word : words) { if (b.search(word)) res.push_back(word); } return res; } }; 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/212/","summary":"\u003cp\u003e\u003cstrong\u003e212. Word Search II\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{red}\\textsf{Hard}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eArray\u003c/code\u003e、\u003ccode\u003eString\u003c/code\u003e、\u003ccode\u003eBacktracking\u003c/code\u003e、\u003ccode\u003eTrie\u003c/code\u003e、\u003ccode\u003eMatrix\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eGiven an \u003ccode\u003em x n\u003c/code\u003e \u003ccode\u003eboard\u003c/code\u003e of characters and a list of strings \u003ccode\u003ewords\u003c/code\u003e, return \u003cem\u003eall words on the board\u003c/em\u003e.\u003cbr\u003e\nEach word must be constructed from letters of sequentially adjacent cells, where \u003cstrong\u003eadjacent cells\u003c/strong\u003e are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInput:\u003c/strong\u003e board = [[\u0026ldquo;o\u0026rdquo;,\u0026ldquo;a\u0026rdquo;,\u0026ldquo;a\u0026rdquo;,\u0026ldquo;n\u0026rdquo;],[\u0026ldquo;e\u0026rdquo;,\u0026ldquo;t\u0026rdquo;,\u0026ldquo;a\u0026rdquo;,\u0026ldquo;e\u0026rdquo;],[\u0026ldquo;i\u0026rdquo;,\u0026ldquo;h\u0026rdquo;,\u0026ldquo;k\u0026rdquo;,\u0026ldquo;r\u0026rdquo;],[\u0026ldquo;i\u0026rdquo;,\u0026ldquo;f\u0026rdquo;,\u0026ldquo;l\u0026rdquo;,\u0026ldquo;v\u0026rdquo;]], words = [\u0026ldquo;oath\u0026rdquo;,\u0026ldquo;pea\u0026rdquo;,\u0026ldquo;eat\u0026rdquo;,\u0026ldquo;rain\u0026rdquo;]\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e [\u0026ldquo;eat\u0026rdquo;,\u0026ldquo;oath\u0026rdquo;]\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e","title":"[LeetCode] 212. Word Search II"},{"content":"2131. Longest Palindrome by Concatenating Two Letter Words\nHardness: \\(\\color{orange}\\textsf{Medium}\\) Ralated Topics: Array、Hash Table、String、Greedy、Counting 一、題目 You are given an array of strings words. Each element of words consists of two lowercase English letters.\nCreate the longest possible palindrome by selecting some elements from words and concatenating them in any order. Each element can be selected at most once.\nReturn the length of the longest palindrome that you can create. If it is impossible to create any palindrome, return 0.\nA palindrome is a string that reads the same forward and backward.\nExample 1:\nInput: words = [\u0026ldquo;lc\u0026rdquo;,\u0026ldquo;cl\u0026rdquo;,\u0026ldquo;gg\u0026rdquo;] Output: 6 Explanation: One longest palindrome is \u0026ldquo;lc\u0026rdquo; + \u0026ldquo;gg\u0026rdquo; + \u0026ldquo;cl\u0026rdquo; = \u0026ldquo;lcggcl\u0026rdquo;, of length 6. Note that \u0026ldquo;clgglc\u0026rdquo; is another longest palindrome that can be created. Example 2:\nInput: words = [\u0026ldquo;ab\u0026rdquo;,\u0026ldquo;ty\u0026rdquo;,\u0026ldquo;yt\u0026rdquo;,\u0026ldquo;lc\u0026rdquo;,\u0026ldquo;cl\u0026rdquo;,\u0026ldquo;ab\u0026rdquo;] Output: 8 Explanation:: One longest palindrome is \u0026ldquo;ty\u0026rdquo; + \u0026ldquo;lc\u0026rdquo; + \u0026ldquo;cl\u0026rdquo; + \u0026ldquo;yt\u0026rdquo; = \u0026ldquo;tylcclyt\u0026rdquo;, of length 8. Note that \u0026ldquo;lcyttycl\u0026rdquo; is another longest palindrome that can be created. Example 3:\nInput: words = [\u0026ldquo;cc\u0026rdquo;,\u0026ldquo;ll\u0026rdquo;,\u0026ldquo;xx\u0026rdquo;] Output: 2 Explanation: One longest palindrome is \u0026ldquo;cc\u0026rdquo;, of length 2. Note that \u0026ldquo;ll\u0026rdquo; is another longest palindrome that can be created, and so is \u0026ldquo;xx\u0026rdquo;. Constraints:\n1 \u0026lt;= words.length \u0026lt;= 10^5 words[i].length == 2 words[i] consists of lowercase English letters. 二、分析 此題可以利用 HashTable 來記錄有多少配對成功。 s[0] == t[1] \u0026amp;\u0026amp; s[1] == t[0]，所以可以檢查 map.count(word[1] + word[0]) 是否有在。 特別注意當 s[0] == s[1] 的時候，可以單獨擺在中間對稱也能成立，但要注意配對過的不能算。 三、解題 1. Hash Table Time complexity: \\(O(n)\\) Space complexity: \\(O(n)\\) int longestPalindrome(vector\u0026lt;string\u0026gt;\u0026amp; words) { unordered_map\u0026lt;string, int\u0026gt; paired; unordered_set\u0026lt;string\u0026gt; twin; int cnt = 0; for (string\u0026amp; word : words) { if (word[0] == word[1]) { if (twin.count(word)) { twin.erase(word); cnt += 4; } else { twin.insert(word); } } else { string rev = {word[1], word[0]}; if (paired.count(rev) \u0026amp;\u0026amp; paired[rev] \u0026gt; 0) { paired[rev]--; cnt += 4; } else { paired[word]++; } } } return cnt + (!twin.empty() ? 2 : 0); } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/2131/","summary":"\u003cp\u003e\u003cstrong\u003e2131. Longest Palindrome by Concatenating Two Letter Words\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{orange}\\textsf{Medium}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eArray\u003c/code\u003e、\u003ccode\u003eHash Table\u003c/code\u003e、\u003ccode\u003eString\u003c/code\u003e、\u003ccode\u003eGreedy\u003c/code\u003e、\u003ccode\u003eCounting\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eYou are given an array of strings \u003ccode\u003ewords\u003c/code\u003e. Each element of \u003ccode\u003ewords\u003c/code\u003e consists of \u003cstrong\u003etwo\u003c/strong\u003e lowercase English letters.\u003cbr\u003e\nCreate the \u003cstrong\u003elongest possible palindrome\u003c/strong\u003e by selecting some elements from \u003ccode\u003ewords\u003c/code\u003e and concatenating them in \u003cstrong\u003eany order\u003c/strong\u003e. Each element can be selected \u003cstrong\u003eat most once\u003c/strong\u003e.\u003cbr\u003e\n\u003cem\u003eReturn the\u003c/em\u003e \u003cem\u003e\u003cstrong\u003elength\u003c/strong\u003e\u003c/em\u003e \u003cem\u003eof the longest palindrome that you can create\u003c/em\u003e. If it is impossible to create any palindrome, return \u003ccode\u003e0\u003c/code\u003e.\u003c/p\u003e","title":"[LeetCode] 2131. Longest Palindrome by Concatenating Two Letter Words"},{"content":"433. Minimum Genetic Mutation\nHardness: \\(\\color{orange}\\textsf{Medium}\\) Ralated Topics: Hash Table、String、Breadth-First Search 一、題目 A gene string can be represented by an 8-character long string, with choices from A, C, G, and T.\nSuppose we need to investigate a mutation from a gene string start to a gene string end where one mutation is defined as one single character changed in the gene string.\nFor example, \u0026quot;AACCGGTT\u0026quot; --\u0026gt; \u0026quot;AACCGGTA\u0026quot; is one mutation.\nThere is also a gene bank bank that records all the valid gene mutations. A gene must be in bank to make it a valid gene string.\nGiven the two gene strings start and end and the gene bank bank, return the minimum number of mutations needed to mutate from start to end. If there is no such a mutation, return -1.\nNote that the starting point is assumed to be valid, so it might not be included in the bank. Example 1:\nInput: start = \u0026ldquo;AACCGGTT\u0026rdquo;, end = \u0026ldquo;AACCGGTA\u0026rdquo;, bank = [\u0026ldquo;AACCGGTA\u0026rdquo;] Output: 1 Example 2:\nInput: start = \u0026ldquo;AACCGGTT\u0026rdquo;, end = \u0026ldquo;AAACGGTA\u0026rdquo;, bank = [\u0026ldquo;AACCGGTA\u0026rdquo;,\u0026ldquo;AACCGCTA\u0026rdquo;,\u0026ldquo;AAACGGTA\u0026rdquo;] Output: 2 Example 3:\nInput: start = \u0026ldquo;AAAAACCC\u0026rdquo;, end = \u0026ldquo;AACCCCCC\u0026rdquo;, bank = [\u0026ldquo;AAAACCCC\u0026rdquo;,\u0026ldquo;AAACCCCC\u0026rdquo;,\u0026ldquo;AACCCCCC\u0026rdquo;] Output: 3 Constraints:\nstart.length == 8 end.length == 8 0 \u0026lt;= bank.length \u0026lt;= 10 bank[i].length == 8 start, end, and bank[i] consist of only the characters ['A', 'C', 'G', 'T']. 二、分析 用 BFS 的策略，可以找到最快到達的路徑。 相互比較 gene string 是否是相鄰(mutation)，效率不如取代字元再去找是否存在路徑。 三、解題 1. BFS Time complexity: \\(O(n)\\) Space complexity: \\(O(n)\\) const string code = \u0026#34;ATCG\u0026#34;; int minMutation(string start, string end, vector\u0026lt;string\u0026gt;\u0026amp; bank) { unordered_set\u0026lt;string\u0026gt; set(bank.begin(), bank.end()); if (!set.count(end)) return -1; queue\u0026lt;string\u0026gt; q; q.push(start); int cnt = 0; while (!q.empty()) { int sz = q.size(); while (sz--) { string curr = q.front(); q.pop(); if (curr == end) return cnt; set.erase(curr); for (int i = 0; i \u0026lt; start.length(); i++) { string tmp = curr; for (char c : code){ tmp[i] = c; if (set.count(tmp)) q.push(tmp); } } } cnt++; } return -1; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/433/","summary":"\u003cp\u003e\u003cstrong\u003e433. Minimum Genetic Mutation\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{orange}\\textsf{Medium}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eHash Table\u003c/code\u003e、\u003ccode\u003eString\u003c/code\u003e、\u003ccode\u003eBreadth-First Search\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eA gene string can be represented by an 8-character long string, with choices from \u003ccode\u003eA\u003c/code\u003e, \u003ccode\u003eC\u003c/code\u003e, \u003ccode\u003eG\u003c/code\u003e, and \u003ccode\u003eT\u003c/code\u003e.\u003cbr\u003e\nSuppose we need to investigate a mutation from a gene string \u003ccode\u003estart\u003c/code\u003e to a gene string \u003ccode\u003eend\u003c/code\u003e where one mutation is defined as one single character changed in the gene string.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFor example, \u003ccode\u003e\u0026quot;AACCGGTT\u0026quot; --\u0026gt; \u0026quot;AACCGGTA\u0026quot;\u003c/code\u003e is one mutation.\u003cbr\u003e\nThere is also a gene bank \u003ccode\u003ebank\u003c/code\u003e that records all the valid gene mutations. A gene must be in \u003ccode\u003ebank\u003c/code\u003e to make it a valid gene string.\u003cbr\u003e\nGiven the two gene strings \u003ccode\u003estart\u003c/code\u003e and \u003ccode\u003eend\u003c/code\u003e and the gene bank \u003ccode\u003ebank\u003c/code\u003e, return the \u003cem\u003eminimum number of mutations needed to mutate from\u003c/em\u003e \u003ccode\u003estart\u003c/code\u003e \u003cem\u003eto\u003c/em\u003e \u003ccode\u003eend\u003c/code\u003e. If there is no such a mutation, return \u003ccode\u003e-1\u003c/code\u003e.\u003cbr\u003e\nNote that the starting point is assumed to be valid, so it might not be included in the bank.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e","title":"[LeetCode] 433. Minimum Genetic Mutation"},{"content":"20. Valid Parentheses\nHardness: \\(\\color{green}\\textsf{Easy}\\) Ralated Topics: String、Stack 一、題目 Given a string s containing just the characters (, ), {, }, [ and ], determine if the input string is valid.\nAn input string is valid if:\nOpen brackets must be closed by the same type of brackets. Open brackets must be closed in the correct order. Every close bracket has a corresponding open bracket of the same type. Example 1:\nInput: s = \u0026ldquo;()\u0026rdquo; Output: true Example 2:\nInput: s = \u0026ldquo;()[]{}\u0026rdquo; Output: true Example 3:\nInput: s = \u0026ldquo;(]\u0026rdquo; Output: false Constraints:\n1 \u0026lt;= s.length \u0026lt;= 10^4 s consists of parentheses only ()[]{}. 二、分析 利用 stack 來解題。 遇到左括號時，將括號推至 stack 上，\n遇到右括號時，確認 stack 頂端是否為對應的括號，否則回傳 false。 最後所有的括號都有配對到時，stack 必須為空。 三、解題 1. Stack Time complexity: \\(O(n)\\) Space complexity: \\(O(1)\\) unordered_map\u0026lt;char,char\u0026gt; map = {{\u0026#39;[\u0026#39;,\u0026#39;]\u0026#39;}, {\u0026#39;(\u0026#39;,\u0026#39;)\u0026#39;}, {\u0026#39;{\u0026#39;,\u0026#39;}\u0026#39;}}; bool isValid(string s) { stack\u0026lt;char\u0026gt; st; for (int i = 0; i \u0026lt; s.length(); i++) { if (s[i] == \u0026#39;[\u0026#39; || s[i] == \u0026#39;(\u0026#39; || s[i] == \u0026#39;{\u0026#39;) { // 左括號推到 stack 上 st.push(s[i]); } else { if (st.empty() || s[i] != map[st.top()]) return false; // 右括號檢查 stack 是否有配對到 st.pop(); } } return st.empty(); // 檢查 stack 是否為空 } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/20/","summary":"\u003cp\u003e\u003cstrong\u003e20. Valid Parentheses\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{green}\\textsf{Easy}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eString\u003c/code\u003e、\u003ccode\u003eStack\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eGiven a string \u003ccode\u003es\u003c/code\u003e containing just the characters \u003ccode\u003e(\u003c/code\u003e, \u003ccode\u003e)\u003c/code\u003e, \u003ccode\u003e{\u003c/code\u003e, \u003ccode\u003e}\u003c/code\u003e, \u003ccode\u003e[\u003c/code\u003e and \u003ccode\u003e]\u003c/code\u003e, determine if the input string is valid.\u003cbr\u003e\nAn input string is valid if:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eOpen brackets must be closed by the same type of brackets.\u003c/li\u003e\n\u003cli\u003eOpen brackets must be closed in the correct order.\u003c/li\u003e\n\u003cli\u003eEvery close bracket has a corresponding open bracket of the same type.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e","title":"[LeetCode] 20. Valid Parentheses"},{"content":"1706. Where Will the Ball Fall\nHardness: \\(\\color{orange}\\textsf{Medium}\\) Ralated Topics: Array、Dynamic Programming、Depth-First Search、Matrix、Simulation 一、題目 You have a 2-D grid of size m x n representing a box, and you have n balls. The box is open on the top and bottom sides.\nEach cell in the box has a diagonal board spanning two corners of the cell that can redirect a ball to the right or to the left.\nA board that redirects the ball to the right spans the top-left corner to the bottom-right corner and is represented in the grid as 1. A board that redirects the ball to the left spans the top-right corner to the bottom-left corner and is represented in the grid as -1.\nWe drop one ball at the top of each column of the box. Each ball can get stuck in the box or fall out of the bottom. A ball get stuck if it hits a \u0026ldquo;V\u0026rdquo; shaped pattern between two boards or if a board redirects the ball into either wall of the box.\nReturn an array answer of size n where answer[i] is the column that the ball falls out of at the bottom after dropping the ball from the ith column at the top, or -1 if the ball gets stuck in the box. Example 1:\nInput: grid = [[1,1,1,-1,-1],[1,1,1,-1,-1],[-1,-1,-1,1,1],[1,1,1,1,-1],[-1,-1,-1,-1,-1]] Output: [1,-1,-1,-1,-1] Explanation: This example is shown in the photo.\nBall b0 is dropped at column 0 and falls out of the box at column 1.\nBall b1 is dropped at column 1 and will get stuck in the box between column 2 and 3 and row 1.\nBall b2 is dropped at column 2 and will get stuck on the box between column 2 and 3 and row 0.\nBall b3 is dropped at column 3 and will get stuck on the box between column 2 and 3 and row 0.\nBall b4 is dropped at column 4 and will get stuck on the box between column 2 and 3 and row 1. Example 2:\nInput: grid = [[-1]] Output: [-1] Explanation: The ball gets stuck against the left wall. Example 3:\nInput: grid = [[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1],[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1]] Output: [0,1,2,3,4,-1] Constraints:\nm == grid.length n == grid[i].length 1 \u0026lt;= m, n \u0026lt;= 100 grid[i][j] is 1 or -1. 二、分析 這一題根據題意，球在落下的過程中，若碰到v-型或是牆，都會被卡住，可以歸納出下面幾條規則：(假設以 col 代表球的位置) grid[row][0] == -1 與 grid[row][n-1] == 1 代表撞到牆 當 grid[row][col] == 1 且 grid[row][col+1] == 1 時球可以落下。\n或 grid[row][col] == -1 且 grid[row][col-1] == -1 時球可以落下。 三、解題 1. DP Time complexity: \\(O(m\\times n)\\) Space complexity: \\(O(n)\\) vector\u0026lt;int\u0026gt; findBall(vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; grid) { int m = grid.size(), n = grid[0].size(); vector\u0026lt;int\u0026gt; state; for (int col = 0; col \u0026lt; grid[0].size(); col++) state.push_back(col); // 初始化球當前的位置 for (auto\u0026amp; boards : grid) { for (int col = 0; col \u0026lt; n; col++) { if (state[col] == -1) continue; // 球已經卡住了 int\u0026amp; pos = state[col]; if ((pos == 0 \u0026amp;\u0026amp; boards[pos] == -1) || (pos == n-1 \u0026amp;\u0026amp; boards[pos] == 1)) // 撞牆 pos = -1; else if (boards[pos] == 1 \u0026amp;\u0026amp; boards[pos+1] == 1) // 球往右移 pos += 1; else if (boards[pos] == -1 \u0026amp;\u0026amp; boards[pos-1] == -1) // 球往左移 pos -= 1; else // 球卡住 pos = -1; } } return state; } 2. DFS Time complexity: \\(O(m\\times n)\\) Space complexity: \\(O(n)\\) int m, n; vector\u0026lt;int\u0026gt; findBall(vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; grid) { m = grid.size(), n = grid[0].size(); vector\u0026lt;int\u0026gt; res(n); for (int col = 0; col \u0026lt; n; col++) { res[col] = dfs(grid, 0, col); } return res; } int dfs(vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; grid, int row, int col) { if (row == m) return col; // 終止條件: 落地 if (col \u0026lt; 0 || col \u0026gt;= n) return -1; // 撞牆 if (col+1 \u0026lt; n \u0026amp;\u0026amp; grid[row][col] == 1 \u0026amp;\u0026amp; grid[row][col+1] == 1) // 右移 return dfs(grid, row+1, col+1); if (col-1 \u0026gt;= 0 \u0026amp;\u0026amp; grid[row][col] == -1 \u0026amp;\u0026amp; grid[row][col-1] == -1) // 左移 return dfs(grid, row+1, col-1); return -1; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/1706/","summary":"\u003cp\u003e\u003cstrong\u003e1706. Where Will the Ball Fall\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{orange}\\textsf{Medium}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eArray\u003c/code\u003e、\u003ccode\u003eDynamic Programming\u003c/code\u003e、\u003ccode\u003eDepth-First Search\u003c/code\u003e、\u003ccode\u003eMatrix\u003c/code\u003e、\u003ccode\u003eSimulation\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eYou have a 2-D \u003ccode\u003egrid\u003c/code\u003e of size \u003ccode\u003em x n\u003c/code\u003e representing a box, and you have \u003ccode\u003en\u003c/code\u003e balls. The box is open on the top and bottom sides.\u003cbr\u003e\nEach cell in the box has a diagonal board spanning two corners of the cell that can redirect a ball to the right or to the left.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eA board that redirects the ball to the right spans the top-left corner to the bottom-right corner and is represented in the grid as \u003ccode\u003e1\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eA board that redirects the ball to the left spans the top-right corner to the bottom-left corner and is represented in the grid as \u003ccode\u003e-1\u003c/code\u003e.\u003cbr\u003e\nWe drop one ball at the top of each column of the box. Each ball can get stuck in the box or fall out of the bottom. A ball get stuck if it hits a \u0026ldquo;V\u0026rdquo; shaped pattern between two boards or if a board redirects the ball into either wall of the box.\u003cbr\u003e\nReturn \u003cem\u003ean array\u003c/em\u003e \u003ccode\u003eanswer\u003c/code\u003e \u003cem\u003eof size\u003c/em\u003e \u003ccode\u003en\u003c/code\u003e \u003cem\u003ewhere\u003c/em\u003e \u003ccode\u003eanswer[i]\u003c/code\u003e \u003cem\u003eis the column that the ball falls out of at the bottom after dropping the ball from the\u003c/em\u003e \u003ccode\u003eith\u003c/code\u003e \u003cem\u003ecolumn at the top, or\u003c/em\u003e \u003ccode\u003e-1\u003c/code\u003e \u003cem\u003eif the ball gets stuck in the box.\u003c/em\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003cbr\u003e\n\u003cimg alt=\"ball\" loading=\"lazy\" src=\"https://assets.leetcode.com/uploads/2019/09/26/ball.jpg\"\u003e\u003c/p\u003e","title":"[LeetCode] 1706. Where Will the Ball Fall"},{"content":"766. Toeplitz Matrix\nHardness: \\(\\color{green}\\textsf{Easy}\\) Ralated Topics: Array、Matrix 一、題目 Given an m x n matrix, return true if the matrix is Toeplitz. Otherwise, return false. A matrix is Toeplitz if every diagonal from top-left to bottom-right has the same elements.\nExample 1:\nInput: matrix = [[1,2,3,4],[5,1,2,3],[9,5,1,2]] Output: true Explanation:\nIn the above grid, the diagonals are:\n\u0026ldquo;[9]\u0026rdquo;, \u0026ldquo;[5, 5]\u0026rdquo;, \u0026ldquo;[1, 1, 1]\u0026rdquo;, \u0026ldquo;[2, 2, 2]\u0026rdquo;, \u0026ldquo;[3, 3]\u0026rdquo;, \u0026ldquo;[4]\u0026rdquo;.\nIn each diagonal all elements are the same, so the answer is True. Example 2: Input: matrix = [[1,2],[2,2]] Output: false Explanation:\nThe diagonal \u0026ldquo;[1, 2]\u0026rdquo; has different elements. Constraints:\nm == matrix.length n == matrix[i].length 1 \u0026lt;= m, n \u0026lt;= 20 0 \u0026lt;= matrix[i][j] \u0026lt;= 99 Follow up:\nWhat if the matrix is store on disk, and the memory is limited such that you can only load at most one row of the matrix into memory at once? What if the matrix is so large that you can only load up a partial row into memory at once? 二、分析 根據題意，除了第一行與第一列外，逐個去檢查與左上角的值是否相同。 三、解題 1. Simple traversal Time complexity: \\(O(m\\times n)\\) Space complexity: \\(O(1)\\) bool isToeplitzMatrix(vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; matrix) { int m = matrix.size(), n = matrix[0].size(); for (int i = 1; i \u0026lt; m; i++) { for (int j = 1; j \u0026lt; n; j++) { if (matrix[i][j] != matrix[i-1][j-1]) return false; } } return true; } 2. Follow up #1: load at most one row Time complexity: \\(O(m\\times n)\\) Space complexity: \\(O(n)\\) bool isToeplitzMatrix(vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; matrix) { deque\u0026lt;int\u0026gt; buffer; for (int j = 0; j \u0026lt; matrix[0].size()-1; j++) buffer.push_back(matrix[0][j]); // 一次處理一行 for (int i = 1; i \u0026lt; matrix.size(); i++) { for (int j = 1; j \u0026lt; matrix[0].size(); j++) { if (buffer.front() != matrix[i][j]) return false; buffer.pop_front(); buffer.push_back(matrix[i][j]); } buffer.push_front(matrix[i][0]); buffer.pop_back(); } return true; } 3. Follow up #2: load partial row/column each time bool isToeplitzMatrix(vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; matrix) { int m = matrix.size(), n = matrix[0].size(); queue\u0026lt;pair\u0026lt;int,int\u0026gt;\u0026gt; q; for (int i = m-1; i \u0026gt; 0; i--) q.push({i, 0}); for (int i = 0 ; i \u0026lt; n; i++) q.push({0, i}); while (!q.empty()) { auto info = q.front(); q.pop(); int row = info.first; int col = info.second; int val = matrix[row][col]; while (++row \u0026lt; m \u0026amp;\u0026amp; ++col \u0026lt; n) { if (matrix[row][col] != val) return false; } } return true; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/766/","summary":"\u003cp\u003e\u003cstrong\u003e766. Toeplitz Matrix\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{green}\\textsf{Easy}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eArray\u003c/code\u003e、\u003ccode\u003eMatrix\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eGiven an \u003ccode\u003em x n\u003c/code\u003e \u003ccode\u003ematrix\u003c/code\u003e, return \u003cem\u003e\u003ccode\u003etrue\u003c/code\u003e if the matrix is Toeplitz. Otherwise, return \u003ccode\u003efalse\u003c/code\u003e\u003c/em\u003e. A matrix is \u003cstrong\u003eToeplitz\u003c/strong\u003e if every diagonal from top-left to bottom-right has the same elements.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003cbr\u003e\n\u003cimg alt=\"ex1\" loading=\"lazy\" src=\"https://assets.leetcode.com/uploads/2020/11/04/ex1.jpg\"\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInput:\u003c/strong\u003e matrix = [[1,2,3,4],[5,1,2,3],[9,5,1,2]]\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e true\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003cbr\u003e\nIn the above grid, the diagonals are:\u003cbr\u003e\n\u0026ldquo;[9]\u0026rdquo;, \u0026ldquo;[5, 5]\u0026rdquo;, \u0026ldquo;[1, 1, 1]\u0026rdquo;, \u0026ldquo;[2, 2, 2]\u0026rdquo;, \u0026ldquo;[3, 3]\u0026rdquo;, \u0026ldquo;[4]\u0026rdquo;.\u003cbr\u003e\nIn each diagonal all elements are the same, so the answer is True.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\n\u003cimg alt=\"ex2\" loading=\"lazy\" src=\"https://assets.leetcode.com/uploads/2020/11/04/ex2.jpg\"\u003e\u003c/p\u003e","title":"[LeetCode] 766. Toeplitz Matrix"},{"content":"19. Remove Nth Node From End of List\nHardness: \\(\\color{orange}\\textsf{Medium}\\) Ralated Topics: Linked List、Two Pointers 一、題目 Given the head of a linked list, remove the nth node from the end of the list and return its head.\nExample 1:\nInput: head = [1,2,3,4,5], n = 2 Output: [1,2,3,5] Example 2:\nInput: head = [1], n = 1 Output: [] Example 3:\nInput: head = [1,2], n = 1 Output: [1] Constraints:\nThe number of nodes in the list is sz. 1 \u0026lt;= sz \u0026lt;= 30 0 \u0026lt;= Node.val \u0026lt;= 100 1 \u0026lt;= n \u0026lt;= sz 二、分析 這是經典的鏈表問題，可以先遍歷一遍求得鏈表長度後，再去要刪去的節點從頭數是第幾個節點，接著找到該節點的前一個節點，再刪去該節點。 更聰明的方法是使用前後指針，利用前指針先前進 n 步後，前後指針同時往前等速移動，後指針到達鏈表尾時，前指針正好指向從鏈表尾部數倒數第 n 個節點。 三、解題 1. Straight Forward Time complexity: \\(O(n)\\) Space complexity: \\(O(1)\\) ListNode* removeNthFromEnd(ListNode* head, int n) { ListNode* dummy = new ListNode(-1, head); int len = 0; ListNode* curr = head; while (curr) { // 先求鏈表長度 len++; curr = curr-\u0026gt;next; } len -= n; // 求欲刪除的節點往頭算是第幾個節點 curr = dummy; while (len--) curr = curr-\u0026gt;next; // 移動至該節點前 curr-\u0026gt;next = curr-\u0026gt;next-\u0026gt;next; // 移除節點 return dummy-\u0026gt;next; } 2. Two Pointers Time complexity: \\(O(n)\\) Space complexity: \\(O(1)\\) ListNode* removeNthFromEnd(ListNode* head, int n) { ListNode* dummy = new ListNode(-1, head); ListNode* fast = dummy, *slow = dummy; while (n--) fast = fast-\u0026gt;next; // 前指針先走 n 步 while (fast-\u0026gt;next) { // 前後指針等速移動至前指針走完 fast = fast-\u0026gt;next; slow = slow-\u0026gt;next; } slow-\u0026gt;next = slow-\u0026gt;next-\u0026gt;next; // 移除節點 return dummy-\u0026gt;next; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/19/","summary":"\u003cp\u003e\u003cstrong\u003e19. Remove Nth Node From End of List\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{orange}\\textsf{Medium}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eLinked List\u003c/code\u003e、\u003ccode\u003eTwo Pointers\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eGiven the \u003ccode\u003ehead\u003c/code\u003e of a linked list, remove the \u003ccode\u003enth\u003c/code\u003e node from the end of the list and return its head.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003cbr\u003e\n\u003cimg alt=\"remove_ex1\" loading=\"lazy\" src=\"https://assets.leetcode.com/uploads/2020/10/03/remove_ex1.jpg\"\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInput:\u003c/strong\u003e head = [1,2,3,4,5], n = 2\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e [1,2,3,5]\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInput:\u003c/strong\u003e head = [1], n = 1\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e []\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInput:\u003c/strong\u003e head = [1,2], n = 1\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e [1]\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e","title":"[LeetCode] 19. Remove Nth Node From End of List"},{"content":"1293. Shortest Path in a Grid with Obstacles Elimination\nHardness: \\(\\color{red}\\textsf{Hard}\\) Ralated Topics: Array、Breadth-First Search、Matrix 一、題目 You are given an m x n integer matrix grid where each cell is either 0 (empty) or 1 (obstacles). You can move up, down, left, or right from and to an empty cell in one step.\nReturn the minimum number of steps to walk from the upper left corner (0, 0) to the lower right conrer m-1, n-1 given that you can eliminate at most k obstacles. If it is not possible to find such walk return -1.\nExample 1:\nInput: grid = [[0,0,0],[1,1,0],[0,0,0],[0,1,1],[0,0,0]], k = 1 Output: 6 Explanation:\nThe shortest path without eliminating any obstacle is 10.\nThe shortest path with one obstacle elimination at position (3,2) is 6. Such path is (0,0) -\u0026gt; (0,1) -\u0026gt; (0,2) -\u0026gt; (1,2) -\u0026gt; (2,2) -\u0026gt; (3,2) -\u0026gt; (4,2). Example 2: Input: grid = [[0,1,1],[1,1,1],[1,0,0]], k = 1 Output: -1 Explanation:\nWe need to eliminate at least two obstacles to find such a walk. Constraints:\nm == grid.length n == grid[i].length 1 \u0026lt;= m, n \u0026lt;= 40 1 \u0026lt;= k \u0026lt;= m * n grid[i][j] is either 0 or 1. grid[0][0] == grid[m - 1][n - 1] == 0 二、分析 本題可以搭配 BFS，最早滿足終止條件時，回傳即為最短路徑。 由於本題並非可以單純的藉 visited 來記錄是否拜訪過，因為多了一個變數 k，所以在此可以將 vector\u0026lt;vector\u0026lt;bool\u0026gt;\u0026gt; visited 換成 vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; visited，並將記錄的值改成剩餘可消除障礙物的次數，依 greedy 的想法，在走同樣的距離下，剩餘可消除障礙物的次數愈多愈好，故我們可將拜訪過，但「剩餘次數少於或等於 visited[row][col]」的節點跳過。 三、解題 1. BFS Time complexity: \\(O(m\\times n\\times k)\\) Space complexity: \\(O(m\\times n)\\) int dirc[4][2] = {{1,0},{0,1},{-1,0},{0,-1}}; int shortestPath(vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; grid, int k) { int m = grid.size(), n = grid[0].size(); vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; visited(m, vector\u0026lt;int\u0026gt;(n, -1)); // 餘愈多愈好，故預設為 -1 queue\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; q; // {row, col, len, k} q.push({0,0,0,k}); while (!q.empty()) { auto info = q.front(); q.pop(); int row = info[0]; int col = info[1]; int len = info[2]; int bomb = info[3]; // 超出範圍 out of bound if (row \u0026lt; 0 || col \u0026lt; 0 || row \u0026gt;= m || col \u0026gt;= n) continue; // 終止條件，到達右下角 if (row == m-1 \u0026amp;\u0026amp; col == n-1) return len; // 遇到障礙物 if (grid[row][col] == 1) { if (bomb \u0026gt; 0) bomb--; else continue; } // 減枝：拜訪過且剩餘次數較少者跳過 if (visited[row][col] \u0026gt;= bomb) continue; visited[row][col] = bomb; // 將下一步加入佇列 for (const auto\u0026amp; d : dirc){ q.push({row+d[0], col+d[1], len+1, bomb}); } } return -1; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/1293/","summary":"\u003cp\u003e\u003cstrong\u003e1293. Shortest Path in a Grid with Obstacles Elimination\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{red}\\textsf{Hard}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eArray\u003c/code\u003e、\u003ccode\u003eBreadth-First Search\u003c/code\u003e、\u003ccode\u003eMatrix\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eYou are given an \u003ccode\u003em x n\u003c/code\u003e integer matrix \u003ccode\u003egrid\u003c/code\u003e where each cell is either \u003ccode\u003e0\u003c/code\u003e (empty) or \u003ccode\u003e1\u003c/code\u003e (obstacles). You can move up, down, left, or right from and to an empty cell in \u003cstrong\u003eone step\u003c/strong\u003e.\u003cbr\u003e\nReturn \u003cem\u003ethe minimum number of\u003c/em\u003e \u003cem\u003e\u003cstrong\u003esteps\u003c/strong\u003e\u003c/em\u003e \u003cem\u003eto walk from the upper left corner\u003c/em\u003e \u003ccode\u003e(0, 0)\u003c/code\u003e \u003cem\u003eto the lower right conrer\u003c/em\u003e \u003ccode\u003em-1, n-1\u003c/code\u003e \u003cem\u003egiven that you can eliminate\u003c/em\u003e \u003cem\u003e\u003cstrong\u003eat most\u003c/strong\u003e\u003c/em\u003e \u003ccode\u003ek\u003c/code\u003e \u003cem\u003eobstacles\u003c/em\u003e. If it is not possible to find such walk return \u003ccode\u003e-1\u003c/code\u003e.\u003c/p\u003e","title":"[LeetCode] 1293. Shortest Path in a Grid with Obstacles Elimination"},{"content":"2136. Earliest Possible Day of Full Bloom\nHardness: \\(\\color{red}\\textsf{Hard}\\) Ralated Topics: Array、Greedy、Sorting 一、題目 You have n flower seeds. Every seed must be planted first before it can begin to grow, then bloom. Planting a seed take time and so does the growth of a seed. You are given two 0-indexed integer arrays plantTime and growTime, of length n each:\nplantTime[i] is the number of full days it takes you to plant the ith seed. Every day, you can work on planting exactly one seed. You do not have to work on planting the same seed on consecutive days, but the planting of a seed is not complete until you have worked plantTime[i] days on planting it in total. growTime[i] is the number of full days it takes the ith seed to grow after being completely planted. After the last day of its growth, the flower blooms and stays bloomed forever. From the beginning of day 0, you can plant the seeds in any order.\nReturn the earliest possible day where all seeds are blooming. Example 1:\nInput: plantTime = [1,4,3], growTime = [2,3,1] Output: 9 Explanation: The grayed out pots represent planting days, colored pots represent growing days, and the flower represents the day it blooms.\nOne optimal way is:\nOn day 0, plant the 0th seed. The seed grows for 2 full days and blooms on day 3.\nOn days 1, 2, 3, and 4, plant the 1st seed. The seed grows for 3 full days and blooms on day 8.\nOn days 5, 6, and 7, plant the 2nd seed. The seed grows for 1 full day and blooms on day 9.\nThus, on day 9, all the seeds are blooming. Example 2: Input: plantTime = [1,2,3,2], growTime = [2,1,2,1] Output: 9 Explanation: The grayed out pots represent planting days, colored pots represent growing days, and the flower represents the day it blooms.\nOne optimal way is:\nOn day 1, plant the 0th seed. The seed grows for 2 full days and blooms on day 4.\nOn days 0 and 3, plant the 1st seed. The seed grows for 1 full day and blooms on day 5.\nOn days 2, 4, and 5, plant the 2nd seed. The seed grows for 2 full days and blooms on day 8.\nOn days 6 and 7, plant the 3rd seed. The seed grows for 1 full day and blooms on day 9.\nThus, on day 9, all the seeds are blooming. Example 3:\nInput: plantTime = [1], growTime = [1] Output: 2 Explanation: On day 0, plant the 0th seed. The seed grows for 1 full day and blooms on day 2.\nThus, on day 2, all the seeds are blooming. Constraints:\nn == plantTime.length == growTime.length 1 \u0026lt;= n \u0026lt;= 10^5 1 \u0026lt;= plantTime[i], growTime[i] \u0026lt;= 10^4 二、分析 想像所有花是先長再種，其邏輯是長的時間是嚴格連續的，而種的時間是自由彈性的，所以我們先確保盡可能的讓所以花同時有動作在進行，再去彈性安排種的時間，用貪心法求解。 要注意當有一種花的 growTime 非常大時，其解會被該物件決定，變為 growTime[x] + plantTime[x]，故解不是簡單的 accumulate(plantTime.begin(), plantTime.end(), 0) + *min_element(growTime.begin(), growTime.end())。 三、解題 1. Greedy Time complexity: \\(O(n\\log n)\\) Space complexity: \\(O(n)\\) int earliestFullBloom(vector\u0026lt;int\u0026gt;\u0026amp; plantTime, vector\u0026lt;int\u0026gt;\u0026amp; growTime) { vector\u0026lt;pair\u0026lt;int, int\u0026gt;\u0026gt; v; for (int i = 0; i \u0026lt; plantTime.size(); ++i) v.push_back({growTime[i], plantTime[i]}); sort(begin(v), end(v)); int res = 0; for (auto [g, p] : v) res = max(res, g) + p; return res; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/2136/","summary":"\u003cp\u003e\u003cstrong\u003e2136. Earliest Possible Day of Full Bloom\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{red}\\textsf{Hard}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eArray\u003c/code\u003e、\u003ccode\u003eGreedy\u003c/code\u003e、\u003ccode\u003eSorting\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eYou have \u003ccode\u003en\u003c/code\u003e flower seeds. Every seed must be planted first before it can begin to grow, then bloom. Planting a seed take time and so does the growth of a seed. You are given two \u003cstrong\u003e0-indexed\u003c/strong\u003e integer arrays \u003ccode\u003eplantTime\u003c/code\u003e and \u003ccode\u003egrowTime\u003c/code\u003e, of length \u003ccode\u003en\u003c/code\u003e each:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eplantTime[i]\u003c/code\u003e is the number of \u003cstrong\u003efull days\u003c/strong\u003e it takes you to \u003cstrong\u003eplant\u003c/strong\u003e the \u003ccode\u003eith\u003c/code\u003e seed. Every day, you can work on planting exactly one seed. You \u003cstrong\u003edo not\u003c/strong\u003e have to work on planting the same seed on consecutive days, but the planting of a seed is not complete \u003cstrong\u003euntil\u003c/strong\u003e you have worked \u003ccode\u003eplantTime[i]\u003c/code\u003e days on planting it in total.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003egrowTime[i]\u003c/code\u003e is the number of \u003cstrong\u003efull days\u003c/strong\u003e it takes the \u003ccode\u003eith\u003c/code\u003e seed to grow after being completely planted. \u003cstrong\u003eAfter\u003c/strong\u003e the last day of its growth, the flower \u003cstrong\u003eblooms\u003c/strong\u003e and stays bloomed forever.\nFrom the beginning of day \u003ccode\u003e0\u003c/code\u003e, you can plant the seeds in \u003cstrong\u003eany\u003c/strong\u003e order.\u003cbr\u003e\nReturn \u003cem\u003ethe\u003c/em\u003e \u003cem\u003e\u003cstrong\u003eearliest\u003c/strong\u003e\u003c/em\u003e \u003cem\u003epossible day where\u003c/em\u003e \u003cem\u003e\u003cstrong\u003eall\u003c/strong\u003e\u003c/em\u003e \u003cem\u003eseeds are blooming\u003c/em\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003cbr\u003e\n\u003cimg alt=\"growplant1\" loading=\"lazy\" src=\"https://assets.leetcode.com/uploads/2021/12/21/1.png\"\u003e\u003c/p\u003e","title":"[LeetCode] 2136. Earliest Possible Day of Full Bloom"},{"content":"18. 4Sum\nHardness: \\(\\color{orange}\\textsf{Medium}\\) Ralated Topics: Array、Two Pointer、Sorting 一、題目 Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:\n0 \u0026lt;= a, b, c, d \u0026lt; n a, b, c and d are distinct. nums[a] + nums[b] + nums[c] + nums[d] == target You may return the answer in any order. Example 1:\nInput: nums = [1,0,-1,0,-2,2], target = 0 Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]] Example 2:\nInput: nums = [2,2,2,2,2], target = 8 Output: [[2,2,2,2]] Constraints:\n1 \u0026lt;= nums.length \u0026lt;= 200 -10^9 \u0026lt;= nums[i] \u0026lt;= 10^9 -10^9 \u0026lt;= target \u0026lt;= 10^9 二、分析 延續之前的 2Sum 跟 3Sum，大於 3 以上的 kSum 問題其實都是依樣畫葫蘆，其時間複雜度為 \\(O(k-1)\\)。 先試改寫 2Sum，先前為了達到最優解，採用的是 HashMap 的策略，但對於 k\u0026gt;2 時，因時間複雜度為 \\(O(n^{k-1})\\)，採用 Sorting 的時間複雜度為 \\(O(n\\log n)\\)。故以下會採用 Two Pointer 搭配 sorting 的策略去解題， 首先我們可以假設數組是已排序的，並參考 3Sum 去改寫 2Sum，並回傳滿足條件數字組合(注意與原題目不同)，且數組不重覆且為數列不為遞減： vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; twoSum(vector\u0026lt;int\u0026gt;\u0026amp; nums, int target, int start) { // nums 為 sorted array vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; res; int left = start; // 注意 left pointer 是從 nums[i] 的下一位開始，即 i+1，我們將之訂為 start int right = nums.size()-1; while (left \u0026lt; right) { int sum = nums[left] + nums[right]; if (sum \u0026lt; target) { while (left+1 \u0026lt; right \u0026amp;\u0026amp; nums[left] == nums[left+1]) left++; // 優化，跳過重覆的值 left++; } else if (sum \u0026gt; target) { while (right-1 \u0026gt; left \u0026amp;\u0026amp; nums[right-1] == nums[right]) right--; // 優化，跳過重覆的值 right--; } else { res.push_back({nums[left], nums[right]}); while (left+1 \u0026lt; right \u0026amp;\u0026amp; nums[left] == nums[left+1]) left++; // 避免重覆數組 while (right-1 \u0026gt; left \u0026amp;\u0026amp; nums[right-1] == nums[right]) right--; // 避免重覆數組 left++; right--; } } return res; } 接下來要求 3Sum 就很簡單了，我們只需要做下列兩件事： sort 代入 target 與 start，其中 target 便是 for (int i = 0; i \u0026lt; nums.size()-k+1; i++) { // 注意上限為 n-k+1 target = -nums[i]; // 注意為負 } 統整為下，[LeetCode]15. 3Sum： vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; threeSum(vector\u0026lt;int\u0026gt;\u0026amp; nums) { sort(nums.begin(), nums.end()) // 注意需先 sort vector\u0026lt;vector\u0026lt;in\u0026gt;\u0026gt; res; for (int i = 0; i \u0026lt; nums.size()-2; i++) { int target = -nums[i]; vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; subsets = twoSum(nums, target, i+1); for (vector\u0026lt;int\u0026gt;\u0026amp; subset : subsets) { res.push_back({nums[i]}); res.back().push_back(subset[0]); res.back().push_back(subset[1]); } while (i+1 \u0026lt; nums.size()-2 \u0026amp;\u0026amp; nums[i] == nums[i+1]) i++; } return res; } 接下來我們試著用上面 3Sum 改寫成最簡單版的 kSum： // 假設 nums 已為 sorted array，並配合題目限制將 target 改為 long long vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; kSum(vector\u0026lt;int\u0026gt;\u0026amp; nums, long long target, int start, int k) { vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; res; if (nums.size() \u0026lt; k) return res; // 若數組本身小於 k，則無解 if (k == 2) return twoSum(nums, target, start); for (int i = start; i \u0026lt; nums.size()-k+1; i++) { vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; subsets = kSum(nums, target-nums[i], i+1, k-1); for (vector\u0026lt;int\u0026gt;\u0026amp; subset : subsets) { res.push_back({nums[i]}); // 加入 nums[i] res.back().insert(end(res.back()), begin(subset), end(subset)); // 加入符合以 -nums[i] 為 target 的 (k-1)Sum } while (i+1 \u0026lt; nums.size()-k+1 \u0026amp;\u0026amp; nums[i] == nums[i+1]) i++; // 避免重覆數組解 } return res; } 三、解題 1. KSum Time complexity: \\(O(n^3)\\) Space complexity: \\(O(1)\\) vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; fourSum(vector\u0026lt;int\u0026gt;\u0026amp; nums, int target) { sort(begin(nums), end(nums)); // 注意需先做排序 return kSum(nums, target, 0, 4); } vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; kSum(vector\u0026lt;int\u0026gt;\u0026amp; nums, long long target, int start, int k) { vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; res; if (nums.size() \u0026lt; k) return res; // 若數組的大小小於 k 則無解 // #優化1: 數組已無剩餘數字可用 if (start == nums.size()) return res; // #優化2: 數組的最小值的 k 倍需大於 target，數組的最大值的 k 倍需小於 target，但用乘法會超出 int 範圍，故用除法 if (target/k \u0026lt; nums[start]|| target/4 \u0026gt; nums.back()) return res; if (k == 2) return twoSum(nums, target, start); for (int i = start; i \u0026lt; nums.size()-k+1; i++) { vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; subsets = kSum(nums, target-nums[i], i+1, k-1); for (vector\u0026lt;int\u0026gt;\u0026amp; subset : subsets) { res.push_back({nums[i]}); // 加入 nums[i] res.back().insert(end(res.back()), begin(subset), end(subset)); // 加入符合以 -nums[i] 為 target 的 (k-1)Sum } while (i+1 \u0026lt; nums.size()-k+1 \u0026amp;\u0026amp; nums[i] == nums[i+1]) i++; // 避免重覆數組解 } return res; } vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; twoSum(vector\u0026lt;int\u0026gt;\u0026amp; nums, int target, int start) { // nums 為 sorted array vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; res; int left = start; // 注意 left pointer 是從 nums[i] 的下一位開始，即 i+1，我們將之訂為 start int right = nums.size()-1; while (left \u0026lt; right) { int sum = nums[left] + nums[right]; if (sum \u0026lt; target) { while (left+1 \u0026lt; right \u0026amp;\u0026amp; nums[left] == nums[left+1]) left++; // 優化，跳過重覆的值 left++; } else if (sum \u0026gt; target) { while (right-1 \u0026gt; left \u0026amp;\u0026amp; nums[right-1] == nums[right]) right--; // 優化，跳過重覆的值 right--; } else { res.push_back({nums[left], nums[right]}); while (left+1 \u0026lt; right \u0026amp;\u0026amp; nums[left] == nums[left+1]) left++; // 避免重覆數組 while (right-1 \u0026gt; left \u0026amp;\u0026amp; nums[right-1] == nums[right]) right--; // 避免重覆數組 left++; right--; } } return res; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/18/","summary":"\u003cp\u003e\u003cstrong\u003e18. 4Sum\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{orange}\\textsf{Medium}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eArray\u003c/code\u003e、\u003ccode\u003eTwo Pointer\u003c/code\u003e、\u003ccode\u003eSorting\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eGiven an array \u003ccode\u003enums\u003c/code\u003e of \u003ccode\u003en\u003c/code\u003e integers, return \u003cem\u003ean array of all the\u003c/em\u003e \u003cem\u003e\u003cstrong\u003eunique\u003c/strong\u003e\u003c/em\u003e quadruplets \u003ccode\u003e[nums[a], nums[b], nums[c], nums[d]]\u003c/code\u003e such that:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e0 \u0026lt;= a, b, c, d \u0026lt; n\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ea\u003c/code\u003e, \u003ccode\u003eb\u003c/code\u003e, \u003ccode\u003ec\u003c/code\u003e and \u003ccode\u003ed\u003c/code\u003e are \u003cstrong\u003edistinct\u003c/strong\u003e.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enums[a] + nums[b] + nums[c] + nums[d] == target\u003c/code\u003e\nYou may return the answer in \u003cstrong\u003eany order\u003c/strong\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInput:\u003c/strong\u003e nums = [1,0,-1,0,-2,2], target = 0\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e","title":"[LeetCode] 18. 4Sum"},{"content":"17. Letter Combinations of a Phone Number\nHardness: \\(\\color{orange}\\textsf{Medium}\\) Ralated Topics: Hash Table,String,Backtracking 一、題目 Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order\nA mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.\nExample 1:\nInput: digits = \u0026ldquo;23\u0026rdquo; Output: [\u0026ldquo;ad\u0026rdquo;,\u0026ldquo;ae\u0026rdquo;,\u0026ldquo;af\u0026rdquo;,\u0026ldquo;bd\u0026rdquo;,\u0026ldquo;be\u0026rdquo;,\u0026ldquo;bf\u0026rdquo;,\u0026ldquo;cd\u0026rdquo;,\u0026ldquo;ce\u0026rdquo;,\u0026ldquo;cf\u0026rdquo;] Example 2:\nInput: \u0026quot;\u0026quot; Output: [] Example 3:\nInput: \u0026ldquo;2\u0026rdquo; Output: [\u0026ldquo;a\u0026rdquo;,\u0026ldquo;b\u0026rdquo;,\u0026ldquo;c\u0026rdquo;] Constraints:\n0 \u0026lt;= digits.length \u0026lt;= 4 digits[i] is a digit in the range ['2', '9']. 二、分析 DFS 演算法是在遍歷「節點」，而回溯法是在遍歷「樹枝」。站在一個節點上，需思考三個問題： 路徑(PATH)：已做出的選擇。 選項(OPTION)：當前可以做的選擇。 終止條件(TERMINATE)：到達決策樹的底層，無法再做其它選擇。 以下為回溯法的框架： vector\u0026lt;PATH\u0026gt; res; void backtrack(PATH, OPTION) { if (TERMINATE) { res.push_back(PATH); return; } for (CHOICE : OPTION) { DO OPTION; backtrack(PATH, OPTION); CANCEL OPTION; } } 三、解題 1. Backtracking Time complexity: \\(O(m\\times n)，\\text{m }為\\text{ digits }的長度，\\text{n }為\\text{ dict[i] }的長度\\)， Space complexity: \\(O(m\\times n)\\) vector\u0026lt;string\u0026gt; letterCombinations(string digits) { vector\u0026lt;string\u0026gt; dict = {\u0026#34;\u0026#34;, \u0026#34;\u0026#34;, \u0026#34;abc\u0026#34;, \u0026#34;def\u0026#34;, \u0026#34;ghi\u0026#34;, \u0026#34;jkl\u0026#34;, \u0026#34;mno\u0026#34;, \u0026#34;pqrs\u0026#34;, \u0026#34;tuv\u0026#34;, \u0026#34;wxyz\u0026#34;}; // 選項 vector\u0026lt;string\u0026gt; res; if (digits.empty()) return res; string path; // 路徑 backtrack(dict, res, path, digits); return res; } void backtrack(vector\u0026lt;string\u0026gt; dict, vector\u0026lt;string\u0026gt;\u0026amp; res, string\u0026amp; path, string\u0026amp; digits) { if (path.length() == digits.length()) { // 終止條件 res.push_back(path); // 記錄路徑 return; } int i = path.size(); string letters = dict[digits[i] - \u0026#39;0\u0026#39;]; for (char letter : letters) { path.push_back(letter); // 做選擇 backtrack(dict, res, path, digits); path.pop_back(); // 撤銷選擇 } } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/17/","summary":"\u003cp\u003e\u003cstrong\u003e17. Letter Combinations of a Phone Number\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{orange}\\textsf{Medium}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eHash Table\u003c/code\u003e,\u003ccode\u003eString\u003c/code\u003e,\u003ccode\u003eBacktracking\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eGiven a string containing digits from \u003ccode\u003e2-9\u003c/code\u003e inclusive, return all possible letter combinations that the number could represent. Return the answer in \u003cstrong\u003eany order\u003c/strong\u003e\u003cbr\u003e\nA mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.\u003cbr\u003e\n\u003cimg alt=\"1200px-telephone-keypad2svg\" loading=\"lazy\" src=\"https://assets.leetcode.com/uploads/2022/03/15/1200px-telephone-keypad2svg.png\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInput:\u003c/strong\u003e digits = \u0026ldquo;23\u0026rdquo;\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e [\u0026ldquo;ad\u0026rdquo;,\u0026ldquo;ae\u0026rdquo;,\u0026ldquo;af\u0026rdquo;,\u0026ldquo;bd\u0026rdquo;,\u0026ldquo;be\u0026rdquo;,\u0026ldquo;bf\u0026rdquo;,\u0026ldquo;cd\u0026rdquo;,\u0026ldquo;ce\u0026rdquo;,\u0026ldquo;cf\u0026rdquo;]\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e","title":"[LeetCode] 17. Letter Combinations of a Phone Number"},{"content":"no. \u003c/strong\u003e\n\u003cul\u003e \u003cli\u003eHardness: \\(\\color{orange}\\textsf{Medium}\\)\u003c/li\u003e \u003cli\u003eRalated Topics: \u003ccode\u003eArray\u003c/code\u003e、\u003ccode\u003eTwo Pointers\u003c/code\u003e、\u003ccode\u003eSorting\u003c/code\u003e\u003c/li\u003e \u003c/ul\u003e \u003chr\u003e \u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e \u003cp\u003eGiven an integer array \u003ccode\u003enums\u003c/code\u003e of length \u003ccode\u003en\u003c/code\u003e and an integer \u003ccode\u003etarget\u003c/code\u003e, find three integers in \u003ccode\u003enums\u003c/code\u003e such that the sum is closet to \u003ccode\u003etarget\u003c/code\u003e.\nReturn *the sum of the three integers`.\nYou may assume that each input would have exactly one solution.\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\n\u003cul\u003e \u003cli\u003e\u003cstrong\u003eInput:\u003c/strong\u003e nums = [-1,2,1,-4], target = 1\u003c/li\u003e \u003cli\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e 2\u003c/li\u003e \u003cli\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e The sum that is closet to the target is 2. (-1 + 2 + 1 = 2).\u003c/li\u003e \u003c/ul\u003e \u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\n\u003cul\u003e \u003cli\u003e\u003cstrong\u003eInput:\u003c/strong\u003e nums = [0,0,0], target = 1\u003c/li\u003e \u003cli\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e 0\u003c/li\u003e \u003cli\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e The sum that is closet to the target is 0. (0 + 0 + 0 = 0).\u003c/li\u003e \u003c/ul\u003e \u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\n\u003cul\u003e \u003cli\u003e\u003ccode\u003e3 \u0026lt;= nums.length \u0026lt;= 500\u003c/code\u003e\u003c/li\u003e \u003cli\u003e\u003ccode\u003e-1000 \u0026lt;= nums[i] \u0026lt;= 1000\u003c/code\u003e\u003c/li\u003e \u003cli\u003e\u003ccode\u003e-10^4 \u0026lt;= target \u0026lt;= 10^4\u003c/code\u003e\u003c/li\u003e \u003c/ul\u003e \u003chr\u003e \u003ch3 id=\"二分析\"\u003e二、分析\u003c/h3\u003e \u003cul\u003e \u003cli\u003e若用暴力解求解的話，時間複雜度為 \\(O(n^3)\\)。\u003c/li\u003e \u003cli\u003e故我們可以嘗試先進行排序來簡化問題，時間複雜度為\\(O(n\\log n)\\)。\u003c/li\u003e \u003cli\u003e此題因為是找最接近的，所以無法用 HashMap 解。\u003c/li\u003e \u003cli\u003e使用 Two Pointer，並藉由比較和與 \u003ccode\u003etarget\u003c/code\u003e 的差值來找到最接近的解。\u003c/li\u003e \u003c/ul\u003e \u003ch3 id=\"三解題\"\u003e三、解題\u003c/h3\u003e \u003ch4 id=\"1-two-pointer\"\u003e1. Two Pointer\u003c/h4\u003e \u003cul\u003e \u003cli\u003eTime complexity: \\(O(n^2)\\)\u003c/li\u003e \u003cli\u003eSpace complexity: \\(O(1)\\)\u003c/li\u003e \u003c/ul\u003e \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ethreeSumCloset\u003c/span\u003e(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e nums, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e target) { \u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e res \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e INT_MAX; \u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e nums.size(); \u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (n \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e accumulate(nums.begin(), nums.end(), \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e); \u003cspan style=\"color:#75715e\"\u003e// 當 n = 3 時，這三個值必為解。 \u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e sort(nums.begin(), nums.end()) \u003cspan style=\"color:#75715e\"\u003e// 排序 \u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e n\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e; i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) { \u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e left \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e i\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, right \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e n\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e; \u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (left \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e right) { \u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e sum \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e nums[i] \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e nums[left] \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e nums[right]; \u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (abs(res \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e target) \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e abs(sum \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e target)) \u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e res \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e sum; \u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (sum \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e target) { \u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e right\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003e; \u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (sum \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e target) { \u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e left\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e; \u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e { \u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e sum; \u003cspan style=\"color:#75715e\"\u003e// 差值等於 0 時，不會再有更小的差值 \u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e } \u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e } \u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e } \u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e res; \u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e} \u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ca href=\"/leetcode\"\u003e回目錄 Catalog\u003c/a\u003e\n","permalink":"https://intervalrain.github.io/leetcode/16/","summary":"\u003cp\u003e\u003cstrong\u003eno. \u003cTitle\u003e\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{orange}\\textsf{Medium}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eArray\u003c/code\u003e、\u003ccode\u003eTwo Pointers\u003c/code\u003e、\u003ccode\u003eSorting\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eGiven an integer array \u003ccode\u003enums\u003c/code\u003e of length \u003ccode\u003en\u003c/code\u003e and an integer \u003ccode\u003etarget\u003c/code\u003e, find three integers in \u003ccode\u003enums\u003c/code\u003e such that the sum is closet to \u003ccode\u003etarget\u003c/code\u003e.\u003cbr\u003e\nReturn *the sum of the three integers`.\u003cbr\u003e\nYou may assume that each input would have exactly one solution.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInput:\u003c/strong\u003e nums = [-1,2,1,-4], target = 1\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e 2\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e The sum that is closet to the target is 2. (-1 + 2 + 1 = 2).\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e","title":"[LeetCode] 16. 3Sum Closet"},{"content":"15. 3Sum\nHardness: \\(\\color{orange}\\textsf{Medium}\\) Ralated Topics: Array、Two Pointer、Sorting 一、題目 Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, j != k, and nums[i] + nums[j] + nums[k] == 0.\nNotice that the solution set must not contain duplicate triplets.\nExample 1:\nInput: nums = [-1,0,1,2,-1,-4] Output: [[-1,-1,2],[-1,0,1]] Explanation:\nnums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.\nnums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.\nnums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.\nThe distinct triplets are [-1,0,1] and [-1,-1,2].\nNotice that the order of the output and the order of the triplets does not matter. Example 2:\nInput: nums = [0,1,1] Output: [] Explanation: The only possible triplet does not sum up to 0. Example 3:\nInput: nums = [0,0,0] Output: [[0,0,0]] Explanation: The only possible triplet does sum up to 0. Constraints:\n3 \u0026lt;= nums.length \u0026lt;= 3000 -10^5 \u0026lt;= nums[i] \u0026lt;= 10^5 二、分析 若用暴力解求解的話，時間複雜度為 \\(O(n^3)\\)。 故我們可以嘗試先進行排序來簡化問題，時間複雜度為\\(O(n\\log n)\\)。 方法 1: HashMap 可以參考 Leetcode no.1 Two Sum，相當於一個迴圈選定 nums[i] 為 target，其餘兩者 nums[j] + nums[k] 的和為 -target，那這題就簡化成 Two Sum 了，時間複雜度為 \\(O(n^2)\\)。 方法 2: Two Pointer 同樣一個迴圈選定 nums[i] 為 target，其餘兩者以 Two Pointer 搜尋已排序的數組。 需注意上如何避免重複數組解： HashMap 可以直接指定到 HashMap 存的索引，利用 HashMap 會覆蓋掉同一組 key 的 value。 Two Pointer 可以藉由指標指向同一個值時，便跳過，來避免重複數組解。 三、解題 1. HashMap Time complexity: \\(O(n^2)\\) Space complexity: \\(O(n)\\) vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; threeSum(vector\u0026lt;int\u0026gt;\u0026amp; nums) { sort(nums.begin(), nums.end()); // 排序 unordered_map\u0026lt;int,int\u0026gt; map; vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; res; for (int i = 0; i \u0026lt; nums.size(); i++) { map[nums[i]] = i; // 將值「最右邊」的索引記到 map 中 } for (int i = 0; i \u0026lt; nums.size()-2; i++) { for (int j = i+1; j \u0026lt; nums.size()-1; j++) { int toFind = -(nums[i] + nums[j]); if (toFind \u0026lt; 0) continue; // 若 nums[i] 與 num[j] 的和為正時，無解。 if (map.find(toFind) != map.end() \u0026amp;\u0026amp; map[toFind] \u0026gt; j) { // 注意 map 中找到的值的索引，必須比第二個值的索引大 res.push_back({nums[i], nums[j], toFind}); } j = map[nums[j]]; // 避免重複數組解 } i = map[nums[i]]; // 避免重複數組解 } return res; } 2. Two Pointer Time complexity: \\(O(n^2)\\) Space complexity: \\(O(1)\\) vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; threeSum(vector\u0026lt;int\u0026gt;\u0026amp; nums) { sort(nums.begin(), nums.end()); // 排序 vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; res; for (int i = 0; i \u0026lt; nums.size()-2; i++) { if (nums[i] \u0026gt; 0) break; // 排序後，三數組中最小的值若為正，則無解 int j = i+1, k = nums.size()-1; while (j \u0026lt; k) { int sum = nums[i] + nums[j] + nums[k]; if (sum \u0026lt; 0) { // 三數組合小於零，左指標右移。 while (j+1 \u0026lt; k \u0026amp;\u0026amp; nums[j] == nums[j+1]) j++; // 優化，同樣的值不需重複檢查 j++; } else if (sum \u0026gt; 0) { // 三數組合大於零，右指標左移。 while (k-1 \u0026gt; j \u0026amp;\u0026amp; nums[k-1] == nums[k]) k--; // 優化，同樣的值不需重複檢查 k--; } else { res.push_back({nums[i], nums[j], nums[k]}); while (j+1 \u0026lt; k \u0026amp;\u0026amp; nums[j] == nums[j+1]) j++; // 避免重複數組解 while (k-1 \u0026gt; j \u0026amp;\u0026amp; nums[k-1] == nums[k]) k--; // 避免重複數組解 j++; k--; } } while (i+1 \u0026lt; nums.size()-2 \u0026amp;\u0026amp; nums[i] == nums[i+1]) i++; // 避免重複數組解 } return res; } 參考文章: [LeetCode] 18. 4Sum\n回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/15/","summary":"\u003cp\u003e\u003cstrong\u003e15. 3Sum\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{orange}\\textsf{Medium}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eArray\u003c/code\u003e、\u003ccode\u003eTwo Pointer\u003c/code\u003e、\u003ccode\u003eSorting\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eGiven an integer array nums, return all the triplets \u003ccode\u003e[nums[i], nums[j], nums[k]]\u003c/code\u003e such that \u003ccode\u003ei != j\u003c/code\u003e, \u003ccode\u003ei != k\u003c/code\u003e, \u003ccode\u003ej != k\u003c/code\u003e, and \u003ccode\u003enums[i] + nums[j] + nums[k] == 0\u003c/code\u003e.\u003cbr\u003e\nNotice that the solution set must not contain duplicate triplets.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInput:\u003c/strong\u003e nums = [-1,0,1,2,-1,-4]\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e [[-1,-1,2],[-1,0,1]]\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e\u003cbr\u003e\nnums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.\u003cbr\u003e\nnums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.\u003cbr\u003e\nnums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.\u003cbr\u003e\nThe distinct triplets are [-1,0,1] and [-1,-1,2].\u003cbr\u003e\nNotice that the order of the output and the order of the triplets does not matter.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e","title":"[LeetCode] 15. 3Sum"},{"content":"14. Longest Common Prefix\nHardness: \\(\\color{green}\\textsf{Easy}\\) Ralated Topics: String 一、題目 Write a function to find the longest common prefix string amongst an array of strings.\nIf there is no common prefix, return an empty string \u0026quot;\u0026quot;.\nExample 1:\nInput: strs = [\u0026ldquo;flower\u0026rdquo;, \u0026ldquo;flow\u0026rdquo;, \u0026ldquo;flight\u0026rdquo;] Output: \u0026ldquo;fl\u0026rdquo; Example 2:\nInput: strs = [\u0026ldquo;dog\u0026rdquo;, \u0026ldquo;racecar\u0026rdquo;, \u0026ldquo;car\u0026rdquo;] Output: \u0026quot;\u0026quot; Explanation: There is no common prefix among the input strings. Constraints:\n1 \u0026lt;= strs.length \u0026lt;= 200 0 \u0026lt;= strs[i].length \u0026lt;= 200 strs[i] consists of only lowercase English letters. 二、分析 簡單的字串比對問題。 需熟悉 string 的函數 substr() 的使用方式，常用以下兩種 s.substr(int start, int len)，從 start 起取長度為 len 的子字串。 s.substr(int start) 從 start 起取到字串的結尾。 三、解題 1. String Time complexity: \\(O(m\\times n)，\\text{m }為\\text{ strs }的長度，\\text{n }為\\text{ strs[i] }的長度\\)， Space complexity: \\(O(1)\\) string longestCommonPrefix(vector\u0026lt;string\u0026gt;\u0026amp; strs) { string res = strs[0]; for (int i = 1; i \u0026lt; strs.size(); i++) { int j = 0; for (; j \u0026lt; min(strs[i].length(), res.length()); j++) { if (strs[i][j] != res[j]) break; } res = res.substr(0, j); } return res; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/14/","summary":"\u003cp\u003e\u003cstrong\u003e14. Longest Common Prefix\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{green}\\textsf{Easy}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eString\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eWrite a function to find the longest common prefix string amongst an array of strings.\u003cbr\u003e\nIf there is no common prefix, return an empty string \u003ccode\u003e\u0026quot;\u0026quot;\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInput:\u003c/strong\u003e strs = [\u0026ldquo;flower\u0026rdquo;, \u0026ldquo;flow\u0026rdquo;, \u0026ldquo;flight\u0026rdquo;]\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u0026ldquo;fl\u0026rdquo;\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInput:\u003c/strong\u003e strs = [\u0026ldquo;dog\u0026rdquo;, \u0026ldquo;racecar\u0026rdquo;, \u0026ldquo;car\u0026rdquo;]\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u0026quot;\u0026quot;\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eExplanation\u003c/strong\u003e: There is no common prefix among the input strings.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e1 \u0026lt;= strs.length \u0026lt;= 200\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e0 \u0026lt;= strs[i].length \u0026lt;= 200\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003estrs[i]\u003c/code\u003e consists of only lowercase English letters.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"二分析\"\u003e二、分析\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e簡單的字串比對問題。\u003c/li\u003e\n\u003cli\u003e需熟悉 \u003ccode\u003estring\u003c/code\u003e 的函數 \u003ccode\u003esubstr()\u003c/code\u003e 的使用方式，常用以下兩種\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003es.substr(int start, int len)\u003c/code\u003e，從 \u003ccode\u003estart\u003c/code\u003e 起取長度為 \u003ccode\u003elen\u003c/code\u003e 的子字串。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003es.substr(int start)\u003c/code\u003e 從 \u003ccode\u003estart\u003c/code\u003e 起取到字串的結尾。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"三解題\"\u003e三、解題\u003c/h3\u003e\n\u003ch4 id=\"1-string\"\u003e1. String\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eTime complexity: \\(O(m\\times n)，\\text{m }為\\text{ strs }的長度，\\text{n }為\\text{ strs[i] }的長度\\)，\u003c/li\u003e\n\u003cli\u003eSpace complexity: \\(O(1)\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003estring \u003cspan style=\"color:#a6e22e\"\u003elongestCommonPrefix\u003c/span\u003e(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003estring\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e strs) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    string res \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e strs[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e strs.size(); i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e j \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (; j \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e min(strs[i].length(), res.length()); j\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (strs[i][j] \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e res[j]) \u003cspan style=\"color:#66d9ef\"\u003ebreak\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        res \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e res.substr(\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, j);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e res;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ca href=\"/leetcode\"\u003e回目錄 Catalog\u003c/a\u003e\u003c/p\u003e","title":"[Leetcode] 14. Longest Common Prefix"},{"content":"13. Roman to Integer\nHardness: \\(\\color{green}\\textsf{Easy}\\) Ralated Topics: Hash Table、Math、String 一、題目 Roman numerals are represented by seven different symbols: I, V, X, L, C, D, and M.\n\\(\\boxed{\\begin{array}{ll} \\textbf{Symbol}\u0026amp;\\textbf{Value}\\\\ \\texttt{I}\u0026amp;1\\\\ \\texttt{V}\u0026amp;5\\\\ \\texttt{X}\u0026amp;10\\\\ \\texttt{L}\u0026amp;50\\\\ \\texttt{C}\u0026amp;100\\\\ \\texttt{D}\u0026amp;500\\\\ \\texttt{M}\u0026amp;1000\\\\ \\end{array}}\\)\nFor example, 2 is written as II in Roman numeral, just two one\u0026rsquo;s added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\nI can be placed before V (5) and X (10) to make 4 and 9. X can be placed before L (50) and C (100) to make 40 and 90. C can be placed before D (500) and M (1000) to make 400 and 900.\nGiven a roman numeral, convert it to an integer. Example 1:\nInput: s = \u0026ldquo;III\u0026rdquo; Output: 3 Explanation: III = 3. Example 2:\nInput: s = \u0026ldquo;LVIII\u0026rdquo; Output: 58 Explanation: L = 50, V = 5, III = 3. Example 3:\nInput: s = \u0026ldquo;MCMXCIV\u0026rdquo; Output: 1994 Explanation: M = 1000, CM = 900, XC = 90 and IV = 4. Constraints:\n1 \u0026lt;= s.length \u0026lt;= 15 s contains only the character ('I', 'V', 'X', 'L', 'C', 'D', 'M') It is guaranteed that s is a valid roman numeral in the range [1, 3999]. 二、分析 將字串從後往前分析，有助於解題。 I 可以當 1 也可以當 -1，當 -1 的情況是 I 的後面接的是 V 或是 X 時。 X 可以當 10 也可以當 -10，當 -10 的情況是 X 的後面接的是 V 或是 X 時。 C 可以當 100 也可以當 -100，當 -100 的情況是 C 的後面接的是 V 或是 X 時。 三、解題 1. Math Time complexity: \\(O(n)\\) Space complexity: \\(O(1)\\) int romanToInt(string s) { unordered_map\u0026lt;char,int\u0026gt; map = { {\u0026#39;I\u0026#39;, 1}, {\u0026#39;V\u0026#39;, 5}, {\u0026#39;X\u0026#39;, 10}, {\u0026#39;L\u0026#39;, 50}, {\u0026#39;C\u0026#39;, 100}, {\u0026#39;D\u0026#39;, 500}, {\u0026#39;M\u0026#39;, 1000} }; int res = 0; for (int i = s.length()-1; i \u0026gt;=0; i--) { if (res \u0026gt; 4*map[s[i]]) res -= map[s[i]]; else res += map[s[i]]; } return res; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/13/","summary":"\u003cp\u003e\u003cstrong\u003e13. Roman to Integer\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{green}\\textsf{Easy}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eHash Table\u003c/code\u003e、\u003ccode\u003eMath\u003c/code\u003e、\u003ccode\u003eString\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eRoman numerals are represented by seven different symbols: \u003ccode\u003eI\u003c/code\u003e, \u003ccode\u003eV\u003c/code\u003e, \u003ccode\u003eX\u003c/code\u003e, \u003ccode\u003eL\u003c/code\u003e, \u003ccode\u003eC\u003c/code\u003e, \u003ccode\u003eD\u003c/code\u003e, and \u003ccode\u003eM\u003c/code\u003e.\u003cbr\u003e\n\\(\\boxed{\\begin{array}{ll}\n\\textbf{Symbol}\u0026amp;\\textbf{Value}\\\\\n\\texttt{I}\u0026amp;1\\\\\n\\texttt{V}\u0026amp;5\\\\\n\\texttt{X}\u0026amp;10\\\\\n\\texttt{L}\u0026amp;50\\\\\n\\texttt{C}\u0026amp;100\\\\\n\\texttt{D}\u0026amp;500\\\\\n\\texttt{M}\u0026amp;1000\\\\\n\\end{array}}\\)\u003cbr\u003e\nFor example, \u003ccode\u003e2\u003c/code\u003e is written as \u003ccode\u003eII\u003c/code\u003e in Roman numeral, just two one\u0026rsquo;s added together. \u003ccode\u003e12\u003c/code\u003e is written as \u003ccode\u003eXII\u003c/code\u003e, which is simply \u003ccode\u003eX + II\u003c/code\u003e. The number \u003ccode\u003e27\u003c/code\u003e is written as \u003ccode\u003eXXVII\u003c/code\u003e, which is \u003ccode\u003eXX + V + II\u003c/code\u003e.\u003cbr\u003e\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not \u003ccode\u003eIIII\u003c/code\u003e. Instead the number four is written as \u003ccode\u003eIV\u003c/code\u003e. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as \u003ccode\u003eIX\u003c/code\u003e. There are six instances where subtraction is used:\u003c/p\u003e","title":"[Leetcode] 13. Roman to Integer"},{"content":"835. Image Overlap\nHardness: \\(\\color{orange}\\textsf{Medium}\\) Ralated Topics: Array、Matrix 一、題目 You are given two images, img1 and img2, represented as binary, square matrices of size n x n. A binary matrix has only 0s and 1s as values.\nWe translate one image however we choose by sliding all the 1 bits left, right, up, and/or down any number of units. We then place it on top of the other image. We can then calculate the overlap by counting the number of positions that have a 1 in both images. Note also that a translation does not include any kind of rotation. Any 1 bits that are translated outside of the matrix bordered are erased.\nReturn the largest possible overlap.\nExample 1:\nInput: img1 = [[1,1,0],[0,1,0],[0,1,0]], img2 = [[0,0,0],[0,1,1],[0,0,1]] Output: 3 Explanation: We translate img1 to right by 1 unit and down by 1 unit.\nThe number of positions that have a 1 in both images is 3 (shown in red). Example 2:\nInput: img1 = [[1]], img2 = [[1]] Output: 1 Example 3:\nInput: img1 = [[0]], img2 = [[0]] Output: 0 Constraints:\nn == img1.length == img1[i].length n == img2.length == img2[i].length n \u0026lt;= n \u0026lt;= 30 img1[i][j] is either 0 or 1. img2[i][j] is either 0 or 1. 二、分析 注意到 n 的範圍是 1 \u0026lt;= n \u0026lt;= 30。 我們可以用 bit manipulation 的方式來處理這一題。 將 vector 轉為二進制數字(n \u0026lt; 31)： 如 {1,0,0,1,0,1} 轉換成 100101。 int masking(vector\u0026lt;int\u0026gt; vec) { int res = 0; for (int i = 0; i \u0026lt; n; i++) { if (vec[i]) res |= (1 \u0026lt;\u0026lt; (n-1-i)); } } 數二進制數字中有幾個 bit 為 1： int count(int bit) { int cnt = 0; while (bit) { bit -= (bit \u0026amp; -bit); cnt++; } return cnt; } 把 matrix 視為 n 列以二進位表示的數字。 故題目可以簡化成「求 bitset1 \u0026amp; bitset2 中的最大值」。 實作 upshift、downshift、leftshift、rightshift。 upshift、downshift 我們可以看作兩張 img 的 rows 相對移動，將移動後的 row 補 0 leftshift、rightshift 可以很簡單的靠 \u0026gt;\u0026gt; 運算子達成，但要注意用 \u0026lt;\u0026lt; 可能會超出範圍，但我們可以利用 img2 向左移將相當於 img1 向右移的性質來達成。 三、解題 1. Bit Manipulation Time complexity: \\(O(n^3)\\) Space complexity: \\(O(n)\\) // 計算 bit 為 1 的數目：O(1) int count(int bit) { int cnt = 0; while (bit) { bit -= (bit \u0026amp; -bit); cnt++; } return cnt; } // 將 matrix 轉為 2 進制數字的 array：O(n^2) vector\u0026lt;int\u0026gt; masking(vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; img) { vector\u0026lt;int\u0026gt; res(img.size(), 0); for (int i = 0; i \u0026lt; img.size(); i++) { for (int j = 0; j \u0026lt; img[i].size(); j++) { if (img[i][j]) res[i] |= (1 \u0026lt;\u0026lt; j); } } return res; } int largestOverlap(vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; img1, vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; img2) { int n = img1.size(); if (n == 0) return 0; vector\u0026lt;int\u0026gt; mask1 = masking(img1); vector\u0026lt;int\u0026gt; mask2 = masking(img2); int res = 0; for (int v = -n+1; v \u0026lt; n; v++) { for (int h = 0; h \u0026lt; n; h++) { int cnt1 = 0; int cnt2 = 0; for (int i = 0; i \u0026lt; n; i++) { int bit1 = (i+v\u0026lt;0 || i+v\u0026gt;=n) ? 0 : mask1[i+v]; // bit 上下移，越界補 0 int bit2 = mask2[i]; cnt1 += count((bit1 \u0026gt;\u0026gt; h) \u0026amp; bit2); // bit1 右移 cnt2 += count((bit2 \u0026gt;\u0026gt; h) \u0026amp; bit1); // bit2 右移(視為 bit1 左移) } res = max({res, cnt1, cnt2}); } } return res; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/835/","summary":"\u003cp\u003e\u003cstrong\u003e835. Image Overlap\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{orange}\\textsf{Medium}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eArray\u003c/code\u003e、\u003ccode\u003eMatrix\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eYou are given two images, \u003ccode\u003eimg1\u003c/code\u003e and \u003ccode\u003eimg2\u003c/code\u003e, represented as binary, square matrices of size \u003ccode\u003en x n\u003c/code\u003e. A binary matrix has only \u003ccode\u003e0\u003c/code\u003es and \u003ccode\u003e1\u003c/code\u003es as values.\u003cbr\u003e\nWe \u003cstrong\u003etranslate\u003c/strong\u003e one image however we choose by sliding all the \u003ccode\u003e1\u003c/code\u003e bits left, right, up, and/or down any number of units. We then place it on top of the other image. We can then calculate the \u003cstrong\u003eoverlap\u003c/strong\u003e by counting the number of positions that have a \u003ccode\u003e1\u003c/code\u003e in \u003cstrong\u003eboth\u003c/strong\u003e images.\nNote also that a translation does \u003cstrong\u003enot\u003c/strong\u003e include any kind of rotation. Any \u003ccode\u003e1\u003c/code\u003e bits that are translated outside of the matrix bordered are erased.\u003cbr\u003e\nReturn \u003cem\u003ethe largest possible overlap\u003c/em\u003e.\u003c/p\u003e","title":"[Leetcode] 835. Image Overlap"},{"content":"12. Integer to Roman\nHardness: \\(\\color{orange}\\textsf{Medium}\\) Ralated Topics: Hash Table、Math、String 一、題目 Roman numerals are represented by seven different symbols: I, V, X, L, C, D, and M.\n\\(\\boxed{\\begin{array}{ll} \\textbf{Symbol}\u0026amp;\\textbf{Value}\\\\ \\texttt{I}\u0026amp;1\\\\ \\texttt{V}\u0026amp;5\\\\ \\texttt{X}\u0026amp;10\\\\ \\texttt{L}\u0026amp;50\\\\ \\texttt{C}\u0026amp;100\\\\ \\texttt{D}\u0026amp;500\\\\ \\texttt{M}\u0026amp;1000\\\\ \\end{array}}\\)\nFor example, 2 is written as II in Roman numeral, just two one\u0026rsquo;s added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\nI can be placed before V (5) and X (10) to make 4 and 9. X can be placed before L (50) and C (100) to make 40 and 90. C can be placed before D (500) and M (1000) to make 400 and 900.\nGiven an integer, convert it to a roman numeral. Example 1:\nInput: num = 3 Output: \u0026ldquo;III\u0026rdquo; Explanation: 3 is represented as 3 ones. Example 2:\nInput: num = 58 Output: \u0026ldquo;LVIII\u0026rdquo; Explanation: L = 50, V = 5, III = 3. Example 3:\nInput: num = 1994 Output: \u0026ldquo;MCMXCIV\u0026rdquo; Explanation: M = 1000, CM = 900, XC = 90 and IV = 4. Constraints:\n1 \u0026lt;= num \u0026lt;= 3999 二、分析 既然 num 的範圍不大，我們可以利用其轉換的規律，直接用 Array 去定義。 三、解題 1. Math Time complexity: \\(O(1)\\) Space complexity: \\(O(1)\\) string intToRoman(int num) { string M[] = {\u0026#34;\u0026#34;, \u0026#34;M\u0026#34;, \u0026#34;MM\u0026#34;, \u0026#34;MMM\u0026#34;}; string C[] = {\u0026#34;\u0026#34;, \u0026#34;C\u0026#34;, \u0026#34;CC\u0026#34;, \u0026#34;CCC\u0026#34;, \u0026#34;CD\u0026#34;, \u0026#34;D\u0026#34;, \u0026#34;DC\u0026#34;, \u0026#34;DCC\u0026#34;, \u0026#34;DCCC\u0026#34;, \u0026#34;CM\u0026#34;}; string X[] = {\u0026#34;\u0026#34;, \u0026#34;X\u0026#34;, \u0026#34;XX\u0026#34;, \u0026#34;XXX\u0026#34;, \u0026#34;XL\u0026#34;, \u0026#34;L\u0026#34;, \u0026#34;LX\u0026#34;, \u0026#34;LXX\u0026#34;, \u0026#34;LXXX\u0026#34;, \u0026#34;XC\u0026#34;}; string I[] = {\u0026#34;\u0026#34;, \u0026#34;I\u0026#34;, \u0026#34;II\u0026#34;, \u0026#34;III\u0026#34;, \u0026#34;IV\u0026#34;, \u0026#34;V\u0026#34;, \u0026#34;VI\u0026#34;, \u0026#34;VII\u0026#34;, \u0026#34;VIII\u0026#34;, \u0026#34;IX\u0026#34;}; return M[num/1000] + C[(num%1000)/100] + X[(num%100)/10] + I[num%10]; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/12/","summary":"\u003cp\u003e\u003cstrong\u003e12. Integer to Roman\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{orange}\\textsf{Medium}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eHash Table\u003c/code\u003e、\u003ccode\u003eMath\u003c/code\u003e、\u003ccode\u003eString\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eRoman numerals are represented by seven different symbols: \u003ccode\u003eI\u003c/code\u003e, \u003ccode\u003eV\u003c/code\u003e, \u003ccode\u003eX\u003c/code\u003e, \u003ccode\u003eL\u003c/code\u003e, \u003ccode\u003eC\u003c/code\u003e, \u003ccode\u003eD\u003c/code\u003e, and \u003ccode\u003eM\u003c/code\u003e.\u003cbr\u003e\n\\(\\boxed{\\begin{array}{ll}\n\\textbf{Symbol}\u0026amp;\\textbf{Value}\\\\\n\\texttt{I}\u0026amp;1\\\\\n\\texttt{V}\u0026amp;5\\\\\n\\texttt{X}\u0026amp;10\\\\\n\\texttt{L}\u0026amp;50\\\\\n\\texttt{C}\u0026amp;100\\\\\n\\texttt{D}\u0026amp;500\\\\\n\\texttt{M}\u0026amp;1000\\\\\n\\end{array}}\\)\u003cbr\u003e\nFor example, \u003ccode\u003e2\u003c/code\u003e is written as \u003ccode\u003eII\u003c/code\u003e in Roman numeral, just two one\u0026rsquo;s added together. \u003ccode\u003e12\u003c/code\u003e is written as \u003ccode\u003eXII\u003c/code\u003e, which is simply \u003ccode\u003eX + II\u003c/code\u003e. The number \u003ccode\u003e27\u003c/code\u003e is written as \u003ccode\u003eXXVII\u003c/code\u003e, which is \u003ccode\u003eXX + V + II\u003c/code\u003e.\u003cbr\u003e\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not \u003ccode\u003eIIII\u003c/code\u003e. Instead the number four is written as \u003ccode\u003eIV\u003c/code\u003e. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as \u003ccode\u003eIX\u003c/code\u003e. There are six instances where subtraction is used:\u003c/p\u003e","title":"[Leetcode] 12. Integer to Roman"},{"content":"11. Container With Most Water\nHardness: \\(\\color{orange}\\textsf{Medium}\\) Ralated Topics: Array、Two Pointer、Greedy 一、題目 You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).\nFind two lines that together with the x-axis form a container, such that the container contains the most water.\nReturn the maximum amount of water a container can store.\nNotive that you may not slant the container.\nExample 1:\nInput: height = [1,8,6,2,5,4,8,3,7] Output: 49 Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49. Example 2:\nInput: height = [1,1] Output: 1 Constraints:\nn == height.length 2 \u0026lt;= n \u0026lt;= 10^5 0 \u0026lt;= height[i] \u0026lt;= 10^4 二、分析 此題用 Greedy 與 Two Pointer 的方向來思考。 兩個垂直線相距愈遠且線高愈高，則兩線間可裝的水愈多。 兩垂直線間可裝的水，受限於線高較低者。 任兩線間(相距變小)，有任一解大於當下解，只有在有線高高於兩線線高較低者。 故我們每次移動線高較低的那邊。 兩線間可裝的水為： int calArea(vector\u0026lt;int\u0026gt;\u0026amp; height, int left, int right) { return min(height[left], height[right]) * (right - left); } 三、解題 1. Two Pointer Time complexity: \\(O(n)\\) Space complexity: \\(O(n)\\) int calArea(vector\u0026lt;int\u0026gt;\u0026amp; height, int left, int right) { return min(height[left], height[right]) * (right - left); } int maxArea(vector\u0026lt;int\u0026gt;\u0026amp; height) { int left = 0, right = height.size()-1; int res = 0; do { res = max(res, calArea(height, left, right)); if (height[left] \u0026lt; height[right]) left++; else right--; } while (left \u0026lt; right); return res; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/11/","summary":"\u003cp\u003e\u003cstrong\u003e11. Container With Most Water\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{orange}\\textsf{Medium}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eArray\u003c/code\u003e、\u003ccode\u003eTwo Pointer\u003c/code\u003e、\u003ccode\u003eGreedy\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eYou are given an integer array \u003ccode\u003eheight\u003c/code\u003e of length \u003ccode\u003en\u003c/code\u003e. There are \u003ccode\u003en\u003c/code\u003e vertical lines drawn such that the two endpoints of the \u003ccode\u003eith\u003c/code\u003e line are \u003ccode\u003e(i, 0)\u003c/code\u003e and \u003ccode\u003e(i, height[i])\u003c/code\u003e.\u003cbr\u003e\nFind two lines that together with the x-axis form a container, such that the container contains the most water.\u003cbr\u003e\nReturn \u003cem\u003ethe maximum amount of water a container can store\u003c/em\u003e.\u003cbr\u003e\n\u003cstrong\u003eNotive\u003c/strong\u003e that you may not slant the container.\u003c/p\u003e","title":"[Leetcode] 11. Container With Most Water"},{"content":"10. Regular Expression Matching\nHardness: \\(\\color{red}\\textsf{Hard}\\) Ralated Topics: String、Dynamic Programming、Recursion 一、題目 Given an input string s and a pattern p, implement regular expression matching with support for '.' and '*' where:\n'.' Matches any single character. '*' Matches zero or more of the preceding element.\nThe matching should cover the entire input string (not partial). Example 1:\nInput: s = \u0026ldquo;aa\u0026rdquo;, p = \u0026ldquo;a\u0026rdquo; Output: false Explanation: \u0026ldquo;a\u0026rdquo; does not match the entire string \u0026ldquo;aa\u0026rdquo;. Example 2:\nInput: s = \u0026ldquo;aa\u0026rdquo;, p = \u0026ldquo;a*\u0026rdquo; Output: true Explanation: \u0026lsquo;*\u0026rsquo; means zero or more of the preceding element, \u0026lsquo;a\u0026rsquo;. Therefore, by repeating \u0026lsquo;a\u0026rsquo; once, it becomes \u0026ldquo;aa\u0026rdquo;. Example 3:\nInput: s = \u0026ldquo;ab\u0026rdquo;, p = \u0026ldquo;.*\u0026rdquo; Output: true Explanation: \u0026ldquo;.*\u0026rdquo; means \u0026ldquo;zero or more (*) of any character (.)\u0026rdquo;. Constraints:\n1 \u0026lt;= s.length \u0026lt;= 20 1 \u0026lt;= p.length \u0026lt;= 30 s contains only lowercase English letters. p contains only lowercase English letters, '.', and '*'. It is guaranteed for each appearance of the character '*', there will be a previous valid character to match. 二、分析 觀察規律： 當 p 為空時，若 s 不為空回傳 false， s 為空回傳 true。 當 p 不為空時，分為以下情況： 當 *p 為英文字元，則 *s 必定為相同的英文字元，否則回傳 false。 當 *p 為 . 時，則 *s 可以為任意英文字元。 當 *p 為 * 時，則 *s 可以為 ' '、前一相符的字合，在此稱為 firstMatch。 三、解題 1. DFS Time complexity: \\(O(C(m+n,m))，\\text{m }為\\text{ s }的長度，\\text{n }為\\text{ p }的長度\\)，\n\\(\\begin{array}{l} T(m,n)=T(m,n-2)+T(m-1,n-2)+T(m-2,n-2)+\u0026hellip;+T(1,n-2)\\\\ T(m-1,n)=T(m-1,n-2)+T(m-2,n-2)+\u0026hellip;+T(1,n-2)\\\\ T(m,n)=T(m-1,n)+T(m,n-2)\\\\ T(0,n)=n, T(m,0)=1\\\\ \\end{array}\\)\nSpace complexity: \\(O(C(m+n,m))\\)\nint m, n; string s, p; bool isMatch(string s, string p) { this-\u0026gt;s = s; this-\u0026gt;p = p; this-\u0026gt;m = s.length(); this-\u0026gt;n = p.length(); return dfs(0, 0); } // 分別對應到 s 的第 i 個字元與 p 的第 j 個字元 bool dfs(int i, int j) { // 當 p 為空時，若 s 不為空回傳 false，s 為空回傳 true。 if (j == n) return i == m; // firstMatch 的情形 bool firstMatch = i \u0026lt; m \u0026amp;\u0026amp; (s[i] == p[j] || p[j] == \u0026#39;.\u0026#39;); // *p 為 \u0026#39;*\u0026#39; 的情形 if (j+1 \u0026lt; n \u0026amp;\u0026amp; p[j+1] == \u0026#39;*\u0026#39;) return dfs(i, j+2) || (firstMatch \u0026amp;\u0026amp; dfs(i+1, j)); return firstMatch \u0026amp;\u0026amp; dfs(i+1, j+1); } 2. DFS + DP(Top Bottom) Time complexity: \\(O(m\\times n)，\\text{m }為\\text{ s }的長度，\\text{n }為\\text{ p }的長度\\)， Space complexity: \\(O(m\\times n)\\) int m, n; string s, p; vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; dp; bool isMatch(string s, string p) { this-\u0026gt;m = s.length(); this-\u0026gt;n = p.length(); this-\u0026gt;s = s; this-\u0026gt;p = p; dp = vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;(m+1, vector\u0026lt;int\u0026gt;(n+1, -1)); // 用 dp[i][j] 記錄 s 前進 i 位與 p 前進 j 位的狀況 return dfs(0, 0); } bool dfs(int i, int j) { if (dp[i][j] != -1) return dp[i][j]; if (j == n) { dp[i][j] = i == m; return dp[i][j]; } bool firstMatch = i \u0026lt; m \u0026amp;\u0026amp; (s[i] == p[j] || p[j] == \u0026#39;.\u0026#39;); if (j+1 \u0026lt; n \u0026amp;\u0026amp; p[j+1] == \u0026#39;*\u0026#39;) dp[i][j] = dfs(i, j+2) || (firstMatch \u0026amp;\u0026amp; dfs(i+1, j)); else dp[i][j] = firstMatch \u0026amp;\u0026amp; dfs(i+1, j+1); return dp[i][j]; } 3. DP (Bottom Up) Time complexity: \\(O(m\\times n)，\\text{m }為\\text{ s }的長度，\\text{n }為\\text{ p }的長度\\)， Space complexity: \\(O(m\\times n)\\) bool isMatch(string s, string p) { int m = s.length(), n = p.length(); if (n == 0) return m == 0; bool dp[m+1][n+1]; memset(dp, false, sizeof(dp)); dp[0][0] = true; for (int i = 2; i \u0026lt;= n; i++) { if (p[i-1] == \u0026#39;*\u0026#39;) { dp[0][i] = dp[0][i-2]; } } for (int i = 1; i \u0026lt;= m; i++) { for (int j = 1; j \u0026lt;= n; j++) { if (s[i-1] == p[j-1] || p[j-1] == \u0026#39;.\u0026#39;) { dp[i][j] = dp[i-1][j-1]; } else if (p[j-1] == \u0026#39;*\u0026#39;) { dp[i][j] = dp[i][j-2] || ((s[i-1] == p[j-2] || p[j-2] == \u0026#39;.\u0026#39;) \u0026amp;\u0026amp; dp[i-1][j]); } } } return dp[m][n]; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/10/","summary":"\u003cp\u003e\u003cstrong\u003e10. Regular Expression Matching\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{red}\\textsf{Hard}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eString\u003c/code\u003e、\u003ccode\u003eDynamic Programming\u003c/code\u003e、\u003ccode\u003eRecursion\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eGiven an input string \u003ccode\u003es\u003c/code\u003e and a pattern \u003ccode\u003ep\u003c/code\u003e, implement regular expression matching with support for \u003ccode\u003e'.'\u003c/code\u003e and \u003ccode\u003e'*'\u003c/code\u003e where:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e'.'\u003c/code\u003e Matches any single character.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e'*'\u003c/code\u003e Matches zero or more of the preceding element.\u003cbr\u003e\nThe matching should cover the \u003cstrong\u003eentire\u003c/strong\u003e input string (not partial).\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInput:\u003c/strong\u003e s = \u0026ldquo;aa\u0026rdquo;, p = \u0026ldquo;a\u0026rdquo;\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e false\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eExplanation\u003c/strong\u003e: \u0026ldquo;a\u0026rdquo; does not match the entire string \u0026ldquo;aa\u0026rdquo;.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e","title":"[Leetcode] 10. Regular Expression Matching"},{"content":"9. Palindrome Number\nHardness: \\(\\color{green}\\textsf{Easy}\\) Ralated Topics: Math 一、題目 Given an integer x, return true if x is palindrome number.\nAn integer is a palindrome when it reads the same backward as forward.\nFor example, 121 is a palindrome while 123 is not. Example 1:\nInput: x = 121 Output: true Explanation: 121 reads as 121 from left to right and from right to left. Example 2:\nInput: x = -121 Output: false Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome. Example 3:\nInput: x = 10 Output: false Explanation: Reads 01 from right to left. Therefore it is not a palindrome. Constraints:\n-2^31 \u0026lt;= x \u0026lt;= 2^31-1 Follow up: Could you solve it without converting the integer to a string?\n二、分析 若直接將數字轉換成 string，即可當作 palindrome string 的題目來處理，但題目在 follow up 規定不可以轉成 string，那我們可以嘗試用翻轉數字的方式來解題。 注意此處我們讓 rev \u0026lt;= x 時為終止條件 while (x \u0026gt; rev) { rev = 10 * rev + x % 10; x /= 10; } 觀察可得 x \u0026lt; 0 必非 palindrome x \u0026lt; 10 必為 palindrome x % 10 == 0 必非 palindrome 翻轉數字時，注意數字長可能為奇數或偶數，故 當偶數長時，翻轉到等長時，rev == x 時為 palindrome。 當奇數長時，翻轉到 rev 比 x 多一位時，若 rev/10 == x 時為 palindrome。 時間複雜度 \\(O(n)\\)，\\(n\\) 為 10 的冪次的絕對值，故 \\(O(n)=O(31)=O(1)\\)。 三、解題 1. Math Time complexity: \\(O(1)\\) Space complexity: \\(O(1)\\) bool isPalindrome(int x) { if (x \u0026lt; 0) return false; if (x \u0026lt; 10) return true; if (x % 10 == 0) return false; int rev = 0; while (x \u0026gt; rev) { rev = 10 * rev + x % 10; x /= 10; } return rev == x || rev/10 == x; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/9/","summary":"\u003cp\u003e\u003cstrong\u003e9. Palindrome Number\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{green}\\textsf{Easy}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eMath\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eGiven an integer \u003ccode\u003ex\u003c/code\u003e, return \u003ccode\u003etrue\u003c/code\u003e if \u003ccode\u003ex\u003c/code\u003e is palindrome number.\u003cbr\u003e\nAn integer is a \u003cstrong\u003epalindrome\u003c/strong\u003e when it reads the same backward as forward.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFor example, \u003ccode\u003e121\u003c/code\u003e is a palindrome while \u003ccode\u003e123\u003c/code\u003e is not.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInput:\u003c/strong\u003e x = 121\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e true\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eExplanation\u003c/strong\u003e: 121 reads as 121 from left to right and from right to left.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInput:\u003c/strong\u003e x = -121\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e false\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eExplanation\u003c/strong\u003e: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e","title":"[Leetcode] 9. Palindrome Number"},{"content":"8. String to Integer (atoi)\nHardness: \\(\\color{orange}\\textsf{Medium}\\) Ralated Topics: String 一、題目 Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer (similar to C/C++\u0026rsquo;s atoi function).\nThe algorithm for myAtoi(string s) is as follows:\nRead in and ignore any leading whitespace. Check if the next character (if not already at the end of the string) is '-' or '+'. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present. Read in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored. Convert these digits into an integer (i.e. \u0026quot;123\u0026quot; -\u0026gt; 123, \u0026quot;0032\u0026quot; -\u0026gt; 32). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2). If the integer is out of the 32-bit signed integer range [-2^31, 2^31-1], then clamp the integer so that it remains in the range. Specifically, integers less than -2^31 should be clamped to -2^31, and integer greater than 2^31-1 should be clamped to 2^31-1. Return the integer as the final result. Note:\nOnly the space character ' ' is considered a whitespace character. Do not ignore any characters other than the leading whitespace or the rest of the string after the digits. Example 1:\nInput: s = \u0026ldquo;42\u0026rdquo; Output: 42 Explanation: The underlined characters are what is read in, the caret is the current reader position.\nStep 1: \u0026ldquo;42\u0026rdquo; (no characters read because there is no leading whitespace) Step 2: \u0026ldquo;42\u0026rdquo; (no characters read because there is neither a \u0026lsquo;-\u0026rsquo; nor \u0026lsquo;+\u0026rsquo;)\nStep 3: \u0026ldquo;42\u0026rdquo; (\u0026ldquo;42\u0026rdquo; is read in)\nThe parsed integer is 42.\nSince 42 is in the range [-2^31, 2^31 - 1], the final result is 42. Example 2:\nInput: s = \u0026quot; -42\u0026quot; Output: -42 Explanation:\nStep 1: \u0026quot; -42\u0026quot; (leading whitespace is read and ignored)\nStep 2: \u0026quot; -42\u0026quot; (\u0026rsquo;-\u0026rsquo; is read, so the result should be negative)\nStep 3: \u0026quot; -42\u0026quot; (\u0026ldquo;42\u0026rdquo; is read in)\nThe parsed integer is -42.\nSince -42 is in the range [-2^31, 2^31 - 1], the final result is -42. Example 3:\nInput: s = \u0026ldquo;4193 with words\u0026rdquo; Output: 4193 Explanation:\nStep 1: \u0026ldquo;4193 with words\u0026rdquo; (no characters read because there is no leading whitespace)\nStep 2: \u0026ldquo;4193 with words\u0026rdquo; (no characters read because there is neither a \u0026lsquo;-\u0026rsquo; nor \u0026lsquo;+\u0026rsquo;)\nStep 3: \u0026ldquo;4193 with words\u0026rdquo; (\u0026ldquo;4193\u0026rdquo; is read in; reading stops because the next character is a non-digit)\nThe parsed integer is 4193.\nSince 4193 is in the range [-2^31, 2^31 - 1], the final result is 4193. Constraints:\n0 \u0026lt;= s.length \u0026lt;= 200 s consists of English letters (lower-case and upper-case), digits (0-9), ' ', '+', '-', and '.'. 二、分析 此題只需根據條件一一去排除： 處理 leading spaces 判斷 s[0] 處理超過範圍 [-2^31, 2^31-1] 的數 處理終止條件 可代入幾個處理字串常用的自訂函式： 判斷是否為英文字母 isLetter() bool isLetter(char c) { return (c \u0026gt;= \u0026#39;a\u0026#39; \u0026amp;\u0026amp; c \u0026lt;= \u0026#39;z\u0026#39;) || (c \u0026gt;= \u0026#39;A\u0026#39; \u0026amp;\u0026amp; c \u0026lt;= \u0026#39;Z\u0026#39;); } 判斷是否為數字 isDigit() bool isDigit(char c) { return c \u0026gt;= \u0026#39;0\u0026#39; \u0026amp;\u0026amp; c \u0026lt;= \u0026#39;9\u0026#39;; } 去除左邊空白、右邊空白 ltrim()、rtrim() void ltrim(string\u0026amp; s) { s.erase( s.begin(), find_if(s.begin(), s.end(), not1(ptr_fun\u0026lt;int, int\u0026gt;(isspace))) ); } void rtrim(string\u0026amp; s) { s.erase( find_if(s.rbegin(), s.rend(), not1(ptr_fun\u0026lt;int, int\u0026gt;(isspace))).base(), s.end() ); } 分隔 split() vector\u0026lt;string\u0026gt; split(string\u0026amp; s, char del) { stringstream ss(str); string item; vector\u0026lt;string\u0026gt; res; while (getline(ss, item, del)) if (!item.empty()) res.push_back(item); return res; } 合併 concat() string concat(vector\u0026lt;string\u0026gt;\u0026amp; svec, char del) { stringstream ss; for (const auto\u0026amp; s : svec) ss \u0026lt;\u0026lt; s \u0026lt;\u0026lt; del; return ss.str(); } 三、解題 1. String Time complexity: \\(O(n)\\) Space complexity: \\(O(1)\\) // 判斷是否為英文字母 bool isLetter(char c) { return (c \u0026gt;= \u0026#39;a\u0026#39; \u0026amp;\u0026amp; c \u0026lt;= \u0026#39;z\u0026#39;) || (c \u0026gt;= \u0026#39;A\u0026#39; \u0026amp;\u0026amp; c \u0026lt;= \u0026#39;Z\u0026#39;); } // 判斷是否為數字 bool isDigit(char c) { return c \u0026gt;= \u0026#39;0\u0026#39; \u0026amp;\u0026amp; c \u0026lt;= \u0026#39;9\u0026#39;; } // 去除左邊空白 void ltrim(string\u0026amp; s) { s.erase( s.begin(), find_if(s.begin(), s.end(), not1(ptr_fun\u0026lt;int, int\u0026gt;(isspace))) ); } int myAtoi(string s) { int res = 0; // 去除左邊空白 ltrim(s); // 判斷 s[0]，取正負值 bool neg = false; if (s[0] == \u0026#39;-\u0026#39;) neg = true; else if (isEnglish(s[0]) || s[0] == \u0026#39;.\u0026#39;) return 0; else if (isDigit(s[0])) res += (s[0] - \u0026#39;0\u0026#39;); for (int i = 1; i \u0026lt; s.length(); i++) { // 終止條件：不再是數字 if (!isDigit(s[i])) break; // 超出數字範圍 if (neg \u0026amp;\u0026amp; (res \u0026lt; INT_MIN/10 || (res == INT_MIN/10 \u0026amp;\u0026amp; s[i] == \u0026#39;9\u0026#39;))) return INT_MIN; else if (!neg \u0026amp;\u0026amp; (res \u0026gt; INT_MAX/10 || (res == INT_MAX/10 \u0026amp;\u0026amp; s[i] \u0026gt;= \u0026#39;8\u0026#39;))) return INT_MAX; // 累計數值 if (neg) res = 10 * res - (s[i] - \u0026#39;0\u0026#39;); else res = 10 * res + (s[i] - \u0026#39;0\u0026#39;); } return res; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/8/","summary":"\u003cp\u003e\u003cstrong\u003e8. String to Integer (atoi)\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{orange}\\textsf{Medium}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eString\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eImplement the \u003ccode\u003emyAtoi(string s)\u003c/code\u003e function, which converts a string to a 32-bit signed integer (similar to C/C++\u0026rsquo;s \u003ccode\u003eatoi\u003c/code\u003e function).\u003cbr\u003e\nThe algorithm for \u003ccode\u003emyAtoi(string s)\u003c/code\u003e is as follows:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eRead in and ignore any leading whitespace.\u003c/li\u003e\n\u003cli\u003eCheck if the next character (if not already at the end of the string) is \u003ccode\u003e'-'\u003c/code\u003e or \u003ccode\u003e'+'\u003c/code\u003e. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.\u003c/li\u003e\n\u003cli\u003eRead in next the characters until the next non-digit character or the end of the input is reached. The rest of the string is ignored.\u003c/li\u003e\n\u003cli\u003eConvert these digits into an integer (i.e. \u003ccode\u003e\u0026quot;123\u0026quot; -\u0026gt; 123\u003c/code\u003e, \u003ccode\u003e\u0026quot;0032\u0026quot; -\u0026gt; 32\u003c/code\u003e). If no digits were read, then the integer is \u003ccode\u003e0\u003c/code\u003e. Change the sign as necessary (from step 2).\u003c/li\u003e\n\u003cli\u003eIf the integer is out of the 32-bit signed integer range \u003ccode\u003e[-2^31, 2^31-1]\u003c/code\u003e, then clamp the integer so that it remains in the range. Specifically, integers less than \u003ccode\u003e-2^31\u003c/code\u003e should be clamped to \u003ccode\u003e-2^31\u003c/code\u003e, and integer greater than \u003ccode\u003e2^31-1\u003c/code\u003e should be clamped to \u003ccode\u003e2^31-1\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eReturn the integer as the final result.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e\u003c/p\u003e","title":"[Leetcode] 8. String to Integer (atoi)"},{"content":"7. Reverse Integer\nHardness: \\(\\color{orange}\\textsf{Medium}\\) Ralated Topics: Math 一、題目 Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-2^31, 2^31-1], then return 0.\nAssume the environment does not allow you to store 64-bit integers (signed or unsigned).\nExample 1:\nInput: x = 123 Output: 321 Example 2:\nInput: x = -123 Output: -321 Example 3:\nInput: 120 Output: 21 Constraints:\n-2^31 \u0026lt;= x \u0026lt;= 2^31-1 二、分析 考慮最簡單的翻轉數字為： int reverse(int x) { int res = 0; while (x) { res = res * 10 + x % 10; x /= 10; } return res; } 此題的難點在於邊界條件： 若答案超出 [-2^31, 2^31-1] 的範圍，則回傳 0。 不可用 64-bit integer(long)。 我們可以考慮幾個 testcases 來測試邊界條件，如： 2147483647(INT_MAX) \\(\\rightarrow\\) 回傳 0 當 x \u0026gt; 0時，在 res * 10 之前，若 x \u0026gt;= 8，則超出範圍。 -2147483648(INT_MIN) \\(\\rightarrow\\) 回傳 0 當 x \u0026lt; 0時，在 res * 10 之前，若 x == -9，則超出範圍。 時間複雜度 \\(O(n)\\)，\\(n\\) 為 10 的冪次的絕對值，故 \\(O(n)=O(31)=O(1)\\)。 三、解題 1. Math Time complexity: \\(O(1)\\) Space complexity: \\(O(1)\\) int reverse(int x) { int res = 0; while (x) { // 考慮邊界條件 if (res \u0026lt; INT_MIN/10 || (res == INT_MIN/10 \u0026amp;\u0026amp; x == -9)) return 0; else if (res \u0026gt; INT_MAX/10 || (res == INT_MAX/10 \u0026amp;\u0026amp; x \u0026gt;= 8 )) return 0; // 一般的數字翻轉 res = res * 10 + x % 10; x /= 10; } return res; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/7/","summary":"\u003cp\u003e\u003cstrong\u003e7. Reverse Integer\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{orange}\\textsf{Medium}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eMath\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eGiven a signed 32-bit integer \u003ccode\u003ex\u003c/code\u003e, return \u003ccode\u003ex\u003c/code\u003e \u003cem\u003ewith its digits reversed\u003c/em\u003e. If reversing \u003ccode\u003ex\u003c/code\u003e causes the value to go outside the signed 32-bit integer range \u003ccode\u003e[-2^31, 2^31-1]\u003c/code\u003e, then return \u003ccode\u003e0\u003c/code\u003e.\u003cbr\u003e\n\u003cstrong\u003eAssume the environment does not allow you to store 64-bit integers (signed or unsigned).\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInput:\u003c/strong\u003e x = 123\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e 321\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInput:\u003c/strong\u003e x = -123\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e -321\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e","title":"[Leetcode] 7. Reverse Integer"},{"content":"6. Zigzag Conversion\nHardness: \\(\\color{orange}\\textsf{Medium}\\) Ralated Topics: String 一、題目 The string \u0026quot;PAYPALISHIRING\u0026quot; is written in a zigzag pattern on a given number of rows like this: (you may want to dispaly this pattern in a fixed font for better legibility)\n\\( \\quad\\texttt{P A H N}\\\\ \\quad\\texttt{APLSIIG}\\\\ \\quad\\texttt{Y I R}\\\\ \\)\nAnd then read line by line: \u0026quot;PAHNAPLSIIGYIR\u0026quot;\nWrite the code that will take a string and make this conversion given a number of rows: string convert(string s, int numRows\nExample 1:\nInput: s = \u0026ldquo;PAYPALISHIRING\u0026rdquo;, numRows = 3 Output: \u0026ldquo;PAHNAPLSIIGYIR\u0026rdquo; Example 2:\nInput: s = \u0026ldquo;PAYPALISHIRING\u0026rdquo;, numRows = 3 Output: \u0026ldquo;PINALSIGYAHRPI\u0026rdquo; Explanation:\n\\( \\quad\\texttt{P　I　N}\\\\ \\quad\\texttt{A LS IG}\\\\ \\quad\\texttt{YA HR}\\\\ \\quad\\texttt{P　I}\\\\ \\) Example 3:\nInput: s = \u0026ldquo;A\u0026rdquo;, numRows = 1 Output: \u0026ldquo;A\u0026rdquo; Constraints:\n1 \u0026lt;= s.length \u0026lt;= 1000 s consists of English letters (lower-case and upper-case), ',' amd '.'. 1 \u0026lt;= numRows \u0026lt;= 1000\u0026gt; 二、分析 創建 numRows 個 vectors，依照，用一個 k 控制當下的字元要放到哪一個 vector 中。 用一個 unit 來控制 k 要往上走還是往下走。 按照規律，當 k + unit 為 numRows 與 -1 時，unit 要正負翻轉。 特例：當 numRows 等於 1 時，輸出等於輸入。 三、解題 1. Array Time complexity: \\(O(n)\\) Space complexity: \\(O(n)\\) string convert(string s, int numRows) { if (numRows == 1) return s; vector\u0026lt;string\u0026gt; rows(numRows); int unit = 1; int k = 0; for (int i = 0; i \u0026lt; s.length(); i++) { if (k + unit == numRows || k + unit == -1) unit *= -1; rows[k].push_back(s[i]); k += unit; } string res; for (string\u0026amp; s : rows) res += s; return res; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/6/","summary":"\u003cp\u003e\u003cstrong\u003e6. Zigzag Conversion\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{orange}\\textsf{Medium}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eString\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eThe string \u003ccode\u003e\u0026quot;PAYPALISHIRING\u0026quot;\u003c/code\u003e is written in a zigzag pattern on a given number of rows like this: (you may want to dispaly this pattern in a fixed font for better legibility)\u003cbr\u003e\n\\(\n\\quad\\texttt{P A H N}\\\\\n\\quad\\texttt{APLSIIG}\\\\\n\\quad\\texttt{Y I R}\\\\\n\\)\u003cbr\u003e\nAnd then read line by line: \u003ccode\u003e\u0026quot;PAHNAPLSIIGYIR\u0026quot;\u003c/code\u003e\u003cbr\u003e\nWrite the code that will take a string and make this conversion given a number of rows:\n\u003ccode\u003estring convert(string s, int numRows\u003c/code\u003e\u003c/p\u003e","title":"[Leetcode] 6. Zigzag Conversion"},{"content":"5. Longest Substring Without Repeating Characters\nHardness: \\(\\color{orange}\\textsf{Medium}\\) Ralated Topics: String、Dynamic Programming 一、題目 Given a string s, return the longest palindromic substring in s.\nA string is called a palindrome string if the reverse of that string is the same of the original string.\nExample 1:\nInput: s = \u0026ldquo;babad\u0026rdquo; Output: \u0026ldquo;bab\u0026rdquo; Explanation: \u0026ldquo;aba\u0026rdquo; is also a valid answer. Example 2:\nInput: s = \u0026ldquo;cbbd\u0026rdquo; Output: \u0026ldquo;bb\u0026rdquo; Constraints:\n1 \u0026lt;= s.length \u0026lt;= 1000 s consists of only digits and English letters. 二、分析 注意 palindrome string 的特性： 當長度為 1 時，必為 palindrome string 當長度為 2 時，兩個字元必須相同才為 palindrome string 當長度 \u0026gt;2 時，palindrome string 必須滿足 最左邊的字元等於最右邊的字元，即 s[left] == s[right] 除去最左邊的字元跟最右邊的字元，必須為 palindrome string，\n即 s.substr(left+1, len-2) 為 palindromic。 三、解題 1. Dynamic Prograimming Time complexity: \\(O(n^2)\\) Space complexity: \\(O(n^2)\\) string longestPalindrome(string s) { int n = s.length(); string res; bool dp[n][n]; memset(dp, false, sizeof(dp)); int len = 0; for (int j = 0; j \u0026lt; n; j++) { for (int i = 0; i \u0026lt;= j; i++) { if (i == j) { // 長度為 1 dp[i][j] = true; } else if (j - i == 1) { // 長度為 2 dp[i][j] = s[i] == s[j]; } else { // 長度 \u0026gt; 2 dp[i][j] = s[i] == s[j] \u0026amp;\u0026amp; dp[i+1][j-1]; } if (dp[i][j] \u0026amp;\u0026amp; j - i + 1 \u0026gt; len) { // 比較長度 len = j - i + 1; res = s.substr(i, len); } } } return res; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/5/","summary":"\u003cp\u003e\u003cstrong\u003e5. Longest Substring Without Repeating Characters\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{orange}\\textsf{Medium}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eString\u003c/code\u003e、\u003ccode\u003eDynamic Programming\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eGiven a string \u003ccode\u003es\u003c/code\u003e, return \u003cem\u003ethe longest palindromic substring\u003c/em\u003e in \u003ccode\u003es\u003c/code\u003e.\u003cbr\u003e\nA string is called a palindrome string if the reverse of that string is the same of the original string.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInput:\u003c/strong\u003e s = \u0026ldquo;babad\u0026rdquo;\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u0026ldquo;bab\u0026rdquo;\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e \u0026ldquo;aba\u0026rdquo; is also a valid answer.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInput:\u003c/strong\u003e s = \u0026ldquo;cbbd\u0026rdquo;\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e \u0026ldquo;bb\u0026rdquo;\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e1 \u0026lt;= s.length \u0026lt;= 1000\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003es\u003c/code\u003e consists of only digits and English letters.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"二分析\"\u003e二、分析\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e注意 palindrome string 的特性：\n\u003cul\u003e\n\u003cli\u003e當長度為 \u003ccode\u003e1\u003c/code\u003e 時，必為 palindrome string\u003c/li\u003e\n\u003cli\u003e當長度為 \u003ccode\u003e2\u003c/code\u003e 時，兩個字元必須相同才為 palindrome string\u003c/li\u003e\n\u003cli\u003e當長度 \u003ccode\u003e\u0026gt;2\u003c/code\u003e 時，palindrome string 必須滿足\n\u003col\u003e\n\u003cli\u003e最左邊的字元等於最右邊的字元，即 \u003ccode\u003es[left] == s[right]\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e除去最左邊的字元跟最右邊的字元，必須為 palindrome string，\u003cbr\u003e\n即 \u003ccode\u003es.substr(left+1, len-2)\u003c/code\u003e 為 palindromic。\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"三解題\"\u003e三、解題\u003c/h3\u003e\n\u003ch4 id=\"1-dynamic-prograimming\"\u003e1. Dynamic Prograimming\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eTime complexity: \\(O(n^2)\\)\u003c/li\u003e\n\u003cli\u003eSpace complexity: \\(O(n^2)\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003estring \u003cspan style=\"color:#a6e22e\"\u003elongestPalindrome\u003c/span\u003e(string s) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e s.length();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    string res;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ebool\u003c/span\u003e dp[n][n];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    memset(dp, false, \u003cspan style=\"color:#66d9ef\"\u003esizeof\u003c/span\u003e(dp));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e len \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e j \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; j \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e n; j\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e j; i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (i \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e j) {   \u003cspan style=\"color:#75715e\"\u003e// 長度為 1\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e                dp[i][j] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e true;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (j \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e) {    \u003cspan style=\"color:#75715e\"\u003e// 長度為 2\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e                dp[i][j] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e s[i] \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e s[j];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {        \u003cspan style=\"color:#75715e\"\u003e// 長度 \u0026gt; 2\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e                dp[i][j] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e s[i] \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e s[j] \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e dp[i\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e][j\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (dp[i][j] \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e j \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e len) {    \u003cspan style=\"color:#75715e\"\u003e// 比較長度\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e                len \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e j \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                res \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e s.substr(i, len);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e res;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ca href=\"/leetcode\"\u003e回目錄 Catalog\u003c/a\u003e\u003c/p\u003e","title":"[LeetCode] 5. Longest Palindromic Substring"},{"content":"4. Median of Two Sorted Arrays\nHardness: \\(\\color{red}\\textsf{Hard}\\) Ralated Topics: Array、Binary Search、Divide and Conquer 一、題目 Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the sorted arrays.\nThe overall run time complexity should be O(log (m+n)).\nExample 1:\nInput: nums1 = [1,3], nums2 = [2] Output: 2.00000 Explanation: merged array = [1,2,3] and median is 2. Example 2:\nInput: nums1 = [1,2], nums2 = [3,4] Output: 2.50000 Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5. Constraints:\nnums1.length == m nums2.length == n 0 \u0026lt;= m \u0026lt;= 1000 0 \u0026lt;= n \u0026lt;= 1000 -10^6 \u0026lt;= nums1[i], nums2[i] \u0026lt;= 10^6 二、分析 這題用暴力解，先兩個數組合併後再求值，其時間複雜度為 \\(O(m+n)\\)。不符合題目要求。 因為兩個數組為已排序的數組，故我們可以利用其性質： nums1 中第 k 個元素表示有 k-1 個數比它還小。 故我們可以用分治法去處理這個問題， 求第 kth 個元素。 若 nums1 中前 3 個數確定小於 median 值，則我們可以視為求第 k-3 個數 \\(\\texttt{[1,2,3,3,4]}\\) 求 9 個數中的第 5 小的數\n\\(\\text{}\\uparrow\\)\n\\(\\texttt{[2,4,6,8]}\\)\n\\(\\text{}\\uparrow\\) \\(\\texttt{[1,2,3,3,4]}\\) 求剩下 6 個數中的第 2 小的數\n\\(\\text{　}\\uparrow\\)\n\\(\\texttt{[2,4,6,8]}\\)\n\\(\\text{}\\uparrow\\) 如此一來，我們每次可以逼進 Median 的個數為 log(m)或 log(n)，也就是說時間複雜度降為 \\(O(\\log(m+n))\\) 或是我們也可以將 num1 與 nums2 各別分為兩個子數組，並以長度較小的數組來切(可以降低時間複雜度)。 \\(\\texttt{[1,2|3,4]}\\) \\(\\texttt{[2,4|6,8,9]}\\) 其切割線左右的四個值 l1、l2、r1、r2 符合以下性質時可求得 median l1 \u0026lt;= r2 l2 \u0026lt;= r1 奇數時為 max(l1, l2) 偶數時為 max(l1, l2) + min(r1,r2) 的平均 三、解題 1. Brute Method Time complexity: \\(O(m+n)\\) Space complexity: \\(O(m+n)\\) double findMedianSortedArray(vector\u0026lt;int\u0026gt;\u0026amp; nums1, vector\u0026lt;int\u0026gt;\u0026amp; nums2) { int m = nums1.size(), n = num2.size(); vector\u0026lt;int\u0026gt; nums; // 先將兩個數組 merge 後再求 median int i = 0, j = 0; while (i \u0026lt; m \u0026amp;\u0026amp; j \u0026lt; n) { if (nums1[i] \u0026lt; nums2[j]) nums.push_back(nums1[i++]); else nums.push_back(nums2[j++]); } while (i \u0026lt; m) nums.push_back(nums1[i++]); while (j \u0026lt; n) nums.push_back(nums2[j++]); int len = nums.size(); // 若數組長度為奇數則回傳中間的值，若為偶數則為中間兩數的平均。 return (len \u0026amp; 1) ? (nums[len/2]/1.0) : (nums[len/2-1] + nums[len/2])/2.0; } 2. Kth Element Time complexity: \\(O(\\log(m+n))\\) Space complexity: \\(O(1)\\) vector\u0026lt;int\u0026gt; nums1, nums2 int m, n; // nums1 確定有 i 個元素小於 median，nums2 中確定有 j 個元素小於 median，求第 k 個元素 double kth(int i, int j, int k) { if (i == m) return nums2[j+k-1]; // nums1 用完了，直接對 nums2 取第 j+k 個元素 if (j == n) return nums1[i+k-1]; // nums2 用完了，直接對 nums1 取第 i+k 個元素 if (k == 1) return min(nums1[i], nums2[j]); //當前比較小的即為第 k 個元素 int mid1 = (i+k/2-1) \u0026gt;= m ? INT_MAX : nums1[i+k/2-1]; int mid2= (i+k/2-1) \u0026gt;= n ? INT_MAX : unms2[j+k/2-1]; // 兩個數組都往前推 k/2 個，其當前值較小的，其數組前 k/2 個數必定小於 median if (mid1 \u0026lt; mid2) return kth(i+k/2, j, k-k/2); else return kth(i, j+k/2, k-k/2); } double findMedianSortedArrays(vector\u0026lt;int\u0026gt;\u0026amp; nums1, vector\u0026lt;int\u0026gt;\u0026amp; nums2) { this-\u0026gt;nums1 = nums1; this-\u0026gt;nums2 = nums2; this-\u0026gt;m = nums1.size(); this-\u0026gt;n = nums2.size(); int len = m + n; // 若數組長度為奇數則回傳中間的值，若為偶數則為中間兩數的平均。 if (len \u0026amp; 1) return kth(0, 0, len/2+1)/1.0; return (kth(0, 0, len/2) + kth(0, 0, len/2+1))/2.0; } 3. Binary Search Time complexity: \\(O(\\log(\\text{min}(m+n)))\\) Space complexity: \\(O(1)\\) double findMedianSortedArrays(vector\u0026lt;int\u0026gt;\u0026amp; nums1, vector\u0026lt;int\u0026gt;\u0026amp; nums2) { int m = nums1.size(), n = nums2.size(); int len = m + n; // 確保 nums1 的長度比較短，以減少時間複雜度 if (m \u0026gt; n) return findMedianSortedArrays(nums2, nums1); int l = 0, r = m; int l1, l2, r1, r2; // binary search while (l \u0026lt;= r) { int cut1 = (l+r)/2; int cut2 = (len+1)/2 - cut1; // 注意 len+1 l1 = cut1 == 0 ? INT_MIN : nums1[cut1-1]; l2 = cut2 == 0 ? INT_MIN : nums2[cut2-1]; r1 = cut1 == m ? INT_MAX : nums1[cut1]; r2 = cut2 == n ? INT_MAX : nums2[cut2]; if (l1 \u0026lt;= r2 \u0026amp;\u0026amp; l2 \u0026lt;= r1) { // median 必定為 l1 或 l2 break; } else if (l1 \u0026gt; r2) { r = cut1-1; } else { l = cut1+1; } } if (len \u0026amp; 1) return max(l1, l2)/1.0; return (max(l1, l2) + min(r1, r2))/2.0; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/4/","summary":"\u003cp\u003e\u003cstrong\u003e4. Median of Two Sorted Arrays\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{red}\\textsf{Hard}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eArray\u003c/code\u003e、\u003ccode\u003eBinary Search\u003c/code\u003e、\u003ccode\u003eDivide and Conquer\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eGiven two sorted arrays \u003ccode\u003enums1\u003c/code\u003e and \u003ccode\u003enums2\u003c/code\u003e of size \u003ccode\u003em\u003c/code\u003e and \u003ccode\u003en\u003c/code\u003e respectively, return \u003cstrong\u003ethe median\u003c/strong\u003e of the sorted arrays.\u003cbr\u003e\nThe overall run time complexity should be \u003ccode\u003eO(log (m+n))\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInput:\u003c/strong\u003e nums1 = [1,3], nums2 = [2]\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e 2.00000\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e merged array = [1,2,3] and median is 2.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInput:\u003c/strong\u003e nums1 = [1,2], nums2 = [3,4]\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e 2.50000\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e","title":"[LeetCode] 4. Median of Two Sorted Arrays"},{"content":"3. Longest Substring Without Repeating Characters\nHardness: \\(\\color{orange}\\textsf{Medium}\\) Ralated Topics: Hash Table、String、Sliding Window 一、題目 Given a string s, find the length of the longest substring without repeating characters.\nExample 1:\nInput: s = \u0026ldquo;abcabcbb\u0026rdquo; Output: 3 Explanation: The answer is \u0026ldquo;abc\u0026rdquo;, with the length of 3. Example 2:\nInput: s = \u0026ldquo;bbbbb\u0026rdquo; Output: 1 Explanation: The answer is \u0026ldquo;b\u0026rdquo;, with the length of 1. Example 3:\nInput: s = \u0026ldquo;pwwkew\u0026rdquo; Output: 3 Explanation: The answer is \u0026ldquo;wke\u0026rdquo;, with the length of 3. Notice that the answer must be a substring, \u0026ldquo;pwke\u0026rdquo; is a subsequence and not a substring. Constraints:\n0 \u0026lt;= s.length \u0026lt;= 5 * 10^4 s consists of English letters, digits, symbols and spaces. 二、分析 這題是 Sliding Window 的應用，創建一個 sliding window，右指標滑動的條件為，window 中無重複的字元，當出現重複字元時，則滑動左指標。 時間複雜度為 \\(O(n)\\)，空間複雜度為 \\(O(1)\\)。 空間複雜度為 \\(O(k)\\)，k 為字元的個數，最多為 128 個(題目限制字元為 letters, digits, symbols and spaces)，故\\(O(k)=O(128)=O(1)\\) 三、解題 1. Sliding Window Time complexity: \\(O(n)\\) Space complexity: \\(O(1)\\) int lengthOfLongestSubstring(string s) { int cnt[128] = {0}; int left = 0, right = 0; int res = 0; while (right \u0026lt; s.length()) { char c = s[right++]; while (cnt[c]) { // 若 window 中已有該字元，則滑動左指標 char d = s[left]++; cnt[d]--; // 將 window 中，左指標的字元數減 1 } res = max(res, right - left); // 比較當前的長度 cnt[c]++; // 將 window 中，右指標的字元數加 1 } return res; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/3/","summary":"\u003cp\u003e\u003cstrong\u003e3. Longest Substring Without Repeating Characters\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{orange}\\textsf{Medium}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eHash Table\u003c/code\u003e、\u003ccode\u003eString\u003c/code\u003e、\u003ccode\u003eSliding Window\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eGiven a string \u003ccode\u003es\u003c/code\u003e, find the length of the \u003cstrong\u003elongest substring\u003c/strong\u003e without repeating characters.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInput:\u003c/strong\u003e s = \u0026ldquo;abcabcbb\u0026rdquo;\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e 3\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e The answer is \u0026ldquo;abc\u0026rdquo;, with the length of 3.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInput:\u003c/strong\u003e s = \u0026ldquo;bbbbb\u0026rdquo;\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e 1\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e The answer is \u0026ldquo;b\u0026rdquo;, with the length of 1.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 3:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInput:\u003c/strong\u003e s = \u0026ldquo;pwwkew\u0026rdquo;\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e 3\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e The answer is \u0026ldquo;wke\u0026rdquo;, with the length of 3.  Notice that the answer must be a substring, \u0026ldquo;pwke\u0026rdquo; is a subsequence and not a substring.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e","title":"[LeetCode] 3. Longest Substring Without Repeating Characters"},{"content":"2. Add Two Numbers\nHardness: \\(\\color{orange}\\textsf{Medium}\\) Ralated Topics: Linked List、Math、Recursion 一、題目 You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\nExample 1:\nInput: l1 = [2,4,3], l2 = [5,6,4] Output: [7,0,8] Explanation: 342 + 465 = 807 Example 2:\nInput: l1 = [0], l2 = [0] Output: [0] Example 3:\nInput: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9] Output: [8,9,9,9,0,0,0,1] Constraints:\nThe number of nodes in each linked list is in the range [1, 100]. 0 \u0026lt;= Node.val \u0026lt;= 9 It is guaranteed that the list represents a number that does not have leading zeros. 二、分析 此題是加法器的現作，只是改成 linked list 的型式。 要注意進位時要新增新的 node。 時間複雜度為 \\(O(n)\\)，若可利用原本的鏈表，空間複雜度可降為 \\(O(1)\\)。 三、解題 1. Recursion Time complexity: \\(O(n)\\) Space complexity: \\(O(1)\\) ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) { return add(l1, l2, 0); } ListNode* add(ListNode* l1, ListNode* l2, int cin){ // 將 cin 設為 carry in l1-\u0026gt;val += l2-\u0026gt;val + cin; cin = l1-\u0026gt;val / 10; // 進位 l1-\u0026gt;val %= 10; if (l1-\u0026gt;next || l2-\u0026gt;next || cin != 0){ // 若有下一位數，或 carry in 不等於 0 l1-\u0026gt;next = add((l1-\u0026gt;next == NULL ? new ListNode(0) : l1-\u0026gt;next), (l2-\u0026gt;next == NULL ? new ListNode(0) : l2-\u0026gt;next), cin); } return l1; } } 2. Iteration Time complexity: \\(O(n)\\) Space complexity: \\(O(1)\\) ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) { ListNode* dummy = new ListNode(-1, l1); // 設置一個 sentinel node ListNode* curr = dummy; // 設置一個在當前位置前的節點來控制資料 int cin = 0; while (l1 || l2 || cin \u0026gt; 0) { // 當必定有下一位時 // 借用 l1 或 l2，若兩者皆為空節點，則新建一個 ListNode* tmp = l1 ? l1 : l2 : l2 : new ListNode(0); // 加法器 tmp-\u0026gt;val = (l1 ? l1-\u0026gt;val : 0) + (l2 ? l2-\u0026gt;val : 0) + cin; cin = tmp / 10; tmp-\u0026gt;val %= 10; // 處理當 l1 為空結點的狀況 if (!l1 \u0026amp;\u0026amp; l2) { // l2 不為空節點時，則借 l2 來用 curr-\u0026gt;next = l2; } else { // 若 l1 跟 l2 都是空節點，建一個新的節點 curr-\u0026gt;next = tmp; } if (l1) l1 = l1-\u0026gt;next; // 前進一個節點 if (l2) l2 = l2-\u0026gt;next; curr = curr-\u0026gt;next; } return dummy-\u0026gt;next; // 記得回傳的是 sentinel-\u0026gt;next } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/2/","summary":"\u003cp\u003e\u003cstrong\u003e2. Add Two Numbers\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{orange}\\textsf{Medium}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eLinked List\u003c/code\u003e、\u003ccode\u003eMath\u003c/code\u003e、\u003ccode\u003eRecursion\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eYou are given two \u003cstrong\u003enon-empty\u003c/strong\u003e linked lists representing two non-negative integers. The digits are stored in \u003cstrong\u003ereverse order\u003c/strong\u003e, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\u003cbr\u003e\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003cbr\u003e\n\u003cimg alt=\"addtwonumber1\" loading=\"lazy\" src=\"https://assets.leetcode.com/uploads/2020/10/02/addtwonumber1.jpg\"\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInput:\u003c/strong\u003e l1 = [2,4,3], l2 = [5,6,4]\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e [7,0,8]\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e 342 + 465 = 807\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e","title":"[LeetCode] 2. Add Two Numbers"},{"content":"1. Two Sum\nHardness: \\(\\color{green}\\textsf{Easy}\\) Ralated Topics: Array、Hash Table 一、題目 Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\nYou can return the answer in any order.\nExample 1:\nInput: nums = [2,7,11,15], taget = 9 Output: [0,1] Explanation: Because nums[0] + nums[1] == 9, we return [0,1]. Example 2:\nInput: nums = [3,2,4], taget = 6 Output: [1,2] Example 3:\nInput: nums = [3,3], taget = 6 Output: [0,1] Constraints:\n2 \u0026lt;= nums.length \u0026lt;= 10^4 -10^9 \u0026lt;= nums[i] \u0026lt;= 10^9 -10^9 \u0026lt;= target \u0026lt;= 10^9\u0026gt; Only one valid answer exists 二、分析 可藉由兩個迴圈暴力解求值，其時間複雜度為 \\(O(n^2)\\)。 若我們將已迭代過的值存入 HashMap，接下來我們就只需要找 HashMap 中是否有值與當下的值 nums[i] 相加為 target。因為只迭代一遍，故時間複雜度為 \\(O(n)\\)。 三、解題 1. HashMap Time complexity: \\(O(n)\\) Space complexity: \\(O(n)\\) vector\u0026lt;int\u0026gt; twoSum(vector\u0026lt;int\u0026gt;\u0026amp; nums, int target) { unordered_map\u0026lt;int,int\u0026gt; map; // {值, 索引} int i; // 將 i 宣告在 for-loop 外 for (i = 0; i \u0026lt; nums.size(); i++) { if (map.find(target - nums[i]) != map.end()) break; // 若找到答案，則退出迴圈 map[nums[i]] = i; // 若沒有符合的答案，將值加入 HashMap } return {map[target-nums[i]], i}; // 注意加入 HashMap 的索引值會比當下的 i 值還小 } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/1/","summary":"\u003cp\u003e\u003cstrong\u003e1. Two Sum\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{green}\\textsf{Easy}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eArray\u003c/code\u003e、\u003ccode\u003eHash Table\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eGiven an array of integers \u003ccode\u003enums\u003c/code\u003e and an integer \u003ccode\u003etarget\u003c/code\u003e, return \u003cem\u003eindices of the two numbers such that they add up to \u003ccode\u003etarget\u003c/code\u003e\u003c/em\u003e.\u003cbr\u003e\nYou may assume that each input would have \u003cstrong\u003eexactly one solution\u003c/strong\u003e, and you may not use the \u003cem\u003esame\u003c/em\u003e element twice.\u003cbr\u003e\nYou can return the answer in any order.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInput:\u003c/strong\u003e nums = [2,7,11,15], taget = 9\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e [0,1]\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eExplanation:\u003c/strong\u003e Because nums[0] + nums[1] == 9, we return [0,1].\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e","title":"[LeetCode] 1. Two Sum"},{"content":" 比較簡單的解法，使用 unordered_set class Solution { public: bool hasAllCodes(string s, int k) { unordered_set\u0026lt;string\u0026gt; set; for (int i = 0; i + k \u0026lt;= s.size(); i++) { set.insert(s.substr(i, k)); } return set.size() == pow(2, k); } }; 使用 sliding window，並運用移位運算子 class Solution { public: bool hasAllCodes(string s, int k) { if (s.size() \u0026lt; k) return false; int n = pow(2, k); vector\u0026lt;bool\u0026gt; used(n, false); int curr = 0; for (int i = 0; i \u0026lt; k; i++) { curr \u0026lt;\u0026lt;= 1; curr += (s[i] - \u0026#39;0\u0026#39;); } used[curr] = true; for (int i = k; i \u0026lt; s.size(); i++) { curr \u0026lt;\u0026lt;= 1; curr += (s[i] - \u0026#39;0\u0026#39;); curr %= n; used[curr] = true; } return all_of(used.begin(), used.end(), [](int x) { return x; }); } }; ","permalink":"https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/1461/","summary":"\u003cul\u003e\n\u003cli\u003e比較簡單的解法，使用 unordered_set\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSolution\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ebool\u003c/span\u003e hasAllCodes(string s, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e k) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        unordered_set\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003estring\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e set;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e k \u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e s.size(); i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            set.insert(s.substr(i, k));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e set.size() \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e pow(\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, k);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e使用 sliding window，並運用移位運算子\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSolution\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ebool\u003c/span\u003e hasAllCodes(string s, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e k) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (s.size() \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e k) \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e false;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e pow(\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, k);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003ebool\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e used(n, false);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e curr \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e k; i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            curr \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            curr \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e (s[i] \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;0\u0026#39;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        used[curr] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e true;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e k; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e s.size(); i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            curr \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            curr \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e (s[i] \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;0\u0026#39;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            curr \u003cspan style=\"color:#f92672\"\u003e%=\u003c/span\u003e n;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            used[curr] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e true;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eall_of\u003c/span\u003e(used.begin(), used.end(), [](\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e x) { \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e x; });\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"[LeetCode] 1461. Check If a String Contains All Binary Codes of Size K"},{"content":" 定長度的 sliding window，搭配對 window 檢查是否滿足條件 class Solution { public: long long maxSum(vector\u0026lt;int\u0026gt;\u0026amp; nums, int m, int k) { int n = nums.size(); unordered_map\u0026lt;int,int\u0026gt; cnt; long long sum = 0; long long res = 0; int valid = 0; for (int i = 0; i \u0026lt; k; i++) { sum += nums[i]; if (cnt[nums[i]]++ == 0) valid++; } if (valid \u0026gt;= m) res = sum; for (int i = k; i \u0026lt; n; i++) { sum += (nums[i] - nums[i-k]); if (cnt[nums[i]]++ == 0) valid++; if (--cnt[nums[i-k]] == 0) valid--; if (valid \u0026gt;= m) res = max(res, sum); } return res; } }; ","permalink":"https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/2841/","summary":"\u003cul\u003e\n\u003cli\u003e定長度的 sliding window，搭配對 window 檢查是否滿足條件\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSolution\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003elong\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003elong\u003c/span\u003e maxSum(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e nums, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e m, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e k) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e nums.size();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        unordered_map\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e,\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e cnt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elong\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003elong\u003c/span\u003e sum \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elong\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003elong\u003c/span\u003e res \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e valid \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e k; i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            sum \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e nums[i];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (cnt[nums[i]]\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e) valid\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (valid \u003cspan style=\"color:#f92672\"\u003e\u0026gt;=\u003c/span\u003e m) res \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e sum;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e k; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e n; i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            sum \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e (nums[i] \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e nums[i\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003ek]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (cnt[nums[i]]\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e) valid\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003ecnt[nums[i\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003ek]] \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e) valid\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (valid \u003cspan style=\"color:#f92672\"\u003e\u0026gt;=\u003c/span\u003e m) res \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e max(res, sum);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e res;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"[LeetCode] 2841. Maximum Sum of Almost Unique Subarray"},{"content":" 定長度的 sliding window，秒殺 class Solution { public: int maxSatisfied(vector\u0026lt;int\u0026gt;\u0026amp; customers, vector\u0026lt;int\u0026gt;\u0026amp; grumpy, int k) { int n = customers.size(); int sum = 0; for (int i = 0; i \u0026lt; n; i++) { if (!grumpy[i]) { sum += customers[i]; customers[i] = 0; } } for (int i = 0; i \u0026lt; k; i++) { sum += customers[i]; } int res = sum; for (int i = k; i \u0026lt; n; i++) { sum += (customers[i] - customers[i-k]); res = max(res, sum); } return res; } }; ","permalink":"https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/1052/","summary":"\u003cul\u003e\n\u003cli\u003e定長度的 sliding window，秒殺\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSolution\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e maxSatisfied(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e customers, vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e grumpy, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e k) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e customers.size();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e sum \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e n; i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003egrumpy[i]) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                sum \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e customers[i];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                customers[i] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e k; i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            sum \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e customers[i];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e res \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e sum;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e k; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e n; i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            sum \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e (customers[i] \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e customers[i\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003ek]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            res \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e max(res, sum);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e res;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"[LeetCode] 1052. Grumpy Bookstore Owner"},{"content":" 定長度的 sliding window，秒殺 class Solution { public: int minimumRecolors(string blocks, int k) { int cnt = 0; for (int i = 0; i \u0026lt; k; i++) { if (blocks[i] == \u0026#39;B\u0026#39;) cnt++; } int res = k-cnt; for (int i = k; i \u0026lt; blocks.size(); i++) { if (blocks[i] == \u0026#39;B\u0026#39;) cnt++; if (blocks[i-k] == \u0026#39;B\u0026#39;) cnt--; res = min(res, k-cnt); } return res; } }; ","permalink":"https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/2379/","summary":"\u003cul\u003e\n\u003cli\u003e定長度的 sliding window，秒殺\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSolution\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e minimumRecolors(string blocks, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e k) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e cnt \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e k; i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (blocks[i] \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;B\u0026#39;\u003c/span\u003e) cnt\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e res \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e k\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003ecnt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e k; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e blocks.size(); i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (blocks[i] \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;B\u0026#39;\u003c/span\u003e) cnt\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (blocks[i\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003ek] \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;B\u0026#39;\u003c/span\u003e) cnt\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            res \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e min(res, k\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003ecnt);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e res;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"[LeetCode] 2379. Minimum Recolors to Get K Consecutive Black Blocks"},{"content":"\n這題一樣是定長度的 sliding window，但要做一下轉換，半徑為 k，代表 window_size 為 2k+1。 class Solution { public: vector\u0026lt;int\u0026gt; getAverages(vector\u0026lt;int\u0026gt;\u0026amp; nums, int k) { int n = nums.size(); int m = 2*k+1; vector\u0026lt;int\u0026gt; res(n, -1); if (m \u0026gt; n) return res; long long sum = 0; for (int i = 0; i \u0026lt; m; i++) { sum += nums[i]; } res[k] = sum / m; for (int i = m, j = k+1; i \u0026lt; n; i++, j++) { sum += (nums[i] - nums[i-m]); res[j] = sum / m; } return res; } }; ","permalink":"https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/2090/","summary":"\u003cp\u003e\u003cimg alt=\"sample\" loading=\"lazy\" src=\"https://assets.leetcode.com/uploads/2021/11/07/eg1.png\"\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e這題一樣是定長度的 sliding window，但要做一下轉換，半徑為 \u003ccode\u003ek\u003c/code\u003e，代表 window_size 為 \u003ccode\u003e2k+1\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSolution\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e getAverages(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e nums, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e k) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e nums.size();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e m \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003ek\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e res(n, \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (m \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e n) \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e res;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003elong\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003elong\u003c/span\u003e sum \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e m; i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            sum \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e nums[i];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        res[k] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e sum \u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e m;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e m, j \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e k\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e n; i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e, j\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            sum \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e (nums[i] \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e nums[i\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003em]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            res[j] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e sum \u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e m;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e res;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"[LeetCode] 2090. K Radius Subarray Averages"},{"content":" 定長度的 sliding window，秒殺 class Solution { public: int numOfSubarrays(vector\u0026lt;int\u0026gt;\u0026amp; arr, int k, int threshold) { threshold *= k; int sum = 0; for (int i = 0; i \u0026lt; k; i++) { sum += arr[i]; } int res = 0; if (sum \u0026gt;= threshold) res++; for (int i = k; i \u0026lt; arr.size(); i++) { sum += (arr[i] - arr[i-k]); if (sum \u0026gt;= threshold) res++; } return res; } }; ","permalink":"https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/1343/","summary":"\u003cul\u003e\n\u003cli\u003e定長度的 sliding window，秒殺\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSolution\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e numOfSubarrays(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e arr, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e k, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e threshold) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        threshold \u003cspan style=\"color:#f92672\"\u003e*=\u003c/span\u003e k;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e sum \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e k; i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            sum \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e arr[i];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e res \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (sum \u003cspan style=\"color:#f92672\"\u003e\u0026gt;=\u003c/span\u003e threshold) res\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e k; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e arr.size(); i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            sum \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e (arr[i] \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e arr[i\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003ek]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (sum \u003cspan style=\"color:#f92672\"\u003e\u0026gt;=\u003c/span\u003e threshold) res\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e res;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"[LeetCode] 1343. Number of Sub-arrays of Size K and Average Greater than or Equal to Threshold"},{"content":" 定長度的 sliding window，秒殺 class Solution { public: double findMaxAverage(vector\u0026lt;int\u0026gt;\u0026amp; nums, int k) { int sum = 0; for (int i = 0; i \u0026lt; k; i++) { sum += nums[i]; } int res = sum; for (int i = k; i \u0026lt; nums.size(); i++) { sum += nums[i]; sum -= nums[i-k]; res = max(res, sum); } return res/(double)k; } }; ","permalink":"https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/643/","summary":"\u003cul\u003e\n\u003cli\u003e定長度的 sliding window，秒殺\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSolution\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edouble\u003c/span\u003e findMaxAverage(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e nums, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e k) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e sum \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e k; i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            sum \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e nums[i];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e res \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e sum;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e k; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e nums.size(); i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            sum \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e nums[i];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            sum \u003cspan style=\"color:#f92672\"\u003e-=\u003c/span\u003e nums[i\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003ek];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            res \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e max(res, sum);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e res\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003edouble\u003c/span\u003e)k;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"[LeetCode] 643. Maximum Average Subarray I"},{"content":" 定長度的 sliding window，秒殺 class Solution { public: int maxVowels(string s, int k) { int cnt = 0; unordered_set\u0026lt;char\u0026gt; set = {\u0026#39;a\u0026#39;,\u0026#39;e\u0026#39;,\u0026#39;i\u0026#39;,\u0026#39;o\u0026#39;,\u0026#39;u\u0026#39;}; for (int i = 0; i \u0026lt; k; i++) { if (set.count(s[i])) cnt++; } int res = cnt; for (int i = k; i \u0026lt; s.size(); i++) { if (set.count(s[i])) cnt++; if (set.count(s[i-k])) cnt--; res = max(res, cnt); } return res; } }; ","permalink":"https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/1456/","summary":"\u003cul\u003e\n\u003cli\u003e定長度的 sliding window，秒殺\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-cpp\" data-lang=\"cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSolution\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e maxVowels(string s, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e k) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e cnt \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        unordered_set\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e set \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;a\u0026#39;\u003c/span\u003e,\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;e\u0026#39;\u003c/span\u003e,\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;i\u0026#39;\u003c/span\u003e,\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;o\u0026#39;\u003c/span\u003e,\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;u\u0026#39;\u003c/span\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e k; i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (set.count(s[i])) cnt\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e res \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e cnt;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e k; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e s.size(); i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (set.count(s[i])) cnt\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (set.count(s[i\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003ek])) cnt\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            res \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e max(res, cnt);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e res;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"[LeetCode] 1456. Maximum Number of Vowels in a Substring of Given Length"},{"content":"1.1 基礎 1456. Maximum Number of Vowels in a Substring of Given Length 643. Maximum Average Subarray I 1343. Number of Sub-arrays of Size K and Average Greater than or Equal to Threshold 2090. K Radius Subarray Averages 2379. Minimum Recolors to Get K Consecutive Black Blocks 1052. Grumpy Bookstore Owner 1461. Check If a String Contains All Binary Codes of Size K 2841. Maximum Sum of Almost Unique Subarray ","permalink":"https://intervalrain.github.io/leetcode_list/sliding_window_dblptr/","summary":"\u003ch2 id=\"11-基礎\"\u003e1.1 基礎\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"/leetcode_list/sliding_window_dblptr/1456\"\u003e1456. Maximum Number of Vowels in a Substring of Given Length\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/leetcode_list/sliding_window_dblptr/643\"\u003e643. Maximum Average Subarray I\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/leetcode_list/sliding_window_dblptr/1343\"\u003e1343. Number of Sub-arrays of Size K and Average Greater than or Equal to Threshold\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/leetcode_list/sliding_window_dblptr/2090\"\u003e2090. K Radius Subarray Averages\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/leetcode_list/sliding_window_dblptr/2379\"\u003e2379. Minimum Recolors to Get K Consecutive Black Blocks\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/leetcode_list/sliding_window/dblptr/1052\"\u003e1052. Grumpy Bookstore Owner\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/leetcode_list/sliding_window/dblptr/1461\"\u003e1461. Check If a String Contains All Binary Codes of Size K\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/leetcode_list/sliding_window/dblptr/2841\"\u003e2841. Maximum Sum of Almost Unique Subarray\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"[LeetCode] 分類清單"},{"content":"科學刷題\nCatalog 一、依題號 1-500(45) 1. Two Sum\n2. Add Two Numbers\n3. Longest Substring Without Repeating Characters\n4. Median of Two Sorted Array\n5. Longest Palindromic Substring\n6. Zigzag Conversion\n7. Reverse Integer\n8. String to Integer (atoi)\n9. Palindrome Number\n10. Regular Expression Matching\n11. Container With Most Water\n12. Integer to Roman\n13. Roman to Integer\n14. Longest Common Prefix\n15. 3Sum\n16. 3Sum Closet\n17. Letter Combinations of a Phone Number\n18. 4Sum\n19. Remove Nth Node From End of List\n20. Valid Parentheses\n21. Merge Two Sorted Lists\n22. Generate Parentheses\n23. Merge k Sorted Lists\n24. Swap Nodes in Pairs\n25. Reverse Nodes in k-Group\n53. Maximum Subarray\n70. Climbing Stairs\n79. Word Search\n100. Same Tree\n124. Binary Tree Maximum Path Sum\n132. Palindrome Partitioning II\n149. Max Points on a Line\n151. Reverse Words in a String\n198. House Robber\n212. Word Search II\n213. House Robber II\n223. Rectangle Area\n279. Perfect Squares\n290. Word Pattern\n300. Longest Increasing Subsequence\n322. Coin Change\n328. Odd Even Linked List\n337. House Robber III\n347. Top K Frequent Elements\n374. Guess Number Higher or Lower II\n433. Minimum Genetic Mutation\n446. Arithmetic Slices II - Subsequence\n452. Minimum Number of Arrows to Burst Balloons\n501-1000(14) 520. Detect Capital\n587. Erect the Fence\n766. Toeplitz Matrix\n790. Domino and Tromino Tiling\n835. Image Overlap\n841. Keys and Rooms\n872. Leaf-Similar Trees\n901. Online Stock Span\n918. Maximum Sum Circular Subarray\n926. Flip String to Monotone Increasing\n931. Minimum Falling Path Sum\n938. Range Sum of BST\n944. Delete Columns to Make Sorted\n947. Most Stones Removed with Same Row or Column\n1001-1500(7) 1026. Maximum Difference Between Node and Ancestor\n1047. Remove All Adjacent Duplicates In String\n1143. Longest Common Subsequence\n1235. Maximum Profit in Job Scheduling\n1293. Shortest Path in a Grid with Obstacles Elimination\n1323. Maximum 69 Number\n1339. Maximum Product of Splitted Binary Tree\n1501-2000(6) 1519. Number of Nodes in the Sub-Tree With the Same Label\n1544. Make The String Great\n1706. Where Will the Ball Fall\n1834. Single-Threaded CPU\n1926. Nearest Exit from Entrance in Maze\n1962. Remove Stones to Minimize the Total\n2001-2500(21) 2131. Longest Palindrome by Concatenating Two Letter Words\n2136. Earliest Possible Day of Full Bloom\n2279. Maximum Bags With Full Capacity of Rocks\n2389. Longest Subsequence With Limited Sum\n2460. Apply Operations to an Array\n2461. Maximum Sum of Distinct Subarrays With Length K\n2462. Total Cost to Hire K\n2463. Minimum Total Distance Traveled\n2465. Number of Distinct Averages\n2466. Count Ways To Build Good Strings\n2467. Most Profitable Path in a Tree\n2468. Split Message Based on Limit\n2469. Convert the Temperature\n2470. Number of Subarrays With LCM Equal to K\n2471. Minimum Number of Operations to Sort a Binary Tree by Level\n2472. Maximum Number of Non-overlapping Palindrome Substrings\n2485. Find the Pivot Integer\n2486. Accept Characters to String to Make Subsequence\n2487. Remove Nodes From Linked List\n2488. Count Subarrays With Median K\n2500. Delete Greatest Value in Each Row\n2501-3000(5) 2501. Longest Square Streak in an Array\n2520. Count the Digits That Divide a Number\n2521. Distinct Prime Factors of Product of Array\n2522. Partition String Into Substrings With Values at Most K\n2523. Closest Prime Numbers in Range\n二、依難度 Easy(24) 1. Two Sum\n9. Palindrome Number\n13. Roman to Integer\n14. Longest Common Prefix\n20. Valid Parentheses\n21. Merge Two Sorted Lists\n70. Climbing Stairs\n100. Same Tree\n374. Guess Number Higher or Lower II\n520. Detect Capital\n766. Toeplitz Matrix\n872. Leaf-Similar Trees\n938. Range Sum of BST\n944. Delete Columns to Make Sorted\n1047. Remove All Adjacent Duplicates In String\n1323. Maximum 69 Number\n1544. Make The String Great\n2389. Longest Subsequence With Limited Sum\n2460. Apply Operations to an Array\n2465. Number of Distinct Averages\n2469. Convert the Temperature\n2485. Find the Pivot Integer\n2500. Delete Greatest Value in Each Row\n2520. Count the Digits That Divide a Number\nMedium(59) 2. Add Two Numbers\n3. Longest Substring Without Repeating Characters\n5. Longest Palindromic Substring\n6. Zigzag Conversion\n7. Reverse Integer\n8. String to Integer (atoi)\n11. Container With Most Water\n12. Integer to Roman\n15. 3Sum\n16. 3Sum Closet\n17. Letter Combinations of a Phone Number\n18. 4Sum\n19. Remove Nth Node From End of List\n22. Generate Parentheses\n24. Swap Nodes in Pairs\n53. Maximum Subarray\n79. Word Search\n151. Reverse Words in a String\n198. House Robber\n213. House Robber II\n223. Rectangle Area\n279. Perfect Squares\n300. Longest Increasing Subsequence\n322. Coin Change\n328. Odd Even Linked List\n337. House Robber III\n347. Top K Frequent Elements\n433. Minimum Genetic Mutation\n452. Minimum Number of Arrows to Burst Balloons\n790. Domino and Tromino Tiling\n835. Image Overlap\n841. Keys and Rooms\n901. Online Stock Span\n918. Maximum Sum Circular Subarray\n926. Flip String to Monotone Increasing\n931. Minimum Falling Path Sum\n947. Most Stones Removed with Same Row or Column\n1026. Maximum Difference Between Node and Ancestor\n1143. Longest Common Subsequence\n1339. Maximum Product of Splitted Binary Tree\n1519. Number of Nodes in the Sub-Tree With the Same Label\n1706. Where Will the Ball Fall\n1834. Single-Threaded CPU\n1926. Nearest Exit from Entrance in Maze\n1962. Remove Stones to Minimize the Total\n2131. Longest Palindrome by Concatenating Two Letter Words\n2279. Maximum Bags With Full Capacity of Rocks\n2461. Maximum Sum of Distinct Subarrays With Length K\n2462. Total Cost to Hire K\n2466. Count Ways To Build Good Strings\n2467. Most Profitable Path in a Tree\n2470. Number of Subarrays With LCM Equal to K\n2471. Minimum Number of Operations to Sort a Binary Tree by Level\n2486. Accept Characters to String to Make Subsequence\n2487. Remove Nodes From Linked List\n2501. Longest Square Streak in an Array\n2521. Distinct Prime Factors of Product of Array\n2522. Partition String Into Substrings With Values at Most K\n2523. Closest Prime Numbers in Range\nHard(17) 4. Median of Two Sorted Array\n10. Regular Expression Matching\n23. Merge k Sorted Lists\n25. Reverse Nodes in k-Group\n124. Binary Tree Maximum Path Sum\n132. Palindrome Partitioning II\n149. Max Points on a Line\n212. Word Search II\n446. Arithmetic Slices II - Subsequence\n587. Erect the Fence\n1235. Maximum Profit in Job Scheduling\n1293. Shortest Path in a Grid with Obstacles Elimination\n2136. Earliest Possible Day of Full Bloom\n2463. Minimum Total Distance Traveled\n2468. Split Message Based on Limit\n2472. Maximum Number of Non-overlapping Palindrome Substrings\n2488. Count Subarrays With Median K\n三、依分類 Array(43) 1. Two Sum\n4. Median of Two Sorted Array\n11. Container With Most Water\n15. 3Sum\n16. 3Sum Closet\n18. 4Sum\n53. Maximum Subarray\n79. Word Search\n149. Max Points on a Line\n198. House Robber\n212. Word Search II\n213. House Robber II\n300. Longest Increasing Subsequence\n322. Coin Change\n347. Top K Frequent Elements\n446. Arithmetic Slices II - Subsequence\n452. Minimum Number of Arrows to Burst Balloons\n587. Erect the Fence\n766. Toeplitz Matrix\n835. Image Overlap\n918. Maximum Sum Circular Subarray\n931. Minimum Falling Path Sum\n944. Delete Columns to Make Sorted\n1235. Maximum Profit in Job Scheduling\n1293. Shortest Path in a Grid with Obstacles Elimination\n1706. Where Will the Ball Fall\n1834. Single-Threaded CPU\n1926. Nearest Exit from Entrance in Maze\n1962. Remove Stones to Minimize the Total\n2131. Longest Palindrome by Concatenating Two Letter Words\n2136. Earliest Possible Day of Full Bloom\n2279. Maximum Bags With Full Capacity of Rocks\n2389. Longest Subsequence With Limited Sum\n2460. Apply Operations to an Array\n2461. Maximum Sum of Distinct Subarrays With Length K\n2462. Total Cost to Hire K\n2463. Minimum Total Distance Traveled\n2465. Number of Distinct Averages\n2467. Most Profitable Path in a Tree\n2470. Number of Subarrays With LCM Equal to K\n2488. Count Subarrays With Median K\n2500. Delete Greatest Value in Each Row\n2501. Longest Square Streak in an Array\nBacktracking(4) 17. Letter Combinations of a Phone Number\n22. Generate Parentheses\n79. Word Search\n212. Word Search II\nBinary Search(7) 4. Median of Two Sorted Array\n300. Longest Increasing Subsequence\n374. Guess Number Higher or Lower II\n1235. Maximum Profit in Job Scheduling\n2389. Longest Subsequence With Limited Sum\n2468. Split Message Based on Limit\n2501. Longest Square Streak in an Array\nBinary Search Tree(1) 938. Range Sum of BST\nBinary Tree(8) 100. Same Tree\n124. Binary Tree Maximum Path Sum\n337. House Robber III\n938. Range Sum of BST\n872. Leaf-Similar Trees\n1026. Maximum Difference Between Node and Ancestor\n1339. Maximum Product of Splitted Binary Tree\n2471. Minimum Number of Operations to Sort a Binary Tree by Level\nBreadth-First Search(10) 100. Same Tree\n279. Perfect Squares\n322. Coin Change\n433. Minimum Genetic Mutation\n841. Keys and Rooms\n1293. Shortest Path in a Grid with Obstacles Elimination\n1519. Number of Nodes in the Sub-Tree With the Same Label\n1926. Nearest Exit from Entrance in Maze\n2467. Most Profitable Path in a Tree\n2471. Minimum Number of Operations to Sort a Binary Tree by Level\nBucket Sort(1) 347. Top K Frequent Elements\nCounting(3) 347. Top K Frequent Elements\n1519. Number of Nodes in the Sub-Tree With the Same Label\n2131. Longest Palindrome by Concatenating Two Letter Words\nData Stream(1) 901. Online Stock Span\nDepth-First Search(12) 100. Same Tree\n124. Binary Tree Maximum Path Sum\n337. House Robber III\n841. Keys and Rooms\n872. Leaf-Similar Trees\n938. Range Sum of BST\n947. Most Stones Removed with Same Row or Column\n1026. Maximum Difference Between Node and Ancestor\n1339. Maximum Product of Splitted Binary Tree\n1519. Number of Nodes in the Sub-Tree With the Same Label\n1706. Where Will the Ball Fall\n2467. Most Profitable Path in a Tree\nDesign(1) 901. Online Stock Span\nDivide and Conquer(5) 4. Median of Two Sorted Array\n23. Merge k Sorted Lists\n53. Maximum Subarray\n347. Top K Frequent Elements\n918. Maximum Sum Circular Subarray\nDynamic Programming(25) 5. Longest Palindromic Substring\n10. Regular Expression Matching\n22. Generate Parentheses\n53. Maximum Subarray\n70. Climbing Stairs\n124. Binary Tree Maximum Path Sum\n132. Palindrome Partitioning II\n198. House Robber\n213. House Robber II\n279. Perfect Squares\n300. Longest Increasing Subsequence\n322. Coin Change\n337. House Robber III\n446. Arithmetic Slices II - Subsequence\n790. Domino and Tromino Tiling\n918. Maximum Sum Circular Subarray\n926. Flip String to Monotone Increasing\n931. Minimum Falling Path Sum\n1143. Longest Common Subsequence\n1235. Maximum Profit in Job Scheduling\n1706. Where Will the Ball Fall\n2463. minimum Total Distance Traveled\n2466. Count Ways To Build Good Strings\n2472. Maximum Number of Non-overlapping Palindrome Substrings\n2501. Longest Square Streak in an Array\nGeometry(3) 149. Max Points on a Line\n223. Rectangle Area\n587. Erect the Fence\nGraph(3) 841. Keys and Rooms\n947. Most Stones Removed with Same Row or Column\n2467. Most Profitable Path in a Tree\nGreedy(8) 11. Container With Most Water\n452. Minimum Number of Arrows to Burst Balloons\n1323. Maximum 69 Number\n2131. Longest Palindrome by Concatenating Two Letter Words\n2136. Earliest Possible Day of Full Bloom\n2279. Maximum Bags With Full Capacity of Rocks\n2389. Longest Subsequence With Limited Sum\n2486. Accept Characters to String to Make Subsequence\nHash Table(15) 1. Two Sum\n3. Longest Substring Without Repeating Characters\n12. Integer to Roman\n13. Roman to Integer\n17. Letter Combinations of a Phone Number\n149. Max Points on a Line\n290. Word Pattern\n347. Top K Frequent Elements\n433. Minimum Genetic Mutation\n1519. Number of Nodes in the Sub-Tree With the Same Label\n2131. Longest Palindrome by Concatenating Two Letter Words\n2461. Maximum Sum of Distinct Subarrays With Length K\n2465. Number of Distinct Averages\n2488. Count Subarrays With Median K\n2501. Longest Square Streak in an Array\nHeap (Priority Queue)(5) 23. Merge k Sorted Lists\n347. Top K Frequent Elements\n1834. Single-Threaded CPU\n1962. Remove Stones to Minimize the Total\n2462. Total Cost to Hire K\nInteractive(1) 374. Guess Number Higher or Lower II\nLinked List(8) 2. Add Two Numbers\n19. Remove Nth Node From End of List\n21. Merge Two Sorted Lists\n23. Merge k Sorted Lists\n24. Swap Nodes in Pairs\n25. Reverse Nodes in k-Group\n328. Odd Even Linked List\n2487. Remove Nodes From Linked List\nMath(14) 2. Add Two Numbers\n7. Reverse Integer\n9. Palindrome Number\n12. Integer to Roman\n13. Roman to Integer\n70. Climbing Stairs\n149. Max Points on a Line\n223. Rectangle Area\n279. Perfect Squares\n587. Erect the Fence\n1323. Maximum 69 Number\n2469. Convert the Temperature\n2470. Number of Subarrays With LCM Equal to K\n2485. Find the Pivot Integer\nMatrix(9) 79. Word Search\n212. Word Search II\n766. Toeplitz Matrix\n835. Image Overlap\n931. Minimum Falling Path Sum\n1293. Shortest Path in a Grid with Obstacles Elimination\n1706. Where Will the Ball Fall\n1926. Nearest Exit from Entrance in Maze\n2500. Delete Greatest Value in Each Row\nMemoization(1) 70. Climbing Stairs\nMerge Sort(1) 23. Merge k Sorted Lists\nMonotonic Stack(2) 901. Online Stock Span\n2487. Remove Nodes From Linked List\nMonotonic Queue(1) 918. Maximum Sum Circular Subarray\nNumber Theory(1) 2470. Number of Subarrays With LCM Equal to K\nPrefix Sum(3) 2389. Longest Subsequence With Limited Sum\n2485. Find the Pivot Integer\n2488. Count Subarrays With Median K\nQueue(1) 918. Maximum Sum Circular Subarray\nQuickselect(1) 347. Top K Frequent Elements\nRecursion(6) 2. Add Two Numbers\n10. Regular Expression Matching\n21. Merge Two Sorted Lists\n24. Swap Nodes in Pairs\n25. Reverse Nodes in k-Group\n2487. Remove Nodes From Linked List\nSimulation(3) 1706. Where Will the Ball Fall\n2460. Apply Operations to an Array\n2462. Total Cost to Hire K\nSliding Window(2) 3. Longest Substring Without Repeating Characters\n2461. Maximum Sum of Distinct Subarrays With Length K\nSorting(14) 15. 3Sum\n16. 3Sum Closet\n18. 4Sum\n347. Top K Frequent Elements\n452. Minimum Number of Arrows to Burst Balloons\n1235. Maximum Profit in Job Scheduling\n1834. Single-Threaded CPU\n2136. Earliest Possible Day of Full Bloom\n2279. Maximum Bags With Full Capacity of Rocks\n2389. Longest Subsequence With Limited Sum\n2463. Minimum Total Distance Traveled\n2465. Number of Distinct Averages\n2500. Delete Greatest Value in Each Row\n2501. Longest Square Streak in an Array\nStack(5) 20. Valid Parentheses\n901. Online Stock Span\n1047. Remove All Adjacent Duplicates In String\n1544. Make The String Great\n2487. Remove Nodes From Linked List\nString(26) 3. Longest Substring Without Repeating Characters\n5. Longest Palindromic Substring\n6. Zigzag Conversion\n8. String to Integer (atoi)\n10. Regular Expression Matching\n12. Integer to Roman\n13. Roman to Integer\n14. Longest Common Prefix\n17. Letter Combinations of a Phone Number\n20. Valid Parentheses\n22. Generate Parentheses\n132. Palindrome Partitioning II\n151. Reverse Words in a String\n212. Word Search II\n290. Word Pattern\n433. Minimum Genetic Mutation\n520. Detect Capital\n926. Flip String to Monotone Increasing\n944. Delete Columns to Make Sorted\n1047. Remove All Adjacent Duplicates In String\n1143. Longest Common Subsequence\n1544. Make The String Great\n2131. Longest Palindrome by Concatenating Two Letter Words\n2468. Split Message Based on Limit\n2472. Maximum Number of Non-overlapping Palindrome Substrings\n2486. Accept Characters to String to Make Subsequence\nTree(10) 100. Same Tree\n124. Binary Tree Maximum Path Sum\n337. House Robber III\n872. Leaf-Similar Trees\n938. Range Sum of BST\n1026. Maximum Difference Between Node and Ancestor\n1339. Maximum Product of Splitted Binary Tree\n1519. Number of Nodes in the Sub-Tree With the Same Label\n2467. Most Profitable Path in a Tree\n2471. Minimum Number of Operations to Sort a Binary Tree by Level\nTrie(1) 212. Word Search II\nTwo Pointer(9) 11. Container With Most Water\n15. 3Sum\n16. 3Sum Closet\n18. 4Sum\n19. Remove Nth Node From End of List\n151. Reverse Words in a String\n2462. Total Cost to Hire K\n2465. Number of Distinct Averages\n2486. Accept Characters to String to Make Subsequence\nUnion Find(1) 947. Most Stones Removed with Same Row or Column\n","permalink":"https://intervalrain.github.io/leetcode/","summary":"\u003cp\u003e\u003ca href=\"/leetcode_list\"\u003e科學刷題\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"catalog\"\u003e\u003cstrong\u003eCatalog\u003c/strong\u003e\u003c/h2\u003e\n\u003ch2 id=\"一依題號\"\u003e一、依題號\u003c/h2\u003e\n\u003ch3 id=\"1-50045\"\u003e1-500(45)\u003c/h3\u003e\n\u003cp\u003e\u003ca href=\"/leetcode/1\"\u003e1. Two Sum\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/leetcode/2\"\u003e2. Add Two Numbers\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/leetcode/3\"\u003e3. Longest Substring Without Repeating Characters\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/leetcode/4\"\u003e4. Median of Two Sorted Array\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/leetcode/5\"\u003e5. Longest Palindromic Substring\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/leetcode/6\"\u003e6. Zigzag Conversion\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/leetcode/7\"\u003e7. Reverse Integer\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/leetcode/8\"\u003e8. String to Integer (atoi)\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/leetcode/9\"\u003e9. Palindrome Number\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/leetcode/10\"\u003e10. Regular Expression Matching\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/leetcode/11\"\u003e11. Container With Most Water\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/leetcode/12\"\u003e12. Integer to Roman\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/leetcode/13\"\u003e13. Roman to Integer\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/leetcode/14\"\u003e14. Longest Common Prefix\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/leetcode/15\"\u003e15. 3Sum\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/leetcode/16\"\u003e16. 3Sum Closet\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/leetcode/17\"\u003e17. Letter Combinations of a Phone Number\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/leetcode/18\"\u003e18. 4Sum\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/leetcode/19\"\u003e19. Remove Nth Node From End of List\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/leetcode/20\"\u003e20. Valid Parentheses\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/leetcode/21\"\u003e21. Merge Two Sorted Lists\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/leetcode/22\"\u003e22. Generate Parentheses\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/leetcode/23\"\u003e23. Merge k Sorted Lists\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/leetcode/24\"\u003e24. Swap Nodes in Pairs\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/leetcode/25\"\u003e25. Reverse Nodes in k-Group\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/leetcode/53\"\u003e53. Maximum Subarray\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/leetcode/70\"\u003e70. Climbing Stairs\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/leetcode/79\"\u003e79. Word Search\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/leetcode/100\"\u003e100. Same Tree\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/leetcode/124\"\u003e124. Binary Tree Maximum Path Sum\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/leetcode/132\"\u003e132. Palindrome Partitioning II\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/leetcode/149\"\u003e149. Max Points on a Line\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/leetcode/151\"\u003e151. Reverse Words in a String\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/leetcode/198\"\u003e198. House Robber\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/leetcode/212\"\u003e212. Word Search II\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/leetcode/213\"\u003e213. House Robber II\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/leetcode/223\"\u003e223. Rectangle Area\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/leetcode/279\"\u003e279. Perfect Squares\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/leetcode/290\"\u003e290. Word Pattern\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/leetcode/300\"\u003e300. Longest Increasing Subsequence\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/leetcode/322\"\u003e322. Coin Change\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/leetcode/328\"\u003e328. Odd Even Linked List\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/leetcode/337\"\u003e337. House Robber III\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/leetcode/347\"\u003e347. Top K Frequent Elements\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/leetcode/374\"\u003e374. Guess Number Higher or Lower II\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/leetcode/433\"\u003e433. Minimum Genetic Mutation\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/leetcode/446\"\u003e446. Arithmetic Slices II - Subsequence\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/leetcode/452\"\u003e452. Minimum Number of Arrows to Burst Balloons\u003c/a\u003e\u003c/p\u003e","title":"[LeetCode] Catalog"},{"content":"分類清單 1. 滑動窗口與雙指針（定長／不定長／單序列／雙序列／三指針／分組循環）\n2. 二分演算法（二分答案／最小化最大值／最大化最小值／Kth）\n3. 單調棧（基礎／矩形面積／貢獻法／最小字典序）\n4. 網格圖（DFS／BFS／綜合應弿）\n5. 位運算（基礎／性質／拆位／試填／恆等式／思維）\n6. 圖論演算法（DFS／BFS／拓撲排序／最短路／最小生成樹／二分圖／基環樹／歐拉路徑）\n7. 動態規劃（入門／背包／狀態機／劃分／區間／狀壓／數位／數據結構優化／樹形／博弈／概率期望）\n8. 常用數據結構（前綴和／差分／棧／佇列／堆／字典樹／並查集／樹狀樹組／線段樹）\n9. 數學演算法（數論／組合／概率期望／博弈／計算幾何／隨機算法）\n10. 貪心與思維（基本貪心策略／反悔／區間／字典序／數學／思維／腦筋急轉彎／構造）\n11. 鏈表、二叉樹與回溯（前後指針／快慢指針／DFS／BFS／直徑／LCA／一般樹）\n12. 字串（KMP／Z函數／Manacher／字串Hash／AC自動機／後綴數組／子序列自動機） ","permalink":"https://intervalrain.github.io/leetcode_list/","summary":"\u003ch2 id=\"分類清單\"\u003e分類清單\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"/leetcode_list/sliding_window_dblptr\"\u003e1. 滑動窗口與雙指針（定長／不定長／單序列／雙序列／三指針／分組循環）\u003c/a\u003e\u003cbr\u003e\n2. 二分演算法（二分答案／最小化最大值／最大化最小值／Kth）\u003cbr\u003e\n3. 單調棧（基礎／矩形面積／貢獻法／最小字典序）\u003cbr\u003e\n4. 網格圖（DFS／BFS／綜合應弿）\u003cbr\u003e\n5. 位運算（基礎／性質／拆位／試填／恆等式／思維）\u003cbr\u003e\n6. 圖論演算法（DFS／BFS／拓撲排序／最短路／最小生成樹／二分圖／基環樹／歐拉路徑）\u003cbr\u003e\n7. 動態規劃（入門／背包／狀態機／劃分／區間／狀壓／數位／數據結構優化／樹形／博弈／概率期望）\u003cbr\u003e\n8. 常用數據結構（前綴和／差分／棧／佇列／堆／字典樹／並查集／樹狀樹組／線段樹）\u003cbr\u003e\n9. 數學演算法（數論／組合／概率期望／博弈／計算幾何／隨機算法）\u003cbr\u003e\n10. 貪心與思維（基本貪心策略／反悔／區間／字典序／數學／思維／腦筋急轉彎／構造）\u003cbr\u003e\n11. 鏈表、二叉樹與回溯（前後指針／快慢指針／DFS／BFS／直徑／LCA／一般樹）\u003cbr\u003e\n12. 字串（KMP／Z函數／Manacher／字串Hash／AC自動機／後綴數組／子序列自動機）  　\u003c/p\u003e","title":"[LeetCode] 分類清單"},{"content":"Version Query\nHardness: \\(\\color{red}\\textsf{Hard}\\) Ralated Topics: Binary Search、Segment Tree、Heap (Priority Queue、Hash Table 一、題目 Given an information of application(APK) about its range of versions, find its corresponding OS version. If APK versions are probable for two or more OS versions, it must be belong to the latest OS version.\nThe given apk_info structure is given as below.\nstruct apk_info {\nint apk_version;\nint min_version = 1;\nint max_version = INT_MAX;\n}\nExample 1:\n\\(\\begin{array}{|l|}\\hline \\text{Input: }\\\\ \\begin{array}{|c|c|c|}\\hline \\text{apk version}\u0026amp;\\text{min OS version}\u0026amp;\\text{max OS version}\\\\\\hline \\text{1}\u0026amp;\\text{14}\u0026amp;\\text{}\\\\\\hline \\text{2}\u0026amp;\\text{}\u0026amp;\\text{8}\\\\\\hline \\text{3}\u0026amp;\\text{12}\u0026amp;\\text{16}\\\\\\hline \\end{array}\\\\ \\text{OS version query = [18,4,14,10]}\\\\\\\\ \\text{Output:}\\\\\\text{apk version = [1,2,3,0]}(0 \\text{ means not found})\\\\\\hline \\end{array}\\)\nConstraints:\n\\(\\begin{array}{|l|}\\hline \\text{1. 1} \\le \\text{Apk version \u0026lt; } 10^{31}\\\\ \\text{2. 1} \\le \\text{OS version \u0026lt; } 10^{31}\\\\ \\text{3. 1} \\le \\text{Query times \u0026lt; } 10^{31}\\\\\\hline \\end{array}\\)\n二、分析 重點其實就是區間求極值，所以筆者最先開始想到的是線段樹，線段樹的介紹可參考這裡：Segment Tree 線段樹 爾後才想到這題其實概念上很接近 Leetcode 218. The Skyline Problem 上這張題後就懂了，把 apk version 看成建築的高度， min OS version 與 max OS version 看成建築的 x 座標，就變成一樣的題目了，差別在於把 skyline 建成之後，再對其作 binary search。 三、解題 Priority Queue struct apk_info{ int apk_version; int min_version = 1; int max_version = INT_MAX; apk_info(int ver, int mn, int mx){ this-\u0026gt;apk_version = ver; this-\u0026gt;min_version = mn; this-\u0026gt;max_version = mx; } }; class Solution { public: unordered_map\u0026lt;int, int\u0026gt; waitList; void remove(priority_queue\u0026lt;int\u0026gt;\u0026amp; pq, int item){ if (pq.top() == item) { // 若 pq 的頂是要移除的對象，則直接移除 pq.pop(); while (waitList.find(pq.top()) != waitList.end() \u0026amp;\u0026amp; waitList[pq.top()] \u0026gt; 0) { waitList[pq.top()]--; pq.pop(); } } else { waitList[item]++; // 若 pq 的頂非要移除的對象，則加入 waitList，待之後再移除 } } vector\u0026lt;pair\u0026lt;int,int\u0026gt;\u0026gt; getRangeMax(vector\u0026lt;apk_info*\u0026gt; infos) { vector\u0026lt;pair\u0026lt;int,int\u0026gt;\u0026gt; rangeMax, osVers; for (const auto\u0026amp; info : infos) { osVers.push_back({info-\u0026gt;min_version, -info-\u0026gt;apk_version}); // 以負值代表 skyline 的開始 osVers.push_back({info-\u0026gt;max_version, info-\u0026gt;apk_version}); // 以正值代表 skyline 的結束 } sort(osVers.begin(), osVers.end()); // 以 x 值(os_version) 進行排序 priority_queue\u0026lt;int\u0026gt; pq; pq.push(0); // not found 時，預設回傳 0 int prev = 0; // 在還沒插入 item 前一開始的最大值就是 0 for (const auto\u0026amp; osVer : osVers) { if (osVer.second \u0026lt; 0){ // 開始 pq.push(-osVer.second); } else { // 結束，需移除該點 remove(pq, osVer.second); } int curr = pq.top(); if (prev != curr) { // 若最大值有變，則需把 skyline 記錄下來 if (prev \u0026lt; curr || osVer.first == INT_MAX) rangeMax.push_back({osVer.first, curr}); // x 軸為 os version，y 軸為 apk version else // 為做成 [a, b) 左閉右開的區間，若 skyline 往下，x 軸的點位置需加 1 (版本以大的為主) rangeMax.push_back({osVer.first+1, curr}); prev = curr; } } return rangeMax; } public: vector\u0026lt;int\u0026gt; findOSVersion(vector\u0026lt;apk_info*\u0026gt; infos, vector\u0026lt;int\u0026gt; queries) { vector\u0026lt;pair\u0026lt;int,int\u0026gt;\u0026gt; rangeMax = getRangeMax(infos); // 以範例來說會回傳 [[1,2],[9,0],[12,3],[17,1],[INT_MAX, 0]] vector\u0026lt;int\u0026gt; res; for (const int\u0026amp; q : queries){ auto it = upper_bound(rangeMax.begin(), rangeMax.end(), make_pair(q, INT_MAX)); // 開區間找上限後，往前推一位 it--; res.push_back(it-\u0026gt;second); } return res; } }; // test case int main(){ apk_info* a1 = new apk_info(1, 14, INT_MAX); apk_info* a2 = new apk_info(2, 1, 8); apk_info* a3 = new apk_info(3, 12, 16); vector\u0026lt;apk_info*\u0026gt; infos = {a1, a2, a3}; vector\u0026lt;int\u0026gt; queries = {18,4,14,10}; // 1, 2, 3, 0 Solution* sol = new Solution(); vector\u0026lt;int\u0026gt; res = sol-\u0026gt;findOSVersion(infos, queries); for (int i = 0; i \u0026lt; res.size(); i++){ cout \u0026lt;\u0026lt; res[i] \u0026lt;\u0026lt; \u0026#34; \u0026#34;; } cout \u0026lt;\u0026lt; endl; return 0; } 補充(segment tree) 用segment tree 來解區域更新的題目時，若把每個子葉點退化到單點的話，其空間複雜度會太高，可以用兩個 map 由左到右將 x 軸從小到大帶入，每個索引值 i 對應到一個有使用到的 x 軸座標。然後用左閉右開(\\([a,b)\\))的方式去維護區間的值。 在用segment tree 做區域更新時，若每次都對所有子葉做更新的話，其時間複雜度會拉高到\\(O(k)\\)，\\(k\\) 為線段長。其下 slash 掉的部分，在 the skyline problem 中會造成 TLE，所以我們每次只對其必要的點做更新，待全部資料輸入完後，再一次從上而下做更新(renew)。其時間複雜度雜到\\(O(klogk+n)\\)，\\(n\\) 為 x 軸的個數。 區域查詢也可以用差不多的概念完成。 class Solution { class Tree { vector\u0026lt;int\u0026gt; arr; int m, n; public: Tree (int sz) { n = sz; for (m=1; m \u0026lt; n; m\u0026lt;\u0026lt;=1); arr.assign(2*m, 0); } // void update(int b, int e, int val) { // int i = b+m, j = e+m; // for (; i \u0026amp;\u0026amp; j \u0026amp;\u0026amp; i \u0026lt;= j; i \u0026gt;\u0026gt;= 1, j \u0026gt;\u0026gt;= 1){ // for (int k = i; k \u0026lt;= j; k++){ // arr[k] = max(arr[k], val); // } // } // } // void renew(){} void update(int b, int e, int val){ for (b+=m, e+=m; b \u0026lt;= e; b\u0026gt;\u0026gt;=1, e\u0026gt;\u0026gt;=1) { if (b\u0026amp;1) arr[b++] = max(arr[b], val); if (!(e\u0026amp;1)) arr[e--] = max(arr[e], val); } } void renew() { for (int i = 1; i \u0026lt; m; i++) { arr[i\u0026lt;\u0026lt;1] = max(arr[i\u0026lt;\u0026lt;1], arr[i]); arr[i\u0026lt;\u0026lt;1|1] = max(arr[i\u0026lt;\u0026lt;1|1], arr[i]); } } int query(int i) { return arr[i+m]; } }; unordered_map\u0026lt;int,int\u0026gt; i2x, x2i; public: int mapping(vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; buildings) { set\u0026lt;int\u0026gt; sets; for (const auto\u0026amp; building : buildings) { sets.insert(building[0]); sets.insert(building[1]); } int cnt = 0; for (const auto\u0026amp; x : sets){ i2x[cnt] = x; x2i[x] = cnt++; } return cnt; } vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; getSkyline(vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026amp; buildings) { int n = mapping(buildings); Tree* root = new Tree(n); for (const auto\u0026amp; building : buildings) { int b = x2i[building[0]]; int e = x2i[building[1]]; root-\u0026gt;update(b, e-1, building[2]); } root-\u0026gt;renew(); vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; res; int prev = 0; for (int i = 0; i \u0026lt; n; i++){ int x = i2x[i]; int y = root-\u0026gt;query(i); if (prev != y) { res.push_back({x, y}); prev = y; } } return res; } }; ","permalink":"https://intervalrain.github.io/leetcode/versionquery/","summary":"\u003cp\u003e\u003cstrong\u003eVersion Query\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{red}\\textsf{Hard}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eBinary Search\u003c/code\u003e、\u003ccode\u003eSegment Tree\u003c/code\u003e、\u003ccode\u003eHeap (Priority Queue\u003c/code\u003e、\u003ccode\u003eHash Table\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eGiven an information of application(APK) about its range of versions, find its corresponding OS version. If APK versions are probable for two or more OS versions, it must be belong to the latest OS version.\u003cbr\u003e\nThe given apk_info structure is given as below.\u003cbr\u003e\n\u003cstrong\u003estruct apk_info {\u003c/strong\u003e\u003cbr\u003e\n　　\u003cstrong\u003eint apk_version;\u003c/strong\u003e\u003cbr\u003e\n　　\u003cstrong\u003eint min_version = 1;\u003c/strong\u003e\u003cbr\u003e\n　　\u003cstrong\u003eint max_version = INT_MAX;\u003c/strong\u003e\u003cbr\u003e\n\u003cstrong\u003e}\u003c/strong\u003e\u003c/p\u003e","title":"[Problem] Version Query"},{"content":"線段樹 Segment Tree 簡介 線段樹是演算法中常用來維護區間訊息的資料結構。 空間複雜度為 \\(O(n)\\)，\\(n\\) 代表區間數。 查詢的時間複雜度為 \\(O(\\log n+k)\\)，\\(k\\) 代表符合條件的區間數量。 線段樹將每個長度為為 1 的區間劃分為左右兩個區間遞迴求解，把整個線段劃分為一個樹型結構，通過合併左右兩個區間訊息來求得該區間的訊息。 在實現時，我們考慮遞迴建樹，設當前的根節點為 root，如果根節點管轄的區間長度已經是 1，則可以直接根據數組上相應位置的值初始化該節點。否則需將該區間從中點處分割為兩個子區間，分別進入左右子節點遞迴建樹，最後合併兩個子節點的訊息， 建樹 build void build(int s, int t, int p, const vector\u0026lt;int\u0026gt;\u0026amp; arr){ if (s == t){ tree[p] = SegmentItem(arr[s], 1); return; } int m = s + ((t - s) \u0026gt;\u0026gt; 1); build(s, m, p*2, arr); build(m+1, t, p*2+1, arr); // push_up tree[p] = tree[p*2] + tree[(p*2)+1]; } 查詢 query SegmentItem find(int l, int r, int s, int t, int p){ if (l \u0026lt;= s \u0026amp;\u0026amp; t \u0026lt;= r){ return tree[p]; } int m = s + ((t - s) \u0026gt;\u0026gt; 1); SegmentItem sum; if (r \u0026lt;= m) return find(l, r, s, m, p*2); if (l \u0026gt; m) return find(l, r, m+1, t, p*2+1); return find(l, r, s, m, p*2) + find(l, r, m+1, t, p*2+1); } zkw 線段樹 來自清華大學張昆瑋(zkw)-《統計的力量》 以非遞迴的方式構建，效率更高，程式更短。 普通的線段樹是從上到下做處理，容易定位根節點，卻不容易定位子節點。 zkw 線段樹是當二叉樹是滿二叉樹時，因為子節點的編號具有以下規律： 葉子節點(left) 全部退化為線段 \\([x,x]\\) 。 \\(n\\) 個數據點則取大於等 \\(n\\)且為 \\(2\\) 的冪次的兩倍作為數組大小。 \\((m=2^a\\ge n)\\) for (int m = 1; m \u0026lt;= n; m \u0026gt;\u0026gt;= 1) 維護點為 \\(n\\) 個。索引為\\([m,m+n)\\)。 子葉數目為 \\(m\\) 個。索引為\\([m,2m)\\) 節點數為 \\(2m-1\\) 個。(數組大小需設 \\(2m\\) 因為 zkw tree是 1-index的) 樹高 \\(H=\\log_2(m)+1\\) 層。 第 \\(h\\) 層有 \\(2^{h-1}\\) 個節點， 該層線段長度為 \\(2^{H-h}\\)。 若某節點為 \\(p\\)，父節點為 \\(p/2\\)，子節點為 \\(2p\\) 和 \\(2p+1\\) int parent = p \u0026gt;\u0026gt; 1; int left = p \u0026lt;\u0026lt; 1; int right = p \u0026lt;\u0026lt; 1 | 1; 若兩節點為 \\(p\\) 與 \\(q\\)，且兩節點互為兄弟節點，則 \\(p\\oplus q=1\\) if (left ^ right) // left 與 right 為兄弟節點 else // left 與 right 不為兄弟節點 除根節點外，左節點皆為偶數，右節點皆為奇數 if (i == 1) // i 為根節點 else if (i \u0026amp; 1) // i 為奇數，為右節點 else if (!(i \u0026amp; 1)) // i 為偶數，為左節點 結構 線段樹索引堆疊： 轉成二進制： 規律： 一個節點的父節點是該數右移 1，低位捨棄。 一個節點的左子節點是該數左移 1，右子節點是該數左移 1 再加 1。 同一層的節點是依次遞增的，第 \\(n\\) 層有 \\(2^{n-1}\\)個節點 最後一層有多少個節點，值域就是多少。 建樹 build 取 m 值有許多版本，有些版本會直接取 \\(m=2^{log_2(n+5)+1}\\)以節省迭代計算 寫成 int n = 1 \u0026lt;\u0026lt; __lg(n+5)+1; 可以有開區間與閉區間兩種做法，差別在於從子葉節點的最左邊 \\(m+i\\) 開始，或是第二個子葉節點 \\(m+1+i\\) 開始。 由下而上更新時，開區間與閉區間的終止條件不同： 開區間的終止條件為兩子節點互為兄弟節點 while (i^j^1) // operation 閉區間的終止條件為右節點小於左節點 while (i \u0026lt;= j) // operation class Tree { private: vector\u0026lt;int\u0026gt; arr; int n, m; // n 為維護點數, m 為 zkw-tree 子葉節點數 public: Tree (vector\u0026lt;int\u0026gt;\u0026amp; nums){ n = nums.size(); for (m = 1; m \u0026lt;= n; m \u0026lt;\u0026lt;= 1); // 取大於等於 n 且為 2 的冪次的最小整數 arr.assign(2*m, 0); // 節點數設為 2m 個，其中 0 為空節點 } void build(vector\u0026lt;int\u0026gt; nums){ for (int i = 0; i \u0026lt; n; i++) { arr[i+m] = nums[i]; // 從子葉節點最左邊往右更新節點。 mx[i+m] = nums[i]; mn[i+m] = nums[i]; } for (int i = m-1; i; i--){ // 向上更新父節點。 arr[i] = in(x); } } }; 根據不同需求代換 \\(\\text{in(x)}\\)：取和、最大值、最小平 // 取和 arr[i] = arr[i\u0026lt;\u0026lt;1] + arr[i\u0026lt;\u0026lt;1|1]; // 取最大值 arr[i] = max(arr[i\u0026lt;\u0026lt;1], arr[i\u0026lt;\u0026lt;1|1]); // 取最小值 arr[i] = min(arr[i\u0026lt;\u0026lt;1], arr[i\u0026lt;\u0026lt;1|1]); 更新 update 單點修改(以和為例) 更新時，以差分方式，將所有父節點加上更新點的差值。 void update(int i, int val){ int diff = val - arr[m+i] // 原值 arr[m+i] 與新值 val 的差 for (i += m; i; i \u0026gt;\u0026gt;= 1){ arr[i] += diff; } } 查詢 query 單點查詢(以和為例)：閉區間做法 判斷左邊界是否為右節點，若為右節點則加上後往右邊的父節點移動。 判斷右邊界是否為左節點，若為左節點則加上後往左邊的父節點移動。 int query(int left, int right){ int sum = 0; int i = left+m; // 左閉區間 int j = right+m; // 右閉區間 for (; i \u0026lt;= j; i \u0026gt;\u0026gt;= 1, j \u0026gt;\u0026gt;= 1){ if (i \u0026amp; 1) sum += arr[i++]; if (!(j \u0026amp; 1)) sum += arr[j--]; } return sum; } 備註：開區間作法 (0-index 時會出現 -1 的情形，建議使用閉區間) int query(int left, int right){ int sum = 0; int i = left+m-1; int j = right+m+1; for(; i^j^1; i \u0026gt;\u0026gt;= 1, j \u0026gt;\u0026gt;= 1){ if (~i \u0026amp; 1) sum += arr[i^1]; if (j \u0026amp; 1) sum += arr[j^1]; } return sum; } 區間修改 在非遞迴的情況下，標記下傳是比較困難的，所以作法上改成將標記永久化。 具體而言，與查詢類似，當左端點是左子節點且右端點是右子節點時，我們對它的兄弟節點進行修改並標記，表示這顆子樹中的每個節點都要被修改。但單純這樣還不夠，因上述修改還會波及到這些節點的各級祖先，所以我們需要在途中根據實際修改的區間長度來更新各級祖先的值，這種操作需要一路上推到根節點。 (開區間作法) void update(int left, int right, int diff){ int len = 1, cntl = 0, cntr = 0; // cntl, cntr 是左右邊分別實際修改的區間長度 left += m-1; right += m+1; for (; left^right^1; left \u0026gt;\u0026gt; 1, right \u0026gt;\u0026gt; 1, len \u0026lt;\u0026lt; 1){ arr[left] += cntl * diff; arr[right] += cntr * diff; if (~left \u0026amp; 1) { arr[left^1] += diff * len; mark[left^1] += diff; cntl += len; } if (right \u0026amp; 1) { arr[right^1] += diff * len; mark[right^1] += diff; cntr += len; } } for (; left; left \u0026gt;\u0026gt;= 1, right \u0026gt;\u0026gt;= 1){ arr[left] += cntl * diff; arr[right] += cntr * diff; } } 在有區間修改存在時，區間查詢也需要考慮標記的影響。 所以除了加上端點的兄弟節點訊息，沿途中遇到的標記也對答案有貢獻，同樣需要上推到根節點。 int query(int left, int right){ int sum = 0, len = 1, cntl = 0, cntr = 0; left += m - 1; right += m + 1; for (; left^right^1; left \u0026gt;\u0026gt;= 1, right \u0026gt;\u0026gt;= 1, len \u0026lt;\u0026lt; 1){ sum += cntl * mark[left] + cntr * mark[right]; if (~left \u0026amp; 1) sum += arr[left^1], cntl += len; if (right \u0026amp; 1) sum += arr[right^1], cntr += len; } for (; left; left \u0026gt;\u0026gt; 1, right \u0026gt;\u0026gt; 1){ sum += cntl * mark[left] + cntr * mark[right]; } return sum; } 區間查詢最大值： void update(int l, int r, int d) { for (l += N - 1, r += N + 1; l ^ r ^ 1; l \u0026gt;\u0026gt;= 1, r \u0026gt;\u0026gt;= 1) { if (l \u0026lt; N) tree[l] = max(tree[l \u0026lt;\u0026lt; 1], tree[l \u0026lt;\u0026lt; 1 | 1]) + mark[l], tree[r] = max(tree[r \u0026lt;\u0026lt; 1], tree[r \u0026lt;\u0026lt; 1 | 1]) + mark[r]; if (~l \u0026amp; 1) tree[l ^ 1] += d, mark[l ^ 1] += d; if (r \u0026amp; 1) tree[r ^ 1] += d, mark[r ^ 1] += d; } for (; l; l \u0026gt;\u0026gt;= 1, r \u0026gt;\u0026gt;= 1) if (l \u0026lt; N) tree[l] = max(tree[l \u0026lt;\u0026lt; 1], tree[l \u0026lt;\u0026lt; 1 | 1]) + mark[l], tree[r] = max(tree[r \u0026lt;\u0026lt; 1], tree[r \u0026lt;\u0026lt; 1 | 1]) + mark[r]; }; int query(int l, int r) { int maxl = -INF, maxr = -INF; for (l += N - 1, r += N + 1; l ^ r ^ 1; l \u0026gt;\u0026gt;= 1, r \u0026gt;\u0026gt;= 1) { maxl += mark[l], maxr += mark[r]; if (~l \u0026amp; 1) cmax(maxl, tree[l ^ 1]); if (r \u0026amp; 1) cmax(maxr, tree[r ^ 1]); } for (; l; l \u0026gt;\u0026gt;= 1, r \u0026gt;\u0026gt;= 1) maxl += mark[l], maxr += mark[r]; return max(maxl, maxr); }; Leetcode. 307 範例 https://leetcode.com/problems/range-sum-query-mutable/ TreeNode 變形 class NumArray { class SegTree { public: int val; int begin, end; SegTree* left, *right; SegTree(int v):val(v) {} SegTree(int v, int b, int e):val(v), begin(b), end(e) {} SegTree(int v, int b, int e, SegTree* l, SegTree* r) :val(v), begin(b), end(e), left(l), right(r) {} }; SegTree* root; SegTree* build(vector\u0026lt;int\u0026gt;\u0026amp; nums, int b, int e){ if (e \u0026lt; b) return NULL; if (b == e) return new SegTree(nums[b], b, b); int mid = b + (e-b)/2; SegTree* left = build(nums, b, mid); SegTree* right = build(nums, mid+1, e); return new SegTree(left-\u0026gt;val + right-\u0026gt;val, b, e, left, right); } void update(SegTree* node, int index, int val){ if (node-\u0026gt;begin == index \u0026amp;\u0026amp; node-\u0026gt;end == index){ node-\u0026gt;val = val; } else { int mid = node-\u0026gt;begin + (node-\u0026gt;end - node-\u0026gt;begin)/2; if (index \u0026lt;= mid){ update(node-\u0026gt;left, index, val); } else { update(node-\u0026gt;right, index, val); } node-\u0026gt;val = node-\u0026gt;left-\u0026gt;val + node-\u0026gt;right-\u0026gt;val; } } int query(SegTree* node, int left, int right){ if (node-\u0026gt;begin == left \u0026amp;\u0026amp; node-\u0026gt;end == right){ return node-\u0026gt;val; } int mid = node-\u0026gt;begin + (node-\u0026gt;end - node-\u0026gt;begin)/2; if (right \u0026lt;= mid){ return query(node-\u0026gt;left, left, right); } else if (left \u0026gt; mid){ return query(node-\u0026gt;right, left, right); } return query(node-\u0026gt;left, left, mid) + query(node-\u0026gt;right, mid+1, right); } public: NumArray(vector\u0026lt;int\u0026gt;\u0026amp; nums) { root = build(nums, 0, nums.size()-1); } void update(int index, int val) { update(root, index, val); } int sumRange(int left, int right) { return query(root, left, right); } }; zkw 線段樹 class NumArray { class SegTree { vector\u0026lt;int\u0026gt; arr; int m, n; public: SegTree(vector\u0026lt;int\u0026gt;\u0026amp; nums) { n = nums.size(); for (m = 1; m \u0026lt; n; m \u0026lt;\u0026lt;= 1); build(nums); } void build(vector\u0026lt;int\u0026gt;\u0026amp; nums) { arr.assign(2*m, 0); for (int i = 0; i \u0026lt; n; ++i) arr[m+i] = nums[i]; for (int i = m-1; i; --i) arr[i] = arr[i\u0026lt;\u0026lt;1] + arr[i\u0026lt;\u0026lt;1|1]; } void update(int index, int val) { int diff = val - arr[m+index]; for (index += m; index; index \u0026gt;\u0026gt;= 1) arr[index] += diff; } int query(int left, int right) { int sum = 0; for (int i = left+m, j = right+m; i \u0026lt;= j; i \u0026gt;\u0026gt;= 1, j \u0026gt;\u0026gt;= 1){ if (i \u0026amp; 1) sum += arr[i++]; if (!(j \u0026amp; 1)) sum += arr[j--]; } return sum; } }; public: SegTree* root; NumArray(vector\u0026lt;int\u0026gt;\u0026amp; nums) { root = new SegTree(nums); } void update(int index, int val) { root-\u0026gt;update(index, val); } int sumRange(int left, int right) { return root-\u0026gt;query(left, right); } }; BIT(binary indexed tree) class NumArray { public: class Bit { public: vector\u0026lt;int\u0026gt; bit; int n; Bit(vector\u0026lt;int\u0026gt;\u0026amp; nums) { n = nums.size(); bit.assign(n+1, 0); for (int i = 0; i \u0026lt; n; i++){ build(i+1, nums[i]); } } void build(int index, int val) { while (index \u0026lt;= n){ bit[index] += val; index = next(index); } } int next(int index) { return index + (index \u0026amp; -index); } int parent(int index) { return index - (index \u0026amp; -index); } int getSum(int index) { int sum = 0; while (index){ sum += bit[index]; index = parent(index); } return sum; } }; Bit* bit; NumArray(vector\u0026lt;int\u0026gt;\u0026amp; nums) { bit = new Bit(nums); } void update(int index, int val) { int diff = val - sumRange(index, index); bit-\u0026gt;build(index+1, diff); } int sumRange(int left, int right) { return bit-\u0026gt;getSum(right+1) - bit-\u0026gt;getSum(left); } }; ","permalink":"https://intervalrain.github.io/c++/segtree/","summary":"\u003ch1 id=\"線段樹-segment-tree\"\u003e線段樹 Segment Tree\u003c/h1\u003e\n\u003ch2 id=\"簡介\"\u003e簡介\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e線段樹是演算法中常用來維護\u003cstrong\u003e區間訊息\u003c/strong\u003e的資料結構。\u003c/li\u003e\n\u003cli\u003e空間複雜度為 \\(O(n)\\)，\\(n\\) 代表區間數。\u003c/li\u003e\n\u003cli\u003e查詢的時間複雜度為 \\(O(\\log n+k)\\)，\\(k\\) 代表符合條件的區間數量。\u003c/li\u003e\n\u003cli\u003e線段樹將每個長度為為 1 的區間劃分為左右兩個區間遞迴求解，把整個線段劃分為一個樹型結構，通過合併左右兩個區間訊息來求得該區間的訊息。\u003c/li\u003e\n\u003cli\u003e在實現時，我們考慮遞迴建樹，設當前的根節點為 root，如果根節點管轄的區間長度已經是 1，則可以直接根據數組上相應位置的值初始化該節點。否則需將該區間從中點處分割為兩個子區間，分別進入左右子節點遞迴建樹，最後合併兩個子節點的訊息，\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"建樹-build\"\u003e建樹 build\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ebuild\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e s, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e t, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e p, \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e arr){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (s \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e t){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        tree[p] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e SegmentItem(arr[s], \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e m \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e s \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e ((t \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e s) \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    build(s, m, p\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, arr);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    build(m\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, t, p\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, arr);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// push_up\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    tree[p] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e tree[p\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e tree[(p\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"查詢-query\"\u003e查詢 query\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eSegmentItem \u003cspan style=\"color:#a6e22e\"\u003efind\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e l, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e r, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e s, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e t, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e p){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (l \u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e s \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e t \u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e r){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e tree[p];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e m \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e s \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e ((t \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e s) \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    SegmentItem sum;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (r \u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e m) \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e find(l, r, s, m, p\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (l \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e m) \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e find(l, r, m\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, t, p\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e find(l, r, s, m, p\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e find(l, r, m\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, t, p\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"zkw-線段樹\"\u003ezkw 線段樹\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e來自清華大學張昆瑋(zkw)-《統計的力量》\u003c/li\u003e\n\u003cli\u003e以非遞迴的方式構建，效率更高，程式更短。\u003c/li\u003e\n\u003cli\u003e普通的線段樹是從上到下做處理，容易定位根節點，卻不容易定位子節點。\u003c/li\u003e\n\u003cli\u003ezkw 線段樹是當二叉樹是\u003cstrong\u003e滿二叉樹\u003c/strong\u003e時，因為子節點的編號具有以下規律：\n\u003cimg alt=\"complete tree\" loading=\"lazy\" src=\"https://pic2.zhimg.com/80/v2-0cf514ed4d2feb7db4acf069659c6921_1440w.webp\"\u003e\n\u003cul\u003e\n\u003cli\u003e葉子節點(left) 全部退化為線段 \\([x,x]\\) 。\u003c/li\u003e\n\u003cli\u003e\\(n\\) 個數據點則取大於等 \\(n\\)且為 \\(2\\) 的冪次的兩倍作為數組大小。 \\((m=2^a\\ge n)\\)\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e m \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e; m \u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e n; m \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e維護點為 \\(n\\) 個。索引為\\([m,m+n)\\)。\u003c/li\u003e\n\u003cli\u003e子葉數目為 \\(m\\) 個。索引為\\([m,2m)\\)\u003c/li\u003e\n\u003cli\u003e節點數為 \\(2m-1\\) 個。(數組大小需設 \\(2m\\) 因為 zkw tree是 1-index的)\u003c/li\u003e\n\u003cli\u003e樹高 \\(H=\\log_2(m)+1\\) 層。\n\u003cul\u003e\n\u003cli\u003e第 \\(h\\) 層有 \\(2^{h-1}\\) 個節點，\u003c/li\u003e\n\u003cli\u003e該層線段長度為 \\(2^{H-h}\\)。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e若某節點為 \\(p\\)，父節點為 \\(p/2\\)，子節點為 \\(2p\\) 和 \\(2p+1\\)\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e parent \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e p \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e left \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e p \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e right \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e p \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e若兩節點為 \\(p\\) 與 \\(q\\)，且兩節點互為兄弟節點，則 \\(p\\oplus q=1\\)\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (left \u003cspan style=\"color:#f92672\"\u003e^\u003c/span\u003e right)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// left 與 right 為兄弟節點\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// left 與 right 不為兄弟節點\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e除根節點外，左節點皆為偶數，右節點皆為奇數\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (i \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// i 為根節點\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (i \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// i 為奇數，為右節點\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003e(i \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// i 為偶數，為左節點\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"結構\"\u003e結構\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e線段樹索引堆疊：\n\u003cimg alt=\"zkw1\" loading=\"lazy\" src=\"/images/zkw1.jpg\"\u003e\u003c/li\u003e\n\u003cli\u003e轉成二進制：\n\u003cimg alt=\"zkw2\" loading=\"lazy\" src=\"/images/zkw2.jpg\"\u003e\u003c/li\u003e\n\u003cli\u003e規律：\n\u003cul\u003e\n\u003cli\u003e一個節點的父節點是該數右移 1，低位捨棄。\u003c/li\u003e\n\u003cli\u003e一個節點的左子節點是該數左移 1，右子節點是該數左移 1 再加 1。\u003c/li\u003e\n\u003cli\u003e同一層的節點是依次遞增的，第 \\(n\\) 層有 \\(2^{n-1}\\)個節點\u003c/li\u003e\n\u003cli\u003e最後一層有多少個節點，值域就是多少。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"建樹-build-1\"\u003e建樹 build\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e取 m 值有許多版本，有些版本會直接取 \\(m=2^{log_2(n+5)+1}\\)以節省迭代計算\n\u003cul\u003e\n\u003cli\u003e寫成 \u003ccode\u003eint n = 1 \u0026lt;\u0026lt; __lg(n+5)+1;\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e可以有\u003cstrong\u003e開區間\u003c/strong\u003e與\u003cstrong\u003e閉區間\u003c/strong\u003e兩種做法，差別在於從子葉節點的最左邊 \\(m+i\\) 開始，或是第二個子葉節點 \\(m+1+i\\) 開始。\u003c/li\u003e\n\u003cli\u003e由下而上更新時，開區間與閉區間的終止條件不同：\n\u003cul\u003e\n\u003cli\u003e開區間的終止條件為兩子節點互為兄弟節點\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (i\u003cspan style=\"color:#f92672\"\u003e^\u003c/span\u003ej\u003cspan style=\"color:#f92672\"\u003e^\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// operation\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e閉區間的終止條件為右節點小於左節點\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e j)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// operation\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eTree\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e arr;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n, m;   \u003cspan style=\"color:#75715e\"\u003e// n 為維護點數, m 為 zkw-tree 子葉節點數\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Tree (vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e nums){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        n \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e nums.size();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (m \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e; m \u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e n; m \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e);   \u003cspan style=\"color:#75715e\"\u003e// 取大於等於 n 且為 2 的冪次的最小整數\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        arr.assign(\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003em, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e);     \u003cspan style=\"color:#75715e\"\u003e// 節點數設為 2m 個，其中 0 為空節點\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ebuild\u003c/span\u003e(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e nums){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e n; i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            arr[i\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003em] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e nums[i];  \u003cspan style=\"color:#75715e\"\u003e// 從子葉節點最左邊往右更新節點。\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e            mx[i\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003em] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e nums[i];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            mn[i\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003em] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e nums[i];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e m\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e; i; i\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003e){  \u003cspan style=\"color:#75715e\"\u003e// 向上更新父節點。\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e            arr[i] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e in(x);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e根據不同需求代換 \\(\\text{in(x)}\\)：取和、最大值、最小平\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// 取和\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    arr[i] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e arr[i\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e arr[i\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// 取最大值\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    arr[i] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e max(arr[i\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e], arr[i\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// 取最小值\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    arr[i] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e min(arr[i\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e], arr[i\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]);\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"更新-update\"\u003e更新 update\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e單點修改(以和為例)\u003c/li\u003e\n\u003cli\u003e更新時，以差分方式，將所有父節點加上更新點的差值。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eupdate\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e val){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e diff \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e val \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e arr[m\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003ei]   \u003cspan style=\"color:#75715e\"\u003e// 原值 arr[m+i] 與新值 val 的差\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (i \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e m; i; i \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        arr[i] \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e diff;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"查詢-query-1\"\u003e查詢 query\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e單點查詢(以和為例)：閉區間做法\u003c/li\u003e\n\u003cli\u003e判斷左邊界是否為右節點，若為右節點則加上後往右邊的父節點移動。\u003c/li\u003e\n\u003cli\u003e判斷右邊界是否為左節點，若為左節點則加上後往左邊的父節點移動。\n\u003cimg alt=\"query\" loading=\"lazy\" src=\"https://pic2.zhimg.com/80/v2-e3823c417f81dedca9de97ce81fb25f5_1440w.webp\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003equery\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e left, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e right){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e sum \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e left\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003em;     \u003cspan style=\"color:#75715e\"\u003e// 左閉區間\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e j \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e right\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003em;    \u003cspan style=\"color:#75715e\"\u003e// 右閉區間\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e j; i \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, j \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (i \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e) sum \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e arr[i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003e(j \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)) sum \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e arr[j\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e sum;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e備註：開區間作法 (0-index 時會出現 -1 的情形，建議使用閉區間)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003equery\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e left, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e right){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e sum \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e left\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003em\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e j \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e right\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003em\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e(; i\u003cspan style=\"color:#f92672\"\u003e^\u003c/span\u003ej\u003cspan style=\"color:#f92672\"\u003e^\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, j \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#f92672\"\u003e~\u003c/span\u003ei \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e) sum \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e arr[i\u003cspan style=\"color:#f92672\"\u003e^\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (j \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e) sum \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e arr[j\u003cspan style=\"color:#f92672\"\u003e^\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e sum;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"區間修改\"\u003e區間修改\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e在非遞迴的情況下，標記下傳是比較困難的，所以作法上改成將標記永久化。\u003c/li\u003e\n\u003cli\u003e具體而言，與查詢類似，當左端點是左子節點且右端點是右子節點時，我們對它的兄弟節點進行修改並標記，表示這顆子樹中的每個節點都要被修改。但單純這樣還不夠，因上述修改還會波及到這些節點的各級祖先，所以我們需要在途中根據實際修改的區間長度來更新各級祖先的值，這種操作需要一路上推到根節點。\n\u003cimg alt=\"range_revise\" loading=\"lazy\" src=\"https://pic3.zhimg.com/80/v2-107685cb9a76db558ed75ce3979dacde_1440w.webp\"\u003e\n(開區間作法)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eupdate\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e left, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e right, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e diff){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e len \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, cntl \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, cntr \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; \u003cspan style=\"color:#75715e\"\u003e// cntl, cntr 是左右邊分別實際修改的區間長度\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    left \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e m\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    right \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e m\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (; left\u003cspan style=\"color:#f92672\"\u003e^\u003c/span\u003eright\u003cspan style=\"color:#f92672\"\u003e^\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e; left \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, right \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, len \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        arr[left] \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e cntl \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e diff;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        arr[right] \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e cntr \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e diff;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#f92672\"\u003e~\u003c/span\u003eleft \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            arr[left\u003cspan style=\"color:#f92672\"\u003e^\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e diff \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e len;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            mark[left\u003cspan style=\"color:#f92672\"\u003e^\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e diff;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            cntl \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e len;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (right \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            arr[right\u003cspan style=\"color:#f92672\"\u003e^\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e diff \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e len;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            mark[right\u003cspan style=\"color:#f92672\"\u003e^\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e diff;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            cntr \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e len;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (; left; left \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, right \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        arr[left] \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e cntl \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e diff;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        arr[right] \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e cntr \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e diff;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e在有區間修改存在時，區間查詢也需要考慮標記的影響。\u003c/li\u003e\n\u003cli\u003e所以除了加上端點的兄弟節點訊息，沿途中遇到的標記也對答案有貢獻，同樣需要上推到根節點。\n\u003cimg alt=\"range_query\" loading=\"lazy\" src=\"https://pic4.zhimg.com/80/v2-c02f4a74602fbf8b1d8c90012550af77_1440w.webp\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003equery\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e left, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e right){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e sum \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, len \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, cntl \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, cntr \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    left \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e m \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    right \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e m \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (; left\u003cspan style=\"color:#f92672\"\u003e^\u003c/span\u003eright\u003cspan style=\"color:#f92672\"\u003e^\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e; left \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, right \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, len \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        sum \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e cntl \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e mark[left] \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e cntr \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e mark[right];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#f92672\"\u003e~\u003c/span\u003eleft \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e) sum \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e arr[left\u003cspan style=\"color:#f92672\"\u003e^\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e], cntl \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e len;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (right \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e) sum \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e arr[right\u003cspan style=\"color:#f92672\"\u003e^\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e], cntr \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e len;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (; left; left \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, right \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        sum \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e cntl \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e mark[left] \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e cntr \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e mark[right];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e sum;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e區間查詢最大值：\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eupdate\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e l, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e r, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e d) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (l \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e N \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, r \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e N \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e; l \u003cspan style=\"color:#f92672\"\u003e^\u003c/span\u003e r \u003cspan style=\"color:#f92672\"\u003e^\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e; l \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, r \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (l \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e N) tree[l] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e max(tree[l \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e], tree[l \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]) \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e mark[l],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    tree[r] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e max(tree[r \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e], tree[r \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]) \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e mark[r];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#f92672\"\u003e~\u003c/span\u003el \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e) tree[l \u003cspan style=\"color:#f92672\"\u003e^\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e d, mark[l \u003cspan style=\"color:#f92672\"\u003e^\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e d;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (r \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e) tree[r \u003cspan style=\"color:#f92672\"\u003e^\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e d, mark[r \u003cspan style=\"color:#f92672\"\u003e^\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e d;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (; l; l \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, r \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (l \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e N) tree[l] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e max(tree[l \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e], tree[l \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]) \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e mark[l],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    tree[r] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e max(tree[r \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e], tree[r \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]) \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e mark[r];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003equery\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e l, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e r) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e maxl \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003eINF, maxr \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003eINF;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (l \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e N \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, r \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e N \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e; l \u003cspan style=\"color:#f92672\"\u003e^\u003c/span\u003e r \u003cspan style=\"color:#f92672\"\u003e^\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e; l \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, r \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        maxl \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e mark[l], maxr \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e mark[r];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#f92672\"\u003e~\u003c/span\u003el \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e) cmax(maxl, tree[l \u003cspan style=\"color:#f92672\"\u003e^\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (r \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e) cmax(maxr, tree[r \u003cspan style=\"color:#f92672\"\u003e^\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (; l; l \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, r \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        maxl \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e mark[l], maxr \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e mark[r];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e max(maxl, maxr);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"leetcode-307-範例\"\u003eLeetcode. 307 範例\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://leetcode.com/problems/range-sum-query-mutable/\"\u003ehttps://leetcode.com/problems/range-sum-query-mutable/\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003col\u003e\n\u003cli\u003eTreeNode 變形\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eNumArray\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSegTree\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e val;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e begin, end;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        SegTree\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e left, \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003eright;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        SegTree(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e v)\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003eval(v) {}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        SegTree(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e v, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e b, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e e)\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003eval(v), begin(b), end(e) {}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        SegTree(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e v, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e b, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e e, SegTree\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e l, SegTree\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e r)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003eval(v), begin(b), end(e), left(l), right(r) {}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    };\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    SegTree\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e root;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    SegTree\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ebuild\u003c/span\u003e(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e nums, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e b, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e b) \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e NULL;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (b \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e e) \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e SegTree(nums[b], b, b);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e mid \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e b \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e (e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003eb)\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        SegTree\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e left \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e build(nums, b, mid);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        SegTree\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e right \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e build(nums, mid\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e SegTree(left\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eval \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e right\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eval, b, e, left, right);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eupdate\u003c/span\u003e(SegTree\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e node, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e index, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e val){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (node\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003ebegin \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e index \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e node\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eend \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e index){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            node\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eval \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e val;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e mid \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e node\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003ebegin \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e (node\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eend \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e node\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003ebegin)\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (index \u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e mid){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                update(node\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eleft, index, val);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                update(node\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eright, index, val);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            node\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eval \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e node\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eleft\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eval \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e node\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eright\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eval;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003equery\u003c/span\u003e(SegTree\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e node, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e left, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e right){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (node\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003ebegin \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e left \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e node\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eend \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e right){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e node\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eval;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e mid \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e node\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003ebegin \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e (node\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eend \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e node\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003ebegin)\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (right \u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e mid){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e query(node\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eleft, left, right);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (left \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e mid){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e query(node\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eright, left, right);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e query(node\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eleft, left, mid) \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e query(node\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eright, mid\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, right);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    NumArray(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e nums) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        root \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e build(nums, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, nums.size()\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eupdate\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e index, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e val) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        update(root, index, val);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esumRange\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e left, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e right) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e query(root, left, right);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"2\"\u003e\n\u003cli\u003ezkw 線段樹\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eNumArray\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSegTree\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e arr;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e m, n;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        SegTree(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e nums) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            n \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e nums.size();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (m \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e; m \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e n; m \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            build(nums);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ebuild\u003c/span\u003e(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e nums) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            arr.assign(\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003em, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e n; \u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003ei) arr[m\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003ei] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e nums[i];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e m\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e; i; \u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003ei) arr[i] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e arr[i\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e arr[i\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eupdate\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e index, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e val) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e diff \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e val \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e arr[m\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003eindex];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (index \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e m; index; index \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e) arr[index] \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e diff;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003equery\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e left, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e right) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e sum \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e left\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003em, j \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e right\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003em; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e j; i \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, j \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (i \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e) sum \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e arr[i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003e(j \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e)) sum \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e arr[j\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e sum;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    };\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    SegTree\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e root;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    NumArray(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e nums) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        root \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e SegTree(nums);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eupdate\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e index, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e val) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        root\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eupdate(index, val);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esumRange\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e left, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e right) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e root\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003equery(left, right);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"bitbinary-indexed-tree\"\u003eBIT(binary indexed tree)\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eNumArray\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eBit\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e bit;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Bit(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e nums) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            n \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e nums.size();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            bit.assign(n\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e n; i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                build(i\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, nums[i]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ebuild\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e index, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e val) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (index \u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e n){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                bit[index] \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e val;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                index \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e next(index);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enext\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e index) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e index \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e (index \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003eindex);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        } \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eparent\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e index) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e index \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e (index \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003eindex);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egetSum\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e index) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e sum \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (index){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                sum \u003cspan style=\"color:#f92672\"\u003e+=\u003c/span\u003e bit[index];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                index \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e parent(index);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e sum;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    };\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Bit\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e bit;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    NumArray(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e nums) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        bit \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e Bit(nums);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eupdate\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e index, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e val) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e diff \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e val \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e sumRange(index, index);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        bit\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003ebuild(index\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, diff);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esumRange\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e left, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e right) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e bit\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003egetSum(right\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e bit\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003egetSum(left);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"[C++] Segment Tree"},{"content":"stringstream 需引用 \u0026lt;sstream\u0026gt; , \u0026lt;iostream\u0026gt;, \u0026lt;string\u0026gt;函式庫 配合 str() 將 stringstream 類轉換成 string 類別。 split() vector\u0026lt;string\u0026gt; split(string\u0026amp; str, char del){ stringstream ss(str); string item; vector\u0026lt;string\u0026gt; res; while (getline(ss, item, del)){ if (!item.empty()){ res.push_back(item); } } return res; } concat() string concat(vector\u0026lt;string\u0026gt;\u0026amp; svec, char del){ stringstream ss; for (const auto\u0026amp; s : svec){ ss \u0026lt;\u0026lt; s \u0026lt;\u0026lt; del; } return ss.str(); } [leetcode 1859. Sorting the Sentence] class Solution { public: string sortSentence(string s) { vector\u0026lt;string\u0026gt; tmp = split(s, \u0026#39; \u0026#39;); int n = tmp.size(); vector\u0026lt;string\u0026gt; svec(n); for (const string\u0026amp; s : tmp){ int pos = s.back() - \u0026#39;1\u0026#39;; svec[pos] = s.substr(0, s.length()-1); } return concat(svec, \u0026#39; \u0026#39;); } string concat(vector\u0026lt;string\u0026gt;\u0026amp; svec, char del){ string res; stringstream ss; for (const string\u0026amp; s : svec) ss \u0026lt;\u0026lt; del \u0026lt;\u0026lt; s; res = ss.str(); return res.substr(1); } vector\u0026lt;string\u0026gt; split(string\u0026amp; str, char del){ vector\u0026lt;string\u0026gt; res; stringstream ss(str); string item; while (getline(ss, item, del)){ if (!item.empty()){ res.push_back(item); } } return res; } }; ","permalink":"https://intervalrain.github.io/c++/stringstream/","summary":"\u003ch1 id=\"stringstream\"\u003estringstream\u003c/h1\u003e\n\u003cp\u003e\u003cimg alt=\"stringstream\" loading=\"lazy\" src=\"http://www.pconline.com.cn/pcedu/empolder/gj/c/0504/pic/08cppios01.gif\"\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e需引用 \u003ccode\u003e\u0026lt;sstream\u0026gt;\u003c/code\u003e , \u003ccode\u003e\u0026lt;iostream\u0026gt;\u003c/code\u003e, \u003ccode\u003e\u0026lt;string\u0026gt;\u003c/code\u003e函式庫\u003c/li\u003e\n\u003cli\u003e配合 \u003ccode\u003estr()\u003c/code\u003e 將 stringstream 類轉換成 string 類別。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"split\"\u003esplit()\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003evector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003estring\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e split(string\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e str, \u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e del){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    stringstream \u003cspan style=\"color:#a6e22e\"\u003ess\u003c/span\u003e(str);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    string item;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003estring\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e res;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (getline(ss, item, del)){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003eitem.empty()){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            res.push_back(item);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e res;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"concat\"\u003econcat()\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003estring \u003cspan style=\"color:#a6e22e\"\u003econcat\u003c/span\u003e(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003estring\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e svec, \u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e del){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    stringstream ss;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eauto\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e s : svec){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        ss \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e s \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e del;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e ss.str();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"leetcode-1859-sorting-the-sentence\"\u003e[leetcode 1859. Sorting the Sentence]\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSolution\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    string sortSentence(string s) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003estring\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e tmp \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e split(s, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39; \u0026#39;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e tmp.size();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003estring\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e svec(n);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e string\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e s : tmp){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e pos \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e s.back() \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;1\u0026#39;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            svec[pos] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e s.substr(\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, s.length()\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003econcat\u003c/span\u003e(svec, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39; \u0026#39;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    string \u003cspan style=\"color:#a6e22e\"\u003econcat\u003c/span\u003e(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003estring\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e svec, \u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e del){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        string res;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        stringstream ss;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e string\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e s : svec)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            ss \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e del \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e s;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        res \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e ss.str();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e res.substr(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003estring\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e split(string\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e str, \u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e del){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003estring\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e res;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        stringstream \u003cspan style=\"color:#a6e22e\"\u003ess\u003c/span\u003e(str);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        string item;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (getline(ss, item, del)){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003eitem.empty()){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                res.push_back(item);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e res;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"[C++] stringstream 類範例 - split 與 concat"},{"content":"一、Big O 表示法 Big O 的數學定義： \\(\\boxed{O(g(n)) = \\lbrace{f(n):存在正常量\\space c\\space 和\\space n_0，使得對所有\\space n\\ge n_0，有\\space 0 \\le f(n) \\le cg(n)\\rbrace}}\\) 我們常用的 big O 表示法中的 \\(O\\) 其實代表了一個函數的集合，比方說 \\(O(n^2)\\) 代表著一個由 \\(g(n) = n^2\\) 派生出來的一個函數集合；我們說一個演算法的時間複雜度為 \\(O(n^2)\\)，意思就是描述該演算法的複雜度函數屬於這個函數集合之中。 分析複雜度時，常用的兩個特性： 只保留增長速率最快的項，其它省略 \\(\\boxed{O(2n+100) = O(n)}\\) \\(\\boxed{O(2^{n+1}) = O(2^n)}\\) \\(\\boxed{O(m+3n+99) = O(m+n)}\\) \\(\\boxed{O(n^3+999\\times n^2+999\\times n) = O(n^3)}\\) Big O 記號表示複雜度的「上限」 換句話說，只要給出的是一個上限，用 Big O 表示法都是正確的。 但在習慣上，我們特別取最緊臨的上限。但若複雜度會跟算法的輸入數據有關，沒辦法提前給出一個特別精確的時間複雜度時，擴大時間複雜度的上限就變得有意義了。 例如湊零錢問題中，金額 amount 的值為 n，coins 列表中的個數為 k，則這棵遞迴樹就是 K 叉樹。而節點的數量與樹的結構有關，而我們無法提前知道樹的結構，所以我們按照最壞情形來處理，高度為 n 的一棵滿 k 叉樹，其節點數為 \\(\\frac{k^n-1}{k-1}\\)，用 big O 表示就是 \\(O(k^n)\\)。 二、主定理(Master Theorem) 有時候時間複雜度的判斷沒那麼容易，主定理是一個數學推導的方法：可以參考網站https://brilliant.org/wiki/master-theorem/ 回到目錄：[Algo] 演算法筆記 接著閱讀：[Algo] 0-2. 演算法思維 ","permalink":"https://intervalrain.github.io/cs/algo/bigo/","summary":"\u003ch3 id=\"一big-o-表示法\"\u003e一、Big O 表示法\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eBig O 的數學定義：\n\\(\\boxed{O(g(n)) = \\lbrace{f(n):存在正常量\\space c\\space 和\\space n_0，使得對所有\\space n\\ge n_0，有\\space 0 \\le f(n) \\le cg(n)\\rbrace}}\\)\u003c/li\u003e\n\u003cli\u003e我們常用的 big O 表示法中的 \\(O\\) 其實代表了一個函數的集合，比方說 \\(O(n^2)\\) 代表著一個由 \\(g(n) = n^2\\) 派生出來的一個函數集合；我們說一個演算法的時間複雜度為 \\(O(n^2)\\)，意思就是描述該演算法的複雜度函數屬於這個函數集合之中。\u003c/li\u003e\n\u003cli\u003e分析複雜度時，常用的兩個特性：\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003e只保留增長速率最快的項，其它省略\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e\\(\\boxed{O(2n+100) = O(n)}\\)\u003c/li\u003e\n\u003cli\u003e\\(\\boxed{O(2^{n+1}) = O(2^n)}\\)\u003c/li\u003e\n\u003cli\u003e\\(\\boxed{O(m+3n+99) = O(m+n)}\\)\u003c/li\u003e\n\u003cli\u003e\\(\\boxed{O(n^3+999\\times n^2+999\\times n) = O(n^3)}\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eBig O 記號表示複雜度的「上限」\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e換句話說，只要給出的是一個上限，用 Big O 表示法都是正確的。\u003c/li\u003e\n\u003cli\u003e但在習慣上，我們特別取最緊臨的上限。但若複雜度會跟算法的輸入數據有關，沒辦法提前給出一個特別精確的時間複雜度時，擴大時間複雜度的上限就變得有意義了。\n\u003cimg alt=\"sample\" loading=\"lazy\" src=\"https://labuladong.github.io/algo/images/%e5%8a%a8%e6%80%81%e8%a7%84%e5%88%92%e8%af%a6%e8%a7%a3%e8%bf%9b%e9%98%b6/5.jpg\"\u003e\n\u003cul\u003e\n\u003cli\u003e例如湊零錢問題中，金額 \u003ccode\u003eamount\u003c/code\u003e 的值為 \u003ccode\u003en\u003c/code\u003e，\u003ccode\u003ecoins\u003c/code\u003e 列表中的個數為 \u003ccode\u003ek\u003c/code\u003e，則這棵遞迴樹就是 K 叉樹。而節點的數量與樹的結構有關，而我們無法提前知道樹的結構，所以我們按照最壞情形來處理，高度為 \u003ccode\u003en\u003c/code\u003e 的一棵滿 \u003ccode\u003ek\u003c/code\u003e 叉樹，其節點數為 \\(\\frac{k^n-1}{k-1}\\)，用 big O 表示就是 \\(O(k^n)\\)。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"二主定理master-theorem\"\u003e二、主定理(Master Theorem)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e有時候時間複雜度的判斷沒那麼容易，主定理是一個數學推導的方法：可以參考網站https://brilliant.org/wiki/master-theorem/\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003cul\u003e\n\u003cli\u003e回到目錄：\u003ca href=\"/cs/algo\"\u003e[Algo] 演算法筆記\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e接著閱讀：\u003ca href=\"/cs/algo/concept\"\u003e[Algo] 0-2. 演算法思維\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"[Algo] 0-1. 複雜度分析 Algorithmic complexity / Big-O / Asymptotic analysis"},{"content":"一、二叉樹的思維模式 二叉樹的解題模式大致分為兩類： 是否可以通過遍歷一遍得解 是否可以定義一個遞迴函數，通過分治法推導出原問題的答案？ [LeetCode. 104] Maximum Depth of Binary Tree(Easy) 以此題為例，可以遍歷完整個樹，並比較當下的樹的深度，得以求解。 int depth = 0; int maxDepth(TreeNode* root){ traverse(root, 1); return depth; } void traverse(TreeNode* root, int currDepth){ if (!root) return; traverse(root-\u0026gt;left, currDepth+1); depth = max(depth, currDepth); traverse(root-\u0026gt;right, currDepth+1); } 若想辦法定義一個遞迴函數，通過分治法推導出原問題，換言之，就是先處理更小的樹，再藉由小的樹處理大的樹： int maxDepth(TreeNode* root) { if (root == NULL) return 0; return 1 + max(maxDepth(root-\u0026gt;left), maxDepth(root-\u0026gt;right)); } 事實上，兩個思維模式便對應著兩種演算法：回溯法(back tracking)與動態規劃(dynamic programming) 二、前序、中序、後序 無論使用哪種思維模式(遍歷或找出遞迴函數)，都要思考單獨抽出一個節點，它需要在何時(前、中、後序)做哪些事情，其它的節點交由遞迴函數去執行相同的操作。 以下我們以 quick sort 與 merge sort 為例，同樣是分治法，看看在數組上有什麼同樣的思維模式。 quick sort 從 sort() 函式便可見類似於前序的結構。 void sort(vector\u0026lt;int\u0026gt;\u0026amp; nums, int left, int right){ if (left \u0026gt;= right) return; // 終止條件 int mid = partition(nums, left, right); // 做什麼事(pre-order) sort(nums, left, mid-1); // 左子樹 sort(nums, mid+1, right); // 右子樹 } int partition(vector\u0026lt;int\u0026gt;\u0026amp; nums, int left, int right){ int pivot = right; while (left \u0026lt; right){ while (nums[left] \u0026lt; nums[pivot]) left++; while (nums[right] \u0026gt; nums[pivot]) right--; if (left \u0026lt; right) swap(nums[left], nums[right]); } if (left == right \u0026amp;\u0026amp; nums[left] \u0026gt; nums[pivot] || nums[right] \u0026lt; nums[pivot]){ swap(nums[left], pivot); return left; } return pivot; } merge sort 從 sort() 函式便可見類似於後序的結構。 void sort(vector\u0026lt;int\u0026gt;\u0026amp; nums, int left, int right){ if (right \u0026lt;= left) return; // 終止條件 int mid = left + (right-left)/2; sort(nums, left, mid); // 左子樹 sort(nums, mid+1, right); // 右子樹 merge(nums, left, mid, right); // 做什麼事(post-order) } void merge(vector\u0026lt;int\u0026gt;\u0026amp; nums, int left, int mid, int right){ vector\u0026lt;int\u0026gt; vec; int i = left, j = mid+1; while (i \u0026lt;= mid \u0026amp;\u0026amp; j \u0026lt;= right){ int x = nums[i] \u0026lt; nums[j] ? nums[i++] : nums[j++]; vec.push_back(x); } while (i \u0026lt;= mid) vec.push_back(nums[i++]); while (j \u0026lt;= right) vec.push_back(nums[j++]); for (int i = left; i \u0026lt;= right; i++) nums[i] = vec[i-left]; } 換言之，以上就是一個遍歷全部節點的函式，所以本質上數組、鏈表、二叉樹都是在做同樣的事。 數組 void traverse(vector\u0026lt;int\u0026gt; nums, int i){ if (i == nums.size()) return; // pre-order traverse(nums, i+1); // post-order } 鏈表 void traverse(ListNode* head){ if (!head) return; // pre-order traverse(head-\u0026gt;next); // post-order } 二叉樹 void traverse(TreeNode* root){ if (!root) return; // pre-order traverse(root-\u0026gt;left); // in-order traverse(root-\u0026gt;right); // post-order } 三、層序遍歷（level-order) Level-order 對應於 BFS(Breadth-First Search)，完下當下的層才會進入到下一層。 void traverse(TreeNode* root){ queue\u0026lt;TreeNode*\u0026gt; q; q.push(root); while (!q.empty()){ int sz = q.size(); while (sz--){ TreeNode* curr = q.front(); q.pop(); // operation if (curr-\u0026gt;left) q.push(curr-\u0026gt;left); if (curr-\u0026gt;right) q. push(curr-\u0026gt;right); } } } 回到目錄：[Algo] 演算法筆記 想要複習：[Algo] 0-3. 鏈表(Linked List) ","permalink":"https://intervalrain.github.io/cs/algo/binary_tree/","summary":"\u003ch3 id=\"一二叉樹的思維模式\"\u003e一、二叉樹的思維模式\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e二叉樹的解題模式大致分為兩類：\n\u003col\u003e\n\u003cli\u003e是否可以通過遍歷一遍得解\u003c/li\u003e\n\u003cli\u003e是否可以定義一個遞迴函數，通過分治法推導出原問題的答案？\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"leetcode-104-maximum-depth-of-binary-treeeasyhttpsleetcodecomproblemsmaximum-depth-of-binary-tree\"\u003e\u003ca href=\"https://leetcode.com/problems/maximum-depth-of-binary-tree/\"\u003e[LeetCode. 104] Maximum Depth of Binary Tree(Easy)\u003c/a\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e以此題為例，可以遍歷完整個樹，並比較當下的樹的深度，得以求解。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e depth \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emaxDepth\u003c/span\u003e(TreeNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e root){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    traverse(root, \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e depth;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etraverse\u003c/span\u003e(TreeNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e root, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e currDepth){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003eroot) \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    traverse(root\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eleft, currDepth\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    depth \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e max(depth, currDepth);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    traverse(root\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eright, currDepth\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e若想辦法定義一個遞迴函數，通過分治法推導出原問題，換言之，就是先處理更小的樹，再藉由小的樹處理大的樹：\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emaxDepth\u003c/span\u003e(TreeNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e root) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (root \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e NULL) \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e max(maxDepth(root\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eleft), maxDepth(root\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eright));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e事實上，兩個思維模式便對應著兩種演算法：\u003cstrong\u003e回溯法(back tracking)\u003cstrong\u003e與\u003c/strong\u003e動態規劃(dynamic programming)\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"二前序中序後序\"\u003e二、前序、中序、後序\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e無論使用哪種思維模式(遍歷或找出遞迴函數)，\u003cstrong\u003e都要思考單獨抽出一個節點，它需要在何時(前、中、後序)做哪些事情\u003c/strong\u003e，其它的節點交由遞迴函數去執行相同的操作。\u003c/li\u003e\n\u003cli\u003e以下我們以 quick sort 與 merge sort 為例，同樣是分治法，看看在數組上有什麼同樣的思維模式。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"quick-sort\"\u003equick sort\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e從 sort() 函式便可見類似於前序的結構。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esort\u003c/span\u003e(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e nums, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e left, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e right){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (left \u003cspan style=\"color:#f92672\"\u003e\u0026gt;=\u003c/span\u003e right) \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e;              \u003cspan style=\"color:#75715e\"\u003e// 終止條件\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e mid \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e partition(nums, left, right); \u003cspan style=\"color:#75715e\"\u003e// 做什麼事(pre-order)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    sort(nums, left, mid\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e);                \u003cspan style=\"color:#75715e\"\u003e// 左子樹\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    sort(nums, mid\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, right);               \u003cspan style=\"color:#75715e\"\u003e// 右子樹\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003epartition\u003c/span\u003e(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e nums, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e left, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e right){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e pivot \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e right;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (left \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e right){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (nums[left] \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e nums[pivot]) left\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (nums[right] \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e nums[pivot]) right\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (left \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e right) swap(nums[left], nums[right]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (left \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e right \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e nums[left] \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e nums[pivot] \u003cspan style=\"color:#f92672\"\u003e||\u003c/span\u003e nums[right] \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e nums[pivot]){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        swap(nums[left], pivot);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e left;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e pivot;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"merge-sort\"\u003emerge sort\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e從 sort() 函式便可見類似於後序的結構。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esort\u003c/span\u003e(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e nums, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e left, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e right){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (right \u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e left) \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e;              \u003cspan style=\"color:#75715e\"\u003e// 終止條件\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e mid \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e left \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e (right\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003eleft)\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    sort(nums, left, mid);                  \u003cspan style=\"color:#75715e\"\u003e// 左子樹\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    sort(nums, mid\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, right);               \u003cspan style=\"color:#75715e\"\u003e// 右子樹\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    merge(nums, left, mid, right);          \u003cspan style=\"color:#75715e\"\u003e// 做什麼事(post-order)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emerge\u003c/span\u003e(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e nums, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e left, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e mid, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e right){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e vec;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e left, j \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e mid\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e mid \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e j \u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e right){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e x \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e nums[i] \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e nums[j] \u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e nums[i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e nums[j\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        vec.push_back(x);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e mid) vec.push_back(nums[i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (j \u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e right) vec.push_back(nums[j\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e left; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e right; i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        nums[i] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e vec[i\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003eleft];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e換言之，以上就是一個遍歷全部節點的函式，所以本質上數組、鏈表、二叉樹都是在做同樣的事。\n\u003cul\u003e\n\u003cli\u003e數組\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etraverse\u003c/span\u003e(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e nums, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (i \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e nums.size()) \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// pre-order\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    traverse(nums, i\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// post-order\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e鏈表\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etraverse\u003c/span\u003e(ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e head){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003ehead) \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// pre-order\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    traverse(head\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// post-order\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e二叉樹\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etraverse\u003c/span\u003e(TreeNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e root){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003eroot) \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// pre-order\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    traverse(root\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eleft);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// in-order\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    traverse(root\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eright);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// post-order\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"三層序遍歷level-order\"\u003e三、層序遍歷（level-order)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eLevel-order 對應於 BFS(Breadth-First Search)，完下當下的層才會進入到下一層。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etraverse\u003c/span\u003e(TreeNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e root){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    queue\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eTreeNode\u003cspan style=\"color:#f92672\"\u003e*\u0026gt;\u003c/span\u003e q;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    q.push(root);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (\u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003eq.empty()){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e sz \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e q.size();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (sz\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            TreeNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e curr \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e q.front();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            q.pop();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#75715e\"\u003e// operation\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (curr\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eleft) q.push(curr\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eleft);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (curr\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eright) q. push(curr\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eright);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003cul\u003e\n\u003cli\u003e回到目錄：\u003ca href=\"/cs/algo\"\u003e[Algo] 演算法筆記\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e想要複習：\u003ca href=\"/cs/algo/linked_list\"\u003e[Algo] 0-3. 鏈表(Linked List)\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"[Algo] 0-4. 二叉樹(Binary Tree)"},{"content":"一、鏈表的基本結構 鏈表是由節點和指針構成的數據結構，每個節點存有一個值，和一個指向下一個節點的指針。不同於數組，鏈表並不能隨機訪問，必須透過指針找到該節點才能獲取其值；同理在未遍歷到鏈表結尾時，我們也無法知道鏈表長度，除非依賴其它數據結構儲存長度。 LeetCode 中默認的鏈表： struct ListNode { int val; ListNode *next; ListNode(int x) : val(x), next(nullptr) {} }; 二、鏈表的基本操作 在開始演算法實踐前，先來練習一下鏈表的 CRUD 吧！ 1. 查(Read) 由於鏈表並非在儲存格中連續分布，所以無法用索引進行隨機訪問，所以我們必須逐個訪問，直到到達我們想要的元素。 藉由指針每次指向當前節點的 next，移動 n 次到達 index 為 n 的節點。 int at(ListNode* head, int n){ // index 為 n ListNode* curr = head; while (n--){ // 移動 n 次 curr = curr-\u0026gt;next; } return curr-\u0026gt;val; } 2. 改(Update) 改的步驟，只是將查完的元素予以賦值。 void update(ListNode* head, int n, int val){ ListNode* curr = head; while (n--){ curr = curr-\u0026gt;next; } curr-\u0026gt;val = val; // 查完後賦值 } 3. 增(create) 如果要新增節點，則必須找到要插入位置的前一個節點。 ListNode* insert(ListNode* head, int n, int val){ if (!head) return NULL; // 處理當鏈表為空的狀態 if (n == 0){ // 處理當插入位置為 0 時的特例 ListNode* newHead = new ListNode(val, head); head = newHead; return head; } ListNode* curr = head; while (curr \u0026amp;\u0026amp; --n){ // 移動到插入位置的前一位 curr = curr-\u0026gt;next; } ListNode* tmp = curr-\u0026gt;next; // 預先存下來插入位置的後一位 curr-\u0026gt;next = new ListNode(val); // 插入元素 curr-\u0026gt;next-\u0026gt;next = tmp; // 將元素的下一位指派給存下來的後一位 return head; } 上述的寫法很直觀，但需要處例首位的特例，不夠漂亮，這時我們常會用到 DUMMY HEAD 的手法，即在鏈表最開頭先創一個假的節點，最後再返回該節點的下一位。 ListNode* insert(ListNode* head, int n, int val){ if (!head) return NULL; ListNode* dummy = new ListNode(-1, head); // 創建一個 dummy head ListNode* curr = dummy; while (curr \u0026amp;\u0026amp; n--){ // 注意為 n-- curr = curr-\u0026gt;next; } ListNode* tmp = curr-\u0026gt;next; curr-\u0026gt;next = new ListNode(val); curr-\u0026gt;next-\u0026gt;next = tmp; return dummy-\u0026gt;next; // 注意為返回 dummy 的下一位 } 前面兩解都是在可以取得前一位，且不更改節點的值的前提下的解法。如果只能取得當下的節點，則可以使用增+更的手法。 void insert(ListNode* node, int val){ int tmp = node-\u0026gt;val; node-\u0026gt;val = val; node-\u0026gt;next = new ListNode(tmp, node-\u0026gt;next); } 4. 減(delete) 與增類似，取得前一位再利用更改指針的方式達到刪除。 ListNode* erase(ListNode* head, int n, int val){ if (!head) return NULL; ListNode* dummy = new ListNode(-1, head); ListNode* curr = dummy; while (curr \u0026amp;\u0026amp; n--){ curr = curr-\u0026gt;next; } curr-\u0026gt;next = curr-\u0026gt;next-\u0026gt;next; // 將前一位的後一位指給後一位 return dummy-\u0026gt;next; } 只能取得當下節點的作法： [LeetCode. 237] Delete Node in a Linked List(Medium) void insert(ListNode* node, int val){ node-\u0026gt;val = node-\u0026gt;next-\u0026gt;val; // 將當前的值賦值成下一位的值 node-\u0026gt;next = node-\u0026gt;next-\u0026gt;next; // 將下一個節點刪除 } 三、鏈表的進階操作 1. 刪值 如何刪除表中第一個出現指定值的節點，同樣找到該值的前一個節點，再使用刪除的手法即可： void remove(ListNode* head, int target){ ListNode* prev = NULL; ListNode* curr = head; while (curr \u0026amp;\u0026amp; curr-\u0026gt;val != target){ prev = curr; curr = curr-\u0026gt;next; } if (!prev) // 處理例外 head = head-\u0026gt;next; else prev-\u0026gt;next = prev-\u0026gt;next-\u0026gt;next; } 2. 建表 如何藉由一個數組建立一鏈表，可以藉由前面使用的 dummy head 的手法： ListNode* build(vector\u0026lt;int\u0026gt; nums){ ListNode* dummy = new ListNode(-1); ListNode* prev = dummy; ListNode* curr = NULL; for (int i = 0; i \u0026lt; nums.size(); i++){ curr = new ListNode(nums[i]); prev-\u0026gt;next = curr; prev = curr; curr = curr-\u0026gt;next; } ListNode* head = dummy-\u0026gt;next; delete(dummy); return head; } 3. 鏈表的後序遍歷 前文說過，鏈表也可以做前序與後序的遍歷，在此我們再複習一次。 void traverse(ListNode* head){ // pre-order traverse(head-\u0026gt;next); // post-order } 如果我們想移除鏈表中所有值等於 target 的節點，用迭代的作法為： void removeAll(ListNode* head, int target){ ListNode* dummy = new ListNode(-1, head); ListNode* curr = dummy; while (curr \u0026amp;\u0026amp; curr-\u0026gt;next){ if (curr-\u0026gt;next-\u0026gt;val == target){ // 當前節點的下一位符合 target 則刪除它 curr-\u0026gt;next = curr-\u0026gt;next-\u0026gt;next; } else { curr = curr-\u0026gt;next; // 否則則繼續後下遍歷 } } } 那如果用遞迴的寫法呢： void removeAll(ListNode* head, int target){ if (!head) return; // 假如鏈表為空，則退出函式 while (head \u0026amp;\u0026amp; head-\u0026gt;val == target){ if (head-\u0026gt;next){ head-\u0026gt;val = head-\u0026gt;next-\u0026gt;next; head-\u0026gt;next = head-\u0026gt;next-\u0026gt;next; // 刪除 } else { head = NULL; // 當最後一個元素需移除時 } } removeAll(head-\u0026gt;next, target) // 前序遍歷 } 後序跟前序有個很維妙的差別在於：後序遍歷可以將值傳回給前一個元素！ 試試看用後序回傳值的特徵來實作這個函式 void removeAll(ListNode* head, int target){ int tmp; if (head-\u0026gt;next) tmp = removeAll(head-\u0026gt;next, target) // recursion if (tmp == target) // 後序遍歷可以取得下一位的回傳的值 head-\u0026gt;next = head-\u0026gt;next-\u0026gt;next; // 有了需要刪除的節點的前一位，要刪除就容易啦！ return head-\u0026gt;val // 傳回當前節點的值 } 四、秀一波的操作 1. 刪值 用兩個節點去做到鏈表刪除的操作，還是有一點點不夠美，試試看下面這個 pointer to pointer 的解法吧！ 改自文章你所不知道的 C 語言: linked list 和非連續記憶體 void remove(ListNode* head, int target){ ListNode** curr = \u0026amp;head; // 將指向指針的 curr 指向 head while ((*curr)-\u0026gt;val != target) curr = \u0026amp;(*curr)-\u0026gt;next; if (!(*curr)) return; // 避免掉指向 NULL *curr = (*curr)-\u0026gt;next } 2. 建表 學會上面這個 pointer to pointer 的作法，不如試試看來用這個方法來建表！ ListNode* build(vector\u0026lt;int\u0026gt; nums){ ListNode* head = new ListNode(nums[0]); ListNode** curr = \u0026amp;head; for (int i = 0; i \u0026lt; nums.size(); i++){ (*curr)-\u0026gt;next = new ListNode(nums[i]); curr = \u0026amp;(*curr)-\u0026gt;next; } } 五、鏈表的演算法 1. 反轉鏈表 [LeetCode. 206] Reverse Linked List(Easy) 藉由剛剛學習到鏈表的操作，用迭代的方式來解題吧。 考慮到一個反轉鏈表的連續操作，我們需要有三個節點 prev, curr, next。 ListNode* reverse(ListNode* head){ ListNode* prev = NULL; ListNode* curr = head; ListNode* next = NULL; while (curr){ next = curr-\u0026gt;next; // 先記住下一個位置 curr-\u0026gt;next = prev; // 將指針指向前一位，以達成反轉的目的 prev = curr; // 往前移動 curr = next; // 往前移垂 } return prev; } 那如果用遞迴的方式寫呢？ ListNode* reverse(ListNode* head){ if (!head || head-\u0026gt;next) return head; // 處理終止條件 ListNode last = reverse(head-\u0026gt;next); // post-order traversal：回傳已排序好的子鏈表，並傳回最後一項 head-\u0026gt;next-\u0026gt;next = head; head-\u0026gt;next = NULL; return last; } [[Followup] 反轉前 N 個節點 反轉鏈表的前 N 個節點：用前面的函式稍作修改 ListNode* successor = NULL; ListNode* reverseN(ListNode* head, int n){ if (n == 1){ // 只反轉 1 個節點相當於沒有反轉，故轉回自己 successor = head-\u0026gt;next; // 記錄反轉後的鏈表要接到哪裡-\u0026gt;剩餘鏈表的頭 return head; } ListNode last = reverseN(head-\u0026gt;next, n-1); head-\u0026gt;next-\u0026gt;next = head; head-\u0026gt;next = successor; // 最後將鏈表的尾巴接到剩餘鏈表的頭 return last; } [LeetCode. 92] Reverse Linked List II(Medium) 反轉第 m 到第 n 個節點中間的節點 前進 m - 1 次就相當於就相當於反轉前 (n-m-1) 個節點，就可以用 reverseN 解了。 ListNode* reverseBetween(ListNode* head, int m, int n){ if (m == 1){ return reverseN(head, n); // 與 LeetCode.92 一樣 } head-\u0026gt;next = reverseBetween(head-\u0026gt;next, m-1, n-1); // 前進到 base case return head; } [LeetCode. 25] Reverse Nodes in k-Group (Hard) 結合前面的經驗，注意遞迴該返回的值是什麼。 注意結尾若節數小於 k 則不則 reverse。 ListNode* reverseKGroup(ListNode* head, int k) { ListNode* curr = head; int cnt = 0; while (curr \u0026amp;\u0026amp; cnt \u0026lt; k){ curr = curr-\u0026gt;next; cnt++; } if (cnt == k){ // 當節數小於 k 時，不做 reverse curr = reverseKGroup(curr, k); // 傳回的是 reverse 完的鏈表的 head，故需把 reverse 完的尾與之相接 while (cnt-- \u0026gt; 0){ ListNode* next = head-\u0026gt;next; head-\u0026gt;next = curr; curr = head; head = next; } return curr; // 當節數等於 k 時回傳的是尾巴 } return head; // 注意節數小於 k 時仍回傳 head } 2. 環型鏈表(龜兔賽跑-快慢指針) [LeetCode. 141] Linked List Cycle(Easy) 快慢指針是雙指針的一種應用，利用兩個指針移動的速度不同來達到目的。最經典的題型就是找尋鏈表是否含有環。 要檢查鏈表是否有環，可以使用找尋圖(graph)中是否有環的技巧，並利用 visited 來檢查是否有拜訪過，但下面快慢指針的技巧可以不用額外使用空間，使空間複雜度降到 \\(O(1)\\)。 bool hasCycle(ListNode *head) { ListNode* fast = head; ListNode* slow = head; while (fast \u0026amp;\u0026amp; fast-\u0026gt;next){ // 確保快指針與他的下一位都不是 NULL fast = fast-\u0026gt;next-\u0026gt;next; // 快指針走兩步 slow = slow-\u0026gt;next; // 慢指針走一步 if (fast == slow) return true; // 若兩者相撞，則必有環 } return false; } [LeetCode. 142] Linked List Cycle II(Medium) 此題是要找尋鏈表中若有環，則相交點是哪一點： 因為快指針走的距離是慢指針 k 的兩倍，令相遇點距相交點距離為 m 圓環的長度為 L：\n\\(\\text{L + m + k = 2 * k}\\)\n\\(\\text{L = k - m}\\)\n故起點到相交點的長度 \\(\\text{k - m}\\) 與相遇點到相交點的長度 \\(\\text{k - m}\\) 相同。 ListNode *detectCycle(ListNode *head) { ListNode* fast = head; ListNode* slow = head; while (fast \u0026amp;\u0026amp; fast-\u0026gt;next){ fast = fast-\u0026gt;next-\u0026gt;next; slow = slow-\u0026gt;next; if (fast == slow) break; // 若有環則退出 } if (!fast || !fast-\u0026gt;next) return NULL; // 若快指針已經走到底表示沒有環 fast = head; // 讓其中一個指針從頭開始走，並一同樣的速度走 while (fast != slow){ // 相遇點即為相交點 fast = fast-\u0026gt;next; slow = slow-\u0026gt;next; } return fast; } [LeetCode. 876] Middle of the Linked List(Easy) 這題當然可以先遍歷一遍取得鏈表長度後，再重新以長度計量，走一半的長度來得到答案，但很顯然不夠漂亮，用快慢指針，令快指針比慢指針移動速度快兩倍，當快指針走完時，慢指針即指向中點。以此類推可求1/3的節點、2/5的節點等。 ListNode* middleNode(ListNode* head) { ListNode* fast = head; ListNode* slow = head; while (fast \u0026amp;\u0026amp; fast-\u0026gt;next){ fast = fast-\u0026gt;next-\u0026gt;next; slow = slow-\u0026gt;next; } return slow; } 3. 雙指針(前後指針) [LeetCode. 19] Remove Nth Node From End of List(Medium) 這題也是簡單的雙指針問題，當前指針先走 n 步，兩指針以同樣速度往前走(即前後指針始終保持 n 的距離)，則前指針走完時，後指針指向倒數第 k 個節點。 ListNode* removeNthFromEnd(ListNode* head, int n) { // 注意以下我們要刪除第 n 個節點，故我們需找第 n-1 個節點，為避免刪除第一個節點的例子，我們引入 dummy ListNode* dummy = new ListNode(-1, head); ListNode* slow = dummy; ListNode* fast = dummy; while (fast \u0026amp;\u0026amp; n--){ // 前指針先行走 n 個節點 fast = fast-\u0026gt;next; } while (fast-\u0026gt;next){ // 保持等速 slow = slow-\u0026gt;next; fast = fast-\u0026gt;next; } slow-\u0026gt;next = slow-\u0026gt;next-\u0026gt;next; // 刪除第 n 個節點 return dummy-\u0026gt;next; } [LeetCode. 160] Intersection of Two Linked Lists(Easy) 找兩條鏈表的相交點，這題也可以用雙指針的方式解，當 A 鏈懷走完鏈表立即讓它接回 B 鏈表，B 鏈表亦如是，則相遇點則會是相交點，因為此時它們各別則的距離是都是 A 鏈表的長度加上 B 鏈表的長度，但要注意要記錄是否已經接過一遍，如果沒有相交點，又無限接下去，則程式永遠不會停止。 ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) { ListNode* a = headA; ListNode* b = headB; bool flagA = true; // 用來標記是否已接過另一鏈表 bool flagB = true; // 用來標記是否已接過另一鏈表 while (a \u0026amp;\u0026amp; b){ if (a == b) return a; // 相遇表示相交點 a = a-\u0026gt;next; b = b-\u0026gt;next; if (!a \u0026amp;\u0026amp; flagA){ a = headB; flagA = false; // 已接過另一鏈表 } if (!b \u0026amp;\u0026amp; flagB){ b = headA; flagB = false; // 已接過另一鏈表 } } return NULL; } [LeetCode. 86] Partition List(Medium) 具體作法可將鏈表一分為二，待兩條鏈表皆完成後再頭尾相接。 ListNode* partition(ListNode* head, int x) { ListNode* dummy1 = new ListNode(-1); ListNode* dummy2 = new ListNode(-1); ListNode* curr1 = dummy1; ListNode* curr2 = dummy2; while (head){ if (head-\u0026gt;val \u0026lt; x){ curr1-\u0026gt;next = head; curr1 = curr1-\u0026gt;next; } else { curr2-\u0026gt;next = head; curr2 = curr2-\u0026gt;next; } head = head-\u0026gt;next; } curr1-\u0026gt;next = dummy2-\u0026gt;next; curr2-\u0026gt;next = NULL; return dummy1-\u0026gt;next; } [LeetCode. 21] Merge Two Sorted Lists(Easy) 簡單的 if-else，搭配 dummy 的做法即可解題。 ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) { ListNode* dummy = new ListNode(-1); ListNode* curr = dummy; while (list1 \u0026amp;\u0026amp; list2){ if (list1-\u0026gt;val \u0026lt;= list2-\u0026gt;val){ curr-\u0026gt;next = list1; list1 = list1-\u0026gt;next; } else { curr-\u0026gt;next = list2; list2 = list2-\u0026gt;next; } curr = curr-\u0026gt;next; } curr-\u0026gt;next = list1 ? list1 : list2; return dummy-\u0026gt;next; } 4. 優先佇列 [LeetCode. 23] Merge k Sorted Lists(Hard) 這一題有點 tricky，我們可以用到優先佇列，由於每次比較只會比較鏈表的頭節表，故我們連續將鏈表推至 min heap 上，並每次把 min heap 頂端的節點接到新的鏈表後，再把 min heap 上的鏈表拿去頭後，再丟回優先佇列中，至到鏈表走完，即完成。 ListNode* mergeKLists(vector\u0026lt;ListNode*\u0026gt;\u0026amp; lists) { auto cmp = [](ListNode* a, ListNode* b){return a-\u0026gt;val \u0026gt; b-\u0026gt;val;}; priority_queue\u0026lt;ListNode*, vector\u0026lt;ListNode*\u0026gt;, decltype(cmp)\u0026gt; pq(cmp); ListNode* dummy = new ListNode(-1); ListNode* curr = dummy; for (ListNode* node : lists){ if (node) pq.push(node); } while (!pq.empty()){ ListNode* node = pq.top(); pq.pop(); curr-\u0026gt;next = node; curr = curr-\u0026gt;next; node = node-\u0026gt;next; if (node) pq.push(node); } return dummy-\u0026gt;next; } 回到目錄：[Algo] 演算法筆記 想要複習：[Algo] 0-2. 演算法思維 接著閱讀：[Algo] 0-4. 二元樹(Binary Tree) ","permalink":"https://intervalrain.github.io/cs/algo/linked_list/","summary":"\u003ch2 id=\"一鏈表的基本結構\"\u003e一、鏈表的基本結構\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e鏈表是由節點和指針構成的數據結構，每個節點存有一個值，和一個指向下一個節點的指針。不同於數組，鏈表並不能隨機訪問，必須透過指針找到該節點才能獲取其值；同理在未遍歷到鏈表結尾時，我們也無法知道鏈表長度，除非依賴其它數據結構儲存長度。\u003c/li\u003e\n\u003cli\u003eLeetCode 中默認的鏈表：\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eListNode\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e val;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ListNode \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003enext;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ListNode(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e x) \u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e val(x), next(\u003cspan style=\"color:#66d9ef\"\u003enullptr\u003c/span\u003e) {}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"二鏈表的基本操作\"\u003e二、鏈表的基本操作\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e在開始演算法實踐前，先來練習一下鏈表的 CRUD 吧！\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"1-查read\"\u003e1. 查(Read)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e由於鏈表並非在儲存格中連續分布，所以無法用索引進行隨機訪問，所以我們必須逐個訪問，直到到達我們想要的元素。\u003c/li\u003e\n\u003cli\u003e藉由指針每次指向當前節點的 next，移動 n 次到達 index 為 n 的節點。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eat\u003c/span\u003e(ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e head, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n){      \u003cspan style=\"color:#75715e\"\u003e// index 為 n\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e curr \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e head;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (n\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003e){        \u003cspan style=\"color:#75715e\"\u003e// 移動 n 次\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        curr \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e curr\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e curr\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eval;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"2-改update\"\u003e2. 改(Update)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e改的步驟，只是將查完的元素予以賦值。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eupdate\u003c/span\u003e(ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e head, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e val){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e curr \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e head;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (n\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        curr \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e curr\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    curr\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eval \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e val;      \u003cspan style=\"color:#75715e\"\u003e// 查完後賦值\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"3-增create\"\u003e3. 增(create)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e如果要新增節點，則必須找到要插入位置的前一個節點。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003einsert\u003c/span\u003e(ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e head, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e val){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003ehead) \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e NULL;                             \u003cspan style=\"color:#75715e\"\u003e// 處理當鏈表為空的狀態\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (n \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e){                                        \u003cspan style=\"color:#75715e\"\u003e// 處理當插入位置為 0 時的特例\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e newHead \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e ListNode(val, head);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        head \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e newHead;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e head;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e curr \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e head;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (curr \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003en){                                \u003cspan style=\"color:#75715e\"\u003e// 移動到插入位置的前一位\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        curr \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e curr\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e tmp \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e curr\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext;                         \u003cspan style=\"color:#75715e\"\u003e// 預先存下來插入位置的後一位\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    curr\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e ListNode(val);                     \u003cspan style=\"color:#75715e\"\u003e// 插入元素\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    curr\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e tmp;                             \u003cspan style=\"color:#75715e\"\u003e// 將元素的下一位指派給存下來的後一位\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e head;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e上述的寫法很直觀，但需要處例首位的特例，不夠漂亮，這時我們常會用到 \u003cstrong\u003eDUMMY HEAD\u003c/strong\u003e 的手法，即在鏈表最開頭先創一個假的節點，最後再返回該節點的下一位。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003einsert\u003c/span\u003e(ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e head, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e val){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003ehead) \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e NULL;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e dummy \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e ListNode(\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, head);           \u003cspan style=\"color:#75715e\"\u003e// 創建一個 dummy head\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e curr \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e dummy;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (curr \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e n\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003e){                                \u003cspan style=\"color:#75715e\"\u003e// 注意為 n-- \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        curr \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e curr\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext; \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e tmp \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e curr\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    curr\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e ListNode(val);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    curr\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e tmp;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e dummy\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext;                                 \u003cspan style=\"color:#75715e\"\u003e// 注意為返回 dummy 的下一位\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e前面兩解都是在可以取得前一位，且不更改節點的值的前提下的解法。如果只能取得當下的節點，則可以使用\u003cstrong\u003e增+更\u003c/strong\u003e的手法。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003einsert\u003c/span\u003e(ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e node, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e val){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e tmp \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e node\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eval;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    node\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eval \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e val;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    node\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e ListNode(tmp, node\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"4-減delete\"\u003e4. 減(delete)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e與增類似，取得前一位再利用更改指針的方式達到刪除。\n\u003cimg alt=\"delete\" loading=\"lazy\" src=\"https://i.imgur.com/Qof9hCw.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerase\u003c/span\u003e(ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e head, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e val){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003ehead) \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e NULL;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e dummy \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e ListNode(\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, head);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e curr \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e dummy;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (curr \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e n\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        curr \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e curr\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext; \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    curr\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e curr\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext;      \u003cspan style=\"color:#75715e\"\u003e// 將前一位的後一位指給後一位\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e dummy\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e只能取得當下節點的作法：\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"leetcode-237-delete-node-in-a-linked-listmediumhttpsleetcodecomproblemsdelete-node-in-a-linked-list\"\u003e\u003ca href=\"https://leetcode.com/problems/delete-node-in-a-linked-list/\"\u003e[LeetCode. 237] Delete Node in a Linked List(Medium)\u003c/a\u003e\u003c/h4\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003einsert\u003c/span\u003e(ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e node, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e val){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    node\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eval \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e node\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eval;        \u003cspan style=\"color:#75715e\"\u003e// 將當前的值賦值成下一位的值\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    node\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e node\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext;      \u003cspan style=\"color:#75715e\"\u003e// 將下一個節點刪除\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"三鏈表的進階操作\"\u003e三、鏈表的進階操作\u003c/h2\u003e\n\u003ch3 id=\"1-刪值\"\u003e1. 刪值\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e如何刪除表中第一個出現指定值的節點，同樣找到該值的前一個節點，再使用刪除的手法即可：\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eremove\u003c/span\u003e(ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e head, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e target){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e prev \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e NULL;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e curr \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e head;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (curr \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e curr\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eval \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e target){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        prev \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e curr;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        curr \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e curr\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003eprev)                  \u003cspan style=\"color:#75715e\"\u003e// 處理例外\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        head \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e head\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        prev\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e prev\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"2-建表\"\u003e2. 建表\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e如何藉由一個數組建立一鏈表，可以藉由前面使用的 dummy head 的手法：\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ebuild\u003c/span\u003e(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e nums){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e dummy \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e ListNode(\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e prev \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e dummy;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e curr \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e NULL;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e nums.size(); i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        curr \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e ListNode(nums[i]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        prev\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e curr;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        prev \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e curr;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        curr \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e curr\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e head \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e dummy\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edelete\u003c/span\u003e(dummy);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e head;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"3-鏈表的後序遍歷\"\u003e3. 鏈表的後序遍歷\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e前文說過，鏈表也可以做前序與後序的遍歷，在此我們再複習一次。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etraverse\u003c/span\u003e(ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e head){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// pre-order\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    traverse(head\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// post-order\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e如果我們想移除鏈表中所有值等於 target 的節點，用迭代的作法為：\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eremoveAll\u003c/span\u003e(ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e head, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e target){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e dummy \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e ListNode(\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, head);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e curr \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e dummy;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (curr \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e curr\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (curr\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eval \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e target){         \u003cspan style=\"color:#75715e\"\u003e// 當前節點的下一位符合 target 則刪除它\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e            curr\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e curr\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            curr \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e curr\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext;                  \u003cspan style=\"color:#75715e\"\u003e// 否則則繼續後下遍歷\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e那如果用遞迴的寫法呢：\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eremoveAll\u003c/span\u003e(ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e head, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e target){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003ehead) \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e;                          \u003cspan style=\"color:#75715e\"\u003e// 假如鏈表為空，則退出函式\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (head \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e head\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eval \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e target){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (head\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            head\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eval \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e head\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            head\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e head\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext;      \u003cspan style=\"color:#75715e\"\u003e// 刪除\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            head \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e NULL;                        \u003cspan style=\"color:#75715e\"\u003e// 當最後一個元素需移除時\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    removeAll(head\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext, target)               \u003cspan style=\"color:#75715e\"\u003e// 前序遍歷\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e後序跟前序有個很維妙的差別在於：\u003cstrong\u003e後序遍歷可以將值傳回給前一個元素\u003c/strong\u003e！\u003c/li\u003e\n\u003cli\u003e試試看用後序回傳值的特徵來實作這個函式\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eremoveAll\u003c/span\u003e(ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e head, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e target){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e tmp;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (head\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext) \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        tmp \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e removeAll(head\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext, target)     \u003cspan style=\"color:#75715e\"\u003e// recursion\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (tmp \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e target)                          \u003cspan style=\"color:#75715e\"\u003e// 後序遍歷可以取得下一位的回傳的值       \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        head\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e head\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext;          \u003cspan style=\"color:#75715e\"\u003e// 有了需要刪除的節點的前一位，要刪除就容易啦！\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e head\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eval                            \u003cspan style=\"color:#75715e\"\u003e// 傳回當前節點的值\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"四秀一波的操作\"\u003e四、秀一波的操作\u003c/h2\u003e\n\u003ch3 id=\"1-刪值-1\"\u003e1. 刪值\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e用兩個節點去做到鏈表刪除的操作，還是有一點點不夠美，試試看下面這個 pointer to pointer 的解法吧！\u003c/li\u003e\n\u003cli\u003e改自文章\u003ca href=\"https://hackmd.io/@sysprog/c-linked-list?fbclid=IwAR2179AHDYjsbYnbDdmCyiw7d3CF0yjehNGU-GcDsNAeZ_CkermprcDBzlo\"\u003e你所不知道的 C 語言: linked list 和非連續記憶體\u003c/a\u003e\n\u003cimg alt=\"linus delete\" loading=\"lazy\" src=\"https://hackmd.io/_uploads/HyuZ6Z13t.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eremove\u003c/span\u003e(ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e head, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e target){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ListNode\u003cspan style=\"color:#f92672\"\u003e**\u003c/span\u003e curr \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003ehead;    \u003cspan style=\"color:#75715e\"\u003e// 將指向指針的 curr 指向 head\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e ((\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003ecurr)\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eval \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e target)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        curr \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003ecurr)\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003ecurr)) \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e;       \u003cspan style=\"color:#75715e\"\u003e// 避免掉指向 NULL\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003ecurr \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003ecurr)\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"2-建表-1\"\u003e2. 建表\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e學會上面這個 pointer to pointer 的作法，不如試試看來用這個方法來建表！\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ebuild\u003c/span\u003e(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e nums){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e head \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e ListNode(nums[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ListNode\u003cspan style=\"color:#f92672\"\u003e**\u003c/span\u003e curr \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003ehead;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e nums.size(); i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        (\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003ecurr)\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e ListNode(nums[i]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        curr \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003ecurr)\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"五鏈表的演算法\"\u003e五、鏈表的演算法\u003c/h2\u003e\n\u003ch3 id=\"1-反轉鏈表\"\u003e1. 反轉鏈表\u003c/h3\u003e\n\u003ch4 id=\"leetcode-206-reverse-linked-listeasyhttpsleetcodecomproblemsreverse-linked-list\"\u003e\u003ca href=\"https://leetcode.com/problems/reverse-linked-list/\"\u003e[LeetCode. 206] Reverse Linked List(Easy)\u003c/a\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e藉由剛剛學習到鏈表的操作，用迭代的方式來解題吧。\u003c/li\u003e\n\u003cli\u003e考慮到一個反轉鏈表的連續操作，我們需要有三個節點 prev, curr, next。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ereverse\u003c/span\u003e(ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e head){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e prev \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e NULL;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e curr \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e head;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e next \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e NULL;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (curr){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        next \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e curr\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext;      \u003cspan style=\"color:#75715e\"\u003e// 先記住下一個位置\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        curr\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e prev;      \u003cspan style=\"color:#75715e\"\u003e// 將指針指向前一位，以達成反轉的目的\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        prev \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e curr;            \u003cspan style=\"color:#75715e\"\u003e// 往前移動\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        curr \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e next;            \u003cspan style=\"color:#75715e\"\u003e// 往前移垂\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e prev;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e那如果用遞迴的方式寫呢？\n\u003cimg alt=\"reverselist2\" loading=\"lazy\" src=\"https://labuladong.github.io/algo/images/%e5%8f%8d%e8%bd%ac%e9%93%be%e8%a1%a8/2.jpg\"\u003e\n\u003cimg alt=\"reverselist3\" loading=\"lazy\" src=\"https://labuladong.github.io/algo/images/%e5%8f%8d%e8%bd%ac%e9%93%be%e8%a1%a8/3.jpg\"\u003e\n\u003cimg alt=\"reverselist4\" loading=\"lazy\" src=\"https://labuladong.github.io/algo/images/%e5%8f%8d%e8%bd%ac%e9%93%be%e8%a1%a8/5.jpg\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ereverse\u003c/span\u003e(ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e head){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003ehead \u003cspan style=\"color:#f92672\"\u003e||\u003c/span\u003e head\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext) \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e head;   \u003cspan style=\"color:#75715e\"\u003e// 處理終止條件\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    ListNode last \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e reverse(head\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext);    \u003cspan style=\"color:#75715e\"\u003e// post-order traversal：回傳已排序好的子鏈表，並傳回最後一項\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    head\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e head;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    head\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e NULL;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e last;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"followup-反轉前-n-個節點\"\u003e[[Followup] 反轉前 N 個節點\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e反轉鏈表的前 N 個節點：用前面的函式稍作修改\n\u003cimg alt=\"reverselistN\" loading=\"lazy\" src=\"https://labuladong.github.io/algo/images/%e5%8f%8d%e8%bd%ac%e9%93%be%e8%a1%a8/7.jpg\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e successor \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e NULL;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ereverseN\u003c/span\u003e(ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e head, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (n \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e){                            \u003cspan style=\"color:#75715e\"\u003e// 只反轉 1 個節點相當於沒有反轉，故轉回自己\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        successor \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e head\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext;             \u003cspan style=\"color:#75715e\"\u003e// 記錄反轉後的鏈表要接到哪裡-\u0026gt;剩餘鏈表的頭\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e head;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ListNode last \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e reverseN(head\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext, n\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    head\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e head;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    head\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e successor;                 \u003cspan style=\"color:#75715e\"\u003e// 最後將鏈表的尾巴接到剩餘鏈表的頭\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e last;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"leetcode-92-reverse-linked-list-iimediumhttpsleetcodecomproblemsreverse-linked-list-ii\"\u003e\u003ca href=\"https://leetcode.com/problems/reverse-linked-list-ii/\"\u003e[LeetCode. 92] Reverse Linked List II(Medium)\u003c/a\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e反轉第 m 到第 n 個節點中間的節點\u003c/li\u003e\n\u003cli\u003e前進 m - 1 次就相當於就相當於反轉前 (n-m-1) 個節點，就可以用 reverseN 解了。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ereverseBetween\u003c/span\u003e(ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e head, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e m, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (m \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e reverseN(head, n);                       \u003cspan style=\"color:#75715e\"\u003e// 與 LeetCode.92 一樣\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    head\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e reverseBetween(head\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext, m\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, n\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e);  \u003cspan style=\"color:#75715e\"\u003e// 前進到 base case\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e head;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"leetcode-25-reverse-nodes-in-k-group-hardhttpsleetcodecomproblemsreverse-nodes-in-k-group\"\u003e\u003ca href=\"https://leetcode.com/problems/reverse-nodes-in-k-group/\"\u003e[LeetCode. 25] Reverse Nodes in k-Group (Hard)\u003c/a\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e結合前面的經驗，注意\u003cstrong\u003e遞迴該返回的值是什麼\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e注意結尾若節數小於 k 則不則 reverse。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ereverseKGroup\u003c/span\u003e(ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e head, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e k) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e curr \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e head;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e cnt \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (curr \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e cnt \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e k){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        curr \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e curr\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        cnt\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (cnt \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e k){              \u003cspan style=\"color:#75715e\"\u003e// 當節數小於 k 時，不做 reverse\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        curr \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e reverseKGroup(curr, k);  \u003cspan style=\"color:#75715e\"\u003e// 傳回的是 reverse 完的鏈表的 head，故需把 reverse 完的尾與之相接\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (cnt\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e next \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e head\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            head\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e curr;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            curr \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e head;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            head \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e next;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e curr;            \u003cspan style=\"color:#75715e\"\u003e// 當節數等於 k 時回傳的是尾巴\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e head;                \u003cspan style=\"color:#75715e\"\u003e// 注意節數小於 k 時仍回傳 head\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch3 id=\"2-環型鏈表龜兔賽跑-快慢指針\"\u003e2. 環型鏈表(龜兔賽跑-快慢指針)\u003c/h3\u003e\n\u003ch4 id=\"leetcode-141-linked-list-cycleeasyhttpsleetcodecomproblemslinked-list-cycle\"\u003e\u003ca href=\"https://leetcode.com/problems/linked-list-cycle/\"\u003e[LeetCode. 141] Linked List Cycle(Easy)\u003c/a\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e快慢指針是雙指針的一種應用，利用兩個指針移動的速度不同來達到目的。最經典的題型就是找尋鏈表是否含有環。\u003c/li\u003e\n\u003cli\u003e要檢查鏈表是否有環，可以使用找尋圖(graph)中是否有環的技巧，並利用 visited 來檢查是否有拜訪過，但下面快慢指針的技巧可以不用額外使用空間，使空間複雜度降到 \\(O(1)\\)。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003ebool\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehasCycle\u003c/span\u003e(ListNode \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003ehead) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e fast \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e head;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e slow \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e head;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (fast \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e fast\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext){             \u003cspan style=\"color:#75715e\"\u003e// 確保快指針與他的下一位都不是 NULL\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        fast \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e fast\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext;            \u003cspan style=\"color:#75715e\"\u003e// 快指針走兩步\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        slow \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e slow\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext;                  \u003cspan style=\"color:#75715e\"\u003e// 慢指針走一步\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (fast \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e slow) \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e true;      \u003cspan style=\"color:#75715e\"\u003e// 若兩者相撞，則必有環\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e false;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"leetcode-142-linked-list-cycle-iimediumhttpsleetcodecomproblemslinked-list-cycle-ii\"\u003e\u003ca href=\"https://leetcode.com/problems/linked-list-cycle-ii/\"\u003e[LeetCode. 142] Linked List Cycle II(Medium)\u003c/a\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e此題是要找尋鏈表中若有環，則相交點是哪一點：\u003c/li\u003e\n\u003cli\u003e因為快指針走的距離是慢指針 k 的兩倍，令相遇點距相交點距離為 m 圓環的長度為 L：\u003cbr\u003e\n\\(\\text{L + m + k = 2 * k}\\)\u003cbr\u003e\n\\(\\text{L = k - m}\\)\u003cbr\u003e\n故起點到相交點的長度 \\(\\text{k - m}\\) 與相遇點到相交點的長度 \\(\\text{k - m}\\) 相同。\n\u003cimg alt=\"cyclic linkedlist\" loading=\"lazy\" src=\"https://labuladong.github.io/algo/images/%e5%8f%8c%e6%8c%87%e9%92%88/2.jpeg\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eListNode \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003edetectCycle\u003c/span\u003e(ListNode \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003ehead) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e fast \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e head;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e slow \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e head;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (fast \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e fast\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        fast \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e fast\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        slow \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e slow\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (fast \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e slow) \u003cspan style=\"color:#66d9ef\"\u003ebreak\u003c/span\u003e;                \u003cspan style=\"color:#75715e\"\u003e// 若有環則退出\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    }   \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003efast \u003cspan style=\"color:#f92672\"\u003e||\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003efast\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext) \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e NULL;      \u003cspan style=\"color:#75715e\"\u003e// 若快指針已經走到底表示沒有環\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    fast \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e head;                              \u003cspan style=\"color:#75715e\"\u003e// 讓其中一個指針從頭開始走，並一同樣的速度走\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (fast \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e slow){                     \u003cspan style=\"color:#75715e\"\u003e// 相遇點即為相交點\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        fast \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e fast\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        slow \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e slow\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e fast;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"leetcode-876-middle-of-the-linked-listeasyhttpsleetcodecomproblemsmiddle-of-the-linked-list\"\u003e\u003ca href=\"https://leetcode.com/problems/middle-of-the-linked-list/\"\u003e[LeetCode. 876] Middle of the Linked List(Easy)\u003c/a\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e這題當然可以先遍歷一遍取得鏈表長度後，再重新以長度計量，走一半的長度來得到答案，但很顯然不夠漂亮，用快慢指針，令快指針比慢指針移動速度快兩倍，當快指針走完時，慢指針即指向中點。以此類推可求1/3的節點、2/5的節點等。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emiddleNode\u003c/span\u003e(ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e head) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e fast \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e head;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e slow \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e head;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (fast \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e fast\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        fast \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e fast\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        slow \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e slow\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }   \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e slow;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"3-雙指針前後指針\"\u003e3. 雙指針(前後指針)\u003c/h3\u003e\n\u003ch4 id=\"leetcode-19-remove-nth-node-from-end-of-listmediumhttpsleetcodecomproblemsremove-nth-node-from-end-of-list\"\u003e\u003ca href=\"https://leetcode.com/problems/remove-nth-node-from-end-of-list/\"\u003e[LeetCode. 19] Remove Nth Node From End of List(Medium)\u003c/a\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e這題也是簡單的雙指針問題，當前指針先走 n 步，兩指針以同樣速度往前走(即前後指針始終保持 n 的距離)，則前指針走完時，後指針指向倒數第 k 個節點。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eremoveNthFromEnd\u003c/span\u003e(ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e head, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// 注意以下我們要刪除第 n 個節點，故我們需找第 n-1 個節點，為避免刪除第一個節點的例子，我們引入 dummy\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e dummy \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e ListNode(\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, head);  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e slow \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e dummy;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e fast \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e dummy;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (fast \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e n\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003e){                \u003cspan style=\"color:#75715e\"\u003e// 前指針先行走 n 個節點\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        fast \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e fast\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (fast\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext){                 \u003cspan style=\"color:#75715e\"\u003e// 保持等速\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        slow \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e slow\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        fast \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e fast\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    slow\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e slow\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext;      \u003cspan style=\"color:#75715e\"\u003e// 刪除第 n 個節點\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e dummy\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"leetcode-160-intersection-of-two-linked-listseasyhttpsleetcodecomproblemsintersection-of-two-linked-lists\"\u003e\u003ca href=\"https://leetcode.com/problems/intersection-of-two-linked-lists/\"\u003e[LeetCode. 160] Intersection of Two Linked Lists(Easy)\u003c/a\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e找兩條鏈表的相交點，這題也可以用雙指針的方式解，當 A 鏈懷走完鏈表立即讓它接回 B 鏈表，B 鏈表亦如是，則相遇點則會是相交點，因為此時它們各別則的距離是都是 A 鏈表的長度加上 B 鏈表的長度，但要注意要記錄是否已經接過一遍，如果沒有相交點，又無限接下去，則程式永遠不會停止。\n\u003cimg alt=\"intersection1\" loading=\"lazy\" src=\"https://labuladong.github.io/algo/images/%e9%93%be%e8%a1%a8%e6%8a%80%e5%b7%a7/4.png\"\u003e\n\u003cimg alt=\"intersection2\" loading=\"lazy\" src=\"https://labuladong.github.io/algo/images/%e9%93%be%e8%a1%a8%e6%8a%80%e5%b7%a7/5.jpeg\"\u003e\n\u003cimg alt=\"interscetion3\" loading=\"lazy\" src=\"https://labuladong.github.io/algo/images/%e9%93%be%e8%a1%a8%e6%8a%80%e5%b7%a7/6.jpeg\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eListNode \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003egetIntersectionNode\u003c/span\u003e(ListNode \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003eheadA, ListNode \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003eheadB) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e a \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e headA;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e b \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e headB;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ebool\u003c/span\u003e flagA \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e true;          \u003cspan style=\"color:#75715e\"\u003e// 用來標記是否已接過另一鏈表\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003ebool\u003c/span\u003e flagB \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e true;          \u003cspan style=\"color:#75715e\"\u003e// 用來標記是否已接過另一鏈表\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (a \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e b){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (a \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e b) \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e a;   \u003cspan style=\"color:#75715e\"\u003e// 相遇表示相交點\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        a \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e a\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        b \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e b\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003ea \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e flagA){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            a \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e headB;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            flagA \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e false;      \u003cspan style=\"color:#75715e\"\u003e// 已接過另一鏈表\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        } \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003eb \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e flagB){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            b \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e headA;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            flagB \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e false;      \u003cspan style=\"color:#75715e\"\u003e// 已接過另一鏈表\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        } \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e NULL;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"leetcode-86-partition-listmediumhttpsleetcodecomproblemspartition-list\"\u003e\u003ca href=\"https://leetcode.com/problems/partition-list/\"\u003e[LeetCode. 86] Partition List(Medium)\u003c/a\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e具體作法可將鏈表一分為二，待兩條鏈表皆完成後再頭尾相接。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003epartition\u003c/span\u003e(ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e head, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e x) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e dummy1 \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e ListNode(\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e dummy2 \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e ListNode(\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e curr1 \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e dummy1;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e curr2 \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e dummy2;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (head){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (head\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eval \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e x){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            curr1\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e head;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            curr1 \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e curr1\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            curr2\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e head;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            curr2 \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e curr2\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        head \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e head\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    curr1\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e dummy2\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    curr2\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e NULL;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e dummy1\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch4 id=\"leetcode-21-merge-two-sorted-listseasyhttpsleetcodecomproblemsmerge-two-sorted-lists\"\u003e\u003ca href=\"https://leetcode.com/problems/merge-two-sorted-lists/\"\u003e[LeetCode. 21] Merge Two Sorted Lists(Easy)\u003c/a\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e簡單的 if-else，搭配 dummy 的做法即可解題。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emergeTwoLists\u003c/span\u003e(ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e list1, ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e list2) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e dummy \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e ListNode(\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e curr \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e dummy;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (list1 \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e list2){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (list1\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eval \u003cspan style=\"color:#f92672\"\u003e\u0026lt;=\u003c/span\u003e list2\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eval){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            curr\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e list1;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            list1 \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e list1\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            curr\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e list2;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            list2 \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e list2\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        curr \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e curr\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    curr\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e list1 \u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e list1 : list2;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e dummy\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"4-優先佇列\"\u003e4. 優先佇列\u003c/h3\u003e\n\u003ch4 id=\"leetcode-23-merge-k-sorted-listshardhttpsleetcodecomproblemsmerge-k-sorted-lists\"\u003e\u003ca href=\"https://leetcode.com/problems/merge-k-sorted-lists/\"\u003e[LeetCode. 23] Merge k Sorted Lists(Hard)\u003c/a\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e這一題有點 tricky，我們可以用到優先佇列，由於每次比較只會比較鏈表的頭節表，故我們連續將鏈表推至 min heap 上，並每次把 min heap 頂端的節點接到新的鏈表後，再把 min heap 上的鏈表拿去頭後，再丟回優先佇列中，至到鏈表走完，即完成。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emergeKLists\u003c/span\u003e(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eListNode\u003cspan style=\"color:#f92672\"\u003e*\u0026gt;\u0026amp;\u003c/span\u003e lists) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eauto\u003c/span\u003e cmp \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e [](ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e a, ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e b){\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e a\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eval \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e b\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eval;};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    priority_queue\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e, vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eListNode\u003cspan style=\"color:#f92672\"\u003e*\u0026gt;\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003edecltype\u003c/span\u003e(cmp)\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e pq(cmp);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e dummy \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e ListNode(\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e curr \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e dummy;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e node : lists){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (node) pq.push(node);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (\u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003epq.empty()){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e node \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e pq.top();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        pq.pop();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        curr\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e node;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        curr \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e curr\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        node \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e node\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (node) pq.push(node);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e dummy\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003cul\u003e\n\u003cli\u003e回到目錄：\u003ca href=\"/cs/algo\"\u003e[Algo] 演算法筆記\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e想要複習：\u003ca href=\"/cs/algo/concept\"\u003e[Algo] 0-2. 演算法思維\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e接著閱讀：\u003ca href=\"/cs/algo/binary_tree\"\u003e[Algo] 0-4. 二元樹(Binary Tree)\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"[Algo] 0-3. 鏈表(Linked List)"},{"content":"一、資料結構概要 資料結構的存儲方式大體上只分為兩種： Array、Linked List。\n雖說資料結構有 disjoint matrix, queue, stack, tree, graph 等等，但它們都可以視為 Array 與 Linked List 的上層結構，可以看成是以 Array 或 Linked List 為基底上的操作，只是 API 不同而已。 Array：由於是緊湊連續儲存的，可以隨機訪問，通過 index 快速找到對應元素，且相對節約空間。但也因必須一次性分配儲存空間，所以 array 如果需要擴充容量，就必須再重新分配一塊更大的空間，再把數孛複製過去，其時間複雜度為 \\(O(N)\\)；在 array 中間進行 delete 與 insert，必須搬移後面所有數據以保持連續，故時間複雜度也為\\(O(N)\\)。 Linked List：因為元素不連續，而是靠指針指向下一個元素的位置，所以不存在 array 的擴充容量的問題，如果知道某一元素的前一個節點與後一個節點，操作指針即可刪除該元素或者插入新元素，時間複雜度為\\(O(1)\\)。但正因為儲存空間不連續，無法根擇 index 算出對應元素的地址，所以不能隨機訪問；而且由於每個元素必須額外儲存前後元素位置的指針，相對較耗空間。 在 C、C++ 語言中，指針(pointer)的存在使得其能更直接對儲存空間的位址做操作，所以在處理 C 語言時，要額外了解指針的運作方式。 二、資料結構的基本操作 資料結構的基本操作不外乎： 遍歷(traverse)、增減查改(CRUD, create, read, update, delete) Array：數組的遍歷框架 -\u0026gt; 典型的線性迭代結構： void traverse(vector\u0026lt;int\u0026gt; arr){ for (int i = 0; i \u0026lt; arr.size(); i++){ // iteration } } ListNode：鏈表的遍歷框架 -\u0026gt; 兼具迭代與遞迴 class ListNode { public: int val; ListNode* next; }; void traverse(ListNode* head){ for (ListNode curr = head; curr != NULL; curr = curr-\u0026gt;next){ // iteration } } void traverse(ListNode* head){ // recursion traverse(head-\u0026gt;next); } 由上述兩種基底可推廣至各種結構： 二叉樹(Binary Tree) class TreeNode { public: int val; TreeNode* left, right; }; void traverse(TreeNode* root){ traverse(root-\u0026gt;left); traverse(root-\u0026gt;right); } N 叉樹(N-ary Tree) class TreeNode { public: int val; vector\u0026lt;TreeNode*\u0026gt; children } void traverse(TreeNode* root){ for (TreeNode* child : root-\u0026gt;children){ traverse(child); } } 圖(graph)：可視為 N 叉樹的結合體，再利用 visited 處理環(circle) class Node { public: int val; vector\u0026lt;Node*\u0026gt; neighbors; } unordered_set\u0026lt;Node*\u0026gt; visited; // 處理已拜訪過的節點 void traverse(Node* node){ if (visited) return; // 檢查是否拜訪過了 visited.insert(node) // 將現在拜訪的節點標記成已拜訪的節點 for (TreeNode* neighbor : neighbors){ traverse(neighbor) } } 三、前序(pre-order)、中序(in-order)、後序(post-order) 在開始複雜的演算法前，重點在於熟悉如何處理不同的結構，並採用基礎的解題策略。 前序、中序、後序指的是遍歷一棵二元樹的方式。 基本框架 void traverse(TreeNode* root){ // pre-order traverse(root-\u0026gt;left); // in-order traverse(root-\u0026gt;right); // post-order } 鏈表其實也可以有前序、後序的關係： void traverse(ListNode* curr){ // pre-order traverse(curr-\u0026gt;next); // post-order } 回到目錄：[Algo] 演算法筆記 想要複習：[Algo] 0-1. 複雜度分析 Algorithmic complexity / Big-O / Asymptotic analysis 接著閱讀：[Algo] 0-3. 鏈表(LinkedList) ","permalink":"https://intervalrain.github.io/cs/algo/concept/","summary":"\u003ch3 id=\"一資料結構概要\"\u003e一、資料結構概要\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e資料結構的存儲方式大體上只分為兩種： \u003cstrong\u003eArray\u003c/strong\u003e、\u003cstrong\u003eLinked List\u003c/strong\u003e。\u003cbr\u003e\n雖說資料結構有 disjoint matrix, queue, stack, tree, graph 等等，但它們都可以視為 Array 與 Linked List 的上層結構，可以看成是以 Array 或 Linked List 為基底上的操作，只是 API 不同而已。\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eArray\u003c/strong\u003e：由於是緊湊連續儲存的，可以隨機訪問，通過 index 快速找到對應元素，且相對節約空間。但也因必須一次性分配儲存空間，所以 array 如果需要擴充容量，就必須再重新分配一塊更大的空間，再把數孛複製過去，其時間複雜度為 \\(O(N)\\)；在 array 中間進行 delete 與 insert，必須搬移後面所有數據以保持連續，故時間複雜度也為\\(O(N)\\)。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eLinked List\u003c/strong\u003e：因為元素不連續，而是靠指針指向下一個元素的位置，所以不存在 array 的擴充容量的問題，如果知道某一元素的前一個節點與後一個節點，操作指針即可刪除該元素或者插入新元素，時間複雜度為\\(O(1)\\)。但正因為儲存空間不連續，無法根擇 index 算出對應元素的地址，所以不能隨機訪問；而且由於每個元素必須額外儲存前後元素位置的指針，相對較耗空間。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e在 C、C++ 語言中，指針(pointer)的存在使得其能更直接對儲存空間的位址做操作，所以在處理 C 語言時，要額外了解指針的運作方式。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"二資料結構的基本操作\"\u003e二、資料結構的基本操作\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e資料結構的基本操作不外乎： \u003cstrong\u003e遍歷(traverse)\u003c/strong\u003e、\u003cstrong\u003e增減查改(CRUD, create, read, update, delete)\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003eArray：數組的遍歷框架 -\u0026gt; 典型的線性迭代結構：\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etraverse\u003c/span\u003e(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e arr){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e arr.size(); i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// iteration\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eListNode：鏈表的遍歷框架 -\u0026gt; 兼具迭代與遞迴\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eListNode\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e val;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e next;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etraverse\u003c/span\u003e(ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e head){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (ListNode curr \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e head; curr \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e NULL; curr \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e curr\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#75715e\"\u003e// iteration\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etraverse\u003c/span\u003e(ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e head){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// recursion \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    traverse(head\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e由上述兩種基底可推廣至各種結構：\n\u003cul\u003e\n\u003cli\u003e二叉樹(Binary Tree)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eTreeNode\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e val;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    TreeNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e left, right;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etraverse\u003c/span\u003e(TreeNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e root){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    traverse(root\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eleft);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    traverse(root\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eright);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eN 叉樹(N-ary Tree)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eTreeNode\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e val;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eTreeNode\u003cspan style=\"color:#f92672\"\u003e*\u0026gt;\u003c/span\u003e children\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etraverse\u003c/span\u003e(TreeNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e root){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (TreeNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e child : root\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003echildren){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        traverse(child);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e圖(graph)：可視為 N 叉樹的結合體，再利用 \u003cstrong\u003evisited\u003c/strong\u003e 處理環(circle)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eNode\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e val;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eNode\u003cspan style=\"color:#f92672\"\u003e*\u0026gt;\u003c/span\u003e neighbors;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eunordered_set\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003eNode\u003cspan style=\"color:#f92672\"\u003e*\u0026gt;\u003c/span\u003e visited; \u003cspan style=\"color:#75715e\"\u003e// 處理已拜訪過的節點\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etraverse\u003c/span\u003e(Node\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e node){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (visited) \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e;  \u003cspan style=\"color:#75715e\"\u003e// 檢查是否拜訪過了\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    visited.insert(node)  \u003cspan style=\"color:#75715e\"\u003e// 將現在拜訪的節點標記成已拜訪的節點\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (TreeNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e neighbor : neighbors){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        traverse(neighbor)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"三前序pre-order中序in-order後序post-order\"\u003e三、前序(pre-order)、中序(in-order)、後序(post-order)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e在開始複雜的演算法前，重點在於熟悉如何處理不同的結構，並採用基礎的解題策略。\u003c/li\u003e\n\u003cli\u003e前序、中序、後序指的是遍歷一棵二元樹的方式。\n\u003cimg loading=\"lazy\" src=\"https://i.ytimg.com/vi/WLvU5EQVZqY/maxresdefault.jpg\"\u003e\n\u003cul\u003e\n\u003cli\u003e基本框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etraverse\u003c/span\u003e(TreeNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e root){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// pre-order\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    traverse(root\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eleft);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// in-order\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    traverse(root\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003eright);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// post-order\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e鏈表其實也可以有前序、後序的關係：\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etraverse\u003c/span\u003e(ListNode\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e curr){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// pre-order\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    traverse(curr\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003enext);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// post-order\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003cul\u003e\n\u003cli\u003e回到目錄：\u003ca href=\"/cs/algo\"\u003e[Algo] 演算法筆記\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e想要複習：\u003ca href=\"/cs/algo/bigo\"\u003e[Algo] 0-1. 複雜度分析 Algorithmic complexity / Big-O / Asymptotic analysis\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e接著閱讀：\u003ca href=\"/cs/algo/linked_list\"\u003e[Algo] 0-3. 鏈表(LinkedList)\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"[Algo] 0-2. 算法思維"},{"content":" From the begining:\nWasham\u0026rsquo;s Coding Interview University 演算法 Leetcode 演算法筆記 程式語言 C# 計算機結構 計算機結構 作業系統 計算機作業系統 網路 計算機網路 HTTP Socket 資料庫 資料庫系統原理 SQL 語法 NoSQL Redis 系統設計 系統架構 系統設計基礎 分布式 集群 駭客技術 緩存 訊息佇列 物件導向 物件導向概念 設計模式 工具 Git Docker Kubernetes MVC 程式碼實踐 重構(Refactoring) Google Coding Style(C++) ","permalink":"https://intervalrain.github.io/csindex/","summary":"\u003cblockquote\u003e\n\u003cp\u003eFrom the begining:\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"/washam\"\u003eWasham\u0026rsquo;s Coding Interview University\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cimg src=\"https://www.svgrepo.com/show/9873/calculator.svg\" width=\"60\"\u003e\n\u003ch2 id=\"演算法\"\u003e演算法\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"/leetcode\"\u003eLeetcode\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/cs/algo\"\u003e演算法筆記\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003cimg src=\"https://www.svgrepo.com/show/51010/coding.svg\" width=\"60\"\u003e\n\u003ch2 id=\"程式語言\"\u003e程式語言\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"/csharp/csharp\"\u003eC#\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003cimg src=\"https://www.svgrepo.com/show/192223/structure-organization.svg\" width=\"60\"\u003e\n\u003ch2 id=\"計算機結構\"\u003e計算機結構\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"/cs/ca\"\u003e計算機結構\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003cimg src=\"https://www.svgrepo.com/show/19602/computer.svg\" width=\"60\"\u003e\n\u003ch2 id=\"作業系統\"\u003e作業系統\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"/cs/os\"\u003e計算機作業系統\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003cimg src=\"https://www.svgrepo.com/show/241826/internet.svg\" width=\"60\"\u003e\n\u003ch2 id=\"網路\"\u003e網路\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e計算機網路\u003c/li\u003e\n\u003cli\u003eHTTP\u003c/li\u003e\n\u003cli\u003eSocket\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003cimg src=\"https://www.svgrepo.com/show/22166/database.svg\" width=\"60\"\u003e\n\u003ch2 id=\"資料庫\"\u003e資料庫\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e資料庫系統原理\u003c/li\u003e\n\u003cli\u003eSQL 語法\u003c/li\u003e\n\u003cli\u003eNoSQL\u003c/li\u003e\n\u003cli\u003eRedis\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003cimg src=\"https://www.svgrepo.com/show/138770/painting.svg\" width=\"60\"\u003e\n\u003ch2 id=\"系統設計\"\u003e系統設計\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"/hgraca/the-software-architecture-chronicles\"\u003e系統架構\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e系統設計基礎\u003c/li\u003e\n\u003cli\u003e分布式\u003c/li\u003e\n\u003cli\u003e集群\u003c/li\u003e\n\u003cli\u003e駭客技術\u003c/li\u003e\n\u003cli\u003e緩存\u003c/li\u003e\n\u003cli\u003e訊息佇列\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003cimg src=\"https://www.svgrepo.com/show/43158/apple.svg\" width=\"60\"\u003e\n\u003ch2 id=\"物件導向\"\u003e物件導向\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e物件導向概念\u003c/li\u003e\n\u003cli\u003e設計模式\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003cimg src=\"https://www.svgrepo.com/show/233791/screwdriver.svg\" width=\"60\"\u003e\n\u003ch2 id=\"工具\"\u003e工具\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.maxlist.xyz/2018/11/02/git_tutorial/\"\u003eGit\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://ithelp.ithome.com.tw/articles/10199339\"\u003eDocker\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://ithelp.ithome.com.tw/users/20103753/ironman/1590\"\u003eKubernetes\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://ithelp.ithome.com.tw/users/20105694/ironman/1329\"\u003eMVC\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003cimg src=\"https://www.svgrepo.com/show/27186/pencil.svg\" width=\"60\"\u003e\n\u003ch2 id=\"程式碼實踐\"\u003e程式碼實踐\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://ithelp.ithome.com.tw/users/20102562/ironman/1338\"\u003e重構(Refactoring)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://google.github.io/styleguide/cppguide.html\"\u003eGoogle Coding Style(C++)\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"CS 學習筆記"},{"content":" 前言： 全文版權沒有，翻印不究。 本文全是個人創作，有誤請直接留言提點，無需口水謾罵。 若有幸想要找我學習、討論或是出版(?)，可以私訊我\n第零章、核心框架 0-1. 複雜度分析 Algorithmic complexity / Big-O / Asymptotic analysis 0-2. 算法思維 0-3. 鏈表 Linked List 0-4. 二叉樹 Binary Tree 第一章、資料結構、STL 1-1. vector 1-2. list, forward_list 1-3. stack 1-4. queue 1-5. set, multiset, unordered_set, unordered_multiset 1-6. map, multimap, unordered_map, unordered_multimap 1-7. deque 1-8. priority_queue 1-9. algorithm 第二章、演算法設計 2-1. 暴力演算法 Brute Force 2-2. 貪心演算法 Greedy 2-3. 分治法 Divide and Conquer 2-4. 回溯法 Backtacking 2-5. 動態規劃 Dynamic Programming 第三章、主題介紹 3-0. Sorting 3-1. Two Pointer/Sliding Window 3-2. Binary Search 3-3. Monotonic Stack 3-4. DFS 3-5. BFS 3-6. Topological Sort 3-7. KMP 3-8. Prefix 3-9. Segment Tree 3-10. Bit Indexed Tree(Fenwick Tree) 3-11. Union Find 3-12. Trie 3-13. Bit Manipulation 3-14. Bitmask 3-15. Rolling Hash 學習資源 建中培訓講義 演算法入門 建中2016講義 cp-algorithm csacademy cses STL functions\n","permalink":"https://intervalrain.github.io/cs/algo/","summary":"\u003cblockquote\u003e\n\u003cp\u003e前言：\n全文版權沒有，翻印不究。\n本文全是個人創作，有誤請直接留言提點，無需口水謾罵。\n若有幸想要找我學習、討論或是出版(?)，可以\u003ca href=\"/aboutme\"\u003e私訊我\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"第零章核心框架\"\u003e第零章、核心框架\u003c/h3\u003e\n\u003ch4 id=\"0-1-複雜度分析-algorithmic-complexity--big-o--asymptotic-analysiscsalgobigo\"\u003e0-1. \u003ca href=\"/cs/algo/bigo\"\u003e複雜度分析 Algorithmic complexity / Big-O / Asymptotic analysis\u003c/a\u003e\u003c/h4\u003e\n\u003ch4 id=\"0-2-算法思維csalgoconcept\"\u003e0-2. \u003ca href=\"/cs/algo/concept\"\u003e算法思維\u003c/a\u003e\u003c/h4\u003e\n\u003ch4 id=\"0-3-鏈表-linked-listcsalgolinked_list\"\u003e0-3. \u003ca href=\"/cs/algo/linked_list\"\u003e鏈表 Linked List\u003c/a\u003e\u003c/h4\u003e\n\u003ch4 id=\"0-4-二叉樹-binary-treecsalgobinary_tree\"\u003e0-4. \u003ca href=\"/cs/algo/binary_tree\"\u003e二叉樹 Binary Tree\u003c/a\u003e\u003c/h4\u003e\n\u003ch3 id=\"第一章資料結構stl\"\u003e第一章、資料結構、STL\u003c/h3\u003e\n\u003ch4 id=\"1-1-vectorhttpsencppreferencecomwcppcontainervector\"\u003e1-1. \u003ca href=\"https://en.cppreference.com/w/cpp/container/vector\"\u003evector\u003c/a\u003e\u003c/h4\u003e\n\u003ch4 id=\"1-2-listhttpsencppreferencecomwcppcontainerlist-forward_listhttpsencppreferencecomwcppcontainerforward_list\"\u003e1-2. \u003ca href=\"https://en.cppreference.com/w/cpp/container/list\"\u003elist\u003c/a\u003e, \u003ca href=\"https://en.cppreference.com/w/cpp/container/forward_list\"\u003eforward_list\u003c/a\u003e\u003c/h4\u003e\n\u003ch4 id=\"1-3-stackhttpsencppreferencecomwcppcontainerstack\"\u003e1-3. \u003ca href=\"https://en.cppreference.com/w/cpp/container/stack\"\u003estack\u003c/a\u003e\u003c/h4\u003e\n\u003ch4 id=\"1-4-queuehttpsencppreferencecomwcppcontainerqueue\"\u003e1-4. \u003ca href=\"https://en.cppreference.com/w/cpp/container/queue\"\u003equeue\u003c/a\u003e\u003c/h4\u003e\n\u003ch4 id=\"1-5-sethttpsencppreferencecomwcppcontainerset-multisethttpsencppreferencecomwcppcontainermultiset-unordered_sethttpsencppreferencecomwcppcontainerhttpsencppreferencecomwcppcontainerunordered_set-unordered_multisethttpsencppreferencecomwcppcontainerunordered_multiset\"\u003e1-5. \u003ca href=\"https://en.cppreference.com/w/cpp/container/set\"\u003eset\u003c/a\u003e, \u003ca href=\"https://en.cppreference.com/w/cpp/container/multiset\"\u003emultiset\u003c/a\u003e, \u003ca href=\"https://en.cppreference.com/w/cpp/container/https://en.cppreference.com/w/cpp/container/unordered_set\"\u003eunordered_set\u003c/a\u003e, \u003ca href=\"https://en.cppreference.com/w/cpp/container/unordered_multiset\"\u003eunordered_multiset\u003c/a\u003e\u003c/h4\u003e\n\u003ch4 id=\"1-6-maphttpsencppreferencecomwcppcontainermap-multimaphttpsencppreferencecomwcppcontainermultimap-unordered_maphttpsencppreferencecomwcppcontainerhttpsencppreferencecomwcppcontainerunordered_map-unordered_multimaphttpsencppreferencecomwcppcontainerunordered_multimap\"\u003e1-6. \u003ca href=\"https://en.cppreference.com/w/cpp/container/map\"\u003emap\u003c/a\u003e, \u003ca href=\"https://en.cppreference.com/w/cpp/container/multimap\"\u003emultimap\u003c/a\u003e, \u003ca href=\"https://en.cppreference.com/w/cpp/container/https://en.cppreference.com/w/cpp/container/unordered_map\"\u003eunordered_map\u003c/a\u003e, \u003ca href=\"https://en.cppreference.com/w/cpp/container/unordered_multimap\"\u003eunordered_multimap\u003c/a\u003e\u003c/h4\u003e\n\u003ch4 id=\"1-7-dequehttpsencppreferencecomwcppcontainerdeque\"\u003e1-7. \u003ca href=\"https://en.cppreference.com/w/cpp/container/deque\"\u003edeque\u003c/a\u003e\u003c/h4\u003e\n\u003ch4 id=\"1-8-priority_queuehttpsencppreferencecomwcppcontainerpriority_queue\"\u003e1-8. \u003ca href=\"https://en.cppreference.com/w/cpp/container/priority_queue\"\u003epriority_queue\u003c/a\u003e\u003c/h4\u003e\n\u003ch4 id=\"1-9-algorithmhttpsencppreferencecomwcppalgorithm----csalgoalgorithm---\"\u003e1-9. \u003ca href=\"https://en.cppreference.com/w/cpp/algorithm\"\u003ealgorithm\u003c/a\u003e \u003c!-- /cs/algo/algorithm) --\u003e\u003c/h4\u003e\n\u003ch3 id=\"第二章演算法設計\"\u003e第二章、演算法設計\u003c/h3\u003e\n\u003ch4 id=\"2-1-暴力演算法-brute-forcecsalgobrute_force\"\u003e2-1. \u003ca href=\"/cs/algo/brute_force\"\u003e暴力演算法 Brute Force\u003c/a\u003e\u003c/h4\u003e\n\u003ch4 id=\"2-2-貪心演算法-greedycsalgogreedy\"\u003e2-2. \u003ca href=\"/cs/algo/greedy\"\u003e貪心演算法 Greedy\u003c/a\u003e\u003c/h4\u003e\n\u003ch4 id=\"2-3-分治法-divide-and-conquercsalgodivide_and_conquer\"\u003e2-3. \u003ca href=\"/cs/algo/divide_and_conquer\"\u003e分治法 Divide and Conquer\u003c/a\u003e\u003c/h4\u003e\n\u003ch4 id=\"2-4-回溯法-backtackingcsalgobacktracking\"\u003e2-4. \u003ca href=\"/cs/algo/backtracking\"\u003e回溯法 Backtacking\u003c/a\u003e\u003c/h4\u003e\n\u003ch4 id=\"2-5-動態規劃-dynamic-programmingcsalgodp\"\u003e2-5. \u003ca href=\"/cs/algo/dp\"\u003e動態規劃 Dynamic Programming\u003c/a\u003e\u003c/h4\u003e\n\u003ch3 id=\"第三章主題介紹\"\u003e第三章、主題介紹\u003c/h3\u003e\n\u003ch4 id=\"3-0-sortingcsalgosorting\"\u003e3-0. \u003ca href=\"/cs/algo/sorting\"\u003eSorting\u003c/a\u003e\u003c/h4\u003e\n\u003ch4 id=\"3-1-two-pointersliding-windowcsalgotwo_pointer\"\u003e3-1. \u003ca href=\"/cs/algo/two_pointer\"\u003eTwo Pointer/Sliding Window\u003c/a\u003e\u003c/h4\u003e\n\u003ch4 id=\"3-2-binary-searchcsalgobinary_search\"\u003e3-2. \u003ca href=\"/cs/algo/binary_search\"\u003eBinary Search\u003c/a\u003e\u003c/h4\u003e\n\u003ch4 id=\"3-3-monotonic-stack\"\u003e3-3. Monotonic Stack\u003c/h4\u003e\n\u003ch4 id=\"3-4-dfs\"\u003e3-4. DFS\u003c/h4\u003e\n\u003ch4 id=\"3-5-bfs\"\u003e3-5. BFS\u003c/h4\u003e\n\u003ch4 id=\"3-6-topological-sort\"\u003e3-6. Topological Sort\u003c/h4\u003e\n\u003ch4 id=\"3-7-kmp\"\u003e3-7. KMP\u003c/h4\u003e\n\u003ch4 id=\"3-8-prefix\"\u003e3-8. Prefix\u003c/h4\u003e\n\u003ch4 id=\"3-9-segment-tree\"\u003e3-9. Segment Tree\u003c/h4\u003e\n\u003ch4 id=\"3-10-bit-indexed-treefenwick-treecsalgobit\"\u003e3-10. \u003ca href=\"/cs/algo/BIT\"\u003eBit Indexed Tree(Fenwick Tree)\u003c/a\u003e\u003c/h4\u003e\n\u003ch4 id=\"3-11-union-find\"\u003e3-11. Union Find\u003c/h4\u003e\n\u003ch4 id=\"3-12-trie\"\u003e3-12. Trie\u003c/h4\u003e\n\u003ch4 id=\"3-13-bit-manipulation\"\u003e3-13. Bit Manipulation\u003c/h4\u003e\n\u003ch4 id=\"3-14-bitmask\"\u003e3-14. Bitmask\u003c/h4\u003e\n\u003ch4 id=\"3-15-rolling-hash\"\u003e3-15. Rolling Hash\u003c/h4\u003e\n\u003ch3 id=\"學習資源\"\u003e學習資源\u003c/h3\u003e\n\u003cp\u003e\u003ca href=\"https://tioj.ck.tp.edu.tw/uploads/attachment/5/12/1_2.pdf\"\u003e建中培訓講義\u003c/a\u003e\n\u003ca href=\"https://drive.google.com/file/d/1LLmHjzG_zidmCcS4qX9kLzMCjHsG7PLy/view\"\u003e演算法入門\u003c/a\u003e\n\u003ca href=\"https://tioj.ck.tp.edu.tw/articles/5\"\u003e建中2016講義\u003c/a\u003e\n\u003ca href=\"https://cp-algorithms.com/#navigation\"\u003ecp-algorithm\u003c/a\u003e\n\u003ca href=\"https://csacademy.com/\"\u003ecsacademy\u003c/a\u003e\n\u003ca href=\"https://cses.fi/problemset/\"\u003ecses\u003c/a\u003e\n\u003ca href=\"https://cwang.me/2020/02/02/cpp-notes/\"\u003eSTL functions\u003c/a\u003e\u003c/p\u003e","title":"[DS] 演算法筆記"},{"content":"動態鏈結庫(Dynamic Linked Library, DDL) 將程式中重複引用的程式庫獨立包裝出來以便共同引用 好處是比起靜態庫更節省空間 也可以單獨修改動態庫文件 示例 創建一個自定義程式庫 math.c // math.c int add(int a, int b) { return a + b; } 建建一個 math.h 只包含函式的宣告 // math.h int add(int a, int b); 將 math.c 編譯成一個動態庫 -shared 表明是一個 shared library .so 是 Linux 下的動態庫的副檔名，Windows 下為 .dll $ gcc -shared -fPIC math.c -o libmath.so 在主程式中包含 math.h 頭文件 // main.c #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;math.h\u0026gt; int main() { printf(\u0026#34;add(1, 2) returns %d\\n\u0026#34;, add(1, 2)); return 0; } 利用 -l 編譯主程式 省略 libmath.so 中的 lib 與 .so 為 -lmath gcc main.c -lmath -L. -o main 系統在路徑下找不到文件的解決方案 將動態庫複製到系統路徑下(需要 root 權限) $ sudo ^C cp libmath.so /usr/local/lib/ 使用環境變量，將當前目錄加到 LD_LIBRARY_PATH 環境變量中 $ export LD_LIBRARY_PATH=\u0026#34;$(pwd)\u0026#34; // 將當前目錄叫到 LD_LIBRARY_PATH中 $ echo $LD_LIBRARY_PATH // 測試是否調用成功 ","permalink":"https://intervalrain.github.io/it/ddl/","summary":"\u003ch1 id=\"動態鏈結庫dynamic-linked-library-ddl\"\u003e動態鏈結庫(Dynamic Linked Library, DDL)\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e將程式中重複引用的程式庫獨立包裝出來以便共同引用\u003c/li\u003e\n\u003cli\u003e好處是比起靜態庫更節省空間\u003c/li\u003e\n\u003cli\u003e也可以單獨修改動態庫文件\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"示例\"\u003e示例\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e創建一個自定義程式庫 math.c\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// math.c\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eadd\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e a, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e b)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e a \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e b;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e建建一個 math.h 只包含函式的宣告\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// math.h\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eadd\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e a, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e b);\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e將 math.c 編譯成一個動態庫\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e-shared\u003c/code\u003e 表明是一個 shared library\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e.so\u003c/code\u003e 是 Linux 下的動態庫的副檔名，Windows 下為 \u003ccode\u003e.dll\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ gcc -shared -fPIC math.c -o libmath.so\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e在主程式中包含 math.h 頭文件\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// main.c\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;math.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    printf(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;add(1, 2) returns %d\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e, add(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e利用 \u003ccode\u003e-l\u003c/code\u003e 編譯主程式\n\u003cul\u003e\n\u003cli\u003e省略 \u003ccode\u003elibmath.so\u003c/code\u003e 中的 \u003cstrong\u003elib\u003c/strong\u003e 與 \u003cstrong\u003e.so\u003c/strong\u003e 為 \u003ccode\u003e-lmath\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egcc main.c -lmath -L. -o main\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"系統在路徑下找不到文件的解決方案\"\u003e系統在路徑下找不到文件的解決方案\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e將動態庫複製到系統路徑下(需要 root 權限)\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ sudo ^C cp libmath.so /usr/local/lib/\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"2\"\u003e\n\u003cli\u003e使用環境變量，將當前目錄加到 \u003ccode\u003eLD_LIBRARY_PATH\u003c/code\u003e 環境變量中\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ export LD_LIBRARY_PATH\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003e$(\u003c/span\u003epwd\u003cspan style=\"color:#66d9ef\"\u003e)\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e       // 將當前目錄叫到 LD_LIBRARY_PATH中\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$ echo $LD_LIBRARY_PATH                 // 測試是否調用成功\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"[IT] 動態鏈結庫(DDL)"},{"content":"String Functions ASCII Return the ASCII value for the specific character CHAR_LENGTH or CHARACTER_LENGTH Return the length of string (in characters) CONCAT Adds two or more expressions together CONCAT_WS Adds two or more expressions together with a separator FIELD Returns the index position of a value in a list of values FIND_IN_SET Returns the position of a string within a list of strings FORMAT Return sFormats a number to a format like \u0026ldquo;#,###,###.##\u0026rdquo;, rounded to a specified number of decimal places INSERT Inserts a string within a string at the specified position and for a certain number of characters INSTR Returns the position of the first occurrence of a string in another string LCASE Converts a string to lower-case LEFT Extracts a number of characters from a string (starting from left) LENGTH Returns the length of a string (in bytes) LOCATE Returns the position of the first occurrence of a substring in a string LOWER Converts a string to lower-case LPAD Left-pads a string with another string, to a certain length LTRIM Removes leading spaces from a string MID Extracts a substring from a string (starting at any position) POSITION Returns the position of the first occurrence of a substring in a string REPEAT Repeats a string as many times as specified REPLACE Replaces all occurrences of a substring within a string, with a new substring REVERSE Reverses a string and returns the result RIGHT Extracts a number of characters from a string (starting from right) RPAD Right-pads a string with another string, to a certain length RTRIM Removes trailing spaces from a string SPACE Returns a string of the specified number of space characters STRCMP Compares two strings SUBSTR Extracts a substring from a string (starting at any position) SUBSTRING Extracts a substring from a string (starting at any position) SUBSTRING_INDEX Returns a substring of a string before a specified number of delimiter occurs TRIM Removes leading and trailing spaces from a string UCASE Converts a string to upper-case UPPER Converts a string to upper-case Numeric Functions ABS Returns the absolute value of a number ACOS Returns the arc cosine of a number ASIN Returns the arc sine of a number ATAN Returns the arc tangent of one or two numbers ATAN2 Returns the arc tangent of two numbers AVG Returns the average value of an expression CEIL Returns the smallest integer value that is \u0026gt;= to a number CEILING Returns the smallest integer value that is \u0026gt;= to a number COS Returns the cosine of a number COT Returns the cotangent of a number COUNT Returns the number of records returned by a select query DEGREES Converts a value in radians to degrees DIV Used for integer division EXP Returns e raised to the power of a specified number FLOOR Returns the largest integer value that is \u0026lt;= to a number GREATEST Returns the greatest value of the list of arguments LEAST Returns the smallest value of the list of arguments LN Returns the natural logarithm of a number LOG Returns the natural logarithm of a number, or the logarithm of a number to a specified base LOG10 Returns the natural logarithm of a number to base 10 LOG2 Returns the natural logarithm of a number to base 2 MAX Returns the maximum value in a set of values MIN Returns the minimum value in a set of values MOD Returns the remainder of a number divided by another number PI Returns the value of PI POW Returns the value of a number raised to the power of another number POWER Returns the value of a number raised to the power of another number RADIANS Converts a degree value into radians RAND Returns a random number ROUND Rounds a number to a specified number of decimal places SIGN Returns the sign of a number SIN Returns the sine of a number SQRT Returns the square root of a number SUM Calculates the sum of a set of values TAN Returns the tangent of a number TRUNCATE Truncates a number to the specified number of decimal places Date Functions ADDDATE Adds a time/date interval to a date and then returns the date ADDTIME Adds a time interval to a time/datetime and then returns the time/datetime CURDATE Returns the current date CURRENT_DATE Returns the current date CURRENT_TIME Returns the current time CURRENT_TIMESTAMP Returns the current date and time CURTIME Returns the current time DATE Extracts the date part from a datetime expression DATEDIFF Returns the number of days between two date values DATE_ADD Adds a time/date interval to a date and then returns the date DATE_FORMAT Formats a date DATE_SUB Subtracts a time/date interval from a date and then returns the date DAY Returns the day of the month for a given date DAYNAME Returns the weekday name for a given date DAYOFMONTH Returns the day of the month for a given date DAYOFWEEK Returns the weekday index for a given date DAYOFYEAR Returns the day of the year for a given date EXTRACT Extracts a part from a given date FROM_DAYS Returns a date from a numeric datevalue HOUR Returns the hour part for a given date LAST_DAY Extracts the last day of the month for a given date LOCALTIME Returns the current date and time LOCALTIMESTAMP Returns the current date and time MAKEDATE Creates and returns a date based on a year and a number of days value MAKETIME Creates and returns a time based on an hour, minute, and second value MICROSECOND Returns the microsecond part of a time/datetime MINUTE Returns the minute part of a time/datetime MONTH Returns the month part for a given date MONTHNAME Returns the name of the month for a given date NOW Returns the current date and time PERIOD_ADD Adds a specified number of months to a period PERIOD_DIFF Returns the difference between two periods QUARTER Returns the quarter of the year for a given date value SECOND Returns the seconds part of a time/datetime SEC_TO_TIME Returns a time value based on the specified seconds STR_TO_DATE Returns a date based on a string and a format SUBDATE Subtracts a time/date interval from a date and then returns the date SUBTIME Subtracts a time interval from a datetime and then returns the time/datetime SYSDATE Returns the current date and time TIME Extracts the time part from a given time/datetime TIME_FORMAT Formats a time by a specified format TIME_TO_SEC Converts a time value into seconds TIMEDIFF Returns the difference between two time/datetime expressions TIMESTAMP Returns a datetime value based on a date or datetime value TO_DAYS Returns the number of days between a date and date \u0026ldquo;0000-00-00\u0026rdquo; WEEK Returns the week number for a given date WEEKDAY Returns the weekday number for a given date WEEKOFYEAR Returns the week number for a given date YEAR Returns the year part for a given date YEARWEEK Returns the year and week number for a given date Advanced Functions BIN Returns a binary representation of a number BINARY Converts a value to a binary string CASE Goes through conditions and return a value when the first condition is met CAST Converts a value (of any type) into a specified datatype COALESCE Returns the first non-null value in a list CONNECTION_ID Returns the unique connection ID for the current connection CONV Converts a number from one numeric base system to another CONVERT Converts a value into the specified datatype or character set CURRENT_USER Returns the user name and host name for the MySQL account that the server used to authenticate the current client DATABASE Returns the name of the current database IF Returns a value if a condition is TRUE, or another value if a condition is FALSE IFNULL Return a specified value if the expression is NULL, otherwise return the expression ISNULL Returns 1 or 0 depending on whether an expression is NULL LAST_INSERT_ID Returns the AUTO_INCREMENT id of the last row that has been inserted or updated in a table NULLIF Compares two expressions and returns NULL if they are equal. Otherwise, the first expression is returned SESSION_USER Returns the current MySQL user name and host name SYSTEM_USER Returns the current MySQL user name and host name USER Returns the current MySQL user name and host name VERSION Returns the current version of the MySQL database ","permalink":"https://intervalrain.github.io/it/mysql/","summary":"\u003ch2 id=\"string-functions\"\u003eString Functions\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003ch4 id=\"ascii\"\u003e\u003cstrong\u003eASCII\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturn the ASCII value for the specific character\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"char_length-or-character_length\"\u003e\u003cstrong\u003eCHAR_LENGTH\u003c/strong\u003e or \u003cstrong\u003eCHARACTER_LENGTH\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturn the length of string (in characters)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"concat\"\u003e\u003cstrong\u003eCONCAT\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eAdds two or more expressions together\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"concat_ws\"\u003e\u003cstrong\u003eCONCAT_WS\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eAdds two or more expressions together with a separator\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"field\"\u003e\u003cstrong\u003eFIELD\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the index position of a value in a list of values\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"find_in_set\"\u003e\u003cstrong\u003eFIND_IN_SET\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the position of a string within a list of strings\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"format\"\u003e\u003cstrong\u003eFORMAT\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturn sFormats a number to a format like \u0026ldquo;#,###,###.##\u0026rdquo;, rounded to a specified number of decimal places\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"insert\"\u003e\u003cstrong\u003eINSERT\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eInserts a string within a string at the specified position and for a certain number of characters\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"instr\"\u003e\u003cstrong\u003eINSTR\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the position of the first occurrence of a string in another string\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"lcase\"\u003e\u003cstrong\u003eLCASE\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eConverts a string to lower-case\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"left\"\u003e\u003cstrong\u003eLEFT\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eExtracts a number of characters from a string (starting from left)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"length\"\u003e\u003cstrong\u003eLENGTH\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the length of a string (in bytes)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"locate\"\u003e\u003cstrong\u003eLOCATE\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the position of the first occurrence of a substring in a string\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"lower\"\u003e\u003cstrong\u003eLOWER\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eConverts a string to lower-case\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"lpad\"\u003e\u003cstrong\u003eLPAD\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eLeft-pads a string with another string, to a certain length\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"ltrim\"\u003e\u003cstrong\u003eLTRIM\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eRemoves leading spaces from a string\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"mid\"\u003e\u003cstrong\u003eMID\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eExtracts a substring from a string (starting at any position)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"position\"\u003e\u003cstrong\u003ePOSITION\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the position of the first occurrence of a substring in a string\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"repeat\"\u003e\u003cstrong\u003eREPEAT\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eRepeats a string as many times as specified\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"replace\"\u003e\u003cstrong\u003eREPLACE\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReplaces all occurrences of a substring within a string, with a new substring\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"reverse\"\u003e\u003cstrong\u003eREVERSE\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReverses a string and returns the result\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"right\"\u003e\u003cstrong\u003eRIGHT\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eExtracts a number of characters from a string (starting from right)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"rpad\"\u003e\u003cstrong\u003eRPAD\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eRight-pads a string with another string, to a certain length\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"rtrim\"\u003e\u003cstrong\u003eRTRIM\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eRemoves trailing spaces from a string\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"space\"\u003e\u003cstrong\u003eSPACE\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns a string of the specified number of space characters\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"strcmp\"\u003e\u003cstrong\u003eSTRCMP\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eCompares two strings\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"substr\"\u003e\u003cstrong\u003eSUBSTR\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eExtracts a substring from a string (starting at any position)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"substring\"\u003e\u003cstrong\u003eSUBSTRING\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eExtracts a substring from a string (starting at any position)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"substring_index\"\u003e\u003cstrong\u003eSUBSTRING_INDEX\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns a substring of a string before a specified number of delimiter occurs\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"trim\"\u003e\u003cstrong\u003eTRIM\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eRemoves leading and trailing spaces from a string\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"ucase\"\u003e\u003cstrong\u003eUCASE\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eConverts a string to upper-case\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"upper\"\u003e\u003cstrong\u003eUPPER\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eConverts a string to upper-case\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"numeric-functions\"\u003eNumeric Functions\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003ch4 id=\"abs\"\u003e\u003cstrong\u003eABS\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the absolute value of a number\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"acos\"\u003e\u003cstrong\u003eACOS\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the arc cosine of a number\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"asin\"\u003e\u003cstrong\u003eASIN\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the arc sine of a number\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"atan\"\u003e\u003cstrong\u003eATAN\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the arc tangent of one or two numbers\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"atan2\"\u003e\u003cstrong\u003eATAN2\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the arc tangent of two numbers\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"avg\"\u003e\u003cstrong\u003eAVG\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the average value of an expression\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"ceil\"\u003e\u003cstrong\u003eCEIL\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the smallest integer value that is \u0026gt;= to a number\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"ceiling\"\u003e\u003cstrong\u003eCEILING\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the smallest integer value that is \u0026gt;= to a number\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"cos\"\u003e\u003cstrong\u003eCOS\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the cosine of a number\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"cot\"\u003e\u003cstrong\u003eCOT\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the cotangent of a number\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"count\"\u003e\u003cstrong\u003eCOUNT\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the number of records returned by a select query\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"degrees\"\u003e\u003cstrong\u003eDEGREES\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eConverts a value in radians to degrees\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"div\"\u003e\u003cstrong\u003eDIV\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eUsed for integer division\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"exp\"\u003e\u003cstrong\u003eEXP\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns e raised to the power of a specified number\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"floor\"\u003e\u003cstrong\u003eFLOOR\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the largest integer value that is \u0026lt;= to a number\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"greatest\"\u003e\u003cstrong\u003eGREATEST\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the greatest value of the list of arguments\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"least\"\u003e\u003cstrong\u003eLEAST\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the smallest value of the list of arguments\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"ln\"\u003e\u003cstrong\u003eLN\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the natural logarithm of a number\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"log\"\u003e\u003cstrong\u003eLOG\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the natural logarithm of a number, or the logarithm of a number to a specified base\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"log10\"\u003e\u003cstrong\u003eLOG10\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the natural logarithm of a number to base 10\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"log2\"\u003e\u003cstrong\u003eLOG2\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the natural logarithm of a number to base 2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"max\"\u003e\u003cstrong\u003eMAX\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the maximum value in a set of values\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"min\"\u003e\u003cstrong\u003eMIN\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the minimum value in a set of values\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"mod\"\u003e\u003cstrong\u003eMOD\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the remainder of a number divided by another number\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"pi\"\u003e\u003cstrong\u003ePI\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the value of PI\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"pow\"\u003e\u003cstrong\u003ePOW\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the value of a number raised to the power of another number\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"power\"\u003e\u003cstrong\u003ePOWER\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the value of a number raised to the power of another number\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"radians\"\u003e\u003cstrong\u003eRADIANS\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eConverts a degree value into radians\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"rand\"\u003e\u003cstrong\u003eRAND\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns a random number\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"round\"\u003e\u003cstrong\u003eROUND\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eRounds a number to a specified number of decimal places\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"sign\"\u003e\u003cstrong\u003eSIGN\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the sign of a number\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"sin\"\u003e\u003cstrong\u003eSIN\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the sine of a number\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"sqrt\"\u003e\u003cstrong\u003eSQRT\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the square root of a number\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"sum\"\u003e\u003cstrong\u003eSUM\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eCalculates the sum of a set of values\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"tan\"\u003e\u003cstrong\u003eTAN\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the tangent of a number\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"truncate\"\u003e\u003cstrong\u003eTRUNCATE\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eTruncates a number to the specified number of decimal places\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"date-functions\"\u003eDate Functions\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003ch4 id=\"adddate\"\u003e\u003cstrong\u003eADDDATE\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eAdds a time/date interval to a date and then returns the date\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"addtime\"\u003e\u003cstrong\u003eADDTIME\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eAdds a time interval to a time/datetime and then returns the time/datetime\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"curdate\"\u003e\u003cstrong\u003eCURDATE\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the current date\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"current_date\"\u003e\u003cstrong\u003eCURRENT_DATE\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the current date\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"current_time\"\u003e\u003cstrong\u003eCURRENT_TIME\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the current time\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"current_timestamp\"\u003e\u003cstrong\u003eCURRENT_TIMESTAMP\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the current date and time\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"curtime\"\u003e\u003cstrong\u003eCURTIME\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the current time\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"date\"\u003e\u003cstrong\u003eDATE\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eExtracts the date part from a datetime expression\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"datediff\"\u003e\u003cstrong\u003eDATEDIFF\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the number of days between two date values\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"date_add\"\u003e\u003cstrong\u003eDATE_ADD\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eAdds a time/date interval to a date and then returns the date\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"date_format\"\u003e\u003cstrong\u003eDATE_FORMAT\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eFormats a date\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"date_sub\"\u003e\u003cstrong\u003eDATE_SUB\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eSubtracts a time/date interval from a date and then returns the date\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"day\"\u003e\u003cstrong\u003eDAY\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the day of the month for a given date\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"dayname\"\u003e\u003cstrong\u003eDAYNAME\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the weekday name for a given date\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"dayofmonth\"\u003e\u003cstrong\u003eDAYOFMONTH\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the day of the month for a given date\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"dayofweek\"\u003e\u003cstrong\u003eDAYOFWEEK\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the weekday index for a given date\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"dayofyear\"\u003e\u003cstrong\u003eDAYOFYEAR\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the day of the year for a given date\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"extract\"\u003e\u003cstrong\u003eEXTRACT\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eExtracts a part from a given date\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"from_days\"\u003e\u003cstrong\u003eFROM_DAYS\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns a date from a numeric datevalue\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"hour\"\u003e\u003cstrong\u003eHOUR\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the hour part for a given date\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"last_day\"\u003e\u003cstrong\u003eLAST_DAY\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eExtracts the last day of the month for a given date\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"localtime\"\u003e\u003cstrong\u003eLOCALTIME\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the current date and time\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"localtimestamp\"\u003e\u003cstrong\u003eLOCALTIMESTAMP\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the current date and time\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"makedate\"\u003e\u003cstrong\u003eMAKEDATE\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eCreates and returns a date based on a year and a number of days value\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"maketime\"\u003e\u003cstrong\u003eMAKETIME\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eCreates and returns a time based on an hour, minute, and second value\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"microsecond\"\u003e\u003cstrong\u003eMICROSECOND\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the microsecond part of a time/datetime\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"minute\"\u003e\u003cstrong\u003eMINUTE\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the minute part of a time/datetime\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"month\"\u003e\u003cstrong\u003eMONTH\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the month part for a given date\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"monthname\"\u003e\u003cstrong\u003eMONTHNAME\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the name of the month for a given date\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"now\"\u003e\u003cstrong\u003eNOW\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the current date and time\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"period_add\"\u003e\u003cstrong\u003ePERIOD_ADD\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eAdds a specified number of months to a period\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"period_diff\"\u003e\u003cstrong\u003ePERIOD_DIFF\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the difference between two periods\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"quarter\"\u003e\u003cstrong\u003eQUARTER\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the quarter of the year for a given date value\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"second\"\u003e\u003cstrong\u003eSECOND\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the seconds part of a time/datetime\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"sec_to_time\"\u003e\u003cstrong\u003eSEC_TO_TIME\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns a time value based on the specified seconds\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"str_to_date\"\u003e\u003cstrong\u003eSTR_TO_DATE\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns a date based on a string and a format\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"subdate\"\u003e\u003cstrong\u003eSUBDATE\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eSubtracts a time/date interval from a date and then returns the date\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"subtime\"\u003e\u003cstrong\u003eSUBTIME\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eSubtracts a time interval from a datetime and then returns the time/datetime\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"sysdate\"\u003e\u003cstrong\u003eSYSDATE\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the current date and time\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"time\"\u003e\u003cstrong\u003eTIME\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eExtracts the time part from a given time/datetime\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"time_format\"\u003e\u003cstrong\u003eTIME_FORMAT\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eFormats a time by a specified format\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"time_to_sec\"\u003e\u003cstrong\u003eTIME_TO_SEC\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eConverts a time value into seconds\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"timediff\"\u003e\u003cstrong\u003eTIMEDIFF\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the difference between two time/datetime expressions\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"timestamp\"\u003e\u003cstrong\u003eTIMESTAMP\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns a datetime value based on a date or datetime value\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"to_days\"\u003e\u003cstrong\u003eTO_DAYS\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the number of days between a date and date \u0026ldquo;0000-00-00\u0026rdquo;\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"week\"\u003e\u003cstrong\u003eWEEK\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the week number for a given date\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"weekday\"\u003e\u003cstrong\u003eWEEKDAY\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the weekday number for a given date\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"weekofyear\"\u003e\u003cstrong\u003eWEEKOFYEAR\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the week number for a given date\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"year\"\u003e\u003cstrong\u003eYEAR\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the year part for a given date\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"yearweek\"\u003e\u003cstrong\u003eYEARWEEK\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the year and week number for a given date\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"advanced-functions\"\u003eAdvanced Functions\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003ch4 id=\"bin\"\u003e\u003cstrong\u003eBIN\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns a binary representation of a number\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"binary\"\u003e\u003cstrong\u003eBINARY\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eConverts a value to a binary string\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"case\"\u003e\u003cstrong\u003eCASE\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eGoes through conditions and return a value when the first condition is met\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"cast\"\u003e\u003cstrong\u003eCAST\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eConverts a value (of any type) into a specified datatype\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"coalesce\"\u003e\u003cstrong\u003eCOALESCE\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the first non-null value in a list\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"connection_id\"\u003e\u003cstrong\u003eCONNECTION_ID\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the unique connection ID for the current connection\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"conv\"\u003e\u003cstrong\u003eCONV\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eConverts a number from one numeric base system to another\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"convert\"\u003e\u003cstrong\u003eCONVERT\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eConverts a value into the specified datatype or character set\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"current_user\"\u003e\u003cstrong\u003eCURRENT_USER\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the user name and host name for the MySQL account that the server used to authenticate the current client\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"database\"\u003e\u003cstrong\u003eDATABASE\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the name of the current database\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"if\"\u003e\u003cstrong\u003eIF\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns a value if a condition is TRUE, or another value if a condition is FALSE\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"ifnull\"\u003e\u003cstrong\u003eIFNULL\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturn a specified value if the expression is NULL, otherwise return the expression\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"isnull\"\u003e\u003cstrong\u003eISNULL\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns 1 or 0 depending on whether an expression is NULL\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"last_insert_id\"\u003e\u003cstrong\u003eLAST_INSERT_ID\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the AUTO_INCREMENT id of the last row that has been inserted or updated in a table\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"nullif\"\u003e\u003cstrong\u003eNULLIF\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eCompares two expressions and returns NULL if they are equal. Otherwise, the first expression is returned\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"session_user\"\u003e\u003cstrong\u003eSESSION_USER\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the current MySQL user name and host name\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"system_user\"\u003e\u003cstrong\u003eSYSTEM_USER\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the current MySQL user name and host name\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"user\"\u003e\u003cstrong\u003eUSER\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the current MySQL user name and host name\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003ch4 id=\"version\"\u003e\u003cstrong\u003eVERSION\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the current version of the MySQL database\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","title":"[IT] MySQL Functions"},{"content":"Introduction What is SQL? SQL stands for Structured Query Language SQL lets you access and manipualate databases SQL becaome a standard of the American National Standards Institute (ANSI) in 1986, and of the International Organization for Standardization (ISO) in 1987 RDBMS RDBMS stands for Relational Database Management System. RDBMS is the basis for SQL, and for all modern database systems such as MS SQL Server, IBM DB2, Oracle, MySQL, and Microsoft Access. The data in RDBMS is stored in database objects called tables. A table is a collection of related data entries and it consists of columns and rows. Syntax SELECT * FROM Customers; SQL keywords are NOT case sensitive. Some database systems requires a semicolon at the end of each SQL statement. Semicolon is the standard way to separate each SQL statement in database systems that allow more than one SQL statement to be executed in the same call to the server. Most Important SQL Commands SELECT - extracts data from a database UPDATE - updates data in a database DELETE - deletes data from a database INSERT INTO - inserts new data into a database CREATE DATABASE - creates a new database ALTER DATABASE - modifies a database CREATE TABLE - creates a new table ALTER TABLE - modifies a table DROP TABLE - deletes a table CREATE INDEX - creates an index (search key) DROP INDEX - deletes an index SELECT The SELECT statement is used to select data from a database.\nThe data returned is stored in a result table, called the result-set. SELECT column1, column2, ... FROM table_name; SELECT DISTINCT The SELECT DINSTINCT statement is used to return only distinct (different) values.\nInside a table, a column often contains many duplicate values; and sometimes you only want to list the different (distinct) values. SELECT DISTINCT column1, column2, ... FROM table_name; WHERE The WHERE clause is used to filter records.\nIt is used to extract only those records that fultill a specified condition. SELECT column1, column2, ... FROM table_name WHERE condition; Operators can be used in the WHERE clause: \\(\\begin{array}{|c|l|}\\hline \\text{Operator}\u0026amp;\\text{Description}\\\\\\hline \\text{=}\u0026amp;\\text{Equal}\\\\\\hline \\text{\u0026gt;}\u0026amp;\\text{Greater than}\\\\\\hline \\text{\u0026lt;}\u0026amp;\\text{Less than}\\\\\\hline \\text{\u0026gt;=}\u0026amp;\\text{Greater than or equal}\\\\\\hline \\text{\u0026lt;=}\u0026amp;\\text{Less than or equal}\\\\\\hline \\text{\u0026lt;\u0026gt;, !=}\u0026amp;\\text{Not equal}\\\\\\hline \\text{BETWEEN}\u0026amp;\\text{Between a certain range}\\\\\\hline \\text{LIKE}\u0026amp;\\text{Search for a pattern}\\\\\\hline \\text{IN}\u0026amp;\\text{To specify multiple possible values for a column}\\\\\\hline \\end{array}\\) AND, OR, NOT THE WHERE clause can be combined with AND, OR, and NOT operators.\nThe AND and OR operators are used to filter records based on more than one condition: The AND operator displays a record if all the conditons separated by AND are TRUE. The OR operator displays a record if any of the conditons separated by OR is TRUE. THE NOT operator display a record if the condition(s) it NOT TRUE. SELECT column1, column2, ... FROM table_name; WHERE NOT condition1 AND condition2 OR condition3 ...; ORDER BY The ORDER BY keyword is used to sort the result-set in ascending or descending order. The ORDER BY keyword sorts the records in ascending order by default.\nTo sort the records in descending order, used DESC keyword. SELECT column1, column2, ... FROM table_name ORDER BY column1, column2, ... ASC|DESC; INSERT INTO The INSERT INTO statement is used to insert new records in a table. Specify both the column names and the values to be inserted: INSERT INTO table_name (column1, column2, column3, ...) VALUES (value1, value2, value3, ...); If you are adding values for all the columns of the table, you do not need to specify the column names in the SQL query. However, make sure the order of the values is in the same order as the columns in the table. Here, the INSERT INTO syntax would be as follows: INSERT INTO table_name VALUES (value1, value2, value3, ...); IS NULL, IS NOT NULL What is a NULL Value?\nA field with a NULL value is a field with no value.\nIf a field in a table is optional, it is possible to insert a new record or update a record without adding a value to this field. Then the field will be saved with a NULL value. A NULL value is different from a zero value or a field that contains spaces. A field with a NULL value is one that has been left blank during record creation. How to test for NULL Values?\nUse the IS NULL and IS NOT NULL operators. SELECT column_names FROM table_name WHERE column_name IS NULL|IS NOT NULL; UPDATE The UPDATE statement is used to modify the existing records in a table. UPDATE table_name SET columns1 = value1, column2 = value2, ... WHERE condition; DELETE The DELETE statement is used to delete existing records in a table. DELETE FROM table_name WHERE condition; TOP, LIMIT, FETCH FIRST, ROWNUM The SELECT TOP clause is used to specify the number of records to return. The SELECT TOP clause is useful on large tables with thousands of records.\nReturning a large number of records can impact performance. Note: Not all database systems support the SELECT TOP clause.\nMySQL supports the LIMIT clause to select a limited number of records,\nwhile Oracle uses FETCH FIRST n ROWS ONLY and ROWNUM.\nSQL Server/Ms Access: SELECT TOP number|percent column_names(s) FROM table_name WHERE condition; MySQL: SELECT column_names(s) FROM table_name WHERE condition LIMIT number; Oracle 12: SELECT column_names(s) FROM table_name ORDER BY column_name(s) FETCH FIRST number ROWS only; Older Oracle: SELECT column_names(s) FROM table_name WHERE ROWNUM \u0026lt;= number; Older Oracle(with ORDER BY) SELECT * FROM ( SELECT column_name(s) FROM table_name ORDER BY column_name(s) ) WHERE ROWNUM \u0026lt;= number; MIN() The MIN() function returns the smallest value of the selected column. SELECT MIN(column_name) FROM table_name WHERE condition; MAX() The MAX() function returns the largest value of the selected column. SELECT MAX(column_name) FROM table_name WHERE condition; COUNT() The COUNT() function returns the number of rows that matches a specified criterion. SELECT COUNT(column_name) FROM table_name WHERE condition; AVG() The AVG() function returns the average value of a numeric column. SELECT AVG(column_name) FROM table_name WHERE condition; SUM() The SUM() function returns the total sum of a numeric column. SELECT SUM(column_name) FROM table_name WHERE condition; LIKE Operator The LIKE operator is used in a WHERE clause to search for a specified pattern in a column. There are two wildcards often used in conjunction with LIKE operator: The percent sign(%) represents zero, one, or multiple characters The underscore sign(_) represents one, single character Note: Ms Access uses an asterisk(*) instead of the percent sign(%), and a question mark(?) instead of the underscore(_).\nSELECT column1, column2 FROM table_name WHERE columnN LIKE \u0026#39;_a%\u0026#39;; Wildcards A wildcard character is used to substitute one or more characters in a string.\nWildcard characters are used with LIKE operator. The LIKE operator is used in a WHERE clause to search for a specified pattern in a column.\nMS Access:\nSymbal Description Example * Represents zero or more characters bl* finds bl, black, blue, and blob ? Represents a single character h?t finds hot, hat, and hit [] Represents any single character within the brackets h[oa]t finds hot and hat ! Represents any character not in the brackets h[!oa]t finds hit - Represents any single character within the specified range c[a-b]t finds cat and cbt # Represents any single numeric character 2#5 finds 205,215,225,235,245,255,265,275,285,295 SQL Server:\nSymbal Description Example % Represents zero or more characters bl% finds bl, black, blue, and blob _ Represents a single character h_t finds hot, hat, and hit [] Represents any single character within the brackets h[oa]t finds hot and hat ^ Represents any character not in the brackets h[^oa]t finds hit - Represents any single character within the specified range c[a-b]t finds cat and cbt IN The IN operator allows you to specify multiple values in a WHERE clause.\nThe IN operator is a short hand for multiple OR conditinos. SELECT column_name(s) FROM table_name WHERE column_name IN (value1, value2, ...); or\nSELECT column_name(s) FROM table_name WHERE column_name IN (SELECT STATEMENT); BETWEEN The BETWEEN operator selects values within a given range. The values can be numbers, text, or dates.\nThe BETWEEN operator is inclusive: begin and end values are included. SELECT column_name(s) FROM table_name WHERE column_name BETWEEN value1 AND value2; Aliases SQL aliases are used to give a table, or a column in a table, a temporary name.\nAliases are often used to make column names more readable.\nAn alias only exists for the duration of that query.\nAn alias is created with the AS keyword.\nAlias Column Syntax\nSELECT column_name AS alias_name FROM table_name; Alias Table syntax SELECT column_name(s) FROM table_name AS alias_name; Joins A JOIN clause is used to combine rows from two ormore tables, based on a related column between them. Orderes\nOrderId CustomerID OrderDate 10308 2 1996-09-18 10309 37 1996-09-19 10310 77 1996-09-20 Customers\nCustomerID CustomerName ContactName Country 1 Alfreds Futterkiste Maria Anders Germany 2 Ana Trujillo Emparedados y helados Ana Trujillo Mexico 3 Antonio Moreno Taqueria Antonio Moreno Mexico SELECT Orders.OrderID, Customers.CustomerName, Orders.OrderDate FROM Orders INNER JOIN Customers ON Orders.CustomerID=Customers.CustomerID; Result\nOrderID CustomerName OrderDate 10308 Ana Trujillo Emparedados y helados 9/18/1996 10365 Antonio Moreno Taquería 11/27/1996 10383 Around the Horn 12/16/1996 10355 Around the Horn 11/15/1996 10278 Berglunds snabbköp 8/12/1996 INNER JOIN The INNER JOIN keyword selects records that have matching values in both tables. SELECT column_name(s) FROM table1 INNER JOIN table2 ON table1.column_name = table2.column_name; LEFT JOIN The LEFT JOIN keyword returns all records from the left table(table1), and the matching records from the right table(table2). The result is 0 records from the right side, if there is no match. SELECT column_name(s) FROM table1 LEFT JOIN table2 ON table1.column_name = table2.column_name; RIGHT JOIN (RIGHT OUTER JOIN) The RIGHT JOIN keyword returns all records from the right table(table2), and the matching records from the left table (table1). The result is 0 records from the left side, if there is no match. SELECT column_name(s) FROM table1 RIGHT JOIN table2 ON table1.column_name = table2.column_name; FULL JOIN (FULL OUTER JOIN) The FULL JOIN keyword returns all records when there is a match in left(table1) or right (table2) table records. SELECT column_name(s) FROM table1 FULL JOIN table2 ON table1.column_name = table2.column_name WHERE condition; Self Join A self join is a regular join, but the table is joined with itself. SELECT column_name(s) FROM table1 T1, table1 T2 WHERE condition; Customers\nCustomerID CustomerName ContactName Address City PostalCode Country 1 Alfreds Futterkiste Maria Anders Obere Str. 57 Berlin 12209 Germany 2 Ana Trujillo Emparedados y helados Ana Trujillo Avda. de la Constitución 2222 México D.F. 05021 Mexico 3 Antonio Moreno Taquería Antonio Moreno Mataderos 2312 México D.F. 05023 Mexico SELECT A.CustomerName AS CustomerName1, B.CustomerName AS CustomerName2, A.City FROM Customers A, Customers B WHERE A.CustomerID \u0026lt;\u0026gt; B.CustomerID AND A.City = B.City ORDER BY A.City; UNION The UNION operator is ued to combine the result-set of two or more SELECT statements. Every SELECT statement within UNION must have the same number of columns The columns must also have similar data types The columns in every SELECT statement must also be in the same order. SELECT column_name(s) FROM table1 UNION SELECT column_name(s) FROM table2 The UNION operator selects only distinct values by default. To allow deuplicate values, use UNION ALL: SELECT column_name(s) FROM table1 UNION ALL SELECT column_name(s) FROM table2 Note: The column names in the result-set are usually equal to the column names in the first SELECT statement.\nGROUP BY The GROUP BY statement groups rows that have the same values into summary rows, like \u0026ldquo;find the number of customers in each country\u0026rdquo;. The GROUP BY statment is often used with aggregate functions (COUNT(),MAX(),MIN(),SUM(),AVG()) to group the result-set by one ore more columns. SELECT column_name(s) FROM table_name WHERE condition GROUP BY column_name(s) ORDER BY column_name(s); HAVING The HAVING clause was added to SQL because the WHERE keyword cannot be used with aggregate functions. SELECT column_name(s) FROM table_name WHERE conditon GROUP BY column_name(s) HAVING condition ORDER BY column_name(s); Sample SELECT COUNT(CustomerID), Country FROM Customers GROUP BY Country HAVING COUNT(CustomerID) \u0026gt; 5; EXISTS The EXISTS operator is used to test for the existence of any record in a subquery. The EXISTS operator returns TRUE if the subquery returns one or more records. SELECT column_name(s) FROM table_name WHERE EXISTS (SELECT column_name(s) FROM table_name WHERE condition ); ANY The ANY operator: returns a boolean value as a result returns TRUE if ANY of the subquery values meet the condition ANY means that the conditon will be true if the operation is true for any of the values in the range. SELECT column_name(s) FROM table_name WHERE column_name(s) opeartor ANY (SELECT column_name FROM table_name WHERE condition); ALL The ALL opeartor: returns a boolean value as a result returns TRUE if ALL of the subquery values meet the conditon is used with SELECT, WHERE and HAVING statements ALL means that the conditon will be true only if the operation is true for all values in the range. SELECT ALL column_name(s) FROM table_name WHERE conditon syntax with WHRER or HAVING SELECT column_name(s) FROM table_name WHERE column_name operator ALL (SELECT column_name FROM table_name WHERE condition); SELECT INTO The SELECT INTO statement copies data from one table into a new table.\nCopy all columns into a new table:\nSELECT * INTO newtable [IN externaldb] FROM oldtable WHERE condition Copy only some columns into a new table: SELECT column1, column2, column3, ... INTO new table [IN externaldb] FROM oldtable WHERE condition; INSERT INTO SELECT The INSERT INTO SELECT statement copies data from one table and inserts it into another table. The INSERT INTO SELECT statement requires that the data types in source and target tables match. Note: The existing records in the target table are unaffected.\nCopy all columns from one table to another table: INSERT INTO table2 SELECT * FROM table1 WHERE condition Copy only some columns from one table into another table: INSERT INTO table2 (column1, column2, column3, ...) SELECT column1, column2, column3, ... FROM table1 WHERE condition CASE The CASE expression goes through conditions and returns a value when the first condition is met (like an if-then-else statement). So, once a condition is true, it will stop reading and return the result. If no conditions are true, it returns the value in the ELSE cluase. If there is no ELSE part and no condtions are true, it retures NULL. CASE WHEN conditon1 THEN result1 WHEN conditon2 THEN result2 WHEN conditonN THEN resultN ELSE resuklt END NULL Functions Products |P_Id|ProductName|UnitPrice|UnitsInStock|UnitsOnOrder| |1|Jarlsberg|10.45|16|15| |2|Mascarpone|32.56|23| | |3|Gorgonzola|15.67|9|20|\nSuppose that the \u0026ldquo;UnitsOnOrder\u0026rdquo; column is optional, and may contain NULL values.\nMySQL\nINFULL() SELECT ProductName, UnitPrice * (UnitsInStock + IFNULL(UnitsOnOrder, 0)) FROM Products; COALESCE() SELECT ProductName, UnitPrice * (UnitsInStock + COALESCE(UnitsOnOrder, 0)) FROM Products; SQL Server ISNULL() SELECT ProductName, UnitPrice * (UnitsInStock + ISNULL(UnitsOnOrder, 0)) FROM Products; COALESCE() SELECT ProductName, UnitPrice * (UnitsInStock + COALESCE(UnitsOnOrder, 0)) FROM Products; MS Access IsNULL() SELECT ProductName, UnitPrice * (UnitsInStock + IIF(IsNull(UnitsOnOrder), 0, UnitsOnOrder)) FROM Products; Oracle NVL() SELECT ProductName, UnitPrice * (UnitsInStock + NVL(UnitsOnOrder, 0)) FROM Products; COALESCE() SELECT SELECT ProductName, UnitPrice * (UnitsInStock + COALESCE(UnitsOnOrder, 0)) FROM Products; Sotred Precedures A stored procedure is a prepared SQL code that you can save, so the code can be reused over and over again.\nSo if you have an SQL query that you write over and over again, save it as a stored procedure, and then just call it to execute it.\nYou can also pass parameters to a stored procedure, so that the stored procedure can act based on the parameter value(s) that is passed.\nStored Procedure Syntax\nCREATE PROCEDURE procedure_name AS sql_statement GO; ** Execute as Stored Procedure\nEXEC procedure_name; Comments Single line comments --. Multi-line comments /* and */. ","permalink":"https://intervalrain.github.io/it/sql/","summary":"\u003ch1 id=\"introduction\"\u003eIntroduction\u003c/h1\u003e\n\u003ch2 id=\"what-is-sql\"\u003eWhat is SQL?\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eSQL stands for \u003cstrong\u003eStructured Query Language\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003eSQL lets you access and manipualate databases\u003c/li\u003e\n\u003cli\u003eSQL becaome a standard of the American National Standards Institute (ANSI) in 1986, and of the International Organization for Standardization (ISO) in 1987\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"rdbms\"\u003eRDBMS\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eRDBMS stands for \u003cstrong\u003eRelational Database Management System\u003c/strong\u003e.\u003c/li\u003e\n\u003cli\u003eRDBMS is the basis for SQL, and for all modern database systems such as MS SQL Server, IBM DB2, Oracle, MySQL, and Microsoft Access.\u003c/li\u003e\n\u003cli\u003eThe data in RDBMS is stored in database objects called tables. A table is a collection of related data entries and it consists of columns and rows.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"syntax\"\u003eSyntax\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-SQL\" data-lang=\"SQL\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eSELECT\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eFROM\u003c/span\u003e Customers;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eSQL keywords are NOT case sensitive.\u003c/li\u003e\n\u003cli\u003eSome database systems requires a semicolon at the end of each SQL statement.\u003c/li\u003e\n\u003cli\u003eSemicolon is the standard way to separate each SQL statement in database systems that allow more than one SQL statement to be executed in the same call to the server.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"most-important-sql-commands\"\u003eMost Important SQL Commands\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSELECT\u003c/code\u003e - extracts data from a database\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eUPDATE\u003c/code\u003e - updates data in a database\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eDELETE\u003c/code\u003e - deletes data from a database\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eINSERT INTO\u003c/code\u003e - inserts new data into a database\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eCREATE DATABASE\u003c/code\u003e - creates a new database\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eALTER DATABASE\u003c/code\u003e - modifies a database\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eCREATE TABLE\u003c/code\u003e - creates a new table\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eALTER TABLE\u003c/code\u003e - modifies a table\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eDROP TABLE\u003c/code\u003e - deletes a table\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eCREATE INDEX\u003c/code\u003e - creates an index (search key)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eDROP INDEX\u003c/code\u003e - deletes an index\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"select\"\u003eSELECT\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eThe \u003ccode\u003eSELECT\u003c/code\u003e statement is used to select data from a database.\u003cbr\u003e\nThe data returned is stored in a result table, called the result-set.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-SQL\" data-lang=\"SQL\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eSELECT\u003c/span\u003e column1, column2, ...\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eFROM\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003etable_name\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"select-distinct\"\u003eSELECT DISTINCT\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eThe \u003ccode\u003eSELECT DINSTINCT\u003c/code\u003e statement is used to return only distinct (different) values.\u003cbr\u003e\nInside a table, a column often contains many duplicate values; and sometimes you only want to list the different (distinct) values.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-SQL\" data-lang=\"SQL\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eSELECT\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eDISTINCT\u003c/span\u003e column1, column2, ...\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eFROM\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003etable_name\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"where\"\u003eWHERE\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eThe \u003ccode\u003eWHERE\u003c/code\u003e clause is used to filter records.\u003cbr\u003e\nIt is used to extract only those records that fultill a specified condition.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-SQL\" data-lang=\"SQL\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eSELECT\u003c/span\u003e column1, column2, ...\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eFROM\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003etable_name\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eWHERE\u003c/span\u003e condition;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eOperators can be used in the \u003ccode\u003eWHERE\u003c/code\u003e clause:\n\\(\\begin{array}{|c|l|}\\hline\n\\text{Operator}\u0026amp;\\text{Description}\\\\\\hline\n\\text{=}\u0026amp;\\text{Equal}\\\\\\hline\n\\text{\u0026gt;}\u0026amp;\\text{Greater than}\\\\\\hline\n\\text{\u0026lt;}\u0026amp;\\text{Less than}\\\\\\hline\n\\text{\u0026gt;=}\u0026amp;\\text{Greater than or equal}\\\\\\hline\n\\text{\u0026lt;=}\u0026amp;\\text{Less than or equal}\\\\\\hline\n\\text{\u0026lt;\u0026gt;, !=}\u0026amp;\\text{Not equal}\\\\\\hline\n\\text{BETWEEN}\u0026amp;\\text{Between a certain range}\\\\\\hline\n\\text{LIKE}\u0026amp;\\text{Search for a pattern}\\\\\\hline\n\\text{IN}\u0026amp;\\text{To specify multiple possible values for a column}\\\\\\hline\n\\end{array}\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"and-or-not\"\u003eAND, OR, NOT\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eTHE \u003ccode\u003eWHERE\u003c/code\u003e clause can be combined with \u003ccode\u003eAND\u003c/code\u003e, \u003ccode\u003eOR\u003c/code\u003e, and \u003ccode\u003eNOT\u003c/code\u003e operators.\u003cbr\u003e\nThe \u003ccode\u003eAND\u003c/code\u003e and \u003ccode\u003eOR\u003c/code\u003e operators are used to filter records based on more than one condition:\n\u003cul\u003e\n\u003cli\u003eThe \u003ccode\u003eAND\u003c/code\u003e operator displays a record if all the conditons separated by \u003ccode\u003eAND\u003c/code\u003e are TRUE.\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003eOR\u003c/code\u003e operator displays a record if any of the conditons separated by \u003ccode\u003eOR\u003c/code\u003e is TRUE.\u003c/li\u003e\n\u003cli\u003eTHE \u003ccode\u003eNOT\u003c/code\u003e operator display a record if the condition(s) it NOT TRUE.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-SQL\" data-lang=\"SQL\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eSELECT\u003c/span\u003e column1, column2, ...\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eFROM\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003etable_name\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eWHERE\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eNOT\u003c/span\u003e condition1 \u003cspan style=\"color:#66d9ef\"\u003eAND\u003c/span\u003e condition2 \u003cspan style=\"color:#66d9ef\"\u003eOR\u003c/span\u003e condition3 ...;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"order-by\"\u003eORDER BY\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eThe \u003ccode\u003eORDER BY\u003c/code\u003e keyword is used to sort the result-set in ascending or descending order.\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003eORDER BY\u003c/code\u003e keyword sorts the records in ascending order by default.\u003cbr\u003e\nTo sort the records in descending order, used \u003ccode\u003eDESC\u003c/code\u003e keyword.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-SQL\" data-lang=\"SQL\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eSELECT\u003c/span\u003e column1, column2, ...\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eFROM\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003etable_name\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eORDER\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eBY\u003c/span\u003e column1, column2, ... \u003cspan style=\"color:#66d9ef\"\u003eASC\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eDESC\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"insert-into\"\u003eINSERT INTO\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eThe \u003ccode\u003eINSERT INTO\u003c/code\u003e statement is used to insert new records in a table.\u003c/li\u003e\n\u003c/ul\u003e\n\u003col\u003e\n\u003cli\u003eSpecify both the column names and the values to be inserted:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-SQL\" data-lang=\"SQL\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eINSERT\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eINTO\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003etable_name\u003c/span\u003e (column1, column2, column3, ...)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eVALUES\u003c/span\u003e (value1, value2, value3, ...);\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"2\"\u003e\n\u003cli\u003eIf you are adding values for all the columns of the table, you do not need to specify the column names in the SQL query. However, make sure the order of the values is in the same order as the columns in the table. Here, the \u003ccode\u003eINSERT INTO\u003c/code\u003e syntax would be as follows:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-SQL\" data-lang=\"SQL\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eINSERT\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eINTO\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003etable_name\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eVALUES\u003c/span\u003e (value1, value2, value3, ...);\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"is-null-is-not-null\"\u003eIS NULL, IS NOT NULL\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eWhat is a NULL Value?\u003c/p\u003e","title":"[IT] SQL"},{"content":"347. Top K Frequent Elements\nHardness: \\(\\color{orange}\\textsf{Medium}\\) Ralated Topics: Array、Hash Table、Divide and Conquer、Sorting、Heap (Priority Queue)、Bucket Sort、Counting、Quickselect 一、題目 Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.\nExample 1:\nInput: nums = [1,1,1,2,2,3], k = 2 Output: [1,2] Example 2:\nInput: nums = [1], k = 1 Output: [1] Constraints:\n1 \u0026lt;= nums.length \u0026lt;= 10^5 -10^4 \u0026lt;= nums[i] \u0026lt;= 10^4 k is in the range [1, the number of unique elements in the array]. It is guaranteed that the answer is unique. Follow up: Your algorithm\u0026rsquo;s time complexity must be better than O(n log n), where n is the array\u0026rsquo;s size.\n二、分析 先以 HashMap 統計每個數字出現的頻率後，再以出現的頻率做排序。Bucket sort 或是 max heap。 priority_queue 的宣告方式。 greater\u0026lt;\u0026gt; 與 less\u0026lt;\u0026gt; priority_queue\u0026lt;int, vector\u0026lt;int\u0026gt;, greater\u0026lt;int\u0026gt;\u0026gt; pq; // descending order (min heap) priority_queue\u0026lt;int, vector\u0026lt;int\u0026gt;, less\u0026lt;int\u0026gt;\u0026gt; pq; // ascending order (max heap) custom comparactor auto comp = [](const auto\u0026amp; a, const auto\u0026amp; b) { return condition; } ; priority_queue\u0026lt;element, container, decltype(comp)\u0026gt; pq(iterator::start, iterator::end, comp); default: max heap priority_queue\u0026lt;element\u0026gt; pq; // 預設為 max heap 三、解題 1. Priority Queue Time complexity: \\(O(n\\log k)\\) Space complexity: \\(O(n)\\) vector\u0026lt;int\u0026gt; topKFrequent(vector\u0026lt;int\u0026gt;\u0026amp; nums, int k) { unordered_map\u0026lt;int,int\u0026gt; freq; for (const int\u0026amp; num : nums) // 統計每個數字出現的次數 freq[num]++; priority_queue\u0026lt;pair\u0026lt;int,int\u0026gt;\u0026gt; pq; for (const auto\u0026amp; x : freq) // 用 max_heap 裝 {頻率, 數字} pq.push(make_pair(x.second, x.first)); vector\u0026lt;int\u0026gt; res; while (k--) { // 取出現頻率前 k 高的 res.push_back(pq.top().second); pq.pop(); } return res; } 2. Bucket Sort Time complexity: \\(O(n)\\) Space complexity: \\(O(1)\\) vector\u0026lt;int\u0026gt; topKFrequent(vector\u0026lt;int\u0026gt;\u0026amp; nums, int k) { unordered_map\u0026lt;int,int\u0026gt; freq; for (const int\u0026amp; num : nums) // 統計每個數字出現的次數 freq[num]++; vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; bucket; for (const auto f : freq) { while (bucket.size() \u0026lt;= f.second) { // 將數字，依不同頻率次數放到相對應的 vector 中 bucket.push_back({}); } bucket[f.second].push_back(f.first); } vector\u0026lt;int\u0026gt; res; for (int i = bucket.size()-1; i \u0026gt;= 0; i--) { for (int j = 0; j \u0026lt; bucket[i].size() \u0026amp;\u0026amp; k; j++, k--) { // 拿頻率前 k 多的元素 res.push_back(bucket[i][j]); } } return res; } 回目錄 Catalog\n","permalink":"https://intervalrain.github.io/leetcode/347/","summary":"\u003cp\u003e\u003cstrong\u003e347. Top K Frequent Elements\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHardness: \\(\\color{orange}\\textsf{Medium}\\)\u003c/li\u003e\n\u003cli\u003eRalated Topics: \u003ccode\u003eArray\u003c/code\u003e、\u003ccode\u003eHash Table\u003c/code\u003e、\u003ccode\u003eDivide and Conquer\u003c/code\u003e、\u003ccode\u003eSorting\u003c/code\u003e、\u003ccode\u003eHeap (Priority Queue)\u003c/code\u003e、\u003ccode\u003eBucket Sort\u003c/code\u003e、\u003ccode\u003eCounting\u003c/code\u003e、\u003ccode\u003eQuickselect\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"一題目\"\u003e一、題目\u003c/h3\u003e\n\u003cp\u003eGiven an integer array \u003ccode\u003enums\u003c/code\u003e and an integer \u003ccode\u003ek\u003c/code\u003e, return the \u003ccode\u003ek\u003c/code\u003e \u003cem\u003emost frequent elements\u003c/em\u003e. You may return the answer in \u003cstrong\u003eany order\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInput:\u003c/strong\u003e nums = [1,1,1,2,2,3], k = 2\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e [1,2]\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eInput:\u003c/strong\u003e nums = [1], k = 1\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOutput:\u003c/strong\u003e [1]\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eConstraints:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e1 \u0026lt;= nums.length \u0026lt;= 10^5\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e-10^4 \u0026lt;= nums[i] \u0026lt;= 10^4\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ek\u003c/code\u003e is in the range \u003ccode\u003e[1, the number of unique elements in the array]\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eIt is \u003cstrong\u003eguaranteed\u003c/strong\u003e that the answer is \u003cstrong\u003eunique\u003c/strong\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eFollow up:\u003c/strong\u003e Your algorithm\u0026rsquo;s time complexity must be better than \u003ccode\u003eO(n log n)\u003c/code\u003e, where n is the array\u0026rsquo;s size.\u003c/p\u003e","title":"[Leetcode] 347. Top K Frequent Elements"},{"content":"Next step: Technical Phone Interview:\nDuration: 45mins Google Hangouts call (video is optional) Coding is done on Google Docs Please ensure you have a working internet connection and current web browser :)\nThere will be about 1-3 different questions (dependent on complexity - e.g. 1 Hard OR 2 Medium problems) related to coding, data structures and algorithms. You will be expected to come up with optimized and production-ready code, free of bugs. You should not write in pseudo-code.\nI would highly recommend watching this video first to get a good grasp of the tips/ideas/areas of focus for the interviews here at Google. Do then read the next part to concretise these interview tips.\nRefresh yourself with CS fundamentals We do expect you to know a lot about algorithms and data structures and especially be able to implement them into your solutions - there is a great bigocheatsheet that may also help you! Steve Yegge’s Blog Google Style Guides (C++) Geek for Geeks - Study algorithms and data structure System Design resources: System design interview tip! Hired in Tech Coding Practice + CS review When you practice, do not use an IDE. You need to be able to write legible, compilable code without help with regards to layout, or spelling of standard library class/method names. I suggest solving similar style algorithmic/ DS problems on a google document or on paper to simulate a real interview. Several sites that provide similar problems to those typically asked in the interview are:\nLeetcode Code Jam Kickstart - great practice to get a glimpse of Google coding and algorithm questions. Code Jam hosts online Kickstart rounds that give participants the opportunity to test and grow their coding abilities! Participate in one—or join them all! You can also learn how to solve those problems by reading our analysis Codeforces HackerRank Topcoder ACM-ICPC Code Jam Below are some tips for your Coding Rounds: Write very clean, well-structured code and proactively address potential errors. Exhibit advanced coding approach (e.g. may have conducted exhaustive error-checking for boundary conditions, use appropriate idiomatic constructs in code, etc.\nTest covered several corner cases, tests are simple but thorough - (dependency injection, no static cling, etc.)\nIdentify data structures to design a solution with optimal efficiency.\nPropose multiple algorithmic approaches to single and compound problems.\nIdentify an optimal solution for given time-space tradeoffs.\nPropose novel, creative algorithmic solutions or come up with alternative optimal solutions for different constraints.\nCreate a workable design for a complex problem using a sound problem solving approach (e.g., gathered requirements, identified solutions, mapped solutions to design, understand constraints and trade-offs, estimated unknowns reasonably)\nShow robust comprehension of problems, identifying supplemental contingencies/challenges. Provide examples and/or alternative explanations to clarify rationale. Communicate code/algorithms/etc. in a way that leaves no room for confusion.\nTranslate ideas into code/action without the need for revision. Proactively identify and provide solutions for additional considerations beyond the initial problem, expanding the complexity/scope of solution.\nImportant areas of assessment Coding - Good code quality (No IDE. Fully functional code. Take care of syntax, good language constructs, clean and concise code) \u0026amp; coding fast (you can code in Codechef timed challenges to practise coding under time pressure)\nDS \u0026amp; Algo - Refer to below topics on what we are assessing for\nGood communication - Talk out loud, explain your thought process to the interviewer\nAttitude - Being independent, lead/drive the discussion forward while being receptive to hints from interviewers and integrating it in your solution\nSpeed of solving the question (Ideally 20mins per question - refer to below notes on time allocation)\nStrategy for Success (Framework) Step 1: Clarify the problem Step 2: Define your approach Step 3: Propose a solution Propose a solution before coding. Feel free to say that your first solution will be refined later Run through at least one or two examples to check for correctness Use reasonable variable names or clean up the code after the first pass Ask if the interviewer has any questions before refinement Step 4: Propose an alternative solution Step 5: Implementation Time Allocation During Interview (Suggestion from Googlers for your reference) + Solve 1 question in 20 mins + 2 mins for gathering all requirements and asking clarifying questions from the interviewer. + Approx 8-10 mins for coming up with a valid solution to the question, discuss with the interviewer about your solution, trade offs, the time and space complexity. + 5 mins for coding the solution. + 5 mins for dry run (sample test cases) along with discussion with the interviewer. Breakdown of Framework Tip 1: Think out Loud \u0026amp; Communicate your Thought Process\nGoogle interviewers are assessing you based on your problem solving skills, and want to know your full thought process behind why and how you derived the final result\nTalk through your entire thought process \u0026amp; explain about your approach, how you derive a certain algorithm, explain the trade offs, and discuss the complexity of the solutions you are proposing and explain your code (Talk and Code).\nMost important would be to pick the right data structure and algorithm for a specific problem! Talk about how they\u0026rsquo;re implemented and why you\u0026rsquo;d choose one implementation or data structure instead of another.\nDo not mumble to yourself or keep silent when thinking.\nTip 2: Ask Clarifying Questions (Very Important!)\nNever jump straight and code up the solution. Always take a pause, look at the interview question and ask some clarifying questions\nThese clarifying questions should enable you to cover for edge/boundary cases better and to define the scope of the question. Eg:\u0026ldquo;Describe a good algorithm for sorting a million numbers\u0026rdquo;\nGood Clarifying Questions: What is the range of the numbers? How are they distributed? Are the numbers integers or floating points? How much memory is available? Are there duplicates? Tip 3: Discuss algorithmic complexities \u0026amp; Identify all Edge Cases Independently\nFor Algorithms, you will need to know big-o notation very well.\nAlways state time and space complexities upfront. Think of how you can reduce the complexity further to reach an optimised solution!\nDistinguish between average case/worst case runtime\nConsider amortized time complexities!\nThe goal is to reach the most optimised solution at the end of the interview, and to have a complete working solution.\nTip 4: Test your Code\nCheck for boundary conditions!\nStress tests to ensure that the code runs within time constraint\nCreate tests that have 100% code coverage\nRectify any bugs in your code before the interviewer points it out\nTip 5: Ensure Good Code Quality on Google Docs\nYou are expected to code in Google Docs. Since it does not have any IDE, you are expected to type out your code from scratch\nType as close to fully functional code as possible. This code should be maintainable and readable by a large database of engineers\nCode in the latest version of your preferred language and use appropriate language constructs. Take care of variable names and syntax.\nDo not use Pseudo code or shortcuts, it is not good enough.\nAlways cover for Edge/Boundary cases\nTip 6: Positive \u0026amp; Independent Attitude \u0026amp; Being Open to Feedback\nIf you get stuck, stay calm, asking questions can help to reduce the scope of the problem.\nAim to solve as much independently as possible, ideally with as few hints as possible.\nAlways take the initiative in the interview, and treat it like a technical discussion.\nListen attentively to the interviewer, and integrate the hints/suggestions by the interviewer to your solution.\nInterview Preparation Plan (created by Google Software Engineers) Revise all concepts on data structures \u0026amp; algorithms- you can also use this gitHub link on CS fundamentals that can serve as a checklist while preparing. This BigO cheat sheet http://bigocheatsheet.com/ could help you as well!\nStructured Revision plan on the topics that to cover (Eg. hashtable, hashmaps, trees, arrays, strings, graphs, dynamic programming and more)\nPractise per category\nPractice up to a level that you reach competency - Solve the question in 20/40 minutes (for medium and hard problems respectively) and come up with the optimal solutions\nPractice Problem Identification by picking random problems and practice identifying “Which category does this problem belong to? Backtracking/Dynamic programming? Solution/Algorithmic design?”.\nPractice coding without an IDE, be familiar with the differences in how you should write code in Google Docs. Do practise coding in Google Docs within a set time frame and getting comfortable talking while coding.\nIn summary: Practise a wide variety of questions, and simulate actual interview conditions! You can also run mock interviews here at pramp.com\nFrequently asked topics (in no particular order) Binary search\nBFS/DFS/Flood fill\nTree traversals\nHash tables\nLinked list, stacks, queues, two pointers/sliding window\nBinary heaps\nDynamic programming\nUnion find\nAd hoc/string manipulations\nOther good to know topics: Trie, segment trees/fenwick trees, bitmask\nGoogle Interview Style Guides (C++, Python, Java; Javascript)\nYou\u0026rsquo;ll be expected to know and apply: lists, maps, stacks, priority queues, binary trees, graphs, bags, and sets.\nFor algorithms you\u0026rsquo;ll want to know greedy algorithms, divide and conquer, dynamic programming, recursion, and brute force search.\nYou\u0026rsquo;ll definitely want to be conversant with big­O notation, time­-space complexity, and real world performance of all of this.\nWhat we are assessing for Data Structures \u0026amp; Algorithms Can you implement the most optimized data structure and algorithm for the question?\nCan you explain the tradeoffs between the data structure/solution?\nCan you explain why you choose a data structure for implementation\nCan you explain and analyze the time and space complexity correctly\nCan you translate the algorithm to code well?\nSystem Design Tips System Design assesses a candidate\u0026rsquo;s ability to combine knowledge, theory, experience and judgement toward solving a real-world engineering problem with significant ambiguity.\nSystems Design questions are about learning from your experience and applying those lessons to future projects. We are looking for you to be able to:\nClarify the problem - System Design questions are deliberately underspecified, and we expect candidates to understand where the gaps are and ask followup questions, just like in a real project, where you have to probe to find the boundaries of the problem space.\nBreak down a complex problem into parts, and be able to discuss the overall design at both a high level and to do a deep dive into how a component in your system works. Note you will likely have to dig deeper into the problem initially presented to clarify details and understand resource requirements and limitations.\nIdentify and analyze tradeoffs in your design, understanding what the implications are. Note that we are more interested in seeing that you understand the implications of the various tradeoffs you make in your design \u0026ndash; we want to see a coherent design rather than evaluating if specific tradeoffs are “correct” or not.\nRecovering from failure. Things go wrong in real life. At large scale they can happen more often. How do you detect and defend against failures?\nAvoid answers, which involve \u0026ldquo;use a standard database and do queries against it;\u0026rdquo; we\u0026rsquo;re not looking for answers involving off-the-shelf products, rather how do you build from scratch? [*Talking about why or why not available solutions could or could not be effective does hold value]\nSystems design Building large-scale distributed systems (video version) The Google File System Bigtable: A Distributed Storage System for Structured Data https://backendology.com/2018/09/10/distributed-systems-course-reading-list/ Useful Resources\nVideos/Blogs:\nCoding Practice:\nFree Refresher Courses:\nExample Coding/Engineering Interview\nHow to: Prepare for a Google Engineering Interview\nInterview tips from Google Software Engineers\nSteve Yegge’s Blog (read me!)\nCheck out this YouTube playlist!\nHackerRank\nTopcoder\nLeetCode\nInterviewcake\nKattis\nGeeksforgeeks\nPramp - Mock Interview\nInterviewing.io\nStrategy for algorithmic problem solving - step by step\nIntro (https://www.coursera.org/learn/cs-tech-interview/lecture/hYbvm/algorithmic-problem-solving-and-interviews)\nWhat to do first (https://www.coursera.org/learn/cs-tech-interview/lecture/hAbVU/case-study-introduction)\nStarting with a naive solution (https://www.coursera.org/learn/cs-tech-interview/lecture/gs7Tg/case-study-a-first-solution)\nOptimizing your solution (https://www.coursera.org/learn/cs-tech-interview/lecture/Qu7hy/case-study-going-deeper)\nMIT Open courseware - Introduction to Algorithms\nAll the best with your preparation! Please let me know if you have any questions.\n","permalink":"https://intervalrain.github.io/life/prepare/","summary":"\u003ch3 id=\"next-step\"\u003eNext step:\u003c/h3\u003e\n\u003cp\u003eTechnical Phone Interview:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDuration: 45mins\u003c/li\u003e\n\u003cli\u003eGoogle Hangouts call (video is optional)\u003c/li\u003e\n\u003cli\u003eCoding is done on Google Docs\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003ePlease ensure you have a working internet connection and current web browser :)\u003c/p\u003e\n\u003cp\u003eThere will be about 1-3 different questions (dependent on complexity - e.g. 1 Hard OR 2 Medium problems) related to coding, data structures and algorithms. You will be expected to come up with optimized and production-ready code, free of bugs. You should not write in pseudo-code.\u003c/p\u003e","title":"[Life] July's plan"},{"content":" 本文是筆者基於工作上統計製程控制(Statistical Process Control, SPC) 的心得與學習筆記，可能有紕漏，僅供參考。\n統計學(Statistics) 基本名詞 群體(population)：研究對象的主體。 如上例的\\(\\red{\\text{全國人民的政治傾向}}\\)、\\(\\red{\\text{此家工廠的產品品質}}\\)。 樣本(sample)：群體的一部分。 如上例的\\(\\red{\\text{台灣部分的民眾}}\\)、\\(\\red{\\text{工廠部分的抽樣}}\\)。 目的：了解美國總統大選誰會獲勝? 群體：美國有投票權的公民 此時不是美國公民的台灣民眾，就不會是這個題目的樣本。 參數(parameter)：由群體資料所計算之群體表徵值。 統計量(statistic)：由樣本資料所計算之樣本表徵值。 為何需要統計學? 統計學是一種工具，人們為了下決策所作的一系列蒐集資料、整理、分析、與解析，是目的導向的。 比方說，每次總統大選會花費大量人力，動員全國上下公教人員，花錢印選舉公報、印選票，選後還要花費大量的時間開票、驗票。假如我只是個學生想了解目前國家人民的政治傾向，不可能收集台灣上下每個人的答案，所以我們會進行抽樣。 比方說工廠出貨會抽樣調查產品有沒有損壞，不可能全部的產品都拿去做測試，因為成本太高。 藉由普查或抽樣的結果來描述全體的行為，作為決策的依據。 統計的目的：\\(\\red{\\text{由樣本資料推論母體參數}}\\)。\n解決統計問題的五大步驟 問題定義 先決定你要討論的問題，跟此問題可能相關的對象為何？可以收集哪些資料？\n定義問題的群體與樣本。 例如：我想了解 A 工廠「晶片良率」，我認為可能跟「晶片厚度」有關係。 群體：A 工廠生產的晶片良率 樣本：某段時間內 A 工廠某機台生產晶片的厚度 例如：我想了解 B 國小附幼「小朋友學習狀況」，我認為可能跟「A 考卷的成績」有關。 群體：B 國小附幼小朋友的學習狀況 樣本：某次活動後的一次學習單成績。 資料收集 要收集哪些資料？哪些資料有可能可以協助我解決我想了解的問題？\n例如，收集晶片的氧化層厚度、爐管的溫度、機台的編號、機台的廠商\n測量尺度 等比尺度(Ratio measurements)：具有零值且資料間的距離是相等被定義的。 如晶片的氧化層厚度 等距尺度(Interval measurements)：資料間的距離是相等被定義的，定零值並非絕對的無，而是自行定義的。 如爐管的溫度(攝氏) 順序尺度(Ordinal measurements)：數據的意義是並非表現在值上而是在其順序上。 如機台的編號 名目尺度(Nominal measurements)：測量值不具量的意義。 如機台的廠商 資料整理 很多時候我們光看數字，會對研究主體沒感覺，所以引入畫圖來協助我們判斷資料。\n資料的整理分為兩個部分： 審查資料 篩選有用的資料，收集來的資料是不是與預想的一致，資料是否有錯誤、遺漏、矛盾或是其它可疑的地方？應立刻設法檢查並更正。如果資料由不同單位蒐集而來，可能需要經過正常化(normalization)加以換算統一。太過複雜的資料應依照研究目的加以整理，以求簡化，並藉以顯示研究對象全體的通則。 資料表現 資料經過整理分析得到一些統計結果，為了方便說明，我們常以圖表的方式陳示出來，以供參考使用。 散點圖(Scatter plot): 可以看相關係數 常態分布圖(高斯分布圖 normal distribution, gauss distribution)：\n可以看數據分布→變異數(低濶峰變異數大，高狹峰變異數小) 直方圖：跟常態分布圖用途接近，當數據點少的時候使用。\n條狀圖(柱狀圖)：分類\n折線圖：看時間趨勢(看股票?)\n圓餅圖：看組成\n瀑布圖：看累計量(也是看股票?)\n累積直方圖(CDF)： 族繁不及備載…\n資料分析 從圖表看到的有時候過於直觀，\n於是我們開始用你收集到的資料來做數學，然後進一步分析。\n有比較基本、常用的「統計量」與、「指標」(如平均數、標準差)，\n也有比較進階的根據不同領域所設計的「進階指標」(如吉尼係數(研究貧富差距))。\n常用統計量、指標 統計量用來描述研究對象的表徵，\n例如一家公司的年薪中位數，可以了解這家公司的薪資水準。\n例如西瓜班的平均身高，可以了解在同齡的小朋友身高狀況。\n例如新竹市市民的家庭收入標準差，可以了解新竹市的貧富差距狀況。 統計量不外乎就是用來描述「程度」與「分布」。\n集中趨勢：用來描述研究對象(大多數)的「程度」。 平均數 群體平均數：\\(\\boxed{\\mu=\\frac{\\sum X_i}{N}}\\) 樣本平均數：\\(\\boxed{\\bar{X}=\\frac{\\sum X_i}{n}}\\) 中位數：最中間的那個值 眾數：重複最多次的那個值 離中趨勢：用來描述研究對象「分佈的情形」 全距： \\(\\boxed{R=\\text{Max}-\\text{Min}}\\) 當數據有離群值時，會失去離中趨勢代表性。 變異數： 群體變異數：\\(\\boxed{\\sigma^2=\\frac{\\sum(X_i-\\mu)^2}{N}}\\) 樣本變異數：\\(\\boxed{S^2=\\frac{\\sum(X_i-\\bar{X})^2}{n-1}}\\)\n(記得樣本數的分子要減) 比較好算的版本 \\(\\boxed{\\sigma^2=\\frac{\\sum_i^NX_i^2-(\\sum_i^NX_i)^2/N}{N}}\\) \\(\\boxed{S^2=\\frac{\\sum_i^nX_i^2-(\\sum_i^nX_i)^2/n}{n-1}}\\) 標準差：變異數的平方，單位跟平均數一樣，在應用上可以做加減。 群體標準差：\\(\\boxed{\\sigma=\\sqrt{\\sigma^2}=\\sqrt{\\frac{\\sum(X_i-\\mu)^2}{N}}}\\) 樣本標準差：\\(\\boxed{S=\\sqrt{S^2}=\\sqrt{\\frac{\\sum(X_i-\\bar{X})^2}{n-1}}}\\) 偏態：數據分佈的「形態」口訣：\\(\\red{\\text{平地、山腰、種樹}\\rightarrow\\text{平均數、中位數、眾數}}\\) 對稱：\\(\\red{\\text{平均數=中位數=眾數}(山頂在中間)}\\) 右偏、正偏：\\(\\red{\\text{平均數\u0026gt;中位數\u0026gt;眾數}(山頂在左邊)}\\) 左偏、負偏：\\(\\red{\\text{平均數\u0026lt;中位數\u0026lt;眾數}(山頂在右邊)}\\) 偏態係數 \\(\\text{g}_1\\) \\(\\gray{\\text{g}_1=\\frac{\\sum_i^n(X_i-\\bar{X})^3/(n-1)}{S^3}}\\) \\(\\red{\\text{g}_1\\text{=0表示對稱}}\\) \\(\\red{\\text{g}_1\\text{\u0026gt;0表示右偏}}\\) \\(\\red{\\text{g}_1\\text{\u0026lt;0表示左偏}}\\) 峰態：山頂高不高 峰度係數 \\(\\text{g}_2\\) \\(\\gray{\\text{g}_1=\\frac{\\sum_i^n(X_i-\\bar{X})^4/(n-1)}{S^4}-3}\\) \\(\\red{\\text{g}_2\\text{=0表示常態分佈}}\\) \\(\\red{\\text{g}_2\\text{\u0026gt;0表示高狹峰}}\\) \\(\\red{\\text{g}_2\\text{\u0026lt;0表示低濶峰}}\\) 正態分布解析 若一組資料滿足自然分布(高斯分布、常態分布、正態分布、鐘型分布)，便會滿足以下的性質。 68、95、99.7 原則 即平均值一倍標準差內佔 68.27%。 即平均值二倍標準差內佔 95.45%。 即平均值三倍標準差內佔 99.73%。 不受高狹峰或低濶峰影響。 但偏態則會影響。 百分位數、百分等級、z 分數、t 分數都可以是從這個固定的分配比例衍生來的。 百分位數(Ppr、Pp) 代表「累計百分比」 小明某次考試 90 分贏過 70% 的考生，小明的百分位數即為 70。 百分等級 與「資料的個數」有關 \\(\\text{PR=}100\\times R+\\frac{50}{N}\\) 小明在 10 個人中排第 3 名，表示他贏過 7 個人，累計百分比為 70%， \\(\\text{PR=}100\\times 70\\%+\\frac{50}{\\red{10}}=70+5=75\\) 小明如果考 90 分，則此次考試 PR 75 的原始分數即為 90 分。 小明如果在 50 個人中排第 15 名，同樣的累計百分比為 70 %，但是 PR 值變成 \\(\\text{PR=}100\\times 70\\%+\\frac{50}{\\red{50}}=70+1=71\\) 小明如果是參加五萬人的選拔，同樣贏過 70% 的人，\n\\(\\text{PR=}100\\times 70\\%+\\frac{50}{\\red{50000}}=70+0.001=70.001\\approx70\\\\ \\red{\\text{PR只分100個等級，故不會有小數點，所以要四捨五入，}\\\\\\text{換言之，受試者超過101人，PR=Ppr}}\\) 累積百分比與標準差 \\(-3\\times\\sigma=50\\%-99.73\\%/2\\approx0.1\\%\\) \\(-2\\times\\sigma=50\\%-95.45\\%/2\\approx2.3\\%\\) \\(-1\\times\\sigma=50\\%-68.27\\%/2\\approx15.9\\%\\) \\(+0\\times\\sigma=50\\%\\) \\(+1\\times\\sigma=50\\%-68.27\\%/2\\approx84.1\\%\\) \\(+2\\times\\sigma=50\\%-95.45\\%/2\\approx97.7\\%\\) \\(+3\\times\\sigma=50\\%-99.73\\%/2\\approx99.9\\%\\) z 分數 換言之就是標準差。 小明贏過 84.1% 的人，z 分數即為 +1。 小明贏過 2.3% 的人，z 分數即為 -2。 t 分數 設定百分位數 50% 為 50 分，每增加一個標準差多 10分 反之亦然。 公式：\\(\\boxed{z = \\frac{t-50}{10}}\\) 或 \\(\\boxed{t=10z+50}\\) 小明的 t 分數是 70 分，代表它的 z 分數是 +2，累計百分比是 97.7%，百分位數是97.7，假設受試人超過101人，PR等級為 98。 信賴區間 用以一段區間描述研究對象。\n例如，95% 信賴水準下，台灣男生的身高為 160180 公分。代表你去路上隨機街訪，大約95% 的機率，路人(男)的身高都會落在 160180 公分以內。\n注意以上的描述不一定為真，因為抽樣結果與群體間會有誤差。\n假設我今天做了一個台灣男生身高抽樣調查，結果結果剛好呈現常態分布，並且平均身高是 170 公分，標準差是 5 公分。 68% 信賴水準下，台灣的男生身高會落在 165~175 公分的區間內。 95% 信賴水準下，台灣的男生身高會落在 160~180 公分的區間內。 99.7% 信賴水準下，台灣的男生身高會落在 155~185 公分的區間內。 信賴水準 \\(1-\\alpha\\)：從上例可見，當信賴區間增加，信賴水準也會增加。 顯著水準 \\(\\alpha\\)：反之，顯著水準增增加，代表愈寬鬆。通常定為 0.05。 白話：你只有 5% 的機率找到例外。 假設今天收集的數據不為常態分布，為左偏或右偏，它可以滿足 99.7% 的信賴區間，但不一定滿足 95% 信賴區間。 P 值： 定義：假使虛無假設是真的，實際觀測獲得比取樣更極端的值的機率是多少。 白話：假設台灣男生的身高都落在 160~180 公分之間，找到比 160 公分以下和 180 公分以上的機率是多少？ P 值無法用來證明何者絕對正確，只能透過機率來「合理推斷」 跟\\(\\alpha\\)的關係： 假設我做了一次調查，發現 1000 個人之中只有 20 個人高於 180 公分或矮於 160 公分，即 P 值為 0.02。 此時若此份調查宣稱信賴水準是 95%，即 \\(\\alpha=0.05\\)，則我們可以推斷這份調查是準確的，所以我們無法拒絕虛無假設。 此時若此份調查宣稱信賴水準是 99%，即 \\(\\alpha=0.01\\)，則我們可以推斷這份調查可能不準確，所以我們可以拒絕虛無假設。 也就是如果調查是正確的，我們應該只能從 1000 個人裡面找到小於 10 個極端值。不過因為 P 值是機率，我們可以拒絕，但不表示調查就是完全不正確的，也許我們再擴大調查，也許有可能在 10000 個人裡面總共只找到 45 個極端值，那這份調查又變成有效的了。 假設檢定 單尾、雙尾 單尾代表只有一個拒絕域，右分為左尾與右尾。 左尾：台灣男性有 95% 都高於 160 公分。 右尾：台灣男性有 95% 都矮於 180 公分。 雙尾代表有兩個拒絕域 雙尾：台灣男生有 95% 落在 160 公分到 180 公分的區間內。 結論與決策 可信度 當你做完數據，你的最終目的是想把你的研究對象跟你的調查數據關聯起來，這個關聯性必須要有可信度。\n前面的一大堆資料分析、檢定目的在於「證明抽樣有沒有辦法代表母體」。 現在「兩個足以代表母體的數據」，就可以來測試關聯性。\n相關係數 以下的圖稱為散佈圖，把兩個數據分別放於 X 軸與 Y 軸，如果兩者是相關的，表示在座標平面上，你可以找到「一條線(趨勢線)」(不一定要是直線)來描述他。 為什麼不一定要是直線? 因為 X軸跟 Y 可以是不同的尺規，X-Y 也有可能是對數尺規或是指數尺規。 |相關係數|愈高，則數據愈貼近趨勢線。 一般來說， \\(\\gamma=1\\)，完全線性正相關。 \\(\\gamma=-1\\)，完全線性負相關。 \\(0.7\\le\\gamma\u0026lt;1\\)，強正相關。 \\(-0.7\\ge\\gamma\u0026gt;-1\\)，強負相關。 \\(0.3\\le\\gamma\u0026lt;0.7\\)，弱正相關。 \\(-0.3\\ge\\gamma\u0026lt;-0.7\\)，弱負相關。 \\(-0.3\u0026lt;\\gamma\u0026lt;0.3\\)，無相關。 工程上喜歡用 \\(R^2\\) 來表示相關性，其實就是相關係數的平方，不討論正、負相關，只考慮相關性。 最後的最後 你學會了定義問題、收集資料、整理資料、資料分析跟最後的關聯性分析，你就可以下結論並做決策了！是不是很棒啊。 記得統計學只是工具，過程一定要有問題，目標是下決策。 例如，我想知道怎麼樣提升學生的學習成效。\n我發現學生的學習成效跟讀書時間的長短呈現強相關，且讀書時間愈長，學習成效愈好。那麼作為一名老師，我還不叫你把書讀爆！就是在說你，還不快點去讀書！！ ","permalink":"https://intervalrain.github.io/device/statistics/","summary":"\u003cblockquote\u003e\n\u003cp\u003e本文是筆者基於工作上統計製程控制(Statistical Process Control, SPC) 的心得與學習筆記，可能有紕漏，僅供參考。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch1 id=\"統計學statistics\"\u003e統計學(Statistics)\u003c/h1\u003e\n\u003ch2 id=\"基本名詞\"\u003e基本名詞\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e群體(population)\u003c/strong\u003e：研究對象的主體。\n\u003cul\u003e\n\u003cli\u003e如上例的\\(\\red{\\text{全國人民的政治傾向}}\\)、\\(\\red{\\text{此家工廠的產品品質}}\\)。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e樣本(sample)\u003c/strong\u003e：群體的一部分。\n\u003cul\u003e\n\u003cli\u003e如上例的\\(\\red{\\text{台灣部分的民眾}}\\)、\\(\\red{\\text{工廠部分的抽樣}}\\)。\n\u003cul\u003e\n\u003cli\u003e目的：了解美國總統大選誰會獲勝?\u003c/li\u003e\n\u003cli\u003e群體：美國有投票權的公民\n此時不是美國公民的台灣民眾，就不會是這個題目的樣本。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e參數(parameter)\u003c/strong\u003e：由群體資料所計算之群體表徵值。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e統計量(statistic)\u003c/strong\u003e：由樣本資料所計算之樣本表徵值。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"為何需要統計學\"\u003e為何需要統計學?\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e統計學是一種工具，人們為了\u003cstrong\u003e下決策\u003c/strong\u003e所作的一系列蒐集資料、整理、分析、與解析，是目的導向的。\n\u003cul\u003e\n\u003cli\u003e比方說，每次總統大選會花費大量人力，動員全國上下公教人員，花錢印選舉公報、印選票，選後還要花費大量的時間開票、驗票。假如我只是個學生想了解目前國家人民的政治傾向，不可能收集台灣上下每個人的答案，所以我們會進行抽樣。\u003c/li\u003e\n\u003cli\u003e比方說工廠出貨會抽樣調查產品有沒有損壞，不可能全部的產品都拿去做測試，因為成本太高。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e藉由普查或抽樣的結果來描述全體的行為，作為決策的依據。\u003c/li\u003e\n\u003cli\u003e統計的目的：\\(\\red{\\text{由樣本資料推論母體參數}}\\)。\u003cbr\u003e\n\u003cimg alt=\"statistics\" loading=\"lazy\" src=\"/device/statistics/Device/statistics/statistics.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"解決統計問題的五大步驟\"\u003e解決統計問題的五大步驟\u003c/h1\u003e\n\u003cp\u003e\u003cimg alt=\"steps\" loading=\"lazy\" src=\"/device/statistics/Device/statistics/steps.png\"\u003e\u003c/p\u003e\n\u003ch2 id=\"問題定義\"\u003e問題定義\u003c/h2\u003e\n\u003chr\u003e\n\u003cblockquote\u003e\n\u003cp\u003e先決定你要討論的問題，跟此問題可能相關的對象為何？可以收集哪些資料？\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e定義問題的\u003cstrong\u003e群體\u003c/strong\u003e與\u003cstrong\u003e樣本\u003c/strong\u003e。\n\u003cul\u003e\n\u003cli\u003e例如：我想了解 A 工廠「晶片良率」，我認為可能跟「晶片厚度」有關係。\n\u003cul\u003e\n\u003cli\u003e群體：A 工廠生產的晶片良率\u003c/li\u003e\n\u003cli\u003e樣本：某段時間內 A 工廠某機台生產晶片的厚度\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e例如：我想了解 B 國小附幼「小朋友學習狀況」，我認為可能跟「A 考卷的成績」有關。\n\u003cul\u003e\n\u003cli\u003e群體：B 國小附幼小朋友的學習狀況\u003c/li\u003e\n\u003cli\u003e樣本：某次活動後的一次學習單成績。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"資料收集\"\u003e資料收集\u003c/h2\u003e\n\u003chr\u003e\n\u003cblockquote\u003e\n\u003cp\u003e要收集哪些資料？哪些資料有可能可以協助我解決我想了解的問題？\u003cbr\u003e\n例如，收集晶片的氧化層厚度、爐管的溫度、機台的編號、機台的廠商\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"測量尺度\"\u003e測量尺度\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e等比尺度(Ratio measurements)：具有零值且資料間的距離是相等被定義的。\n\u003cul\u003e\n\u003cli\u003e如晶片的氧化層厚度\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e等距尺度(Interval measurements)：資料間的距離是相等被定義的，定零值並非絕對的無，而是自行定義的。\n\u003cul\u003e\n\u003cli\u003e如爐管的溫度(攝氏)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e順序尺度(Ordinal measurements)：數據的意義是並非表現在值上而是在其順序上。\n\u003cul\u003e\n\u003cli\u003e如機台的編號\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e名目尺度(Nominal measurements)：測量值不具量的意義。\n\u003cul\u003e\n\u003cli\u003e如機台的廠商\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"資料整理\"\u003e資料整理\u003c/h2\u003e\n\u003chr\u003e\n\u003cblockquote\u003e\n\u003cp\u003e很多時候我們光看數字，會對研究主體沒感覺，所以引入畫圖來協助我們判斷資料。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e資料的整理分為兩個部分：\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"審查資料\"\u003e審查資料\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e篩選有用的資料，收集來的資料是不是與預想的一致，資料是否有錯誤、遺漏、矛盾或是其它可疑的地方？應立刻設法檢查並更正。如果資料由不同單位蒐集而來，可能需要經過正常化(normalization)加以換算統一。太過複雜的資料應依照研究目的加以整理，以求簡化，並藉以顯示研究對象全體的通則。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"資料表現\"\u003e資料表現\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e資料經過整理分析得到一些統計結果，為了方便說明，我們常以圖表的方式陳示出來，以供參考使用。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg alt=\"charts\" loading=\"lazy\" src=\"https://ithelp.ithome.com.tw/upload/images/20210916/20126080dOWgZBatcx.png\"\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e散點圖(Scatter plot): 可以看相關係數\n\u003cimg alt=\"scatter\" loading=\"lazy\" src=\"https://th.bing.com/th/id/OIP.dl2KrNcgLW8y2ZfIn1t8FgHaCM?pid=ImgDet\u0026rs=1\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e常態分布圖(高斯分布圖 normal distribution, gauss distribution)：\u003cbr\u003e\n可以看數據分布→變異數(低濶峰變異數大，高狹峰變異數小)\n\u003cimg alt=\"guass\" loading=\"lazy\" src=\"https://th.bing.com/th/id/R.efb9c389ce8106ccae1ac12d48be38ac?rik=QeHFSNbTkpPGwA\u0026riu=http%3a%2f%2ffile.elecfans.com%2fweb1%2fM00%2f4E%2fD2%2fpIYBAFrLHPiAVpHZAACWFJ9HMHM861.png\u0026ehk=4PWGwBClXiNd1ZrosSiffNnwNlf1n1Po9mAGi3TRS3g%3d\u0026risl=\u0026pid=ImgRaw\u0026r=0\"\u003e\u003c/p\u003e","title":"[統計] 統計學概要"},{"content":"準備中 ","permalink":"https://intervalrain.github.io/cs/ca/memory/","summary":"\u003ch1 id=\"準備中\"\u003e準備中\u003c/h1\u003e","title":"[CA] 記憶體"},{"content":"準備中 ","permalink":"https://intervalrain.github.io/cs/ca/pipeline/","summary":"\u003ch1 id=\"準備中\"\u003e準備中\u003c/h1\u003e","title":"[CA] Pipeline"},{"content":"準備中 ","permalink":"https://intervalrain.github.io/cs/ca/processor/","summary":"\u003ch1 id=\"準備中\"\u003e準備中\u003c/h1\u003e","title":"[CA] 處理器"},{"content":"準備中 ","permalink":"https://intervalrain.github.io/cs/ca/arithmetic/","summary":"\u003ch1 id=\"準備中\"\u003e準備中\u003c/h1\u003e","title":"[CA] 計算機算術"},{"content":"準備中 ","permalink":"https://intervalrain.github.io/cs/ca/isa/","summary":"\u003ch1 id=\"準備中\"\u003e準備中\u003c/h1\u003e","title":"[CA] 指令集架構"},{"content":"計算機組織與結構 計算機抽象化與科技 指令集架構 計算機算術 處理器 Pipeline 記憶體 參考資料 黃婷婷 清大開放式課程 計算機結構 Mr. opengate ","permalink":"https://intervalrain.github.io/cs/ca/","summary":"\u003ch1 id=\"計算機組織與結構\"\u003e計算機組織與結構\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"/cs/ca/abstraction\"\u003e計算機抽象化與科技\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/cs/ca/isa\"\u003e指令集架構\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/cs/ca/arithmetic\"\u003e計算機算術\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/cs/ca/processor\"\u003e處理器\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/cs/ca/pipeline\"\u003ePipeline\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/cs/ca/memory\"\u003e記憶體\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"參考資料\"\u003e參考資料\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://ocw.nthu.edu.tw/ocw/index.php?page=course\u0026amp;cid=76\"\u003e黃婷婷 清大開放式課程 計算機結構\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://mropengate.blogspot.tw/\"\u003eMr. opengate\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"[作業系統] 計算機組織與結構"},{"content":"CPU 個數、核心數、執行緒數 定義 CPU 個數即 CPU 晶片個數。 **CPU 核心數(core)**是指物理上，也就是硬體上存在著幾個核心。比如，雙核就是包括 2 個相對獨立的 CPU 核心單元組，四核就包含 4 個相對獨立的 CPU 核心單元組。 **執行緒數(thread)**是一種邏輯的概念，簡單地說，就是模擬出的 CPU 核心數。比如，可以通過一個 CPU 核心數模擬出 2 執行緒的 CPU，也就是說，這個單核心的 CPU 被模擬成了一個類似雙核心 CPU 的功能。我們從工作管理員的效能標籤頁中看到的是兩個 CPU。比如 Intel 賽揚 G460 是單核心、雙執行緒的 CPU，Intel 酷睿 i3 3220 是雙核心、四執行緒，Intel 酷睿 i7 4770K 是四核心、八執行緒，Intel 酷睿 i5 4570 是四核心四執行緒等等。對於一個 CPU，執行緒數總是大於或等於核心數的。一個核心最少對應一個執行緒，但通過超執行緒(Hyper Thread)技術，一個核心可以對應兩個執行緒，也就是說它可以同時執行兩個執行緒。 CPU 的執行緒數概念僅僅只針對 Intel 的 CPU 才有用，因為它是通過 Intel 超執行緒技術來實現的，最早應用在 Pentium4 上。如果沒有超執行緒技術，一個 CPU 核心對應一個執行緒。所以，對於 AMD 的 CPU 來說，只有核心數的概念，沒有執行緒數的概念。\n為何要增加執行緒數? CPU 之所以要增加執行緒數，是源於多工處理(multi-tasking)的需要。執行緒數越多，越有利於同時執行多個程式，因為執行緒數等同於在某個瞬間 CPU 能並行處理(concurrent)的任務數。因此，執行緒數是一種邏輯的概念，簡單地說，就是模擬出的 CPU 核心數。一個核心最少對應一個執行緒，但英特爾有個超執行緒技術可以把一個物理執行緒模擬出兩個執行緒來用，充分發揮 CPU 效能，即一個核心可以有兩個到多個執行緒。 intel x86：一核心有 2 個邏輯執行緒。 IBM power8：一核心有 8 個邏輯執行緒。 多核 CPU 多核心 CPU 主要分原生多核和封裝多核。 原生多核指的是真正意義上的多核，最早由 AMD 提出，每個核心之間都是完全獨立的，都擁有自己的前端匯流排，不會造成衝突，即使在高負載狀況下，每個核心都能保證自己的效能不受太大的影響，通俗的說，原生多核的抗壓能力強，但是需要先進的工藝，每擴充套件一個核心都需要很多的研發時間。 封裝多核是隻把多個核心直接封裝在一起，比如 Intel 早期的 PD 雙核系列，就是把兩個單核直接封裝在一起，但兩核心只能共同擁有一條前端匯流排，在兩個核心滿載時，兩個核心會爭搶前端匯流排，導致效能大幅度下降，所以早期的PD被扣上了高頻低能的帽子，要提高封裝多核的效能，在多工的高壓下儘量減少效能損失，只能不斷的擴大前端匯流排的總體大小，來彌補多核心爭搶資源帶來的效能損失，但這樣做只能在一定程度上彌補效能的不足，和原生的比起來還是差了很多，而且後者成本比較高，優點在於多核心的發展要比原生快的多。 核心 核心(Die)又稱為核心，是 CPU 最重要的組成部分。CPU 中心那塊隆起的晶片就是核心，是由單晶矽以一定的生產工藝製造出來的，CPU 所有的計算、接受/儲存命令、處理資料都由核心執行。各種 CPU 核心都具有固定的邏輯結構，一級快取、二級快取、執行單元、指令級單元和匯流排介面等邏輯單元都會有科學的佈局。 多核心處理器(Multi-core processor) 又稱多核心微處理器，是在單個 CPU 中，加入兩個或以上的獨立實體中央處理單元，或稱核心(core)。這些核心可以分別獨立地執行程式指令，利用平行計算的能力加快程式的執行速度。只有兩個核心的處理器，稱為雙核心處理器(dual-core processor)。多核心通常是對於中央處理器 CPU 而論的，但是某些時候也指 DSP 和 SoC。 把將兩個或更多獨立處理器封裝在一個單一積體電路(IC)中的方案稱為多核心處理器；而封裝在不同 IC 中的獨立處理器形成的計算機系統被稱為多處理器。 多核心處理器 != 多處理器 多核心處理器可以在不將每個核心分別獨立物理封裝的情況下進行多工處理(執行緒級併發處理（Thread-Level Parallelism, TLP)，這種形式的TLP通常被認為是晶片級多處理。 單核多 CPU 與多核單 CPU 一台計算機的處理器部分的架構\n單核多 CPU，那麼每一個 CPU 都需要有較為獨立的電路支援，有自己的 Cache，而他們之間通過板上的匯流排進行通訊(一致性問題)。假如在這樣的架構上，我們要跑一個多執行緒的程式，不考慮超執行緒，那麼每一個執行緒就要跑在一個獨立的 CPU 上，執行緒間的所有協作都要走匯流排，而共享的資料更是有可能要在好幾個 Cache 裡同時存在。這樣的話，匯流排開銷相比較而言是很大的，怎麼辦？那麼多 Cache，即使我們不心疼儲存能力的浪費，也無法保證一致性。 多核單 CPU，那麼我們只需要一套晶片組，一套儲存，多核之間通過晶片內部匯流排進行通訊，共享使用記憶體。在這樣的架構上，如果我們跑一個多執行緒的程式，那麼執行緒間通訊將比上一種情形更快。 多個 CPU 常見於分散式系統，用於普通消費級市場的不多，多用於叢集系統(Clustered system)、雲端計算平臺。多 CPU 架構最大的瓶頸就是 I/O，尤其是各個 CPU 之間的通訊，低成本的都用 100M 乙太網做，稍微好一點的用 1000M 乙太網，再好的就用光纖等等，但無論如何速度和通量都比不上主機板的主線。所以多 CPU 適用於大計算量，對時間成本不敏感的任務，比如一些工程建模，或者像 SATI 找外星人這種極端的，跑上幾千年都不著急的。而且多 CPU 架構更簡單清晰，可以用消費級產品簡單做數量堆疊，成本上有優勢。而多核單 CPU 則適合對通訊 I/O 速度要求較快的應用，在相同核數量下成本上也高一些，好像只有在超級計算機裡會用到以萬為單位的核心數，普通消費級產品也就是到 16 核封頂了，因為成本控制的原因。 ","permalink":"https://intervalrain.github.io/cs/os/cpucorethread/","summary":"\u003ch1 id=\"cpu-個數核心數執行緒數\"\u003eCPU 個數、核心數、執行緒數\u003c/h1\u003e\n\u003ch2 id=\"定義\"\u003e定義\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eCPU 個數\u003c/strong\u003e即 CPU 晶片個數。\u003c/li\u003e\n\u003cli\u003e**CPU 核心數(core)**是指物理上，也就是硬體上存在著幾個核心。比如，雙核就是包括 2 個相對獨立的 CPU 核心單元組，四核就包含 4 個相對獨立的 CPU 核心單元組。\u003c/li\u003e\n\u003cli\u003e**執行緒數(thread)**是一種邏輯的概念，簡單地說，就是模擬出的 CPU 核心數。比如，可以通過一個 CPU 核心數模擬出 2 執行緒的 CPU，也就是說，這個單核心的 CPU 被模擬成了一個類似雙核心 CPU 的功能。我們從工作管理員的效能標籤頁中看到的是兩個 CPU。比如 Intel 賽揚 G460 是單核心、雙執行緒的 CPU，Intel 酷睿 i3 3220 是雙核心、四執行緒，Intel 酷睿 i7 4770K 是四核心、八執行緒，Intel 酷睿 i5 4570 是四核心四執行緒等等。對於一個 CPU，執行緒數總是大於或等於核心數的。一個核心最少對應一個執行緒，但通過\u003ca href=\"https://www.intel.com.tw/content/www/tw/zh/gaming/resources/hyper-threading.html\"\u003e\u003cstrong\u003e超執行緒(Hyper Thread)\u003c/strong\u003e\u003c/a\u003e技術，一個核心可以對應兩個執行緒，也就是說它可以同時執行兩個執行緒。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003eCPU 的執行緒數概念僅僅只針對 Intel 的 CPU 才有用，因為它是通過 Intel 超執行緒技術來實現的，最早應用在 Pentium4 上。如果沒有超執行緒技術，一個 CPU 核心對應一個執行緒。所以，對於 AMD 的 CPU 來說，只有核心數的概念，沒有執行緒數的概念。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"為何要增加執行緒數\"\u003e為何要增加執行緒數?\u003c/h2\u003e\n\u003cp\u003e\u003cimg alt=\"robinround\" loading=\"lazy\" src=\"https://timefasr742.weebly.com/uploads/1/2/4/9/124993958/469451326.jpg\"\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eCPU 之所以要增加執行緒數，是源於多工處理(multi-tasking)的需要。執行緒數越多，越有利於同時執行多個程式，因為執行緒數等同於在某個瞬間 CPU 能並行處理(concurrent)的任務數。因此，執行緒數是一種邏輯的概念，簡單地說，就是模擬出的 CPU 核心數。一個核心最少對應一個執行緒，但英特爾有個超執行緒技術可以把一個物理執行緒模擬出兩個執行緒來用，充分發揮 CPU 效能，即一個核心可以有兩個到多個執行緒。\n\u003cul\u003e\n\u003cli\u003eintel x86：一核心有 2 個邏輯執行緒。\u003c/li\u003e\n\u003cli\u003eIBM power8：一核心有 8 個邏輯執行緒。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"多核-cpu\"\u003e多核 CPU\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e多核心 CPU 主要分\u003cstrong\u003e原生多核\u003c/strong\u003e和\u003cstrong\u003e封裝多核\u003c/strong\u003e。\n\u003cul\u003e\n\u003cli\u003e原生多核指的是真正意義上的多核，最早由 AMD 提出，每個核心之間都是完全獨立的，都擁有自己的前端匯流排，不會造成衝突，即使在高負載狀況下，每個核心都能保證自己的效能不受太大的影響，通俗的說，原生多核的抗壓能力強，但是需要先進的工藝，每擴充套件一個核心都需要很多的研發時間。\u003c/li\u003e\n\u003cli\u003e封裝多核是隻把多個核心直接封裝在一起，比如 Intel 早期的 PD 雙核系列，就是把兩個單核直接封裝在一起，但兩核心只能共同擁有一條前端匯流排，在兩個核心滿載時，兩個核心會爭搶前端匯流排，導致效能大幅度下降，所以早期的PD被扣上了\u003cem\u003e高頻低能\u003c/em\u003e的帽子，要提高封裝多核的效能，在多工的高壓下儘量減少效能損失，只能不斷的擴大前端匯流排的總體大小，來彌補多核心爭搶資源帶來的效能損失，但這樣做只能在一定程度上彌補效能的不足，和原生的比起來還是差了很多，而且後者成本比較高，優點在於多核心的發展要比原生快的多。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"核心\"\u003e核心\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e核心(Die)又稱為核心，是 CPU 最重要的組成部分。CPU 中心那塊隆起的晶片就是核心，是由單晶矽以一定的生產工藝製造出來的，CPU 所有的計算、接受/儲存命令、處理資料都由核心執行。各種 CPU 核心都具有固定的邏輯結構，一級快取、二級快取、執行單元、指令級單元和匯流排介面等邏輯單元都會有科學的佈局。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"多核心處理器multi-core-processor\"\u003e多核心處理器(Multi-core processor)\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e又稱多核心微處理器，是在單個 CPU 中，加入兩個或以上的獨立實體中央處理單元，或稱核心(core)。這些核心可以分別獨立地執行程式指令，利用平行計算的能力加快程式的執行速度。只有兩個核心的處理器，稱為雙核心處理器(dual-core processor)。多核心通常是對於中央處理器 CPU 而論的，但是某些時候也指 DSP 和 SoC。\u003c/li\u003e\n\u003cli\u003e把將兩個或更多獨立處理器封裝在一個單一積體電路(IC)中的方案稱為多核心處理器；而封裝在不同 IC 中的獨立處理器形成的計算機系統被稱為多處理器。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e多核心處理器 != 多處理器\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e多核心處理器可以在不將每個核心分別獨立物理封裝的情況下進行多工處理(執行緒級併發處理（Thread-Level Parallelism, TLP)，這種形式的TLP通常被認為是晶片級多處理。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"單核多-cpu-與多核單-cpu\"\u003e單核多 CPU 與多核單 CPU\u003c/h2\u003e\n\u003cp\u003e一台計算機的處理器部分的架構\u003c/p\u003e","title":"CPU 個數、CPU 核心數、CPU 執行緒數"},{"content":"計算機作業系統 概述 進程管理 死鎖 記憶體管理 設備管理 鏈接 參考資料 cyc2018 Mr. opengate ","permalink":"https://intervalrain.github.io/cs/os/","summary":"\u003ch1 id=\"計算機作業系統\"\u003e計算機作業系統\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"/cs/os/intro\"\u003e概述\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/cs/os/processmanagement\"\u003e進程管理\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/cs/os/deadlock\"\u003e死鎖\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/cs/os/memorymanagement\"\u003e記憶體管理\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/cs/os/equipmentmanagement\"\u003e設備管理\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/cs/os/link\"\u003e鏈接\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"參考資料\"\u003e參考資料\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/CyC2018/CS-Notes\"\u003ecyc2018\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://mropengate.blogspot.tw/\"\u003eMr. opengate\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"[作業系統] 計算機作業系統"},{"content":"準備中 ","permalink":"https://intervalrain.github.io/cs/os/deadlock/","summary":"\u003ch1 id=\"準備中\"\u003e準備中\u003c/h1\u003e","title":"[計算機作業系統] 死鎖"},{"content":"準備中 ","permalink":"https://intervalrain.github.io/cs/os/memorymanagement/","summary":"\u003ch1 id=\"準備中\"\u003e準備中\u003c/h1\u003e","title":"[計算機作業系統] 記憶體管理"},{"content":"準備中 ","permalink":"https://intervalrain.github.io/cs/os/equipmentmanagement/","summary":"\u003ch1 id=\"準備中\"\u003e準備中\u003c/h1\u003e","title":"[計算機作業系統] 設備管理"},{"content":"進程管理 進程與執行緒 1. 進程(process) 進程是資源分配的基本單位。 進程控制塊(Process Control Block, PCB)描述進程的基本訊息和運行狀態，所謂的創建進程和撤銷進程，都是指對 PCB 的操作。 2. 執行緒(thread) 執行緒又稱線程，是獨立調度的基本單位。 一個進程可以有多個執行緒，它們共享進程資源。 以瀏覽器(browser)為例，瀏覽器進程有很多執行緒，如 HTTP 請求(request)、事件響應、渲染。執行緒的並行處理(concurrent)使得瀏覽器中點擊一個新的超連結從而發起 HTTP 請求時，瀏覽器還可以響應用戶的其它事件。 3. 區別 擁有資源 進程是資源分配的基本單位，但是執行緒不擁有資源，而是訪問隸屬進程的資源。 調度 執行緒是獨立調度的基本單位，在同一進程中，執行緒的切換不會引起進程切換，從一個進程中的執行緒切換到另一個進程中的執行緒時，才會進行進程的切換。 系統開銷 由於創建或撤銷進程時，系統都要為之分配或回收資源，如硬碟中的記憶體、I/O 設備等，所付出的開銷遠大於創建或撤銷執行緒時的開銷。 同樣的，在進行進程切換時，涉及當前執行進程 CPU 環境的保存及新調度進程 CPU 環境的設置，而執行緒切換只需保存和設置少量暫存器的內容，開銷較小。 通訊 執行緒可以通過直接讀寫同一個進程中的數據進行通訊，但是進程的通訊需要借助 IPC(inter-process communication)。 進程狀態的切換 就緒就態(ready)：等待被調度 執行狀態(running) 阻塞狀態(waiting)：等待資源 只有就緒狀態和執行狀態可以相互轉換，其它的都是單向轉換。就緒狀態的進程通過調度演算法從而獲得 CPU Time，轉為執行狀態；而執行狀態的進程，在分配給它的 CPU Time 片段用完之後就會轉為就緒狀態，等待下一次調度。 阻塞狀態是缺少需要的資源從而由執行狀態轉換而來，但是該資源不包括 CPU Time, 缺少 CPU Time 會從執行狀態轉換為就緒狀態。 進程調度演算法 不同環境的調度演算法目標不同，因此需要針對不同環境來討論調度演算法。 1. 批次處理系統(batch system) 批次處理系統沒有太多的用戶操作，在該系統中，調度演算法目標是保証吞吐量和周轉時間(從提交到終止的時間)。 1.1 先來先服務(first-come first-served, FCFS) 非搶占式的調度，按照請求的順序進行調度。 有利於長作業，不利於短作業，因為短作業必須一直等待前面的長作業執行完畢才能執行，而長作業又需要執行很長時間，造成短作業等待時間過長 1.2 短作業優先(shortest job first, SJF) 非搶占式的調度算法，按估計運行時間最短的順序進行調度。 長作業有可能會永遠做不完，處於一直等待短作業執行完畢的狀態。因為如果一直有短作業到來，那麼長作業永遠得不到調度。 1.3 最短剩餘時間優先(shortest remaining time next, SRTN) 最短作業優先的搶占式版本，按剩餘運行時間的順序進行調度。當一個新的作業到達時，其整個運行時間與當前進程的剩餘時間作比較。如果新的進程需要的時間更少，則夠停當下進程，運行新的進程；否則則讓新的進程進入等待。 2. 交互式系統(time-sharing system) 交互式系統有大量的用戶交互操作，在該系統中調度演算法的目標是快速地進行響應。 2.1 時間片段輪轉(robin round scheduling, RR) 將所有就緒進程按 FCFS 的原則排成一個佇列，每次調度時，把 CPU 時間分配給佇首進程，該進程可以執行一個時間片段，當時間片段用完時，由計時器發出時鐘中斷，調度程序便停止該進程的執行，並將它送往就緒佇尾，同時繼續把 CPU 時間分配給佇首的進程。 時間片段輪轉演算法的效率和時間片段的大小很有關係： 因為進程切換都要保存進程的訊息並且載入新進程的訊息，如果時間片段太小，會導致頻繁地切換進程，導致時間浪費。 而如果時間片段過長，那麼實時性就不能得到保証。 2.2 優先級調度(priority scheduling) 為每個進程分配一個優先級，按優先級進行調度。 為了防止低優先級的進程永遠等不到調度，可以隨著時間的推移增加等待進程的優先級。 2.3 多級反饋佇列(Multilevel Feedback-Queue Scheduling, MLFQ) 一個進程需要執行 100 個時間片段，如果採用時間片段輪轉調度演算法，那麼需要交換 100 次。 多級佇列是為這種需要連續執行多個時間片段的進程考慮，它設置了多個佇列，每個佇列時間片段大小都不同，例如 1, 2, 4, 8,\u0026hellip;。進程在第一個佇列沒執行完，就會被移到下一個佇列。這種方式下，之前的進程只需要交換 7 次。 每個佇列優先權也不同，最上面的優先權最高。因此只有上一個佇列沒有進程在排隊，才能調度當前佇列上的進程。可以將這種調度算法看成是時間片段輪轉調度算法和優先級調度算法的結合。 3. 實時系統(real time system) 實時系統要求一個請求在一個確定時間內得到響應。 分為硬實時和軟實時，前者必須滿足絕對的截止時間，後者可以容忍一定的超時。 進程同步 1. 臨界區 對臨界資源進行訪問的那段代碼稱為臨界區。 為了互斥訪問臨界資源，每個進程在進入臨界區之前，需要先進行檢查。 // entry section // crtical section; // exit section 2. 同步與互斥(synchronization and mutex) 同步(synchronization)：多個進程因為合作產生的直接制約關係，使得進程有一定的先後執行關係。 互斥(mutual exclusion, mutex)：多個進程在同一時刻只有一個進程能進入臨界區。 3. 號誌(Semaphore) 號誌，或稱信號量，是一個整數變數，可以對其執行 down 和 up 操作，也就是常見的 P 和 V 操作。 down：如果號誌量大於 0，執行 -1 操作；如果號誌等於 0，進程睡眠，等待號誌大於 0。 up：對號誌執行 +1 操作，喚醒睡眠的進程讓其完成 down 操作。 down 和 up 操作需要被設計成原語，不可分割，通常的做法是在執行這些操作的時候屏蔽中斷。\n如果號誌的取值只能為 0 或者 1，那麼就成為了互斥(mutex)，0 表示臨界區已經加鎖，1 表示臨界區解鎖。 typedef int semaphore; semaphore mutex = 1; void P1(){ down(\u0026amp;mutex); // critical section up(\u0026amp;mutex); } void P2(){ down(\u0026amp;mutex); // critical section up(\u0026amp;mutex); } 使用號誌實現生產者-消費者問題 問題描述：使用一個緩衝區來保存物品，只有緩沖區沒有滿，生產者才可以放入物品；只有緩衝區不為空，消費者才可以拿走物品。 因為緩衝區屬於臨界資源，因此需要使用一個互斥 mutex 來控制對緩衝區的互斥訪問。 為了同步生產者和消費者的行為，需要記錄緩衝區中物品的數量。數量可以使用號誌來進行統計，這裡需要使用兩個號誌：empty 記錄空緩衝區的數量，full 記錄滿緩衝區的數量。其中，empty 號誌是在生產者進程中使用，當 empty 不為 0 時，生產者才可以放入物品；full 號誌是在消費者進程中使用，當 full 號誌不為 0 時，消費者才可以取走物品。 注意，不能先對緩衝區進行加鎖，再測試號誌。也就是說，不能先執行 down(mutex) 再執行 down(empty)。如果這麼做了，那麼可能會出現這種情況：生產者對緩衝區加鎖後，執行 down(empty) 操作，發現 empty = 0，此時生產者睡眠。消費者不能進入臨界區，因為生產者對緩衝區加鎖了，消費者就無法執行 up(empty) 操作，empty 永遠都為 0，導致生產者永遠等待下，不會釋放鎖，消費者因此也會永遠等待下去。 #define N 100 typedef int semaphore; semaphore mutex = 1; semaphore empty = N; semaphore full = 0; void producer() { while(TRUE) { int item = produce_item(); down(\u0026amp;empty); up(\u0026amp;mutex); // entry section insert_item(item); // critical section up(\u0026amp;mutex); // exit section up(\u0026amp;full); } } void consumer() { while(TRUE) { down(\u0026amp;full); down(\u0026amp;mutex); // entry section int item = remove_item(); // critical section consume_item(item); // exit section up(\u0026amp;mutex); up(\u0026amp;empty); } } 4. 管程 使用號誌機制實現的生產者消費者問題需要客戶端代碼做很多控制，而管程把控制的代碼獨立出來，不僅不容易出錯，也使得客戶端程式碼調用更容易。 C 語言不支持管程，下面的示範程式碼使用了類 Pascal 語言來描述管程。範例程式碼的管程提供 insert() 和 remove() 方法，客戶端程式碼通過調用這兩個方法來解決生產者-消費者問題。 monitor ProducerConsumer integer i condition c; procedure insert(); begin // ... end procedure remove(); begin // ... end end monitor; 管程有一個重要特性：在一個時刻只能有一個進程使用管程。進程在無法繼續執行的時候不能一直占用管程，否則其它進程永遠不能使用管程。 管程引入了條件變量以及相關的操作：wait() 和 signal() 來實現同步操作。對條件變數執行 wait() 操作會導致調用進程阻塞，把管程讓出來給另一個進程持有。signal() 操作用於喚醒被阻塞的進程。 monitor ProducerConsumer condition full, empty; integer count = 0; conditon c; procedure insert(item: integer); begin if count = N then wait(full); insert_item(item); count := count + 1; if count = 1 then signal(empty); end; function remove: integer; begin if count = 0 then wait(empty); remove = remove_item; count := count - 1; if count = N - 1 then signal(full); end; end monitor; precedure producer begin while true do begin item = produce_item; ProducerConsumer.insert(item); end; end; Procedure consumer begin while true do begin item = ProducerConsumer.remove; consume_item(item); end; end; 經典同步問題 1. 哲學家進餐問題 問題描述：五個哲學家圍著一張圓桌，每個哲學家面前放著食物。哲學家的生活有兩種交替活動：吃飯和思考。當一個哲學家吃飯時，需要先拿起自己左右邊的兩根筷子，並且一次只能拿起一根筷子。 若所有哲學家同時拿起左手邊的筷子，那麼所有哲學家都在等待其它哲學家吃完並放下手中的筷子，導致 dead lock。 為了防止 dead lock 的產生，可以設置兩個條件： 必須同時拿起左右兩根筷子； 只有在兩個鄰居都沒有進餐的情況下才允許進餐。 #define N 5 #define LEFT (i + N - 1) % N #define RIGHT (i + 1) % N #define THINKING 0 #define HUNGRY 1 #define EATING 2 typedef int semaphore; int state[N]; // philosopher\u0026#39;s state semaphore mutex = 1; // mutex for critical section semaphore s[N]; // semaphore of philosopher void philosopher(int i){ while(TRUE){ think(i); take_two(i); eat(i); put_two(i); } } void take_two(int i){ down(\u0026amp;mutex); state[i] = HUNGRY; check(i); up(\u0026amp;mutex); down(\u0026amp;s[i]); // eat only if receive notification, or wait } void put_two(int i){ down(\u0026amp;mutex); state[i] = THINKING; check(LEFT); // notify left and right check(RIGHT); up(\u0026amp;mutex); } void eat(int i){ down(\u0026amp;mutex); state[i] = EATING; up(\u0026amp;mutex); } void check(int i ){ if (state[i] == HUNGRY \u0026amp;\u0026amp; state[LEFT] != EATING \u0026amp;\u0026amp; state[EIGHT] != EATING){ state[i] = EATING; up(\u0026amp;s[i]); } } 2. 讀寫問題 問題描述：允許多個進程同時對數據進行讀操作，但是不允許讀和寫以及寫和寫操作同時發生。 一個整數變數 count 記錄在對數據進行讀操作的進程數量，一個互斥量 count_mutex 用於對 count 加鎖，一個互斥量 data_mutex 用於對讀寫的數據加鎖。 typedef int semaphore semaphore count_mutex = 1; semaphore data_mutex = 1; int count = 0; void reader(){ while(TRUE) { down(\u0026amp;count_mutex); count++; if(count == 1) down(\u0026amp;data_mutex); up(\u0026amp;count_mutex); read(); down(\u0026amp;count_mutex); count--; if(count == 0) up(\u0026amp;data_mutex); up(\u0026amp;count_mutex); } } void writer(){ while(TRUE) { down(\u0026amp;data_mutex); write(); up(\u0026amp;data_mutex); } } 以上範例可能會造成作家飢餓(starve)。只有當讀者早於作家進入佇列中，它才會進行等待。 int readcount, writecount; // initial value = 0 semaphore, rmutex, wmutex, readLock, resource; // initial value = 1 void reader() { // Entry section down(\u0026amp;readLock); // reader is trying to enter down(\u0026amp;mutex); // lock to increase readcount readcount++; if (readcount == 1) down(\u0026amp;resource); // if you are the first reader then lock the source up(\u0026amp;rmutex); // release for other readers up(\u0026amp;readLock); // done with trying to access the resource // critical section // \u0026lt;reading is performed\u0026gt; // Exit section down(\u0026amp;mutex); // reserve exit section - avoid race condition with readers readcount--; // indicate you\u0026#39;re leaving if (readcount == 0) // checks if you are last reader leaving up(\u0026amp;resource); // if last, you must release the locked resource up(\u0026amp;rmutex); // release exit section for other readers } void writer() { // Entry section down(\u0026amp;wmutex); // reserve entry section for writers - avoids race conditions writecount++; // report yourself as a writing entering if (writecount == 1) // checks if you\u0026#39;re the first writer down(\u0026amp;readLock); // if you\u0026#39;re first, then you must lock the readers out. Prevent them from trying to enter CS up(\u0026amp;wmutex); // release entry section // critical section down(\u0026amp;resource) // reserve the resource for yourself - prevents other writers from simultaneously editing the shared resource // \u0026lt;writing is performed\u0026gt; up(\u0026amp;resource) // release file // Exit section down(\u0026amp;wmutex); // release exit section writecount--; // indicate you\u0026#39;re leaving if (writecount == 0) // check if you\u0026#39;re the last writer up(\u0026amp;readLock); // if you\u0026#39;re last writer, you must unlock the readers. Allows them to try enter CS for reading up(\u0026amp;wmutex); // release exit section } 我們可以觀察到每個讀者都被強迫上鎖。另一方面，作家無須各自上鎖。一旦第一個作家把 Readlcok 鎖上，則會等到佇列中沒有作家時才會被釋放。 從以上兩個範例我們可以發現，讀者與作家有一方必須飢餓(starve)。以下第三個範例的新增條件，會限制沒有執行緒被允許飢餓(starve)，也就是說，以下操作將會在一段時間之後停止。 int readCount // init to 0; number of readers currently accessing resource // all semaphore initialized to 1 Semaphore resourceAccess; // controls access (read/write) to the resource Semaphore readCountAccess; // for syncing changes to shared variable readCount Semaphore serviceQueue; // FAIRNESS: preserves ordering of requests (signaling must be FIFO) void writer(){ down(\u0026amp;servcieQueue); // wait in line to be services // \u0026lt;enter\u0026gt; down(\u0026amp;resourceAccess); // request exclusive access to resource // \u0026lt;/enter\u0026gt; up(\u0026amp;serviceQueue); // let next in line be serviced // \u0026lt;write\u0026gt; writeResource(); // writing is performed // \u0026lt;/write\u0026gt; // \u0026lt;exit\u0026gt; up(\u0026amp;resourceAccess); // release resource access for next reader/writer // \u0026lt;/exit\u0026gt; } void reader(){ down(\u0026amp;serviceQueue); // wait in line to be serviced down(\u0026amp;readCountAccess); // request exclusive access to readCount // \u0026lt;enter\u0026gt; if (readCount == 0) // if there are no readers already reading down(\u0026amp;resourceAccess); // request resource access for reader (writer blocked) readCount++; // update count of active readers // \u0026lt;/enter\u0026gt; up(\u0026amp;serviceQueue); // let next in line be serviced up(\u0026amp;readCountAccess); // release access to readCount // \u0026lt;read\u0026gt; readResource() // reading is performed // \u0026lt;/read\u0026gt; down(\u0026amp;readCountAccess); // request exclusive access to readCount // \u0026lt;exit\u0026gt; readCount--; // update count of active readers if (readCount == 0) // if there are no readers left up(\u0026amp;resourceAccess); // release resource access for all // \u0026lt;/exit\u0026gt; up(\u0026amp;readCountAccess) // release access to readCount } 進程通訊 進程同步與進程通訊很容易混淆，它們的區別在： 進程同步(process synchronization)：控制多個進程按一定順序執行。 進程通訊(process communication)：進程間傳遞訊息 進程通訊是一種手段，進程同步是一種目的。也可以說，為了能夠達成進程同步的目的，需要讓進程進行通訊，傳遞一些進程同步所需要的訊息。 1. 管道 管道是通用調用 pipe 函數創建的，fd[0] 用於讀，fd[1] 用於寫。 #include \u0026lt;unistd.h\u0026gt; int pipe(int fd[2]); 它具有以下的限制：\n只支持半雙工通訊(單向交替傳輸) 只能在父子進程或者兄弟進程中使用。 2. FIFO 也稱為管道，去除了管道只能在父子進程中的使用限制。 #include \u0026lt;sys/stat.h\u0026gt; int mkfifo(const char *path, mode_t mode); int mkfifoat(int fd, const char *path, mode_t mode); FIFO 常用於客戶-伺服器應用程式中，FIFO 用於匯聚點，在客戶進程與伺服器進程之間傳遞數據。 3. 訊息佇列 相較於 FIFO，訊息佇列有以下優點： 消息佇列可以獨立於讀寫進程存在，從而避免了 FIFO 中同步管道的打開和關閉時可能產生的困難。 避免了 FIFO 的同步阻塞問題，不需要進程自己提供同步方法。 讀進程可以根據訊息類型有選擇性地接收訊息，而不像 FIFO 那樣只能全盤地接受。 4. 訊號量 一個計數器，用於為多個進程提供對共享數據的物件作訪問。 5. 記憶體共享 允許多個進程共享一個給定的記憶體空間。因為數據不需要在進程之間複制，所以這是最快的一種 IPC(Inter-Process Communication)。 需要使用訊號量來同步對共享記憶體的訪問。 多個進程可以將同一個文件映射到它們的地址空間從而實現共享記憶體。另外 XSI 共享記憶體不是使用文件，而是使用記憶體的匿名段。 6. word 套接 與其它通訊機制不同的是，它可以用於不同機器間的進程通訊。 ","permalink":"https://intervalrain.github.io/cs/os/processmanagement/","summary":"\u003ch1 id=\"進程管理\"\u003e進程管理\u003c/h1\u003e\n\u003ch2 id=\"進程與執行緒\"\u003e進程與執行緒\u003c/h2\u003e\n\u003ch3 id=\"1-進程process\"\u003e1. 進程(process)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e進程是資源分配的基本單位。\u003c/li\u003e\n\u003cli\u003e進程控制塊(Process Control Block, PCB)描述進程的基本訊息和運行狀態，所謂的創建進程和撤銷進程，都是指對 PCB 的操作。\n\u003cimg alt=\"PCB\" loading=\"lazy\" src=\"https://www.usna.edu/Users/cs/bilzor/ic411/calendar.php?key=c8bc3778e1e290e4a99e60360fa8c03a340b21ad\u0026type=class\u0026event=6\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"2-執行緒thread\"\u003e2. 執行緒(thread)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e執行緒又稱線程，是獨立調度的基本單位。\u003c/li\u003e\n\u003cli\u003e一個進程可以有多個執行緒，它們共享進程資源。\u003c/li\u003e\n\u003cli\u003e以瀏覽器(browser)為例，瀏覽器進程有很多執行緒，如 HTTP 請求(request)、事件響應、渲染。執行緒的並行處理(concurrent)使得瀏覽器中點擊一個新的超連結從而發起 HTTP 請求時，瀏覽器還可以響應用戶的其它事件。\n\u003cimg alt=\"thread\" loading=\"lazy\" src=\"https://4.bp.blogspot.com/-QyEW1jszBJM/UnUsSC-mVOI/AAAAAAAAABY/Z94NgDcWTb4/s640/process-thread.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"3-區別\"\u003e3. 區別\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e擁有資源\n\u003cul\u003e\n\u003cli\u003e進程是資源分配的基本單位，但是執行緒不擁有資源，而是訪問隸屬進程的資源。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e調度\n\u003cul\u003e\n\u003cli\u003e執行緒是獨立調度的基本單位，在同一進程中，執行緒的切換不會引起進程切換，從一個進程中的執行緒切換到另一個進程中的執行緒時，才會進行進程的切換。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e系統開銷\n\u003cul\u003e\n\u003cli\u003e由於創建或撤銷進程時，系統都要為之分配或回收資源，如硬碟中的記憶體、I/O 設備等，所付出的開銷遠大於創建或撤銷執行緒時的開銷。\u003c/li\u003e\n\u003cli\u003e同樣的，在進行進程切換時，涉及當前執行進程 CPU 環境的保存及新調度進程 CPU 環境的設置，而執行緒切換只需保存和設置少量暫存器的內容，開銷較小。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e通訊\n\u003cul\u003e\n\u003cli\u003e執行緒可以通過直接讀寫同一個進程中的數據進行通訊，但是進程的通訊需要借助 IPC(inter-process communication)。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"進程狀態的切換\"\u003e進程狀態的切換\u003c/h2\u003e\n\u003cp\u003e\u003cimg alt=\"process state\" loading=\"lazy\" src=\"https://jingtao.fun/images/%E8%AF%BB%E4%B9%A6-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/image-20201102105129598.png\"\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e就緒就態(ready)：等待被調度\u003c/li\u003e\n\u003cli\u003e執行狀態(running)\u003c/li\u003e\n\u003cli\u003e阻塞狀態(waiting)：等待資源\n\u003cul\u003e\n\u003cli\u003e只有就緒狀態和執行狀態可以相互轉換，其它的都是單向轉換。就緒狀態的進程通過調度演算法從而獲得 CPU Time，轉為執行狀態；而執行狀態的進程，在分配給它的 CPU Time 片段用完之後就會轉為就緒狀態，等待下一次調度。\u003c/li\u003e\n\u003cli\u003e阻塞狀態是缺少需要的資源從而由執行狀態轉換而來，但是該資源不包括 CPU Time, 缺少 CPU Time 會從執行狀態轉換為就緒狀態。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"進程調度演算法\"\u003e進程調度演算法\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e不同環境的調度演算法目標不同，因此需要針對不同環境來討論調度演算法。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"1-批次處理系統batch-system\"\u003e1. 批次處理系統(batch system)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e批次處理系統沒有太多的用戶操作，在該系統中，調度演算法目標是保証吞吐量和周轉時間(從提交到終止的時間)。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"11-先來先服務first-come-first-served-fcfs\"\u003e1.1 先來先服務(first-come first-served, FCFS)\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e非搶占式的調度，按照請求的順序進行調度。\u003c/li\u003e\n\u003cli\u003e有利於長作業，不利於短作業，因為短作業必須一直等待前面的長作業執行完畢才能執行，而長作業又需要執行很長時間，造成短作業等待時間過長\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"12-短作業優先shortest-job-first-sjf\"\u003e1.2 短作業優先(shortest job first, SJF)\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e非搶占式的調度算法，按估計運行時間最短的順序進行調度。\u003c/li\u003e\n\u003cli\u003e長作業有可能會永遠做不完，處於一直等待短作業執行完畢的狀態。因為如果一直有短作業到來，那麼長作業永遠得不到調度。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"13-最短剩餘時間優先shortest-remaining-time-next-srtn\"\u003e1.3 最短剩餘時間優先(shortest remaining time next, SRTN)\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e最短作業優先的搶占式版本，按剩餘運行時間的順序進行調度。當一個新的作業到達時，其整個運行時間與當前進程的剩餘時間作比較。如果新的進程需要的時間更少，則夠停當下進程，運行新的進程；否則則讓新的進程進入等待。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"2-交互式系統time-sharing-system\"\u003e2. 交互式系統(time-sharing system)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e交互式系統有大量的用戶交互操作，在該系統中調度演算法的目標是快速地進行響應。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"21-時間片段輪轉robin-round-scheduling-rr\"\u003e2.1 時間片段輪轉(robin round scheduling, RR)\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e將所有就緒進程按 FCFS 的原則排成一個佇列，每次調度時，把 CPU 時間分配給佇首進程，該進程可以執行一個時間片段，當時間片段用完時，由計時器發出時鐘中斷，調度程序便停止該進程的執行，並將它送往就緒佇尾，同時繼續把 CPU 時間分配給佇首的進程。\u003c/li\u003e\n\u003cli\u003e時間片段輪轉演算法的效率和時間片段的大小很有關係：\n\u003cul\u003e\n\u003cli\u003e因為進程切換都要保存進程的訊息並且載入新進程的訊息，如果時間片段太小，會導致頻繁地切換進程，導致時間浪費。\u003c/li\u003e\n\u003cli\u003e而如果時間片段過長，那麼實時性就不能得到保証。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"22-優先級調度priority-scheduling\"\u003e2.2 優先級調度(priority scheduling)\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e為每個進程分配一個優先級，按優先級進行調度。\u003c/li\u003e\n\u003cli\u003e為了防止低優先級的進程永遠等不到調度，可以隨著時間的推移增加等待進程的優先級。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"23-多級反饋佇列multilevel-feedback-queue-scheduling-mlfq\"\u003e2.3 多級反饋佇列(Multilevel Feedback-Queue Scheduling, MLFQ)\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e一個進程需要執行 100 個時間片段，如果採用時間片段輪轉調度演算法，那麼需要交換 100 次。\u003c/li\u003e\n\u003cli\u003e多級佇列是為這種需要連續執行多個時間片段的進程考慮，它設置了多個佇列，每個佇列時間片段大小都不同，例如 1, 2, 4, 8,\u0026hellip;。進程在第一個佇列沒執行完，就會被移到下一個佇列。這種方式下，之前的進程只需要交換 7 次。\u003c/li\u003e\n\u003cli\u003e每個佇列優先權也不同，最上面的優先權最高。因此只有上一個佇列沒有進程在排隊，才能調度當前佇列上的進程。可以將這種調度算法看成是時間片段輪轉調度算法和優先級調度算法的結合。\n\u003cimg alt=\"MLFQ\" loading=\"lazy\" src=\"https://i.pinimg.com/736x/9e/56/96/9e5696a52f10453be9717470b28a44c7--round-robin-robins.jpg\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"3-實時系統real-time-system\"\u003e3. 實時系統(real time system)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e實時系統要求一個請求在一個確定時間內得到響應。\u003c/li\u003e\n\u003cli\u003e分為硬實時和軟實時，前者必須滿足絕對的截止時間，後者可以容忍一定的超時。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"進程同步\"\u003e進程同步\u003c/h2\u003e\n\u003ch3 id=\"1-臨界區\"\u003e1. 臨界區\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e對臨界資源進行訪問的那段代碼稱為臨界區。\u003c/li\u003e\n\u003cli\u003e為了互斥訪問臨界資源，每個進程在進入臨界區之前，需要先進行檢查。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// entry section\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// crtical section;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// exit section\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"2-同步與互斥synchronization-and-mutex\"\u003e2. 同步與互斥(synchronization and mutex)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e同步(synchronization)：多個進程因為合作產生的直接制約關係，使得進程有一定的先後執行關係。\u003c/li\u003e\n\u003cli\u003e互斥(mutual exclusion, mutex)：多個進程在同一時刻只有一個進程能進入臨界區。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"3-號誌semaphore\"\u003e3. 號誌(Semaphore)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e號誌，或稱信號量，是一個整數變數，可以對其執行 down 和 up 操作，也就是常見的 P 和 V 操作。\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003edown\u003c/strong\u003e：如果號誌量大於 0，執行 -1 操作；如果號誌等於 0，進程睡眠，等待號誌大於 0。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eup\u003c/strong\u003e：對號誌執行 +1 操作，喚醒睡眠的進程讓其完成 down 操作。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003edown 和 up 操作需要被設計成原語，不可分割，通常的做法是在執行這些操作的時候屏蔽中斷。\u003cbr\u003e\n如果號誌的取值只能為 0 或者 1，那麼就成為了互斥(mutex)，0 表示臨界區已經加鎖，1 表示臨界區解鎖。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003etypedef\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e semaphore;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003esemaphore mutex \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eP1\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    down(\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003emutex);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// critical section\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    up(\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003emutex);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eP2\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    down(\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003emutex);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// critical section\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    up(\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003emutex);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003cp\u003e\u003cstrong\u003e使用號誌實現生產者-消費者問題\u003c/strong\u003e\n\u003cimg alt=\"producer-consumer-problem\" loading=\"lazy\" src=\"https://th.bing.com/th/id/R.dbbe36e7d63143d6defdab98ece8fff8?rik=J8NwPrcsGHP7jw\u0026pid=ImgRaw\u0026r=0\"\u003e\u003c/p\u003e","title":"[計算機作業系統] 進程管理"},{"content":"作業系統 簡介 電腦系統主要可分成四個部分，或分成硬體(hardware)、軟體(software)、數據(data)\n硬體(hardware)：為系統提供基本的計算資源。 中央處理器(central processing unit, CPU) 記憶體(memory) I/O 裝置 應用程式(Application programs)：定義資源如何用來解決使用者的計算問題。 使用者(users) 作業系統(Operating system, OS)： 作業系統(Operating system, OS) 是管理電腦硬體與軟體資源的電腦程式，同時也是電腦系統的核心與基石。\nOS 最主要的兩個功能是：\n資源分配：根據需求調配資源分配率(resource utilization)與效能(performance) 監控使用者程式的執行，避免不正常的運作造成對系統的危害。 一個標準的 PC 作業系統應該提供以下的功能：\n行程管理(Processing management) 記憶體管理(Memory management) 檔案系統(File system) 網路通訊(Networking) 安全機制(Security) 使用者介面(User interface) 驅動程式(Device drivers) PC 基本特徵 1. 並行計算(Concurrent computing) Concurrent computing 是指宏觀上在一段時間內能同時運行多個進程，微觀上是交替發生的；而平行計算(parallel computing) 則指同一個時間內能運行多個指令。 平行計算需要硬體支持，如多線程(multi-thread)、多核處理器(multi-core processor)或者分散式計算機系統(distributed OS)。 作業系統通過引入進程(process)與線程(thread)，使程式能夠並行運作。 2. 分享(Sharing) 共享是指系統中的資源可以被多個並行進程共同使用。 有兩種共享方式：互斥共享(mutual exclusion)與同時訪問(time sharing)。 互斥共享的資源稱為臨界資源(critical resources)，例如印表機等，在同一時間內只允許一個進程訪問，需要用同步機制來實現互斥訪問。 3. 虛擬(Virtual) 虛擬技術把一個物理實體轉換為多個邏輯實體。 主要有兩種虛擬技術：分時技術(time sharing)、空間分享技術。 多個進程能在同一個處理器上並行處理使用了分時技術，讓每個進程輪流占用處理器，每次只執行一小個時間片段並快速切換。 虛擬記憶體使用了空間分享技術，它將物理記憶體抽象化為地址空間，每個進程都有各自的地址空間。地址空間的頁被映射到物理記憶體中，地址空間的頁並不需要全部在物理記憶體中，當使用到一個沒有物理記憶體的頁時，執行頁面置換演算法，將該頁置換到記憶體中。 4. 異步(Asynchronous) 異步指進程不是一次性執行完畢，而是走走停停，以不可知的速度向前推進。 基本功能 1. 進程管理(Process management) 進程管理、進程同步、進程通信、死鎖處理、處理調度等。 2. 記憶體管理(Memory management) 記憶體分配、地址映射、記憶體保護與共享、虛擬記憶體等。 3. 文件管理(File management) 文件儲存空間的管理、目錄管理、文件讀寫管理和保護等。 4. 設備管理(Equipment management) 完成用戶的 I/O 請求，方便用戶使用各種設備，並提高設備的利用率。 主要包含緩衝管理、設備分配、設備處理、虛擬設備等。 系統調用 如果一個進程在用戶模式(user mode)需要使用內核模式(kernel mode)的功能，就進行系統調用從而陷入內核，由作業系統代為完成。 Linux 的系統調用主要有以下這些： Task Commands 進程控制 fork(); exit(); wait(); 進程通信 pipe(); shmget(); mmap(); 文件操作 open(); read(); write(); 設備操作 ioctl(); read(); write(); 訊息維護 getpid(); alarm(); sleep(); 安全 chmod(); umask(); chown(); 內核與微內核 1. 內核(kernel) 內核是將作業系統功能作為一個緊密結合的整體放到內核。 由於各模塊共享訊息，因此有很高的性能。 2. 微內核(microkernel) 由於作業系統不斷複雜化，因此將一部分作業系統功能移出內核，從而降低內核的複雜性。移出的部分根據分層的原則劃分成若干服務，相互獨立。 在微內核結構下，作業系統被劃分成小的、定義良好的模塊，只有微內核這一個模塊運行在內核模式，其餘模塊運行時在用戶模式。 因為脫試頻繁地在用戶模式與內核模式間進行切換，所以有一定的性能損失。 中斷分類 1. 中斷(interrupt) 由 CPU 執行指令以外的事件引起，如 I/O 完成中斷，表示設備輸入/輸出處理已經完成，處理器能夠發送下一個輸入/輸出請求。此外還有時鐘中斷、控制台中斷等。 2. 異常(exception) 由 CPU 執行指令的內部事件引起，如非法操作碼、地址越界、算術溢位(overflow)等。 3. 陷入(trap) 在用戶程序中使用系統調用。 常見系統類型分類 1. 批次處理系統(Batch Processing System) 一次性的處理已經蒐集的資料。 適合處理週期性的大筆資料。 如大型機(Mainframe)。 2. 多行程系統(Muliprogramming System) 系統中存在多組行程同時(concurrent)執行，避免CPU閒置，提升CPU利用度。\n**注意，不是平行運算(parallel computing) Multiprogramming Degree：指系統內所存在等待執行的行程(proess)數目。 Multiprogramming Degree 愈高，則 CPU 使用度可能愈高，但若產生 Thrashing，可能會使 CPU 效能降低。 振盪(Thrashing)：當 CPU 效能降低時，系統會想引入更多的 process 讓 CPU 盡可能地工作。但當存有太多 process 時，大部分的工作會花費在 Page Fault 造成的 Page Replacement，致使 CPU 效率下降，最後造成 CPU 的效能越來越低。 降低 Multiprogramming Degree。 利用 Page Fault Frequencry (Ratio) 控制來防止 Thrashing。 利用 Working Set Model 預估各 Process 在不同執行時期所需的頁框數，並依此提供足夠的頁框數，以防止 Thrashing。 3. 分時系統(Time Sharing System) 或稱多工系統(Multi-Tasking System)。 多行程系統的一種，OS 透過資源分享，使得每個使用者都認為有一套專屬的系統存在，提升反應時間(Response Time)。 常見配置： 行程排程使用輪詢調度(Robin Round Scheduling, RR Scheduling)。 記憶體空間所有使用者共享。 使用虛擬記憶體技術。 I/O 裝置透過 4. 多核系統與平行系統(Multiprocessor System and Parallel System) 具有一個以上的CPU核心單元組，各核心之間共享記憶體、匯流排等資源，將工作同時分配給多個 CPU 處理。 執行緒數是邏輯上模擬出來的 CPU 核心數，用於多工處理的需要。 多核處理器又可分為： Symmetric Multiprocessing (SMP)：對稱式多處理器，每一個處理器具有相同的功能，可靠度較高，強調負載平衡。 Asymmetric Multiprocessing (ASMP)：非對稱式多處理器，主僕架構。 補充：CPU個數、CPU核心數、CPU執行緒數 5. 分散式系統(Distributed System) 整合各地不同的電腦，以網路連線的方式，將工作分派給不同的電腦執行以提高效率。 需滿足兩個條件： 硬體上每台電腦都是自主的 軟體上用戶將整個系統看作是一台電腦。 一般分為兩類，分別是： 主僕式系(Client-Server System) P2P系統(Peer-to-peer) 好處： 資源共享(Resource Sharing) 加快計算速度(Speed Up) 可靠性(Reliability) 通訊需求(Communication Need) 6. 即時系統(Real Time System) 定義嚴謹的固定時間限制，電腦在處理工作時必須在這個定義的時間內完成，否則工作就算失效。 依類型可分為兩類： 硬性即時系統(Hard Real Time System) 軟性即時系統(Soft Real Time System) 7. 叢集系統(Clustered System) 叢叢集系統共享儲存裝置，集合許多 CPU 並且由網路連線緊密地連結以完成工作。叢集系統主要是利用多台獨立的電腦系統或是工作站來共同完成大型數值的平行計算。 通常較不依賴記憶體。 ","permalink":"https://intervalrain.github.io/cs/os/intro/","summary":"\u003ch1 id=\"作業系統\"\u003e作業系統\u003c/h1\u003e\n\u003ch2 id=\"簡介\"\u003e簡介\u003c/h2\u003e\n\u003cp\u003e\u003cimg alt=\"computer os\" loading=\"lazy\" src=\"https://2.bp.blogspot.com/-gzomOqKpa74/VLPwd72Q8KI/AAAAAAAAk-E/mnLR8NAJfLY/s640/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7%2B2014-12-12%2B%E4%B8%8B%E5%8D%882.48.33-17.png\"\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e電腦系統主要可分成四個部分，或分成\u003cstrong\u003e硬體(hardware)\u003c/strong\u003e、\u003cstrong\u003e軟體(software)\u003c/strong\u003e、\u003cstrong\u003e數據(data)\u003c/strong\u003e\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e硬體(hardware)：為系統提供基本的計算資源。\n\u003col\u003e\n\u003cli\u003e中央處理器(central processing unit, CPU)\u003c/li\u003e\n\u003cli\u003e記憶體(memory)\u003c/li\u003e\n\u003cli\u003eI/O 裝置\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003e應用程式(Application programs)：定義資源如何用來解決使用者的計算問題。\u003c/li\u003e\n\u003cli\u003e使用者(users)\u003c/li\u003e\n\u003cli\u003e作業系統(Operating system, OS)：\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e作業系統(Operating system, OS) 是管理電腦硬體與軟體資源的電腦程式，同時也是電腦系統的核心與基石。\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eOS 最主要的兩個功能是：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e資源分配：根據需求調配資源分配率(resource utilization)與效能(performance)\u003c/li\u003e\n\u003cli\u003e監控使用者程式的執行，避免不正常的運作造成對系統的危害。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e一個標準的 PC 作業系統應該提供以下的功能：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e行程管理(Processing management)\u003c/li\u003e\n\u003cli\u003e記憶體管理(Memory management)\u003c/li\u003e\n\u003cli\u003e檔案系統(File system)\u003c/li\u003e\n\u003cli\u003e網路通訊(Networking)\u003c/li\u003e\n\u003cli\u003e安全機制(Security)\u003c/li\u003e\n\u003cli\u003e使用者介面(User interface)\u003c/li\u003e\n\u003cli\u003e驅動程式(Device drivers)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"pc-基本特徵\"\u003ePC 基本特徵\u003c/h2\u003e\n\u003ch3 id=\"1-並行計算concurrent-computing\"\u003e1. 並行計算(Concurrent computing)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eConcurrent computing 是指宏觀上在一段時間內能同時運行多個進程，微觀上是交替發生的；而\u003cstrong\u003e平行計算(parallel computing)\u003c/strong\u003e 則指同一個時間內能運行多個指令。\u003c/li\u003e\n\u003cli\u003e平行計算需要硬體支持，如多線程(multi-thread)、多核處理器(multi-core processor)或者分散式計算機系統(distributed OS)。\u003c/li\u003e\n\u003cli\u003e作業系統通過引入進程(process)與線程(thread)，使程式能夠並行運作。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"2-分享sharing\"\u003e2. 分享(Sharing)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e共享是指系統中的資源可以被多個並行進程共同使用。\u003c/li\u003e\n\u003cli\u003e有兩種共享方式：互斥共享(mutual exclusion)與同時訪問(time sharing)。\u003c/li\u003e\n\u003cli\u003e互斥共享的資源稱為臨界資源(critical resources)，例如印表機等，在同一時間內只允許一個進程訪問，需要用同步機制來實現互斥訪問。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"3-虛擬virtual\"\u003e3. 虛擬(Virtual)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e虛擬技術把一個物理實體轉換為多個邏輯實體。\u003c/li\u003e\n\u003cli\u003e主要有兩種虛擬技術：分時技術(time sharing)、空間分享技術。\u003c/li\u003e\n\u003cli\u003e多個進程能在同一個處理器上並行處理使用了分時技術，讓每個進程輪流占用處理器，每次只執行一小個時間片段並快速切換。\u003c/li\u003e\n\u003cli\u003e虛擬記憶體使用了空間分享技術，它將物理記憶體抽象化為地址空間，每個進程都有各自的地址空間。地址空間的頁被映射到物理記憶體中，地址空間的頁並不需要全部在物理記憶體中，當使用到一個沒有物理記憶體的頁時，執行頁面置換演算法，將該頁置換到記憶體中。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"4-異步asynchronous\"\u003e4. 異步(Asynchronous)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e異步指進程不是一次性執行完畢，而是走走停停，以不可知的速度向前推進。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"基本功能\"\u003e基本功能\u003c/h2\u003e\n\u003ch3 id=\"1-進程管理process-management\"\u003e1. 進程管理(Process management)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e進程管理、進程同步、進程通信、死鎖處理、處理調度等。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"2-記憶體管理memory-management\"\u003e2. 記憶體管理(Memory management)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e記憶體分配、地址映射、記憶體保護與共享、虛擬記憶體等。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"3-文件管理file-management\"\u003e3. 文件管理(File management)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e文件儲存空間的管理、目錄管理、文件讀寫管理和保護等。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"4-設備管理equipment-management\"\u003e4. 設備管理(Equipment management)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e完成用戶的 I/O 請求，方便用戶使用各種設備，並提高設備的利用率。\u003c/li\u003e\n\u003cli\u003e主要包含緩衝管理、設備分配、設備處理、虛擬設備等。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"系統調用\"\u003e系統調用\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e如果一個進程在用戶模式(user mode)需要使用內核模式(kernel mode)的功能，就進行系統調用從而陷入內核，由作業系統代為完成。\n\u003cimg alt=\"interface\" loading=\"lazy\" src=\"https://camo.githubusercontent.com/e6e9338fcb2f8c849b5ed9798862d27937d80c94721948dd87c5dec1e739c2c6/68747470733a2f2f63732d6e6f7465732d313235363130393739362e636f732e61702d6775616e677a686f752e6d7971636c6f75642e636f6d2f74475056302e706e67\"\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eLinux 的系統調用主要有以下這些：\u003c/th\u003e\n          \u003cth\u003e\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e\u003cstrong\u003eTask\u003c/strong\u003e\u003c/td\u003e\n          \u003ctd\u003e\u003cstrong\u003eCommands\u003c/strong\u003e\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e進程控制\u003c/td\u003e\n          \u003ctd\u003efork(); exit(); wait();\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e進程通信\u003c/td\u003e\n          \u003ctd\u003epipe(); shmget(); mmap();\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e文件操作\u003c/td\u003e\n          \u003ctd\u003eopen(); read(); write();\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e設備操作\u003c/td\u003e\n          \u003ctd\u003eioctl(); read(); write();\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e訊息維護\u003c/td\u003e\n          \u003ctd\u003egetpid(); alarm(); sleep();\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e安全\u003c/td\u003e\n          \u003ctd\u003echmod(); umask(); chown();\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"內核與微內核\"\u003e內核與微內核\u003c/h2\u003e\n\u003cp\u003e\u003cimg alt=\"ring\" loading=\"lazy\" src=\"https://th.bing.com/th/id/R.859db91aeb8ec96109d43097bd911459?rik=lA7Jg6HrEIuyFA\u0026riu=http%3a%2f%2fresources.infosecinstitute.com%2fwp-content%2fuploads%2fKernelDebugging-03012013.jpg\u0026ehk=XDpXoi61cf6s%2fX4BOz3ghmFHsUIdfRiN8q%2f82rDn8%2fM%3d\u0026risl=\u0026pid=ImgRaw\u0026r=0\"\u003e\u003c/p\u003e","title":"[計算機作業系統] 概述"},{"content":"準備中 ","permalink":"https://intervalrain.github.io/cs/os/link/","summary":"\u003ch1 id=\"準備中\"\u003e準備中\u003c/h1\u003e","title":"[計算機作業系統] 鏈接"},{"content":"什麼是 AI \u0026amp; ML \u0026amp; DL 人工智慧是我們想要達成的目標，而機器學習是想要達成目標的手段，希望機器通過學習的方式，變得跟人一樣聰明。 而深度學習就是機器學習的其中一種方法。\n人工智慧(Aritificial Intelligence, AI) → 目標 機器學習(Machine Learning, ML) → 手段 深度學習(Deep Learning, DL) … 在機器學習出現之前 生物的行為取決於兩件事，一個是後天學習的結果，一個是天生的本能。\nHand-crafted rules: 人類為機器設定好的天生本能 僵化，無法超越創造者 需要大量人力，不適合小企業 機器學習 寫程式讓機器可以學習 → 尋找關聯資料的函式 舉例：語音辨識、影像辨識、Alpha Go、對話機器人 框架(Framework) 設定一定量的函數 餵入數據 評估函數的好壞 找出最好的函數\n\\(\\begin{array}{rc} \\text{step1}\u0026amp;\\boxed{\\text{Define a set of function}}\\\\ \u0026amp;\\downarrow\\\\ \\text{step2}\u0026amp;\\boxed{\\text{Evaluate goodness of function}}\\\\ \u0026amp;\\downarrow\\\\ \\text{step3}\u0026amp;\\boxed{\\text{Pick the best function}}\\end{array}\\) 告訴機器 input 和正確的 output 這就叫作 supervised learning。 機器學習相關的技術 任務(Task) 迴歸(Regression) Regression 指的是函數的輸出為 scalar(數值)，如 PM2.5。 分類(Classification) Classification 指的是函數的輸出為 東西的類別。 當分類為 Yes or No，則為 Binary Classificatino，如垃圾郵件。 當分類是多個選項的，則為 Multi-Classification，如新聞分類。 結構性學習(Structured Learning) 讓機器的輸出具有結構性。 如語音辨識，聲音訊號為輸入，句子為輸出。 如影像辨識，圖片是輸入，人名是輸出。 方法(Method) 選不同的 function set 就是選不同的 model。\nModel Linear Model Non-linear model Deep learning SVM, decision tree, K-NN \u0026hellip; 場景(Scenario) 監督式學習 Supervised Learning 需要 inputs 與對應的 outputs(label) 大量的資料需求 半監督式學習 Semi-supervised Learning 同時有 Labelled data 與 Unlabelled data 可減少資料的需求量。 遷移學習 Transfer Leanring 有大量的 Labelled data 與 Unlabelled data 其中包含有關聯的與無關聯的。 無監督學習 Unsuperviesd Learning 只有大量的 inputs 而沒有 outputs 或大量的 outputs 而沒有 inputs 強化學習 沒有告訴機器正確的答案，機器有的只是一個分數，就是它做得好或不好。 Alpha Go 是 Supervised learning + Reinforcement learning (先人工餵棋譜，再讓機器人互相下棋) 利用 reinforcement learning 來訓練聊天機器人，把機器人發到客服電話，讓機器人自己應對客人，若客人的反應勃然大怒，則機器會學到剛才應對的方式是錯的，讓機器自己去檢討哪個步驟做的不好。\n我們為何要學機器學習? 好的 AI 需要好的 AI 訓練師，AI 訓練師討選合適的 model、loss function，不同 model、loss function 適合解決不同的問題。 有些模型的最佳化比較困難，例如深度學習，此時可能就需要有經驗的 AI 訓練師來處理。\n","permalink":"https://intervalrain.github.io/ml/lec0/","summary":"\u003ch1 id=\"什麼是-ai--ml--dl\"\u003e什麼是 AI \u0026amp; ML \u0026amp; DL\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e人工智慧是我們想要達成的目標，而機器學習是想要達成目標的手段，希望機器通過學習的方式，變得跟人一樣聰明。\n而深度學習就是機器學習的其中一種方法。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e人工智慧(Aritificial Intelligence, AI) → 目標\n\u003cul\u003e\n\u003cli\u003e機器學習(Machine Learning, ML) → 手段\n\u003cul\u003e\n\u003cli\u003e深度學習(Deep Learning, DL)\u003c/li\u003e\n\u003cli\u003e…\n\u003cimg alt=\"history\" loading=\"lazy\" src=\"/ML/L0/history.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"在機器學習出現之前\"\u003e在機器學習出現之前\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003e生物的行為取決於兩件事，一個是後天學習的結果，一個是天生的本能。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003eHand-crafted rules: 人類為機器設定好的天生本能\n\u003cul\u003e\n\u003cli\u003e僵化，無法超越創造者\u003c/li\u003e\n\u003cli\u003e需要大量人力，不適合小企業\n\u003cimg alt=\"AIinsde\" loading=\"lazy\" src=\"/ML/L0/AIinside.jpeg\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"機器學習\"\u003e機器學習\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e寫程式讓機器可以學習 → 尋找關聯資料的函式\n\u003cul\u003e\n\u003cli\u003e舉例：語音辨識、影像辨識、Alpha Go、對話機器人\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e框架(Framework)\n\u003cul\u003e\n\u003cli\u003e設定一定量的函數\u003c/li\u003e\n\u003cli\u003e餵入數據\u003c/li\u003e\n\u003cli\u003e評估函數的好壞\u003c/li\u003e\n\u003cli\u003e找出最好的函數\u003cbr\u003e\n\\(\\begin{array}{rc}\n\\text{step1}\u0026amp;\\boxed{\\text{Define a set of function}}\\\\\n\u0026amp;\\downarrow\\\\\n\\text{step2}\u0026amp;\\boxed{\\text{Evaluate goodness of function}}\\\\\n\u0026amp;\\downarrow\\\\\n\\text{step3}\u0026amp;\\boxed{\\text{Pick the best function}}\\end{array}\\)\n\u003cimg alt=\"frameword\" loading=\"lazy\" src=\"/ML/L0/framework.png\"\u003e\n\u003cul\u003e\n\u003cli\u003e告訴機器 input 和正確的 output 這就叫作 \u003cstrong\u003esupervised learning\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"機器學習相關的技術\"\u003e機器學習相關的技術\u003c/h1\u003e\n\u003cp\u003e\u003cimg alt=\"terminology\" loading=\"lazy\" src=\"/ML/L0/terminology.png\"\u003e\u003c/p\u003e\n\u003ch2 id=\"任務task\"\u003e任務(Task)\u003c/h2\u003e\n\u003ch3 id=\"迴歸regression\"\u003e迴歸(Regression)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eRegression 指的是函數的輸出為 \u003cstrong\u003escalar(數值)\u003c/strong\u003e，如 PM2.5。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"分類classification\"\u003e分類(Classification)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eClassification 指的是函數的輸出為 \u003cstrong\u003e東西的類別\u003c/strong\u003e。\n\u003cul\u003e\n\u003cli\u003e當分類為 Yes or No，則為 Binary Classificatino，如垃圾郵件。\u003c/li\u003e\n\u003cli\u003e當分類是多個選項的，則為 Multi-Classification，如新聞分類。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"結構性學習structured-learning\"\u003e結構性學習(Structured Learning)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e讓機器的輸出具有結構性。\n\u003cul\u003e\n\u003cli\u003e如語音辨識，聲音訊號為輸入，句子為輸出。\u003c/li\u003e\n\u003cli\u003e如影像辨識，圖片是輸入，人名是輸出。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"方法method\"\u003e方法(Method)\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003e選不同的 function set 就是選不同的 model。\u003c/p\u003e","title":"[ML] introduction"},{"content":"陣雨：\n在每日一題 Leetcode 的日常中，看到 LinkedIn 上來自 LinkedIn 自己工程師的建議，一語驚醒夢中人，於是記錄下來，警醒自己：\n作者 Nikita Kothari Software Engineer @ LinkedIn The University of Texas at Dallas 正文 Nikita:\nRecently I interviewed and got 7 offers within two months of preparation and accepted Senior Software Engineer position at LinkedIn. I want to share some useful resources which might help you to land your dream job.\n最近，我在兩個月內準備了面試並錄取了七個職位，且最終且接收了 LinkedIn 的高級軟體工程師一職。我想要分享一些有用的資源，這些資源可能可以幫助你找到你夢寐以求的工作。\n1. 自信 Confidence is the key. Don’t jump into the interview process when you are not fully prepared.\n信心是關鍵。當你還沒有做好充分準備前，不要貿然的進入面試階段。\n2. 刷題 Rather than doing 1000s of leetcode (https://lnkd.in/gyRnXuHQ), do few examples and understand the patterns which will help you to crack any problem. Also, think about all edge cases and test cases.\n比起刷 1000 題 leetcode，做幾個經典例題並瞭解其模式(pattern)，這將會有助於你破解任何問題。同時，請充分考慮邊際條件(edge cases)與測資(test cases)。\n3. 複雜度 At the end, spend some time thinking about time and space complexity. It gets tricky with graph and tree problems.\n在解題的最後，花點時間思考時間複雜度與空間複雜度。特別在棘手的圖形與樹問題。\n4. 應用 Think about the possible use cases of the given problem, for example, flood fill is nothing but the paint app and try to explain that to the interviewer.\n思考題目可能應用的實況，舉例來說，flood-fill 只不過是繪畫應用程式，並嘗試向面試官解釋。\n5. 專案 Create a Google doc and list down all recent/interesting project you worked on. Start with design, implementation, testing, monitoring, your contribution and ask yourself what questions a person can ask if he/she doesn’t have any idea about the project. This will also help you during the system design interview.\n創建一個 Google 文件並列出所有你最近正在著手或有趣的專案。從設計、實作、測試、監控、你的貢獻開始，並問自己，如果一個人對此專案毫無概念時，他/她可以問什麼問題。\n6. STAR Also, create a Google doc for behavior questions (https://lnkd.in/gPp8iE_x) and write down what was the situation, what was your task, what action you took and what was the result. Read more about the STAR approach. Companies like Amazon, pays more attention to these questions so be well-prepared.\n此外，為行為問題創建一個 Google 文件，並寫下情況，你的任務是什麼，你採取了什麼行動，結果是什麼。閱讀更多有關 STAR 的方法。像亞馬遜這類的公司，更在乎這類的問題，所以需要做好充分準備。 註：情境/任務/動作/結果 Situation/Task/Action/Result\n7. 模擬面試 Do practice interviews with your friends and peers, and take feedback seriously.\n與你的朋友、同儕練習面試，並且認真的對待他們的回饋。\n8. 記錄面試 At the end of an onsite interview, make a list of what went well and where you need to put more attention and work on it.\n在現場面試後，列出哪些方面進展順利，哪些需要投入更多的注意力與力氣。\n9. 連結經驗 While practicing system design, try to relate things with your current or past experience. Like how server side configuration has been set up or how APIs are implemented in your current project. This way you will remember things easily.\n在練習系統設計時，試著與你現在或以前的經驗聯繫起來。例如伺服器端配置的方法、API 在你當前的專案中是怎麼被實現的。這些方法會讓你更容易記得這些事。\n10. 參考 Before your onsite interview, visit Glassdoor (https://lnkd.in/gwKXeYQA) and read about other’s experiences. That will give you an idea on what to expect.\n在現場面試前，參考並閱讀其他人的經驗，這將給你多一點面試時的想法。\n11. 保持正向 Lastly, don’t get dejected by rejections. Sometimes it looks difficult, but with enough practice and hard work, you will get your dream job.\n最後，不要因為被拒絕而沮喪。有時候，看起很困難的事情，在經過足夠的練習與努力後，都可以迎刃而解的。\nAll the very best, and feel free to reach out to me if you need any help on anything.\n其他資源 Grokking the Object Oriented Design Interview 系統設計入門 (https://lnkd.in/g6jQaM6e) 軟體結構 (https://lnkd.in/gM8WgW3S) 系統設計 (https://lnkd.in/gYF5saRb)\n#work #softwareengineer #interviewskills #design #job ","permalink":"https://intervalrain.github.io/life/nikita_kothari/","summary":"\u003cp\u003e陣雨：\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e在每日一題 Leetcode 的日常中，看到 LinkedIn 上來自 LinkedIn 自己工程師的建議，一語驚醒夢中人，於是記錄下來，警醒自己：\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch1 id=\"作者\"\u003e作者\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.linkedin.com/in/nikita-kothari3/\"\u003eNikita Kothari\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eSoftware Engineer @ LinkedIn\u003c/li\u003e\n\u003cli\u003eThe University of Texas at Dallas\n\u003cimg alt=\"nikiti\" loading=\"lazy\" src=\"/Life/nikita.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"正文httpswwwlinkedincomfeedupdateurnliactivity6940911414836416512\"\u003e\u003ca href=\"https://www.linkedin.com/feed/update/urn:li:activity:6940911414836416512/\"\u003e正文\u003c/a\u003e\u003c/h1\u003e\n\u003cp\u003eNikita:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eRecently I interviewed and got 7 offers within two months of preparation and accepted Senior Software Engineer position at LinkedIn. I want to share some useful resources which might help you to land your dream job.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e最近，我在兩個月內準備了面試並錄取了七個職位，且最終且接收了 LinkedIn 的高級軟體工程師一職。我想要分享一些有用的資源，這些資源可能可以幫助你找到你夢寐以求的工作。\u003c/p\u003e\n\u003ch2 id=\"1-自信\"\u003e1. 自信\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003eConfidence is the key. Don’t jump into the interview process when you are not fully prepared.\u003c/p\u003e","title":"[Life] Some change of road to SWE"},{"content":"Deque 不同於 stack 與 queues， deques 兩個端點都支援擴展。 基於 doubly linked list，deques 有幾項額外的特徵： 支援隨機存取 插入元素時間 \\(O(1)\\) 函式 1. push_front() 2. push_back() 3. front() 4. back() 5. begin() 6. end() 7. insert() 8. erase() 9. pop_front() 10. pop_back() 11. empty() 12. clear() 13. random_access() 內部運作原理 上述所有函數和操作都在雙鏈表中以O（1）時間執行，但這些清單不能隨機訪問任何元素。C++中的deque也是如此。這個 O（1） 在 deque 中可以使用圓形陣列來實現。使用循環陣列，可以在O（1）時間內實現從陣列的正面和背面插入和刪除等操作以及元素的隨機訪問。但這帶來了一個問題。當 deque 增長到超出容量時，使用者將需要將數位大小加倍，並將所有數據複製到陣列中。此外，如果數據是某個使用者定義的對象，那麼加倍和複製數據的成本就會變得非常昂貴。 這是一個基本的解決方案。Deque使用一些棘手的實現，當它說O（1）來push_back（）和push_front（）時，它實際上是調用的複製構造函數數量的常數時間。因此，如果數據物件是具有多個成員的某個類物件，則最小化複製構造函數調用的數量將節省時間。此外，複製構造函數調用的次數是恆定的。現在讓我們看看如何實現這一點。 這可以通過使用指向一些固定大小的塊的指標數位來實現，這些塊包含deque數據。下面是一個說明性示例。 這些 Deque 數據被劃分為固定大小的塊。在這裡，我們考慮了將數據劃分為大小為5的固定塊。 塊的填充從指標的兩個 deque 陣列的中間開始，並使用push_front和push_back操作向前和向後擴展。中間塊通常是滿的，當它被填滿時，數據被移動到上部或下部塊。 在上部塊中，元素以相反的順序推送，因為在這種情況下，填充數據的第一個位置將是4，然後是3，2，1，0。但是在中間和下部塊中，數據按正向順序填充，如0，1，2，3，4等。 當上面的塊被填滿時，指標將創建一個新塊並開始指向一個新的數位塊。這為更多數據創造了空間。在這種情況下，也可以填充指標塊。這會導致一個問題。 這是加倍來救援的時候。在加倍時，指標陣列的大小加倍。這不會複製整個數據，而只會複製指標。這是許多人在討論恆定時間時提出的一般論點。時間在調用的複製構造函數數方面保持不變。 如果數據集非常大，則指標塊幾乎不會執行加倍，因為單個指標可以指向大量數據塊。因此，指標陣列被填充並加倍的可能性非常小。 ","permalink":"https://intervalrain.github.io/c++/stl_deque/","summary":"\u003ch1 id=\"deque\"\u003eDeque\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e不同於 stack 與 queues， deques 兩個端點都支援擴展。\u003c/li\u003e\n\u003cli\u003e基於 doubly linked list，deques 有幾項額外的特徵：\n\u003cul\u003e\n\u003cli\u003e支援隨機存取\u003c/li\u003e\n\u003cli\u003e插入元素時間 \\(O(1)\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"函式\"\u003e函式\u003c/h2\u003e\n\u003ch3 id=\"1-push_front\"\u003e1. push_front()\u003c/h3\u003e\n\u003ch3 id=\"2-push_back\"\u003e2. push_back()\u003c/h3\u003e\n\u003ch3 id=\"3-front\"\u003e3. front()\u003c/h3\u003e\n\u003ch3 id=\"4-back\"\u003e4. back()\u003c/h3\u003e\n\u003ch3 id=\"5-begin\"\u003e5. begin()\u003c/h3\u003e\n\u003ch3 id=\"6-end\"\u003e6. end()\u003c/h3\u003e\n\u003ch3 id=\"7-insert\"\u003e7. insert()\u003c/h3\u003e\n\u003ch3 id=\"8-erase\"\u003e8. erase()\u003c/h3\u003e\n\u003ch3 id=\"9-pop_front\"\u003e9. pop_front()\u003c/h3\u003e\n\u003ch3 id=\"10-pop_back\"\u003e10. pop_back()\u003c/h3\u003e\n\u003ch3 id=\"11-empty\"\u003e11. empty()\u003c/h3\u003e\n\u003ch3 id=\"12-clear\"\u003e12. clear()\u003c/h3\u003e\n\u003ch3 id=\"13-random_access\"\u003e13. random_access()\u003c/h3\u003e\n\u003ch2 id=\"內部運作原理\"\u003e內部運作原理\u003c/h2\u003e\n\u003cp\u003e\u003cimg alt=\"deque\" loading=\"lazy\" src=\"https://media.geeksforgeeks.org/wp-content/cdn-uploads/20191224101416/Untitled-Diagram5.png\"\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e上述所有函數和操作都在雙鏈表中以O（1）時間執行，但這些清單不能隨機訪問任何元素。C++中的deque也是如此。這個 O（1） 在 deque 中可以使用圓形陣列來實現。使用循環陣列，可以在O（1）時間內實現從陣列的正面和背面插入和刪除等操作以及元素的隨機訪問。但這帶來了一個問題。當 deque 增長到超出容量時，使用者將需要將數位大小加倍，並將所有數據複製到陣列中。此外，如果數據是某個使用者定義的對象，那麼加倍和複製數據的成本就會變得非常昂貴。\n這是一個基本的解決方案。Deque使用一些棘手的實現，當它說O（1）來push_back（）和push_front（）時，它實際上是調用的複製構造函數數量的常數時間。因此，如果數據物件是具有多個成員的某個類物件，則最小化複製構造函數調用的數量將節省時間。此外，複製構造函數調用的次數是恆定的。現在讓我們看看如何實現這一點。\u003c/li\u003e\n\u003c/ul\u003e\n\u003col\u003e\n\u003cli\u003e這可以通過使用指向一些固定大小的塊的指標數位來實現，這些塊包含deque數據。下面是一個說明性示例。\u003c/li\u003e\n\u003cli\u003e這些 Deque 數據被劃分為固定大小的塊。在這裡，我們考慮了將數據劃分為大小為5的固定塊。\u003c/li\u003e\n\u003cli\u003e塊的填充從指標的兩個 deque 陣列的中間開始，並使用push_front和push_back操作向前和向後擴展。中間塊通常是滿的，當它被填滿時，數據被移動到上部或下部塊。\u003c/li\u003e\n\u003cli\u003e在上部塊中，元素以相反的順序推送，因為在這種情況下，填充數據的第一個位置將是4，然後是3，2，1，0。但是在中間和下部塊中，數據按正向順序填充，如0，1，2，3，4等。\u003c/li\u003e\n\u003cli\u003e當上面的塊被填滿時，指標將創建一個新塊並開始指向一個新的數位塊。這為更多數據創造了空間。在這種情況下，也可以填充指標塊。這會導致一個問題。\u003c/li\u003e\n\u003cli\u003e這是加倍來救援的時候。在加倍時，指標陣列的大小加倍。這不會複製整個數據，而只會複製指標。這是許多人在討論恆定時間時提出的一般論點。時間在調用的複製構造函數數方面保持不變。\u003c/li\u003e\n\u003cli\u003e如果數據集非常大，則指標塊幾乎不會執行加倍，因為單個指標可以指向大量數據塊。因此，指標陣列被填充並加倍的可能性非常小。\u003c/li\u003e\n\u003c/ol\u003e","title":"[C++] The C++ Standard Template Library(STL) - deque"},{"content":"C++ Custom Comparator sort(iter, iter, comp) Lambda function int main(){ auto comp = [](int a, int b){ return a \u0026lt; b; } vector\u0026lt;int\u0026gt; = {3,6,7,2,1,9,5,4,8}; sort(vec.begin(), vec.end(), comp); // 1,2,3,4,5,6,7,8,9 } Usual boolean function bool comp(const int\u0026amp; a, const int\u0026amp; b){ return a \u0026lt; b; } int main(){ vector\u0026lt;int\u0026gt; = {3,6,7,2,1,9,5,4,8}; sort(vec.begin(), vec.end(), comp); // 1,2,3,4,5,6,7,8,9 } Old solution using struct/class with () operator struct cmp { bool operator() (int a, int b) const { return a \u0026lt; b; } }; int main(){ vector\u0026lt;int\u0026gt; = {3,6,7,2,1,9,5,4,8}; sort(vec.begin(), vec.end(), comp()); // 1,2,3,4,5,6,7,8,9 } priority_queue(element, container, comp) Modern C++20 Solution(lambda) We can use lambda function as comparator. As usual, comparator should return boolean value, indicating whether the element passed as first argument is considered to go before the second in the specific strict weak ordering it defines. int main(){ auto comp = [](int a, int b){ return a \u0026lt; b; } vector\u0026lt;int\u0026gt; vec = {3,6,7,2,1,9,5,4,8}; priority_queue\u0026lt;int, vector\u0026lt;int, decltype(comp)\u0026gt; pq; for (int num : vec) pq.push(num); while (!pq.empty()) { cout \u0026lt;\u0026lt; pq.top() \u0026lt;\u0026lt; \u0026#34; \u0026#34;; // 9,8,7,6,5,4,3,2,1 pq.pop(); } cout \u0026lt;\u0026lt; endl; } Modern C++11 Solution(lambda) Before C++20 we need to pass lambda function as argument to set constructor. int main(){ auto comp = [](int a, int b){ return a \u0026lt; b; } vector\u0026lt;int\u0026gt; vec = {3,6,7,2,1,9,5,4,8}; priority_queue\u0026lt;int, vector\u0026lt;int, decltype(comp)\u0026gt; pq(comp); for (int num : vec) pq.push(num); while (!pq.empty()) { cout \u0026lt;\u0026lt; pq.top() \u0026lt;\u0026lt; \u0026#34; \u0026#34;; // 9,8,7,6,5,4,3,2,1 pq.pop(); } cout \u0026lt;\u0026lt; endl; } Usual function Make comparator as usual boolean function bool comp(int a, int b){ return a \u0026lt; b; } int main(){ vector\u0026lt;int\u0026gt; vec = {3,6,7,2,1,9,5,4,8}; priority_queue\u0026lt;int, vector\u0026lt;int, decltype(\u0026amp;comp)\u0026gt; pq(comp); // priority_queue\u0026lt;int, vector\u0026lt;int, decltype(comp)*\u0026gt; pq(comp); // in C++20, constructor can be ignored the same as lambda function. for (int num : vec) pq.push(num); while (!pq.empty()) { cout \u0026lt;\u0026lt; pq.top() \u0026lt;\u0026lt; \u0026#34; \u0026#34;; // 9,8,7,6,5,4,3,2,1 pq.pop(); } cout \u0026lt;\u0026lt; endl; } Old solution using struct/class with () operator struct cmp { bool operator() (int a, int b) const { return a \u0026lt; b; } }; int main(){ vector\u0026lt;int\u0026gt; = {3,6,7,2,1,9,5,4,8}; priority_queue\u0026lt;int, vector\u0026lt;int\u0026gt;, comp\u0026gt; pq(vec.begin(), vec.end()); while (!pq.empty()) { cout \u0026lt;\u0026lt; pq.top() \u0026lt;\u0026lt; \u0026#34; \u0026#34;; // 9,8,7,6,5,4,3,2,1 pq.pop(); } cout \u0026lt;\u0026lt; endl; } Alternative solution: create struct/class from boolean function bool comp(int a, int b){ return a \u0026lt; b; } #include \u0026lt;type_traits\u0026gt; using Cmp = integral_constant\u0026lt;decltype(\u0026amp;comp), \u0026amp;comp\u0026gt;; int main(){ vector\u0026lt;int\u0026gt; = {3,6,7,2,1,9,5,4,8}; priority_queue\u0026lt;int, vector\u0026lt;int, decltype(\u0026amp;comp)\u0026gt; pq(comp); for (int num : vec) pq.push(num); while (!pq.empty()) { cout \u0026lt;\u0026lt; pq.top() \u0026lt;\u0026lt; \u0026#34; \u0026#34;; // 9,8,7,6,5,4,3,2,1 pq.pop(); } cout \u0026lt;\u0026lt; endl; } ","permalink":"https://intervalrain.github.io/c++/custom_comparator/","summary":"\u003ch1 id=\"c-custom-comparator\"\u003eC++ Custom Comparator\u003c/h1\u003e\n\u003ch2 id=\"sortiter-iter-comp\"\u003esort(iter, iter, comp)\u003c/h2\u003e\n\u003ch3 id=\"lambda-function\"\u003eLambda function\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eauto\u003c/span\u003e comp \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e [](\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e a, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e b){ \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e a \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e b; }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e9\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e8\u003c/span\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    sort(vec.begin(), vec.end(), comp); \u003cspan style=\"color:#75715e\"\u003e// 1,2,3,4,5,6,7,8,9\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"usual-boolean-function\"\u003eUsual boolean function\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003ebool\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecomp\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e a, \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e b){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e a \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e b;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e9\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e8\u003c/span\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    sort(vec.begin(), vec.end(), comp); \u003cspan style=\"color:#75715e\"\u003e// 1,2,3,4,5,6,7,8,9\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"old-solution-using-structclass-with--operator\"\u003eOld solution using struct/class with () operator\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecmp\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ebool\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eoperator\u003c/span\u003e() (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e a, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e b) \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e a \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e b;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e9\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e8\u003c/span\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    sort(vec.begin(), vec.end(), comp()); \u003cspan style=\"color:#75715e\"\u003e// 1,2,3,4,5,6,7,8,9\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"priority_queueelement-container-comp\"\u003epriority_queue(element, container, comp)\u003c/h2\u003e\n\u003ch3 id=\"modern-c20-solutionlambda\"\u003eModern C++20 Solution(lambda)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eWe can use lambda function as comparator.\u003c/li\u003e\n\u003cli\u003eAs usual, comparator should return boolean value, indicating whether the element passed as first argument is considered to go before the second in the specific strict weak ordering it defines.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eauto\u003c/span\u003e comp \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e [](\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e a, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e b){ \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e a \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e b; }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e vec \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e9\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e8\u003c/span\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    priority_queue\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e, vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003edecltype\u003c/span\u003e(comp)\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e pq;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e num : vec) pq.push(num);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (\u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003epq.empty()) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e pq.top() \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e;    \u003cspan style=\"color:#75715e\"\u003e// 9,8,7,6,5,4,3,2,1\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        pq.pop();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e endl;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"modern-c11-solutionlambda\"\u003eModern C++11 Solution(lambda)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eBefore C++20 we need to \u003cstrong\u003epass lambda function as argument to set constructor\u003c/strong\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eauto\u003c/span\u003e comp \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e [](\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e a, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e b){ \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e a \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e b; }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e vec \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e9\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e8\u003c/span\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    priority_queue\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e, vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003edecltype\u003c/span\u003e(comp)\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e pq(comp);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e num : vec) pq.push(num);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (\u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003epq.empty()) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e pq.top() \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e;    \u003cspan style=\"color:#75715e\"\u003e// 9,8,7,6,5,4,3,2,1\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        pq.pop();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e endl;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"usual-function\"\u003eUsual function\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eMake comparator as usual boolean function\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003ebool\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecomp\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e a, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e b){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e a \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e b;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e vec \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e9\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e8\u003c/span\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    priority_queue\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e, vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003edecltype\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003ecomp)\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e pq(comp);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// priority_queue\u0026lt;int, vector\u0026lt;int, decltype(comp)*\u0026gt; pq(comp);\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#75715e\"\u003e// in C++20, constructor can be ignored the same as lambda function.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e num : vec) pq.push(num);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (\u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003epq.empty()) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e pq.top() \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e;    \u003cspan style=\"color:#75715e\"\u003e// 9,8,7,6,5,4,3,2,1\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        pq.pop();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e endl;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"old-solution-using-structclass-with--operator-1\"\u003eOld solution using struct/class with () operator\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estruct\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecmp\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ebool\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eoperator\u003c/span\u003e() (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e a, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e b) \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e a \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e b;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e9\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e8\u003c/span\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    priority_queue\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e, vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e, comp\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e pq(vec.begin(), vec.end());\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (\u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003epq.empty()) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e pq.top() \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e;    \u003cspan style=\"color:#75715e\"\u003e// 9,8,7,6,5,4,3,2,1\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        pq.pop();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e endl;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"alternative-solution-create-structclass-from-boolean-function\"\u003eAlternative solution: create struct/class from boolean function\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003ebool\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecomp\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e a, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e b){ \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e a \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e b; }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;type_traits\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eusing\u003c/span\u003e Cmp \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e integral_constant\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003edecltype\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003ecomp), \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003ecomp\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e9\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e8\u003c/span\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    priority_queue\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e, vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003edecltype\u003c/span\u003e(\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003ecomp)\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e pq(comp);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e num : vec) pq.push(num);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (\u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003epq.empty()) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e pq.top() \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e;    \u003cspan style=\"color:#75715e\"\u003e// 9,8,7,6,5,4,3,2,1\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        pq.pop();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e endl;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"[C++] Custom Comparator"},{"content":"pair 函式庫 #include \u0026lt;utility\u0026gt; 宣告 pair\u0026lt;data_type1, data_type2\u0026gt; Pair_name; 初始化 pair\u0026lt;int, int\u0026gt; p1; // 宣告但不初始化 pair\u0026lt;int, char\u0026gt; p2(1, \u0026#39;a\u0026#39;); // 不同資料型態的初始化 pair\u0026lt;int, int\u0026gt; p3(1, 10); // 同資料型態的初始化 pair\u0026lt;int, int\u0026gt; p4(p3); // 利用其它 pair 來初始化 pair\u0026lt;int, int\u0026gt; p5 = {1, 2} // 用 assign 的方式初始化 p2 = make_pair(1, \u0026#39;a\u0026#39;); // 利用 make_pair 函式 成員 .first .second 函式 1. make_pair(v1, v2); 2. pair1.swap(pair2); 3. tie(a,b) 示例 #include \u0026lt;iostream\u0026gt; #include \u0026lt;utility\u0026gt; using namespace std; int main(){ // initialize pair\u0026lt;int,int\u0026gt; p1; pair\u0026lt;int,int\u0026gt; p2(2,4); pair\u0026lt;int,char\u0026gt; p3(3,\u0026#39;c\u0026#39;); pair\u0026lt;int,int\u0026gt; p4(p2); pair\u0026lt;int,int\u0026gt; p5 = {5,10}; // member cout \u0026lt;\u0026lt; p2.first \u0026lt;\u0026lt; \u0026#34; \u0026#34; \u0026lt;\u0026lt; p2.second \u0026lt;\u0026lt; endl; // 2 4 cout \u0026lt;\u0026lt; p3.first \u0026lt;\u0026lt; \u0026#34; \u0026#34; \u0026lt;\u0026lt; p3.second \u0026lt;\u0026lt; endl; // 3 c cout \u0026lt;\u0026lt; p4.first \u0026lt;\u0026lt; \u0026#34; \u0026#34; \u0026lt;\u0026lt; p4.second \u0026lt;\u0026lt; endl; // 2 4 cout \u0026lt;\u0026lt; p5.first \u0026lt;\u0026lt; \u0026#34; \u0026#34; \u0026lt;\u0026lt; p5.second \u0026lt;\u0026lt; endl; // 5 10 // function p1 = make_pair(1,2); cout \u0026lt;\u0026lt; p1.first \u0026lt;\u0026lt; \u0026#34; \u0026#34; \u0026lt;\u0026lt; p1.second \u0026lt;\u0026lt; endl; // 1 2 // a.swap(b) p1.swap(p2); cout \u0026lt;\u0026lt; p1.first \u0026lt;\u0026lt; \u0026#34; \u0026#34; \u0026lt;\u0026lt; p1.second \u0026lt;\u0026lt; endl; // 2 4 cout \u0026lt;\u0026lt; p2.first \u0026lt;\u0026lt; \u0026#34; \u0026#34; \u0026lt;\u0026lt; p2.second \u0026lt;\u0026lt; endl; // 1 2 // tie(a,b) = pair int a, b; tie(a, b) = p1; cout \u0026lt;\u0026lt; a \u0026lt;\u0026lt; \u0026#34; \u0026#34; \u0026lt;\u0026lt; b \u0026lt;\u0026lt; endl; // 2 4 return 0; } ","permalink":"https://intervalrain.github.io/c++/stl_pair/","summary":"\u003ch1 id=\"pair\"\u003epair\u003c/h1\u003e\n\u003ch2 id=\"函式庫\"\u003e函式庫\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e#include \u0026lt;utility\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"宣告\"\u003e宣告\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003epair\u0026lt;data_type1, data_type2\u0026gt; Pair_name;\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"初始化\"\u003e初始化\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003epair\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e p1;          \u003cspan style=\"color:#75715e\"\u003e// 宣告但不初始化\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003epair\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e p2(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;a\u0026#39;\u003c/span\u003e); \u003cspan style=\"color:#75715e\"\u003e// 不同資料型態的初始化\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003epair\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e p3(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e);   \u003cspan style=\"color:#75715e\"\u003e// 同資料型態的初始化\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003epair\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e p4(p3);      \u003cspan style=\"color:#75715e\"\u003e// 利用其它 pair 來初始化\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003epair\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e p5 \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e}  \u003cspan style=\"color:#75715e\"\u003e// 用 assign 的方式初始化\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ep2 \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e make_pair(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;a\u0026#39;\u003c/span\u003e);     \u003cspan style=\"color:#75715e\"\u003e// 利用 make_pair 函式\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"成員\"\u003e成員\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e.first\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e.second\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"函式\"\u003e函式\u003c/h2\u003e\n\u003ch3 id=\"1-make_pairv1-v2\"\u003e1. make_pair(v1, v2);\u003c/h3\u003e\n\u003ch3 id=\"2-pair1swappair2\"\u003e2. pair1.swap(pair2);\u003c/h3\u003e\n\u003ch3 id=\"3-tieab\"\u003e3. tie(a,b)\u003c/h3\u003e\n\u003ch2 id=\"示例\"\u003e示例\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;utility\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eusing\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enamespace\u003c/span\u003e std;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// initialize\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    pair\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e,\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e p1;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    pair\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e,\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e p2(\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    pair\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e,\u003cspan style=\"color:#66d9ef\"\u003echar\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e p3(\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e,\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;c\u0026#39;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    pair\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e,\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e p4(p2);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    pair\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e,\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e p5 \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// member\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e p2.first \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e p2.second \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e endl;       \u003cspan style=\"color:#75715e\"\u003e// 2 4\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e p3.first \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e p3.second \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e endl;       \u003cspan style=\"color:#75715e\"\u003e// 3 c\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e p4.first \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e p4.second \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e endl;       \u003cspan style=\"color:#75715e\"\u003e// 2 4\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e p5.first \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e p5.second \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e endl;       \u003cspan style=\"color:#75715e\"\u003e// 5 10\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// function\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    p1 \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e make_pair(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e p1.first \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e p1.second \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e endl;       \u003cspan style=\"color:#75715e\"\u003e// 1 2\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// a.swap(b)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    p1.swap(p2);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e p1.first \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e p1.second \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e endl;       \u003cspan style=\"color:#75715e\"\u003e// 2 4\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e p2.first \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e p2.second \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e endl;       \u003cspan style=\"color:#75715e\"\u003e// 1 2\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// tie(a,b) = pair\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e a, b;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    tie(a, b) \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e p1;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e a \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e b \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e endl;                      \u003cspan style=\"color:#75715e\"\u003e// 2 4\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"[C++] The C++ Standard Template Library(STL) - pair"},{"content":"HDLBits HDLBits 是一系列小型電路設計的練習，用於使用 Verilog 硬體描述語言(HDL)進行數位硬體設計。 由教學的題型由淺入深，逐步建立起電路設計的技能。 每個問題都會要求讀者使用 Verilog 設計一個小電路。HDLBits 會對提交的程式碼作判讀。透過一組測試碼來進行向量模擬，並與解答比較，檢查正確性。\nCatalog 1. Getting Started\n2. Verilog Language\n3. Circuits\n4. Verification: Reading Simulations\n5. Verification: Writing Testbenches\n6. CS450\n1 Getting Started \\(\\text{assign one}\\) Build a circuit with no inputs and one output. The output should always drive 1 (or logic high). module top_module( output one); assign one = 1\u0026#39;b1; endmodule \\(\\text{assign zero}\\) Build a circuit with no inputs and one output that outputs a constant 0. module top_module( output zero ); assign zero = 1\u0026#39;b0; endmodule ","permalink":"https://intervalrain.github.io/verilog/hdlbits1/","summary":"\u003ch1 id=\"hdlbitshttpshdlbits01xznetwikimain_page\"\u003e\u003ca href=\"https://hdlbits.01xz.net/wiki/Main_Page\"\u003eHDLBits\u003c/a\u003e\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eHDLBits 是一系列小型電路設計的練習，用於使用 Verilog 硬體描述語言(HDL)進行數位硬體設計。\n由教學的題型由淺入深，逐步建立起電路設計的技能。\n每個問題都會要求讀者使用 Verilog 設計一個小電路。HDLBits 會對提交的程式碼作判讀。透過一組測試碼來進行向量模擬，並與解答比較，檢查正確性。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch1 id=\"catalog\"\u003eCatalog\u003c/h1\u003e\n\u003cp\u003e\u003ca href=\"/verilog/hdlbits1/#1-getting-started\"\u003e1. Getting Started\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/verilog/hdlbits2/#2-verilog-language\"\u003e2. Verilog Language\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/verilog/hdlbits3/#3-circuits\"\u003e3. Circuits\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/verilog/hdlbits4/#4-getting-started\"\u003e4. Verification: Reading Simulations\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/verilog/hdlbits5/#5-verification---writing-testbenches\"\u003e5. Verification: Writing Testbenches\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/verilog/hdlbits6/#6-cs450\"\u003e6. CS450\u003c/a\u003e\u003c/p\u003e\n\u003ch1 id=\"1-getting-started\"\u003e1 Getting Started\u003c/h1\u003e\n\u003ch2 id=\"textassign-one\"\u003e\\(\\text{assign one}\\)\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild a circuit with no inputs and one output. The output should always drive 1 (or logic high).\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Verilog\" data-lang=\"Verilog\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003emodule\u003c/span\u003e top_module( \u003cspan style=\"color:#66d9ef\"\u003eoutput\u003c/span\u003e one);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eassign\u003c/span\u003e one \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u0026#39;b1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eendmodule\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch2 id=\"textassign-zero\"\u003e\\(\\text{assign zero}\\)\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild a circuit with no inputs and one output that outputs a constant 0.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Verilog\" data-lang=\"Verilog\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003emodule\u003c/span\u003e top_module(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eoutput\u003c/span\u003e zero );\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eassign\u003c/span\u003e zero \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u0026#39;b0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eendmodule\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"[VHDL] HDLbits 1 - Getting Started"},{"content":"1. Getting Started\n2. Verilog Language\n3. Circuits\n4. Verification: Reading Simulations\n5. Verification: Writing Testbenches\n6. CS450\n2 Verilog Language 2.1 Basics wire Create a module with one input and ont output that behaves like a wire module top_module( input in, output out); assign out = in; endmodule multi-in-out Create a module with 3 inputs and 4 outputs that behaves like wires that makes these connections: module top_module( input a,b,c, output w,x,y,z ); assign w = a; assign x = b; assign y = b; assign z = c; endmodule not gate Create a module that implements a NOT gate. module top_module( input in, output out ); assign out = ~in; endmodule and gate Create a module that implments an AND gate. module top_module( input a,b, output out ); assign out = a \u0026amp; b; endmodule nor gate Create a module that implements a NOR gate. A NOR gate is an OR gate with its output inverted. A NOR function needs two operators when written in Verilog. module top_module( input a,b, output out ); assign out = ~(a|b); endmodule xnor gate Create a module that implements a XNOR gate. module top_module( input a, b, output out ); assign out = ~(a^b); endmodule wire declaration Implement following circuits. Create two intermediate wires to connect the AND and OR gates together. Note that the wire that feeds the NOT gate is really wire out, so you do not necessarily need to declare a third wire here. Notice how wires are driven by exactly one source (output of a gate), but can feed multiple inputs. module top_module( input a,b,c,d, output out, out_n ); wire w1, w2; assign w1 = a \u0026amp; b; assign w2 = c \u0026amp; d; assign out = w1 | w2; assign out_n = ~out; endmodule 7458 The 7458 is a chip with four AND gates and two OR gates. Create a module with the same functionality as the 7458 chip. It has 10 inputs and 2 outputs. module top_module( input p1a, p1b, p1c, p1d, p1e, p1f, output p1y, intput p2a, p2b, p2c, p2d, output p2y ); wire w1a, w1b; wire w2a, w2b; assign w1a = p1a \u0026amp; p1b \u0026amp; p1c; assign w1b = p1d \u0026amp; p1e \u0026amp; p1f; assign p1y = w1a | w1b; assign w2a = p2a \u0026amp; p2b; assign w2b = p2c \u0026amp; p2d; assign p2y = w2a | w2b; endmodule 2.2 Vectors vector Build a circuit that has one 3-bit input, then outputs the same vector, and also splits it into three separate 1-bit outputs. Connect outputs o0 to the input vector\u0026rsquo;s position 0, o1 to position 1, etc.\nIn a diagram, a tick mark with a number next to it indicates the width of the vector (or \u0026ldquo;bus\u0026rdquo;), rather than drawing a separate line for each bit in the vector. module top_module ( input wire [2:0] vec, output wire [2:0] outv, output wire o2, output wire o1, output wire o0 ); assign outv = vec; assign o0 = vec[0]; assign o1 = vec[1]; assign o2 = vec[2]; endmodule vector select Build a combinational circuit that splits an input half-word (16 bits, [15:0]) into lower [7:0] and upper [15:8] bytes. module top_module ( input [15:0] in, output [7:0] out_hi, output [7:0] out_lo ); assign out_hi = in[15:8]; assign out_lo = in[7:0]; endmodule vector swap A 32-bit vector can be viewed as containing 4 bytes (bits [31:24], [23:16], etc.). Build a circuit that will reverse the byte ordering of the 4-byte word.\nAaaaaaaaBbbbbbbbCcccccccDddddddd =\u0026gt; DdddddddCcccccccBbbbbbbbAaaaaaaa\nThis operation is often used when the endianness of a piece of data needs to be swapped, for example between little-endian x86 systems and the big-endian formats used in many Internet protocols. module top_module ( input [31:0] in, output [31:0] out ); assign out[31:24] = in[ 7: 0]; assign out[23:16] = in[15: 8]; assign out[15: 8] = in[23:16]; assign out[ 7: 0] = in[31:24]; endmodule vector gates uild a circuit that has two 3-bit inputs that computes the bitwise-OR of the two vectors, the logical-OR of the two vectors, and the inverse (NOT) of both vectors. Place the inverse of b in the upper half of out_not (i.e., bits [5:3]), and the inverse of a in the lower half. module top_module ( input [2:0] a, input [2:0] b, output [2:0] out_or_bitwise, output out_or_logical, output [5:0] out_not ); assign out_or_bitwise = a | b; assign out_or_logical = a || b; assign out_not[2:0] = ~a; assign out_not[5:3] = ~b; endmodule gate-prefix vector Build a combinational circuit with four inputs, in[3:0]. There are 3 outputs: out_and: output of a 4-input AND gate. out_or: output of a 4-input OR gate. out_xor: outout of a 4-input XOR gate. module top_module ( input [3:0] in, output out_and, output out_or, output out_xor ); assign out_and = \u0026amp; in; assign out_or = | in; assign out_xor = ^ in; endmodule vector concatenate Given several input vectors, concatenate them together then split them up into several output vectors. There are six 5-bit input vectors: a, b, c, d, e, and f, for module top_module ( input [4:0] a, b, c, d, e, f, output [7:0] w, x, y, z ); assign {w, x, y, z} = {a, b, c, d, e, f, 2\u0026#39;b11}; endmodule vector reverse Given an 8-bit input vector [7:0], reverse its bit ordering. module top_module( input [7:0] in, output [7:0] out ); assign {out[0], out[1], out[2], out[3], out[4], out[5], out[6], out[7]} = in endmodule module top_module( input [7:0] in, output [7:0] out ); always @(*) begin for (int i=0; i\u0026lt;8; i++) out[i] = in[8-i-1]; end endmodule module top_module( input [7:0] in, output [7:0] out ); generate genvar i; for (i=0; i\u0026lt;8; i = i+1) begin: my_block_name assign out[i] = in[8-i-1]; end endgenerate endmodule vector replication Build a circuit that sign-extends an 8-bit number to 32 bits. This requires a concatenation of 24 copies of the sign bit (i.e., replicate bit[7] 24 times) followed by the 8-bit number itself. module top_module ( input [7:0] in, output [31:0] out ); assign out = {{24{in[7]}}, in}; endmodule vector replication2 Given five 1-bit signals (a, b, c, d, and e), compute all 25 pairwise one-bit comparisons in the 25-bit output vector. The output should be 1 if the two bits being compared are equal. module top_module ( input a, b, c, d, e, output [24:0] out ); assign out = ~{{5{a}}, {5{b}}, {5{c}}, {5{d}}, {5{e}}} ^ {5{a,b,c,d,e}}; endmodule 2.3 Modules: Hierarchy By now, you\u0026rsquo;re familiar with a module, which is a circuit that interacts with its outside through input and output ports. Larger, more complex circuits are built by composing bigger modules out of smaller modules and other pieces (such as assign statements and always blocks) connected together. This forms a hierarchy, as modules can contain instances of other modules.\nThe figure below shows a very simple circuit with a sub-module. In this exercise, create one instance of module mod_a, then connect the module\u0026rsquo;s three pins (in1, in2, and out) to your top-level module\u0026rsquo;s three ports (wires a, b, and out). The module mod_a is provided for you — you must instantiate it.\nWhen connecting modules, only the ports on the module are important. You do not need to know the code inside the module. The code for module mod_a looks like this:\nmodule mod_a ( input in1, input in2, output out ); // Module body endmodule The hierarchy of modules is created by instantiating one module inside another, as long as all of the modules used belong to the same project (so the compiler knows where to find the module). The code for one module is not written inside another module\u0026rsquo;s body (Code for different modules are not nested).\nYou may connect signals to the module by port name or port position. For extra practice, try both methods.\nConnecting Signals to Module Ports\nThere are two commonly-used methods to connect a wire to a port: by position or by name.\nBy position\nThe syntax to connect wires to ports by position should be familiar, as it uses a C-like syntax. When instantiating a module, ports are connected left to right according to the module\u0026rsquo;s declaration. For example:\nmod_a instance1 ( wa, wb, wc );\nThis instantiates a module of type mod_a and gives it an instance name of \u0026ldquo;instance1\u0026rdquo;, then connects signal wa (outside the new module) to the first port (in1) of the new module, wb to the second port (in2), and wc to the third port (out). One drawback of this syntax is that if the module\u0026rsquo;s port list changes, all instantiations of the module will also need to be found and changed to match the new module.\nBy name\nConnecting signals to a module\u0026rsquo;s ports by name allows wires to remain correctly connected even if the port list changes. This syntax is more verbose, however.\nmod_a instance2 ( .out(wc), .in1(wa), .in2(wb) );\nThe above line instantiates a module of type mod_a named \u0026ldquo;instance2\u0026rdquo;, then connects signal wa (outside the module) to the port named in1, wb to the port named in2, and wc to the port named out. Notice how the ordering of ports is irrelevant here because the connection will be made to the correct name, regardless of its position in the sub-module\u0026rsquo;s port list. Also notice the period immediately preceding the port name in this syntax.\nmodule module top_module ( input a, input b, output out ); mod_a u_mod_a ( .in1 (a), .in2 (b), .out (out) ); endmodule module_pos This problem is similar to the previous one (module). You are given a module named mod_a that has 2 outputs and 4 inputs, in that order. You must connect the 6 ports by position to your top-level module\u0026rsquo;s ports out1, out2, a, b, c, and d, in that order. You are given the following module: module top_module ( input a, b, c, d, output out1, out2 ); mod_a u_mod_a(out1, out2, a, b, c, d); endmodule module_name This problem is similar to module. You are given a module named mod_a that has 2 outputs and 4 inputs, in some order. You must connect the 6 ports by name to your top-level module\u0026rsquo;s ports:You are given the following module: module top_module ( input a, input b, input c, input d, output out1, output out2 ); mod_a u_mod_a( .out1 (out1), .out2 (out2), .in1 (a), .in2 (b), .in3 (c), .in4 (d) ); endmodule module_shift You are given a module my_dff with two inputs and one output (that implements a D flip-flop). Instantiate three of them, then chain them together to make a shift register of length 3. The clk port needs to be connected to all instances. Note that to make the internal connections, you will need to declare some wires. Be careful about naming your wires and module instances: the names must be unique.\nThe module provided to you is: module my_dff ( input clk, input d, output q ); module top_module ( input clk, input d, output q ); wire q1; wire q2; my_dff(clk, d, q1); my_dff(clk, q1, q2); my_dff(clk, q2, q); endmodule module_shift8 You are given a module my_dff8 with two inputs and one output (that implements a set of 8 D flip-flops). Instantiate three of them, then chain them together to make a 8-bit wide shift register of length 3. In addition, create a 4-to-1 multiplexer (not provided) that chooses what to output depending on sel[1:0]: The value at the input d, after the first, after the second, or after the third D flip-flop. (Essentially, sel selects how many cycles to delay the input, from zero to three clock cycles.) The module provided to you is: module my_dff8 ( input clk, input [7:0] d, output [7:0] q );\nThe multiplexer is not provided. One possible way to write one is inside an always block with a case statement inside. module top_module ( input clk, input [7:0] d, input [1:0] sel, output [7:0] q ); wire [7:0] q1; wire [7:0] q2; wire [7:0] q3; my_dff8 (clk, d, q1); my_dff8 (clk, q1, q2); my_dff8 (clk, q2, q3); // multiplexer: mux9to1v always@(*) begin case(sel) 2\u0026#39;d0: q = d; 2\u0026#39;d1: q = q1; 2\u0026#39;d2: q = q2; 2\u0026#39;d3: q = q3; endcase end endmodule module_Half Adder You are given a module add16 that performs a 16-bit addition. Instantiate two of them to create a 32-bit adder. One add16 module computes the lower 16 bits of the addition result, while the second add16 module computes the upper 16 bits of the result, after receiving the carry-out from the first adder. Your 32-bit adder does not need to handle carry-in (assume 0) or carry-out (ignored), but the internal modules need to in order to function correctly. (In other words, the add16 module performs 16-bit a + b + cin, while your module performs 32-bit a + b).\nConnect the modules together as shown in the diagram below. The provided module add16 has the following declaration: module add16 ( input[15:0] a, input[15:0] b, input cin, output[15:0] sum, output cout ); module top_module( input [31:0] a, input [31:0] b, output [31:0] sum ); wire [15:0] sum1; wire [15:0] sum2; wire cout1; wire cout2; add16 (a[15:0], b[15:0], 1\u0026#39;b0, sum1, cout1); add16 (a[31:16], b[31:16], cout1, sum2, cout2); assign sum = {sum2, sum1}; endmodule module_Full Adder You are given a module add16 that performs a 16-bit addition. You must instantiate two of them to create a 32-bit adder. One add16 module computes the lower 16 bits of the addition result, while the second add16 module computes the upper 16 bits of the result. Your 32-bit adder does not need to handle carry-in (assume 0) or carry-out (ignored).\nConnect the add16 modules together as shown in the diagram below. The provided module add16 has the following declaration:\nmodule add16 ( input[15:0] a, input[15:0] b, input cin, output[15:0] sum, output cout );\nWithin each add16, 16 full adders (module add1, not provided) are instantiated to actually perform the addition. You must write the full adder module that has the following declaration:\nmodule add1 ( input a, input b, input cin, output sum, output cout );\nRecall that a full adder computes the sum and carry-out of a+b+cin.\nIn summary, there are three modules in this design: top_module — Your top-level module that contains two of\u0026hellip; add16, provided — A 16-bit adder module that is composed of 16 of\u0026hellip; add1 — A 1-bit full adder module. module top_module ( input [31:0] a, input [31:0] b, output [31:0] sum ); wire [15:0] sum1; wire [15:0] sum2; wire cout1; wire cout2; add16 (a[15:0], b[15:0], 1\u0026#39;b0, sum1, cout1); add16 (a[31:16], b[31:16], cout1, sum2, cout2); assign sum = {sum2, sum1}; endmodule module add1 ( input a, input b, input cin, output sum, output cout ); assign sum = a ^ b ^ cin; assign cout = (a\u0026amp;b)|(b\u0026amp;cin)|(cin\u0026amp;a); // assign {cout, sum} = a + b + cin; endmodule module_Carry Select Adder One drawback of the ripple carry adder is that the delay for an adder to compute the carry out (from the carry-in, in the worst case) is fairly slow, and the second-stage adder cannot begin computing its carry-out until the first-stage adder has finished. This makes the adder slow. One improvement is a carry-select adder, shown below. The first-stage adder is the same as before, but we duplicate the second-stage adder, one assuming carry-in=0 and one assuming carry-in=1, then using a fast 2-to-1 multiplexer to select which result happened to be correct.\nYou are provided with the same module add16 as the previous exercise, which adds two 16-bit numbers with carry-in and produces a carry-out and 16-bit sum. You must instantiate three of these to build the carry-select adder, using your own 16-bit 2-to-1 multiplexer.\nmodule add16 ( input[15:0] a, input[15:0] b, input cin, output[15:0] sum, output cout );\nConnect the modules together as shown in the diagram below. The provided module add16 has the following declaration: module top_module( input [31:0] a, input [31:0] b, output [31:0] sum ); wire sel; wire [15:0] wire0, wire1; add16 (a[15: 0], b[15: 0], 1\u0026#39;b0, sum[15:0], sel); add16 (a[31:16], b[31:16], 1\u0026#39;b0, wire0, ); add16 (a[31:16], b[31:16], 1\u0026#39;b1, wire1, ); // selector always@(*) begin case(sel) 1\u0026#39;b0: sum[31:16] = wire0; 1\u0026#39;b1: sum[31:16] = wire1; endcase end // ternary operator // assign sum[31:16] = sel ? wire1 : wire0; endmodule module_Adder-Subtractor An adder-subtractor can be built from an adder by optionally negating one of the inputs, which is equivalent to inverting the input then adding 1. The net result is a circuit that can do two operations: (a + b + 0) and (a + ~b + 1). Build the adder-subtractor below. You are provided with a 16-bit adder module, which you need to instantiate twice:\nmodule add16 ( input[15:0] a, input[15:0] b, input cin, output[15:0] sum, output cout );\nUse a 32-bit wide XOR gate to invert the b input whenever sub is 1. (This can also be viewed as b[31:0] XORed with sub replicated 32 times. See replication operator.). Also connect the sub input to the carry-in of the adder. module top_module( input [31:0] a, input [31:0] b, input sub, output [31:0] sum ); wire cout; wire [31:0] bin; assign bin = {32{sub}} ^ b; add16 (a[15: 0], bin[15: 0], sub, sum[15: 0], cout); add16 (a[31:16], bin[31:16], cout, sum[31:16], ); endmodule 2.4 Procedures Alwaysblock For synthesizing hardware, two types of always blocks are relevant: Combinational: always @(*) Clocked: always @(posedge clk) Combinational always blocks are equivalent to assign statements, thus there is always a way to express a combinational circuit both ways. The choice between which to use is mainly an issue of which syntax is more convenient. The syntax for code inside a procedural block is different from code that is outside. Procedural blocks have a richer set of statements (e.g., if-then, case), cannot contain continuous assignments*, but also introduces many new non-intuitive ways of making errors. (*Procedural continuous assignments do exist, but are somewhat different from continuous assignments, and are not synthesizable.) For combinational always blocks, always use a sensitivity list of (*). Explicitly listing out the signals is error-prone (if you miss one), and is ignored for hardware synthesis. If you explicitly specify the sensitivity list and miss a signal, the synthesized hardware will still behave as though (*) was specified, but the simulation will not and not match the hardware\u0026rsquo;s behaviour. (In SystemVerilog, use always_comb.) A note on wire vs. reg: The left-hand-side of an assign statement must be a net type (e.g., wire), while the left-hand-side of a procedural assignment (in an always block) must be a variable type (e.g., reg). These types (wire vs. reg) have nothing to do with what hardware is synthesized, and is just syntax left over from Verilog\u0026rsquo;s use as a hardware simulation language. Build an AND gate using both an assign statement and a combinational always block. module top_module( input a, input b, output wire out_assign, output reg out_alwaysblock ); assign out_assign = a \u0026amp; b; always @(*) begin out_alwaysblock = a \u0026amp; b; end endmodule Clocked Clocked always blocks create a blob of combinational logic just like combinational always blocks, but also creates a set of flip-flops (or \u0026ldquo;registers\u0026rdquo;) at the output of the blob of combinational logic. Instead of the outputs of the blob of logic being visible immediately, the outputs are visible only immediately after the next (posedge clk). Blocking vs. Non-Backing Assignment\nThere are three types of assignments in Verilog:\nContinuous assignments (assign x = y;): Can only be used when not inside a procedure (\u0026ldquo;always block\u0026rdquo;). Procedural blocking assignment (x = y;): Can only be used inside a procedure. Procedural non-blocking assignment (x \u0026lt;= y;): Can only be used inside a procedure. In a combinational always block, use blocking assignments. In a clocked always block, used non-blocking assignments. A full understanding of why is not particularly usedful for hardware design and requires a good understanding of how Verilog simulators keep track of events. Not following this rule results in extremely hard to find errors that are both non-deterministic and differ between simulation and synthesized hardware.\nBuild an XOR gate three ways, using an assignment, a combinational always block, and a clocked always block. Note that the clocked always block precedures a different circuit from the other two: There is a flip-flop so the output is delayed. module top_module( input clk, input a, input b, output wire out_assign, output reg out_always_comb, output reg out_always_ff ); assign out_assign = a ^ b; always @(*) begin out_always_comb = a ^ b; end always @(posedge clk) begin out_always_ff \u0026lt;= a ^ b; end endmodule If statement An if statement usually creates a 2-to-1 multiplexer, selecting one input if the condition is true, and the other input if the condition is false. always @(*) begin if (condition) begin out = x; end else begin out = y; end end This is equivalent to using a continuous assignment with a conditional operator:\nassign out = (condition) ? x : y;\nHowever, the procedural if statement provides a new way to make mistakes. The circuit is combinational only if out is always assigned a value.\nBuild a 2-to-1 mux that chooses between a and b. Choose b if both sel_b1 and sel_b2 are true. Otherwise, choose a. Do the same twice, once using assign statements and once using a procedural if statement. \\(\\begin{array}{|c|c|c|}\\hline \\text{sel\\_b1}\u0026amp;\\text{sel\\_b2}\u0026amp;\\text{out\\_assign, out\\_always} \\\\\\hline 0\u0026amp;0\u0026amp;a\\\\\\hline 0\u0026amp;1\u0026amp;a\\\\\\hline 1\u0026amp;0\u0026amp;a\\\\\\hline 1\u0026amp;1\u0026amp;b\\\\\\hline \\end{array\nmodule top_module( input a, input b, input sel_b1, input sel_b2, output wire out_assign, output reg out_always ); assign out_assign = sel_b1 \u0026amp; sel_b2 ? b : a; always @(*) begin if (sel_b1 \u0026amp; sel_b2) begin out_always = b; end else begin out_always = a; end end // always @(*) begin // case ({sel_b1, sel_b2}) //\t2\u0026#39;d0:begin //\tout_always = a; // end // 2\u0026#39;d1:begin //\tout_always = a; // end // 2\u0026#39;d2:begin //\tout_always = a; // end // 2\u0026#39;d3:begin //\tout_always = b; // end // endcase // end endmodule If statement latches A common source of errors: How to avoid making latches\nWhen designing circuits, you must think first in terms of circuits:\nI want this logic gate I want a combinational blob of logic that has these inputs and produces these outputs I want a combinational blob of logic followed by a set of flip-flops What you must not do is write the code first, then hope it generates a proper circuit.\nIf (cpu_overheated) then shut_off_computer = 1; If (~arrived) then keep_driving = ~gas_tank_empty; Syntactically-correct code does not necessarily result in a reasonable circuit (combinational logic + flip-flops). The usual reason is: \u0026ldquo;What happens in the cases other than those you specified?\u0026rdquo;. Verilog\u0026rsquo;s answer is: Keep the outputs unchanged.\nThis behaviour of \u0026ldquo;keep outputs unchanged\u0026rdquo; means the current state needs to be remembered, and thus produces a latch. Combinational logic (e.g., logic gates) cannot remember any state. Watch out for Warning (10240): \u0026hellip; inferring latch(es)\u0026quot; messages. Unless the latch was intentional, it almost always indicates a bug. Combinational circuits must have a value assigned to all outputs under all conditions. This usually means you always need else clauses or a default value assigned to the outputs.\nDemonstration\nThe following code contains incorrect behaviour that creates a latch. Fix the bugs so that you will shut off the computer only if it\u0026rsquo;s really overheated, and stop driving if you\u0026rsquo;ve arrived at your destination or you need to refuel. always @(*) begin if (cpu_overheated) shut_off_computer = 1; end always @(*) begin if (~arrived) keep_driving = ~gas_tank_empty; end module top_module ( input cpu_overheated, output reg shut_off_computer, input arrived, input gas_tank_empty, output reg keep_driving ); // always @(*) begin if (cpu_overheated) shut_off_computer = 1; else shut_off_computer = 0; end always @(*) begin if (~arrived) keep_driving = ~gas_tank_empty; else keep_driving = 0; end endmodule Case statement Case statements in Verilog are nearly equivalent to a sequence of if-elseif-else that compares one expression to a list of others. Its syntax and functionality differs from the switch statement in C. always @(*) begin // This is a combinational circuit case (in) 1\u0026#39;b1: begin out = 1\u0026#39;b1; // begin-end if \u0026gt;1 statement end 1\u0026#39;b0: out = 1\u0026#39;b0; default: out = 1\u0026#39;bx; endcase end The case statement begins with case and each \u0026ldquo;case item\u0026rdquo; ends with a colon. There is no \u0026ldquo;switch\u0026rdquo;. Each case item can execute exactly one statement. This makes the \u0026ldquo;break\u0026rdquo; used in C unnecessary. But this means that if + you need more than one statement, you must use begin ... end.\nDuplicate (and partially overlapping) case items are permitted. The first one that matches is used. C does not allow duplicate case items.\nCreate a 6-to-1 multiplexer. When sel is between 0 and 5, choose the corresponding data input. Otherwise, output 0. The data inputs and outputs are all 4 bits wide. Be careful of inferring latches.\n// synthesis verilog_input_version verilog_2001 module top_module ( input [2:0] sel, input [3:0] data0, input [3:0] data1, input [3:0] data2, input [3:0] data3, input [3:0] data4, input [3:0] data5, output reg [3:0] out ); always @(*) begin case(sel) 0: out = data0; 1: out = data1; 2: out = data2; 3: out = data3; 4: out = data4; 5: out = data5; default: out = 0; endcase end endmodule Priority encoder A priority encoder is a combinational circuit that, when given an input bit vector, outputs the position of the first 1 bit in the vector. For example, a 8-bit priority encoder given the input 8'b10010000 would output 3\u0026rsquo;d4, because bit[4] is first bit that is high. Build a 4-bit priority encoder. For this problem, if none of the input bits are high (i.e., input is zero), output zero. Note that a 4-bit number has 16 possible combinations. module top_module ( input [3:0] in, output reg [1:0] pos ); always @(*) begin case (in) 4\u0026#39;h0: pos = 2\u0026#39;h0; //0000 4\u0026#39;h1: pos = 2\u0026#39;h0; //0001 4\u0026#39;h2: pos = 2\u0026#39;h1; //0010 4\u0026#39;h3: pos = 2\u0026#39;h0; //0011 4\u0026#39;h4: pos = 2\u0026#39;h2; //0100 4\u0026#39;h5: pos = 2\u0026#39;h0; //0101 4\u0026#39;h6: pos = 2\u0026#39;h1; //0110 4\u0026#39;h7: pos = 2\u0026#39;h0; //0111 4\u0026#39;h8: pos = 2\u0026#39;h3; //1000 4\u0026#39;h9: pos = 2\u0026#39;h0; //1001 4\u0026#39;ha: pos = 2\u0026#39;h1; //1010 4\u0026#39;hb: pos = 2\u0026#39;h0; //1011 4\u0026#39;hc: pos = 2\u0026#39;h2; //1100 4\u0026#39;hd: pos = 2\u0026#39;h0; //1101 4\u0026#39;he: pos = 2\u0026#39;h1; //1110 4\u0026#39;hf: pos = 2\u0026#39;h0; //1111 default: pos = 2\u0026#39;b0; endcase end endmodule Priority encoder with casez Build previous problem with casez. If the case items in the case statement supported con\u0026rsquo;t care bits. This is what casez is for: It treats bits that have the value z as don\u0026rsquo;t care in the comparison. A case statement behaves as though each item is checked sequentially (in reality, a big combinational logic function). Notice how there are certain inputs (e.g., 4\u0026rsquo;b1111) that will match more than one case item. The first match is chosen (so 4\u0026rsquo;b1111 matches the first item, out = 0, but not any of the later ones). There is also a similar casex that treats both x and z as don\u0026rsquo;t-care. I don\u0026rsquo;t see much purpose to using it over casez. The digit ? is a synonym for z. so 2\u0026rsquo;bz0 is the same as 2\u0026rsquo;b?0 It may be less error-prone to explicitly specify the priority behaviour rather than rely on the ordering of the case items. For example, the following will still behave the same way if some of the case items were reordered, because any bit pattern can only match at most one case item: module top_module ( input [7:0] in, output reg [2:0] pos ); always @(*) begin casez(in) 8\u0026#39;bzzzzzzz1: pos = 3\u0026#39;d0; 8\u0026#39;bzzzzzz10: pos = 3\u0026#39;d1; 8\u0026#39;bzzzzz100: pos = 3\u0026#39;d2; 8\u0026#39;bzzzz1000: pos = 3\u0026#39;d3; 8\u0026#39;bzzz10000: pos = 3\u0026#39;d4; 8\u0026#39;bzz100000: pos = 3\u0026#39;d5; 8\u0026#39;bz1000000: pos = 3\u0026#39;d6; 8\u0026#39;b10000000: pos = 3\u0026#39;d7; default: pos = 2\u0026#39;d0; endcase end endmodule Avoiding latches Suppose you\u0026rsquo;re building a circuit to process scancodes from a PS/2 keyboard for a game. Given the last two bytes of scancodes received, you need to indicate whether one of the arrow keys on the keyboard have been pressed. This involves a fairly simple mapping, which can be implemented as a case statement (or if-elseif) with four cases.\n\\(\\begin{array}{|c|c|}\\hline \\text{Scancode [15:0]}\u0026amp;\\text{Arrow key}\\\\\\hline \\text{16\u0026rsquo;he06b}\u0026amp;\\text{left arrow}\\\\\\hline \\text{16\u0026rsquo;he072}\u0026amp;\\text{down arrow}\\\\\\hline \\text{16\u0026rsquo;he074}\u0026amp;\\text{right arrow}\\\\\\hline \\text{16\u0026rsquo;he075}\u0026amp;\\text{up arrow}\\\\\\hline \\text{Anything else}\u0026amp;\\text{none}\\\\\\hline \\end{array Your circuit has one 16-bit input, and four outputs. Build this circuit that recognizes these four scancodes and asserts the correct output. To avoid creating latches, all outputs must be assigned a value in all possible conditions. Simply having a default case is not enough. You must assign a value to all four outputs in all four cases and the default case. This can involve a lot of unnecessary typing. One easy way around this is to assign a \u0026ldquo;default value\u0026rdquo; to the outputs before the case statement: always @(*) begin up = 1\u0026#39;b0; down = 1\u0026#39;b0; left = 1\u0026#39;b0; right = 1\u0026#39;b0; case (scancode) ... // Set to 1 as necessary. endcase end This style of code ensures the outputs are assigned a value (of 0) in all possible cases unless the case statement overrides the assignment. This also means that a default: case item becomes unnecessary. Reminder: The logic synthesizer generates a combinational circuit that behaves equivalently to what the code describes.Hardware does not \u0026ldquo;execute\u0026rdquo; the lines of code in sequence. module top_module ( input [15:0] scancode, output reg left, output reg down, output reg right, output reg up ); always @(*) begin left = 0; down = 0; right = 0; up = 0; case(scancode) 16\u0026#39;he06b: left = 1; 16\u0026#39;he072: down = 1; 16\u0026#39;he074: right = 1; 16\u0026#39;he075: up = 1; endcase end endmodule 2.5 More Verilog Features Conditional ternary operator Verilog has a ternary conditional operator ( ? : ) much like C: (condition ? if_true : if_false) Given four unsigned numbers, find the minimum. Unsigned numbers can be compared with standard comparison operators (a \u0026lt; b). Use the conditional operator to make two-way min circuits, then compose a few of them to create a 4-way min circuit. You\u0026rsquo;ll probably want some wire vectors for the intermediate results. module top_module ( input [7:0] a, b, c, d, output [7:0] min);// wire [7:0] wire1; wire [7:0] wire2; assign wire1 = a \u0026gt; b ? b : a; assign wire2 = c \u0026gt; d ? d : c; assign min = wire1 \u0026gt; wire2 ? wire2 : wire1; endmodule Reduction operators Some syntactic sugar for reduction: \u0026amp; a[3:0] // AND: a[3] \u0026amp; a[2] \u0026amp; a[1] \u0026amp; a[0]. Equivalent to (a[3:0] == 4\u0026#39;hf) | b[3:0] // OR: b[3] | b[2] | b[1] | b[0]. Equivalent to (b[3:0] != 4\u0026#39;h0) ^ c[2:0] // XOR: c[2] ^ c[1] ^ c[0] Parity checking is often used as a simple method of detecting errors when transmitting data through an imperfect channel. Create a circuit that will compute a parity bit for a 8-bit byte (which will add a 9th bit to the byte). We will use \u0026ldquo;even\u0026rdquo; parity, where the parity bit is just the XOR of all 8 data bits. module top_module ( input [7:0] in, output parity); assign parity = ^ in; endmodule Reduction: Even wider gates Build a combinational circuit with 100 inputs, in[99:0]. There are 3 outputs: out_and: output of a 100-input AND gate. out_or: output of a 100-input OR gate. out_xor: output of a 100-input XOR gate. module top_module( input [99:0] in, output out_and, output out_or, output out_xor ); assign out_and = \u0026amp; in; assign out_or = | in; assign out_xor = ^ in; endmodule Combinational for-loop: Vector reversal Given a 100-bit input vector [99:0], reverse its bit ordering. module top_module( input [99:0] in, output [99:0] out ); always @(*) begin for (int i = 0; i \u0026lt; 100; i++) begin out[i] = in[99 - i]; end end endmodule Combinational for-loop: 255-bit population count A \u0026ldquo;population count\u0026rdquo; circuit counts the number of \u0026lsquo;1\u0026rsquo;s in an input vector. Build a population count circuit for a 255-bit input vector. module top_module( input [254:0] in, output [7:0] out ); always @(*) begin out = 0; for (int i = 0; i \u0026lt; 255; i++) begin out += in[i]; end end endmodule Generate for-loop: 100-bit binary adder Create a 100-bit binary ripple-carry adder by instantiating 100 full adders. The adder adds two 100-bit numbers and a carry-in to produce a 100-bit sum and carry out. To encourage you to actually instantiate full adders, also output the carry-out from each full adder in the ripple-carry adder. cout[99] is the final carry-out from the last full adder, and is the carry-out you usually see. module top_module( input [99:0] a, b, input cin, output [99:0] cout, output [99:0] sum ); always @(*) begin {cout[0], sum[0]} = a[0] + b[0] + cin; for (int i = 1; i \u0026lt; 100; i++) begin {cout[i], sum[i]} = a[i] + b[i] + cout[i-1]; end end endmodule Generate for-loop: 100-digit BCD adder You are provided with a BCD one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out. module bcd_fadd ( input [3:0] a, input [3:0] b, input cin, output cout, output [3:0] sum ); Instantiate 100 copies of bcd_fadd to create a 100-digit BCD ripple-carry adder. Your adder should add two 100-digit BCD numbers (packed into 400-bit vectors) and a carry-in to produce a 100-digit sum and carry out. module top_module( input [399:0] a, b, input cin, output cout, output [399:0] sum ); wire[99:0] carryin; generate genvar i; bcd_fadd(a[3:0], b[3:0], cin, carryin[0], sum[3:0]); for (i = 4; i \u0026lt; 400; i += 4) begin:adder bcd_fadd(a[i+3:i], b[i+3:i], carryin[i/4-1], carryin[i/4], sum[i+3:i]); end assign cout = carryin[99]; endgenerate endmodule ","permalink":"https://intervalrain.github.io/verilog/hdlbits2/","summary":"\u003cp\u003e\u003ca href=\"/verilog/hdlbits1/#1-getting-started\"\u003e1. Getting Started\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/verilog/hdlbits2/#2-verilog-language\"\u003e2. Verilog Language\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/verilog/hdlbits3/#3-circuits\"\u003e3. Circuits\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/verilog/hdlbits4/#4-getting-started\"\u003e4. Verification: Reading Simulations\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/verilog/hdlbits5/#5-verification---writing-testbenches\"\u003e5. Verification: Writing Testbenches\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/verilog/hdlbits6/#6-cs450\"\u003e6. CS450\u003c/a\u003e\u003c/p\u003e\n\u003ch1 id=\"2-verilog-language\"\u003e2 Verilog Language\u003c/h1\u003e\n\u003ch2 id=\"21-basics\"\u003e2.1 Basics\u003c/h2\u003e\n\u003ch3 id=\"wire\"\u003ewire\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eCreate a module with one input and ont output that behaves like a wire\n\u003cimg alt=\"wire\" loading=\"lazy\" src=\"https://hdlbits.01xz.net/mw/images/7/77/Wire.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Verilog\" data-lang=\"Verilog\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003emodule\u003c/span\u003e top_module( \u003cspan style=\"color:#66d9ef\"\u003einput\u003c/span\u003e in, \u003cspan style=\"color:#66d9ef\"\u003eoutput\u003c/span\u003e out);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eassign\u003c/span\u003e out \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e in;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eendmodule\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch3 id=\"multi-in-out\"\u003emulti-in-out\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eCreate a module with 3 inputs and 4 outputs that behaves like wires that makes these connections:\n\u003cimg alt=\"wire4\" loading=\"lazy\" src=\"https://hdlbits.01xz.net/mw/images/1/15/Wire4.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Verilog\" data-lang=\"Verilog\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003emodule\u003c/span\u003e top_module( \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003einput\u003c/span\u003e a,b,c, \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eoutput\u003c/span\u003e w,x,y,z );\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eassign\u003c/span\u003e w \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e a;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eassign\u003c/span\u003e x \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e b;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eassign\u003c/span\u003e y \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e b;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eassign\u003c/span\u003e z \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e c;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eendmodule\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch3 id=\"not-gate\"\u003enot gate\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eCreate a module that implements a NOT gate.\n\u003cimg alt=\"Notgate\" loading=\"lazy\" src=\"https://hdlbits.01xz.net/mw/images/9/9e/Notgate.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Verilog\" data-lang=\"Verilog\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003emodule\u003c/span\u003e top_module( \u003cspan style=\"color:#66d9ef\"\u003einput\u003c/span\u003e in, \u003cspan style=\"color:#66d9ef\"\u003eoutput\u003c/span\u003e out );\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eassign\u003c/span\u003e out \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e~\u003c/span\u003ein;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eendmodule\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch3 id=\"and-gate\"\u003eand gate\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eCreate a module that implments an AND gate.\n\u003cimg alt=\"Andgate\" loading=\"lazy\" src=\"https://hdlbits.01xz.net/mw/images/7/78/Andgate.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Verilog\" data-lang=\"Verilog\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003emodule\u003c/span\u003e top_module( \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003einput\u003c/span\u003e a,b,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eoutput\u003c/span\u003e out );\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eassign\u003c/span\u003e out \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e a \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e b;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eendmodule\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch3 id=\"nor-gate\"\u003enor gate\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eCreate a module that implements a NOR gate. A NOR gate is an OR gate with its output inverted. A NOR function needs two operators when written in Verilog.\n\u003cimg alt=\"norgate\" loading=\"lazy\" src=\"https://hdlbits.01xz.net/mw/images/5/5b/Norgate.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Verilog\" data-lang=\"Verilog\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003emodule\u003c/span\u003e top_module(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003einput\u003c/span\u003e a,b,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eoutput\u003c/span\u003e out );\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eassign\u003c/span\u003e out \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e~\u003c/span\u003e(a\u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003eb);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eendmodule\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch3 id=\"xnor-gate\"\u003exnor gate\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eCreate a module that implements a XNOR gate.\n\u003cimg alt=\"xnorgate\" loading=\"lazy\" src=\"https://hdlbits.01xz.net/mw/images/6/6d/Xnorgate.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Verilog\" data-lang=\"Verilog\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003emodule\u003c/span\u003e top_module(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003einput\u003c/span\u003e a, b,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eoutput\u003c/span\u003e out );\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eassign\u003c/span\u003e out \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e~\u003c/span\u003e(a\u003cspan style=\"color:#f92672\"\u003e^\u003c/span\u003eb);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eendmodule\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch3 id=\"wire-declaration\"\u003ewire declaration\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eImplement following circuits. Create two intermediate wires to connect the AND and OR gates together. Note that the wire that feeds the NOT gate is really wire out, so you do not necessarily need to declare a third wire here. Notice how wires are driven by exactly one source (output of a gate), but can feed multiple inputs.\n\u003cimg alt=\"Wiredecl\" loading=\"lazy\" src=\"https://hdlbits.01xz.net/mw/images/3/3a/Wiredecl2.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Verilog\" data-lang=\"Verilog\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003emodule\u003c/span\u003e top_module(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003einput\u003c/span\u003e a,b,c,d,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eoutput\u003c/span\u003e out, out_n );\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ewire\u003c/span\u003e w1, w2;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eassign\u003c/span\u003e w1 \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e a \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e b;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eassign\u003c/span\u003e w2 \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e c \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e d;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eassign\u003c/span\u003e out \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e w1 \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e w2;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eassign\u003c/span\u003e out_n \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e~\u003c/span\u003eout;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eendmodule\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch3 id=\"7458\"\u003e7458\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eThe 7458 is a chip with four AND gates and two OR gates. Create a module with the same functionality as the 7458 chip. It has 10 inputs and 2 outputs.\n\u003cimg alt=\"7458\" loading=\"lazy\" src=\"https://hdlbits.01xz.net/mw/images/e/e1/7458.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Verilog\" data-lang=\"Verilog\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003emodule\u003c/span\u003e top_module(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003einput\u003c/span\u003e p1a, p1b, p1c, p1d, p1e, p1f,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eoutput\u003c/span\u003e p1y,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    intput p2a, p2b, p2c, p2d,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eoutput\u003c/span\u003e p2y );\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ewire\u003c/span\u003e w1a, w1b;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ewire\u003c/span\u003e w2a, w2b;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eassign\u003c/span\u003e w1a \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e p1a \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e p1b \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e p1c;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eassign\u003c/span\u003e w1b \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e p1d \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e p1e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e p1f;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eassign\u003c/span\u003e p1y \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e w1a \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e w1b;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eassign\u003c/span\u003e w2a \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e p2a \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e p2b;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eassign\u003c/span\u003e w2b \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e p2c \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e p2d;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eassign\u003c/span\u003e p2y \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e w2a \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e w2b;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eendmodule\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"22-vectors\"\u003e2.2 Vectors\u003c/h2\u003e\n\u003ch3 id=\"vector\"\u003evector\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eBuild a circuit that has one 3-bit input, then outputs the same vector, and also splits it into three separate 1-bit outputs. Connect outputs o0 to the input vector\u0026rsquo;s position 0, o1 to position 1, etc.\u003cbr\u003e\nIn a diagram, a tick mark with a number next to it indicates the width of the vector (or \u0026ldquo;bus\u0026rdquo;), rather than drawing a separate line for each bit in the vector.\n\u003cimg alt=\"vector0\" loading=\"lazy\" src=\"https://hdlbits.01xz.net/mw/images/a/ae/Vector0.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Verilog\" data-lang=\"Verilog\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003emodule\u003c/span\u003e top_module (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003einput\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ewire\u003c/span\u003e [\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e] vec,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eoutput\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ewire\u003c/span\u003e [\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e] outv,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eoutput\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ewire\u003c/span\u003e o2,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eoutput\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ewire\u003c/span\u003e o1,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eoutput\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ewire\u003c/span\u003e o0  );\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eassign\u003c/span\u003e outv \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e vec;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eassign\u003c/span\u003e o0 \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e vec[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eassign\u003c/span\u003e o1 \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e vec[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eassign\u003c/span\u003e o2 \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e vec[\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eendmodule\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch3 id=\"vector-select\"\u003evector select\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eBuild a combinational circuit that splits an input half-word (16 bits, [15:0]) into lower [7:0] and upper [15:8] bytes.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Verilog\" data-lang=\"Verilog\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003emodule\u003c/span\u003e top_module (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003einput\u003c/span\u003e [\u003cspan style=\"color:#ae81ff\"\u003e15\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e] in,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eoutput\u003c/span\u003e [\u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e] out_hi,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eoutput\u003c/span\u003e [\u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e] out_lo );\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eassign\u003c/span\u003e out_hi \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e in[\u003cspan style=\"color:#ae81ff\"\u003e15\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e8\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eassign\u003c/span\u003e out_lo \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e in[\u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eendmodule\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch3 id=\"vector-swap\"\u003evector swap\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eA 32-bit vector can be viewed as containing 4 bytes (bits [31:24], [23:16], etc.). Build a circuit that will reverse the byte ordering of the 4-byte word.\u003cbr\u003e\nAaaaaaaaBbbbbbbbCcccccccDddddddd =\u0026gt; DdddddddCcccccccBbbbbbbbAaaaaaaa\u003cbr\u003e\nThis operation is often used when the endianness of a piece of data needs to be swapped, for example between little-endian x86 systems and the big-endian formats used in many Internet protocols.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Verilog\" data-lang=\"Verilog\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003emodule\u003c/span\u003e top_module (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003einput\u003c/span\u003e [\u003cspan style=\"color:#ae81ff\"\u003e31\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e] in,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eoutput\u003c/span\u003e [\u003cspan style=\"color:#ae81ff\"\u003e31\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e] out \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eassign\u003c/span\u003e out[\u003cspan style=\"color:#ae81ff\"\u003e31\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e24\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e in[ \u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eassign\u003c/span\u003e out[\u003cspan style=\"color:#ae81ff\"\u003e23\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e16\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e in[\u003cspan style=\"color:#ae81ff\"\u003e15\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e8\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eassign\u003c/span\u003e out[\u003cspan style=\"color:#ae81ff\"\u003e15\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e8\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e in[\u003cspan style=\"color:#ae81ff\"\u003e23\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e16\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eassign\u003c/span\u003e out[ \u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e in[\u003cspan style=\"color:#ae81ff\"\u003e31\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e24\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eendmodule\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch3 id=\"vector-gates\"\u003evector gates\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003euild a circuit that has two 3-bit inputs that computes the bitwise-OR of the two vectors, the logical-OR of the two vectors, and the inverse (NOT) of both vectors. Place the inverse of b in the upper half of out_not (i.e., bits [5:3]), and the inverse of a in the lower half.\n\u003cimg alt=\"vectorgates\" loading=\"lazy\" src=\"https://hdlbits.01xz.net/mw/images/1/1b/Vectorgates.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Verilog\" data-lang=\"Verilog\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003emodule\u003c/span\u003e top_module (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003einput\u003c/span\u003e [\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e] a,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003einput\u003c/span\u003e [\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e] b,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eoutput\u003c/span\u003e [\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e] out_or_bitwise,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eoutput\u003c/span\u003e out_or_logical,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eoutput\u003c/span\u003e [\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e] out_not\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eassign\u003c/span\u003e out_or_bitwise \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e a \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e b;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eassign\u003c/span\u003e out_or_logical \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e a \u003cspan style=\"color:#f92672\"\u003e||\u003c/span\u003e b;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eassign\u003c/span\u003e out_not[\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e~\u003c/span\u003ea;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eassign\u003c/span\u003e out_not[\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e~\u003c/span\u003eb;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eendmodule\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch3 id=\"gate-prefix-vector\"\u003egate-prefix vector\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eBuild a combinational circuit with four inputs, in[3:0]. There are 3 outputs:\n\u003cul\u003e\n\u003cli\u003eout_and: output of a 4-input AND gate.\u003c/li\u003e\n\u003cli\u003eout_or: output of a 4-input OR gate.\u003c/li\u003e\n\u003cli\u003eout_xor: outout of a 4-input XOR gate.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Verilog\" data-lang=\"Verilog\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003emodule\u003c/span\u003e top_module (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003einput\u003c/span\u003e [\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e] in,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eoutput\u003c/span\u003e out_and,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eoutput\u003c/span\u003e out_or,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eoutput\u003c/span\u003e out_xor );\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eassign\u003c/span\u003e out_and \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e in;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eassign\u003c/span\u003e out_or \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e in;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eassign\u003c/span\u003e out_xor \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e^\u003c/span\u003e in;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eendmodule\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch3 id=\"vector-concatenate\"\u003evector concatenate\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eGiven several input vectors, concatenate them together then split them up into several output vectors. There are six 5-bit input vectors: a, b, c, d, e, and f, for\n\u003cimg alt=\"vector3\" loading=\"lazy\" src=\"https://hdlbits.01xz.net/mw/images/0/0c/Vector3.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Verilog\" data-lang=\"Verilog\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003emodule\u003c/span\u003e top_module (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003einput\u003c/span\u003e [\u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e] a, b, c, d, e, f,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eoutput\u003c/span\u003e [\u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e] w, x, y, z );\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eassign\u003c/span\u003e {w, x, y, z} \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {a, b, c, d, e, f, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u0026#39;b11\u003c/span\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eendmodule\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch3 id=\"vector-reverse\"\u003evector reverse\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eGiven an 8-bit input vector [7:0], reverse its bit ordering.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Verilog\" data-lang=\"Verilog\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003emodule\u003c/span\u003e top_module(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003einput\u003c/span\u003e [\u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e] in,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eoutput\u003c/span\u003e [\u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e] out \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eassign\u003c/span\u003e {out[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e], out[\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e], out[\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e], out[\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e], out[\u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e], out[\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e], out[\u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e], out[\u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e]} \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e in\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eendmodule\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Verilog\" data-lang=\"Verilog\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003emodule\u003c/span\u003e top_module(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003einput\u003c/span\u003e [\u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e] in,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eoutput\u003c/span\u003e [\u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e] out \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ealways\u003c/span\u003e @(\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003ebegin\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e8\u003c/span\u003e; i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            out[i] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e in[\u003cspan style=\"color:#ae81ff\"\u003e8\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003ei\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eendmodule\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Verilog\" data-lang=\"Verilog\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003emodule\u003c/span\u003e top_module(\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003einput\u003c/span\u003e [\u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e] in,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eoutput\u003c/span\u003e [\u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e] out \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003egenerate\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003egenvar\u003c/span\u003e i;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (i\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e8\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e i\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003ebegin\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e my_block_name\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#66d9ef\"\u003eassign\u003c/span\u003e out[i] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e in[\u003cspan style=\"color:#ae81ff\"\u003e8\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003ei\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003eend\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eendgenerate\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eendmodule\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch3 id=\"vector-replication\"\u003evector replication\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eBuild a circuit that sign-extends an 8-bit number to 32 bits. This requires a concatenation of 24 copies of the sign bit (i.e., replicate bit[7] 24 times) followed by the 8-bit number itself.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Verilog\" data-lang=\"Verilog\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003emodule\u003c/span\u003e top_module (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003einput\u003c/span\u003e [\u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e] in,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eoutput\u003c/span\u003e [\u003cspan style=\"color:#ae81ff\"\u003e31\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e] out );\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eassign\u003c/span\u003e out \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {{\u003cspan style=\"color:#ae81ff\"\u003e24\u003c/span\u003e{in[\u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e]}}, in};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eendmodule\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch3 id=\"vector-replication2\"\u003evector replication2\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eGiven five 1-bit signals (a, b, c, d, and e), compute all 25 pairwise one-bit comparisons in the 25-bit output vector. The output should be 1 if the two bits being compared are equal.\n\u003cimg alt=\"vector5\" loading=\"lazy\" src=\"https://hdlbits.01xz.net/mw/images/a/ac/Vector5.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Verilog\" data-lang=\"Verilog\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003emodule\u003c/span\u003e top_module (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003einput\u003c/span\u003e a, b, c, d, e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eoutput\u003c/span\u003e [\u003cspan style=\"color:#ae81ff\"\u003e24\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e] out );\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eassign\u003c/span\u003e out \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e~\u003c/span\u003e{{\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e{a}}, {\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e{b}}, {\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e{c}}, {\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e{d}}, {\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e{e}}} \u003cspan style=\"color:#f92672\"\u003e^\u003c/span\u003e {\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e{a,b,c,d,e}};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eendmodule\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"23-modules-hierarchy\"\u003e2.3 Modules: Hierarchy\u003c/h2\u003e\n\u003cp\u003eBy now, you\u0026rsquo;re familiar with a module, which is a circuit that interacts with its outside through input and output ports. Larger, more complex circuits are built by composing bigger modules out of smaller modules and other pieces (such as assign statements and always blocks) connected together. This forms a hierarchy, as modules can contain instances of other modules.\u003c/p\u003e","title":"[VHDL] HDLbits 2 - Verilog Language"},{"content":"1. Getting Started\n2. Verilog Language\n3. Circuits\n4. Verification: Reading Simulations\n5. Verification: Writing Testbenches\n6. CS450\n3 Circuits 3.1 Combinational Logic 3.1.1 Basic Gates Wire module top_module ( input in, output out); assign out = in; endmodule GND module top_module ( output out); assign out = 1\u0026#39;b0; endmodule NOR module top_module ( input in1, input in2, output out); assign out = ~(in1|in2); endmodule Another Gate module top_module ( input in1, input in2, output out); assign out = in1 \u0026amp; (~in2); endmodule Two gates module top_module ( input in1, input in2, input in3, output out); wire w1; assign w1 = ~(in1^in2); assign out = w1^in3; endmodule More logic gates module top_module( input a, b, output out_and, output out_or, output out_xor, output out_nand, output out_nor, output out_xnor, output out_anotb ); assign out_and = a \u0026amp; b; assign out_or = a | b; assign out_xor = a ^ b; assign out_nand = ~(a \u0026amp; b); assign out_nor = ~(a | b); assign out_xnor = ~(a ^ b); assign out_anotb = a \u0026amp; (~b); // and(out_and, a, b); // or(out_or, a, b); // xor(out_xor, a, b); // nand(out_nand, a, b); // nor(out_nor, a, b); // xnor(out_xnor, a, b); // and(out_anotb, a , ~b); endmodule 7420 chip module top_module ( input p1a, p1b, p1c, p1d, output p1y, input p2a, p2b, p2c, p2d, output p2y ); assign p1y = ~(p1a \u0026amp; p1b \u0026amp; p1c \u0026amp; p1d); assign p2y = ~(p2a \u0026amp; p2b \u0026amp; p2c \u0026amp; p2d); endmodule\\ Truth tables \\(\\begin{array}{|c|ccc|c|}\\hline \\text{Row}\u0026amp;\u0026amp;\\text{Inputs}\u0026amp;\u0026amp;\\text{Outputs}\\\\\\hline \\text{number}\u0026amp;\\text{x3}\u0026amp;\\text{x2}\u0026amp;\\text{x1}\u0026amp;\\text{f}\\\\\\hline 0\u0026amp;0\u0026amp;0\u0026amp;0\u0026amp;0\\\\\\hline 1\u0026amp;0\u0026amp;0\u0026amp;1\u0026amp;0\\\\\\hline 2\u0026amp;0\u0026amp;1\u0026amp;0\u0026amp;1\\\\\\hline 3\u0026amp;0\u0026amp;1\u0026amp;1\u0026amp;1\\\\\\hline 4\u0026amp;1\u0026amp;0\u0026amp;0\u0026amp;0\\\\\\hline 5\u0026amp;1\u0026amp;0\u0026amp;1\u0026amp;1\\\\\\hline 6\u0026amp;1\u0026amp;1\u0026amp;0\u0026amp;0\\\\\\hline 7\u0026amp;1\u0026amp;1\u0026amp;1\u0026amp;1\\\\\\hline \\end{array module top_module( input x3, input x2, input x1, output f ); assign f = ((~x3)\u0026amp;x2)|(x3\u0026amp;x1); endmodule Two-bit equality Create a circuit that has two 2-bit inputs A[1:0] and B[1:0], and produces an output z. The value of z should be 1 if A = B, otherwise z should be 0. module top_module ( input [1:0] A, input [1:0] B, output z ); assign z = (A == B); endmodule Simple circuit A module top_module (input x, input y, output z); assign z = (x^y) \u0026amp;x; endmodule Simple circuit B module top_module ( input x, input y, output z ); assign z = (x==y); // assign z = ~(x ^ y); endmodule Combine circuits A and B module top_module (input x, input y, output z); wire o1, o2, o3, o4; A ia1(x,y,o1); B ib1(x,y,o2); A ia2(x,y,o3); B ib2(x,y,o4); assign z = (o1|o2)^(o3\u0026amp;o4); endmodule module A( input x, y, output z); assign z = (x ^ y) \u0026amp; x; endmodule module B( input x, y, output z); assign z = x ~^ y; endmodule Ringer Suppose you are designing a circuit to control a cellphone\u0026rsquo;s ringer and vibration motor. Whenever the phone needs to ring from an incoming call (input ring), your circuit must either turn on the ringer (output ringer = 1) or the motor (output motor = 1), but not both. If the phone is in vibrate mode (input vibrate_mode = 1), turn on the motor. Otherwise, turn on the ringer. Try to use only assign statements, to see whether you can translate a problem description into a collection of logic gates. Design hint: When designing circuits, one often has to think of the problem \u0026ldquo;backwards\u0026rdquo;, starting from the outputs then working backwards towards the inputs. This is often the opposite of how one would think about a (sequential, imperative) programming problem, where one would look at the inputs first then decide on an action (or output). For sequential programs, one would often think \u0026ldquo;If (inputs are ___ ) then (output should be ___ )\u0026rdquo;. On the other hand, hardware designers often think \u0026ldquo;The (output should be ___ ) when (inputs are ___ )\u0026rdquo;. The above problem description is written in an imperative form suitable for software programming (if ring then do this), so you must convert it to a more declarative form suitable for hardware implementation (assign ringer = ___). Being able to think in, and translate between, both styles is one of the most important skills needed for hardware design. module top_module ( input ring, input vibrate_mode, output ringer, // Make sound output motor // Vibrate ); assign ringer = ring \u0026amp; (~vibrate_mode); assign motor = ring \u0026amp; (vibrate_mode); endmodule Thermostat A heating/cooling thermostat controls both a heater (during winter) and an air conditioner (during summer). Implement a circuit that will turn on and off the heater, air conditioning, and blower fan as appropriate. The thermostat can be in one of two modes: heating (mode = 1) and cooling (mode = 0). In heating mode, turn the heater on when it is too cold (too_cold = 1) but do not use the air conditioner. In cooling mode, turn the air conditioner on when it is too hot (too_hot = 1), but do not turn on the heater. When the heater or air conditioner are on, also turn on the fan to circulate the air. In addition, the user can also request the fan to turn on (fan_on = 1), even if the heater and air conditioner are off. Try to use only assign statements, to see whether you can translate a problem description into a collection of logic gates. 畫出真值表\n\\(\\begin{array}{|cccc|ccc|}\\hline \\text{mode}\u0026amp;\\text{too\\_cold}\u0026amp;\\text{too\\_hot}\u0026amp;\\text{fan on}\u0026amp;\\text{heater}\u0026amp;\\text{aircon}\u0026amp;\\text{fan}\\\\\\hline 0\u0026amp;0\u0026amp;0\u0026amp;0\u0026amp;0\u0026amp;0\u0026amp;0\\\\\\hline 0\u0026amp;0\u0026amp;0\u0026amp;1\u0026amp;0\u0026amp;0\u0026amp;1\\\\\\hline 0\u0026amp;0\u0026amp;1\u0026amp;0\u0026amp;0\u0026amp;1\u0026amp;1\\\\\\hline 0\u0026amp;0\u0026amp;1\u0026amp;1\u0026amp;0\u0026amp;1\u0026amp;1\\\\\\hline 0\u0026amp;1\u0026amp;0\u0026amp;0\u0026amp;0\u0026amp;0\u0026amp;0\\\\\\hline 0\u0026amp;1\u0026amp;0\u0026amp;1\u0026amp;0\u0026amp;0\u0026amp;1\\\\\\hline 0\u0026amp;1\u0026amp;1\u0026amp;0\u0026amp;0\u0026amp;1\u0026amp;1\\\\\\hline 0\u0026amp;1\u0026amp;1\u0026amp;1\u0026amp;0\u0026amp;1\u0026amp;1\\\\\\hline 1\u0026amp;0\u0026amp;0\u0026amp;0\u0026amp;0\u0026amp;0\u0026amp;0\\\\\\hline 1\u0026amp;0\u0026amp;0\u0026amp;1\u0026amp;0\u0026amp;0\u0026amp;1\\\\\\hline 1\u0026amp;0\u0026amp;1\u0026amp;0\u0026amp;0\u0026amp;0\u0026amp;0\\\\\\hline 1\u0026amp;0\u0026amp;1\u0026amp;1\u0026amp;0\u0026amp;0\u0026amp;1\\\\\\hline 1\u0026amp;1\u0026amp;0\u0026amp;0\u0026amp;1\u0026amp;0\u0026amp;1\\\\\\hline 1\u0026amp;1\u0026amp;0\u0026amp;1\u0026amp;1\u0026amp;0\u0026amp;1\\\\\\hline 1\u0026amp;1\u0026amp;1\u0026amp;0\u0026amp;1\u0026amp;0\u0026amp;1\\\\\\hline 1\u0026amp;1\u0026amp;1\u0026amp;1\u0026amp;1\u0026amp;0\u0026amp;1\\\\\\hline \\end{array}\\) module top_module ( input too_cold, input too_hot, input mode, input fan_on, output heater, output aircon, output fan); assign heater = mode \u0026amp; too_cold; assign aircon = (~mode) \u0026amp; too_hot; assign fan = heater|aircon|fan_on; endmodule 3-bit population count A \u0026ldquo;population count\u0026rdquo; circuit counts the number of \u0026lsquo;1\u0026rsquo;s in an input vector. Build a population count circuit for a 3-bit input vector. module top_module( input [2:0] in, output [1:0] out ); always @(*) begin out = 0; for (int i = 0; i \u0026lt;= 2; i++) begin out += in[i]; end end endmodule 此解會產生鎖存器，不建議使用。 Gates and vectors You are given a four-bit input vector in[3:0]. We want to know some relationships between each bit and its neighbour: out_both: Each bit of this output vector should indicate whether both the corresponding input bit and its neighbour to the left (higher index) are \u0026lsquo;1\u0026rsquo;. For example, out_both[2] should indicate if in[2] and in[3] are both 1. Since in[3] has no neighbour to the left, the answer is obvious so we don\u0026rsquo;t need to know out_both[3]. out_any: Each bit of this output vector should indicate whether any of the corresponding input bit and its neighbour to the right are \u0026lsquo;1\u0026rsquo;. For example, out_any[2] should indicate if either in[2] or in[1] are 1. Since in[0] has no neighbour to the right, the answer is obvious so we don\u0026rsquo;t need to know out_any[0]. out_different: Each bit of this output vector should indicate whether the corresponding input bit is different from its neighbour to the left. For example, out_different[2] should indicate if in[2] is different from in[3]. For this part, treat the vector as wrapping around, so in[3]\u0026rsquo;s neighbour to the left is in[0]. module top_module( input [3:0] in, output [2:0] out_both, output [3:1] out_any, output [3:0] out_different ); assign out_both[2:0] = in[2:0] \u0026amp; in[3:1]; assign out_any[3:1] = in[3:1] | in[2:0]; assign out_different[3:0] = in[3:0] ^ {in[0], in[3:1]}; // always @(*) begin // out_different[3] = (in[3] != in[0]); // for (int i = 0; i \u0026lt;= 2; i++) begin // out_both[i] = in[i] \u0026amp; in[i+1]; // out_any[i+1] = in[i+1] | in[i]; // out_different[i] = (in[i] != in[i+1]); // end // end endmodule Even longer vectors You are given a 100-bit input vector in[99:0]. We want to know some relationships between each bit and its neighbour: out_both: Each bit of this output vector should indicate whether both the corresponding input bit and its neighbour to the left are \u0026lsquo;1\u0026rsquo;. For example, out_both[98] should indicate if in[98] and in[99] are both 1. Since in[99] has no neighbour to the left, the answer is obvious so we don\u0026rsquo;t need to know out_both[99]. out_any: Each bit of this output vector should indicate whether any of the corresponding input bit and its neighbour to the right are \u0026lsquo;1\u0026rsquo;. For example, out_any[2] should indicate if either in[2] or in[1] are 1. Since in[0] has no neighbour to the right, the answer is obvious so we don\u0026rsquo;t need to know out_any[0]. out_different: Each bit of this output vector should indicate whether the corresponding input bit is different from its neighbour to the left. For example, out_different[98] should indicate if in[98] is different from in[99]. For this part, treat the vector as wrapping around, so in[99]\u0026rsquo;s neighbour to the left is in[0]. module top_module( input [99:0] in, output [98:0] out_both, output [99:1] out_any, output [99:0] out_different ); assign out_both[98:0] = in[98:0] \u0026amp; in[99:1]; assign out_any[99:1] = in[99:1] | in[98:0]; assign out_different[99:0] = in[99:0] ^ {in[0], in[99:1]}; endmodule 3.1.2 Multiplexers 2-to-1 multiplexer Create a one-bit wide, 2-to-1 multiplexer. When sel=0, choose a. When sel=1, choose b. module top_module( input a, b, sel, output out ); assign out = sel ? b : a; endmodule 2-to-1 bus multiplexer Create a 100-bit wide, 2-to-1 multiplexer. When sel=0, choose a. When sel=1, choose b. module top_module( input [99:0] a, b, input sel, output [99:0] out ); assign out = sel ? b : a; endmodule 9-to-1 multiplexer Create a 16-bit 9-to-1 multiplexer. sel=0 chooses a, sel=1 chooses b, etc. For the unused cases (sel=9 to 15), set all output bits to \u0026lsquo;1\u0026rsquo;. module top_module( input [15:0] a, b, c, d, e, f, g, h, i, input [3:0] sel, output [15:0] out ); always @(*) begin case(sel) 4\u0026#39;d0: out = a; 4\u0026#39;d1: out = b; 4\u0026#39;d2: out = c; 4\u0026#39;d3: out = d; 4\u0026#39;d4: out = e; 4\u0026#39;d5: out = f; 4\u0026#39;d6: out = g; 4\u0026#39;d7: out = h; 4\u0026#39;d8: out = i; default: out = \u0026#39;1; // special literal syntax with all bits set to 1 endcase end endmodule 256-to-1 multiplexer Create a 1-bit wide, 256-to-1 multiplexer. The 256 inputs are all packed into a single 256-bit input vector. sel=0 should be select in[0], sel1 selectes bits in[1], sel=2 selects bits in[2], etc. module top_module( input [255:0] in, input [7:0] sel, output out ); assign out = in[sel]; endmodule 256-to-1 4-bit multiplexer Create a 4-bit wide, 256-to-1 multiplexer. The 256 4-bit inputs are all packed into a single 1024-bit input vector. sel=0 should select bits in[3:0],sel=1 selects bits in[7:4], sel=2 selects bits in[11:8], etc. module top_module( input [1023:0] in, input [7:0] sel, output [3:0] out ); assign out = in[sel*4+:4]; // special syntax // assign out = in[sel*4+3-:4]; // assign out = {in[sel*4+3],in[sel*4+2],in[sel*4+1],in[sel*4+0]}; endmodule 3.1.3 Arithmetic Circuits Half adder Create a half adder. A half adder adds two bits (with no carry-in) and produces a sum and carry-out. module top_module( input a, b, output cout, sum ); assign {cout, sum} = a + b; endmodule Full adder Create a full adder. A full adder adds three bits (including carry-in) and produces a sum and a carry-out. module top_module( input a, b, cin, output cout, sum ); assign {cout, sum} = a + b + cin; endmodule 3-bit binary adder Now that you know how to build a full adder, make 3 instances of it to create a 3-bit binary ripple-carry adder. The adder adds two 3-bit numbers and a carry-in to produce a 3-bit sum and carry out. To encourage you to actually instantiate full adders, also output the carry-out from each full adder in the ripple-carry adder. cout[2] is the final carry-out from the last full adder, and is the carry-out you usually see. module top_module( input [2:0] a, b, input cin, output [2:0] cout, output [2:0] sum ); fulladder f1(a[0], b[0], cin, cout[0], sum[0]); fulladder f2(a[1], b[1], cout[0], cout[1], sum[1]); fulladder f3(a[2], b[2], cout[1], cout[2], sum[2]); endmodule module fulladder( input a, b, cin, output cout, sum); assign {cout, sum} = a + b + cin; endmodule Adder Implement the following circuit: module top_module ( input [3:0] x, input [3:0] y, output [4:0] sum); // assign sum = x + y; wire [2:0] cout; FA f1(x[0], y[0], 0, cout[0], sum[0]); FA f2(x[1], y[1], cout[0], cout[1], sum[1]); FA f3(x[2], y[2], cout[1], cout[2], sum[2]); FA f4(x[3], y[3], cout[2], sum[4], sum[3]); endmodule module FA ( input a, b, cin, output cout, sum); assign {cout, sum} = a + b + cin; endmodule Signed addition overflow Assume that you have two 8-bit 2\u0026rsquo;s complement numbers, a[7:0] and b[7:0]. These numbers are added to produce s[7:0]. Also compute whether a (signed) overflow has occurred. module top_module ( input [7:0] a, input [7:0] b, output [7:0] s, output overflow ); assign s = a + b; assign overflow = (a[7] == b[7] \u0026amp;\u0026amp; a[7] != s[7]) ? 1 : 0; endmodule 100-bit binary adder Create a 100-bit binary adder. The adder adds two 100-bit numbers and a carry-in to produce a 100-bit sum and carry out. module top_module( input [99:0] a, b, input cin, output cout, output [99:0] sum); assign {cout, sum} = cin + a + b; endmodule 4-digit BCD adder You are provided with a BCD (binary-coded decimal) one-digit adder named bcd_fadd that adds two BCD digits and carry-in, and produces a sum and carry-out. module bcd_fadd ( input [3:0] a, input [3:0] b, input cin, output cout, output [3:0] sum ); Instantiate 4 copies of bcd_fadd to create a 4-digit BCD ripple-carry adder. Your adder should add two 4-digit BCD numbers (packed into 16-bit vectors) and a carry-in to produce a 4-digit sum and carry out.\nmodule top_module ( input [15:0] a, b, input cin, output cout, output [15:0] sum ); wire [2:0] wl; bcd_fadd u0 (a[ 3: 0], b[ 3: 0], cin, wl[0], sum[ 3: 0]); bcd_fadd u1 (a[ 7: 4], b[ 7: 4], wl[0], wl[1], sum[ 7: 4]); bcd_fadd u2 (a[11: 8], b[11: 8], wl[1], wl[2], sum[11: 8]); bcd_fadd u3 (a[15:12], b[15:12], wl[2], cout, sum[15:12]); endmodule 3.1.4 Karnaugh Map to Circuit Kmap1 Implement the circuit described by the Karnaugh map below. module top_module( input a, input b, input c, output out ); assign out = a | b | c; endmodule Kmap2 Implement the circuit described by the Karnaugh map below. module top_module( input a, input b, input c, input d, output out ); // a\u0026#39;d\u0026#39; + b\u0026#39;c\u0026#39; + acd + a\u0026#39;bc wire w1, w2, w3, w4; assign w1 = (~a)\u0026amp;(~d); assign w2 = (~b)\u0026amp;(~c); assign w3 = a\u0026amp;c\u0026amp;d; assign w4 = (~a)\u0026amp;b\u0026amp;c; assign out = w1|w2|w3|w4; endmodule Kmap3 Implement the circuit described by the Karnaugh map below. module top_module( input a, input b, input c, input d, output out ); // a + b\u0026#39;c assign out = a | (~b\u0026amp;c); endmodule Kmap4 Implement the circuit described by the Karnaugh map below. module top_module( input a, input b, input c, input d, output out ); always @(*) begin if (a == b \u0026amp;\u0026amp; c != d) out = 1; else if (a != b \u0026amp;\u0026amp; c == d) out = 1; else out = 0; end endmodule Minimum SOP and POS A single-output digital system with four inputs (a,b,c,d) generates a logic-1 when 2, 7, or 15 appears on the inputs, and a logic-0 when 0, 1, 4, 5, 6, 9, 10, 13, or 14 appears. The input conditions for the numbers 3, 8, 11, and 12 never occur in this system. For example, 7 corresponds to a,b,c,d being set to 0,1,1,1, respectively. Determine the output out_sop in minimum SOP form, and the output out_pos in minimum POS form. module top_module ( input a, input b, input c, input d, output out_sop, output out_pos ); // f = d3 + m7 + d11 + m15 + m2 // f = cd + a\u0026#39;b\u0026#39;c assign out_sop = (c \u0026amp; d) | (~a \u0026amp; ~b \u0026amp; c); // f\u0026#39; = m0 + m1 + m4 + m5 + m6 + d8 + m9 + m10 + d11 + d12 + m13 + m14 // f\u0026#39; = c\u0026#39; + ab\u0026#39; + bd\u0026#39; // f = (c)(a\u0026#39;+b)(b\u0026#39;+d) assign out_pos = c \u0026amp; (~a | b) \u0026amp; (~b | d); endmodule Karnaugh map Consider the function f shown in the Karnaugh map below. Implement this function. d is don\u0026rsquo;t-care, which means you may choose to output whatever value is convenient. module top_module ( input [4:1] x, output f ); // x[2]x[4] + x[1]\u0026#39;x[3] assign f = (x[2] \u0026amp; x[4]) | (~x[1] \u0026amp; x[3]); endmodule Karnaugh map Consider the function f shown in the Karnaugh map below. Implement this function. (The original exam question asked for simplified SOP and POS forms of the function.) module top_module ( input [4:1] x, output f ); // x[2]\u0026#39;x[4]\u0026#39; + x[1]\u0026#39;x[3] + x[2]x[3]x[4] assign f = (~x[2] \u0026amp; ~x[4]) | (~x[1] \u0026amp; x[3]) | (x[2] \u0026amp; x[3] \u0026amp; x[4]); endmodule K-map implemented with a multiplexer For the following Karnaugh map, give the circuit implementation using one 4-to-1 multiplexer and as many 2-to-1 multiplexers as required, but using as few as possible. You are not allowed to use any other logic gate and you must use a and b as the multiplexer selector inputs, as shown on the 4-to-1 multiplexer below. You are implementing just the portion labelled top_module, such that the entire circuit (including the 4-to-1 mux) implements the K-map. (The requirement to use only 2-to-1 multiplexers exists because the original exam question also wanted to test logic function simplification using K-maps and how to synthesize logic functions using only multiplexers. If you wish to treat this as purely a Verilog exercise, you may ignore this constraint and write the module any way you wish.) module top_module ( input c, input d, output [3:0] mux_in ); assign mux_in[0] = c|d; // 0111 assign mux_in[1] = 1\u0026#39;b0; // 0000 assign mux_in[2] = ~d; // 1001 assign mux_in[3] = c\u0026amp;d; // 0010 endmodule 3.2 Sequential Logic 3.2.1 Latches and Flip-Flops D flip-flop A D flip-flop is a circuit that stores a bit and is updated periodically, at the (usually) positive edge of a clock signal. D flip-flops are created by the logic synthesizer when a clocked always block is used (See alwaysblock2). A D + flip-flop is the simplest form of \u0026ldquo;blob of combinational logic followed by a flip-flop\u0026rdquo; where the combinational logic portion is just a wire. Create a single D flip-flop. module top_module ( input clk, // Clocks are used in sequential circuits input d, output reg q ); always @(posedge clk) begin q \u0026lt;= d; end endmodule D flip-flops Create 8 D flip-flops. All DFFs should be triggered by the positive edge of clk. module top_module ( input clk, input [7:0] d, output [7:0] q ); always @(posedge clk) begin q \u0026lt;= d; end endmodule DFF with reset Create 8 D flip-flops with active high synchronous reset. All DFFs should be triggered by the positive edge of clk. module top_module ( input clk, input reset, // Synchronous reset input [7:0] d, output [7:0] q ); always @(posedge clk) begin if (reset) begin q \u0026lt;= 8\u0026#39;b0; end else begin q \u0026lt;= d; end end endmodule DFF with reset value Create 8 D flip-flops with active high synchronous reset. The flip-flops must be reset to 0x34 rather than zero. All DFFs should be triggered by the negative edge of clk. module top_module ( input clk, input reset, input [7:0] d, output [7:0] q ); always @(negedge clk) begin if (reset) begin q \u0026lt;= 8\u0026#39;h34; end else begin q \u0026lt;= d; end end endmodule DFF with asynchronous reset Create 8 D flip-flops with active high asynchronous reset. All DFFs should be triggered by the positive edge of clk. module top_module ( input clk, input areset, // active high asynchronous reset input [7:0] d, output [7:0] q ); always @(posedge clk or posedge areset) if (areset) q \u0026lt;= 0; else q \u0026lt;= d; endmodule In Verilog, the sensity list looks strange. The FF\u0026rsquo;s reset is sensitive to the level of areset, so why does using \u0026ldquo;posedge areset\u0026rdquo; work? To see why it works, consider the truth table for all events that change the input signals, assuming clk and areset do not swith at precisely the same time.\n\\(\\begin{array}{|c|c|c|l|}\\hline \\text{clk}\u0026amp;\\text{areset}\u0026amp;\\text{output}\u0026amp;\\text{comment}\\\\\\hline \\text{x}\u0026amp;\\text{0}\\rightarrow\\text{1}\u0026amp;\\text{q}\\leftarrow{0;}\u0026amp;\\text{because areset = 1}\\\\\\hline \\text{x}\u0026amp;\\text{1}\\rightarrow\\text{0}\u0026amp;\\text{no change}\u0026amp;\\text{always block not triggered}\\\\\\hline \\text{0}\\rightarrow\\text{1}\u0026amp;\\text{0}\u0026amp;\\text{q}\\leftarrow{d;}\u0026amp;\\text{not resetting}\\\\\\hline \\text{0}\\rightarrow\\text{1}\u0026amp;\\text{1}\u0026amp;\\text{q}\\leftarrow{0;}\u0026amp;\\text{still resetting, q was 0 before too}\\\\\\hline \\text{1}\\rightarrow\\text{0}\u0026amp;\\text{x}\u0026amp;\\text{no change}\u0026amp;\\text{always block not triggered}\\\\\\hline \\end{array}\\) DFF with byte enable Create 16 D flip-flops. It\u0026rsquo;s sometimes useful to only modify parts of a group of flip-flops. The byte-enable inputs control whether each byte of the 16 registers should be written to on that cycle. byteena[1] controls the upper byte d[15:8], while byteena[0] controls the lower byte d[7:0]. resetn is a synchronous, active-low reset. All DFFs should be triggered by the positive edge of clk. module top_module ( input clk, input resetn, input [1:0] byteena, input [15:0] d, output [15:0] q ); always @(posedge clk) begin if (resetn == 1\u0026#39;b0) begin q \u0026lt;= 16\u0026#39;d0; end else begin case(byteena) 0: q \u0026lt;= q; 1: q \u0026lt;= {q[15:8], d[7:0]}; 2: q \u0026lt;= {d[15:8], q[7:0]}; 3: q \u0026lt;= d; endcase end end endmodule D Latch Implement the following circuit: Note that this is a latch, so a Quartus warning about hvaing inferred a latch is expected. 對於組合邏輯，if 若沒有補全 else，case 條件不完全，可能會產生 latch。但是如果中間的信號有初值，就不會產生 latch。所以要盡量避免 latch 的產生，避免對時序的危害很大。 module top_module ( input d, input ena, output q); always @(*) begin if (ena == 1\u0026#39;b1) q = d; end endmodule DFFAR Implement the following circuit: module top_module ( input clk, input d, input ar, // asynchronous reset output q); always@(posedge clk or posedge ar) begin if (ar == 1) q \u0026lt;= 0; else q \u0026lt;= d; end endmodule DFFR Implement the following circuit: module top_module ( input clk, input d, input r, // synchronous reset output q); always@(posedge clk) begin if (r == 1) begin q \u0026lt;= 0; end else begin q \u0026lt;= d; end end endmodule DFF+gate Implement the following circuit: module top_module ( input clk, input in, output reg out); always@(posedge clk) begin out \u0026lt;= out ^ in; end endmodule 注意 output 需為 reg 型別。 Mux and DFF Consider the sequential circuit below: Assume that you want to implement hierarchical Verilog code for this circuit, using three instantiations of a submodule that has a flip-flop and multiplexer in it. Write a Verilog module (containing one flip-flop and multiplexer) named top_module for this submodule. module top_module ( input clk, input L, input r_in, input q_in, output reg Q); always@(posedge clk) begin if (L) Q \u0026lt;= r_in; else Q \u0026lt;= q_in; end endmodule Mux and DFF DFF+gate Mux and DFF Mux and DFF DFFs and gates Create circuit from truth table Detect an edge Detect both edges Edge capture register Dual-edge triggered flip-flop 3.2.2 Counters 3.2.3 Shift Registers 3.2.4 More Circuits 3.2.5 Finite State Machines 3.3 Building Larger Circuits ","permalink":"https://intervalrain.github.io/verilog/hdlbits3/","summary":"\u003cp\u003e\u003ca href=\"/verilog/hdlbits1/#1-getting-started\"\u003e1. Getting Started\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/verilog/hdlbits2/#2-verilog-language\"\u003e2. Verilog Language\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/verilog/hdlbits3/#3-circuits\"\u003e3. Circuits\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/verilog/hdlbits4/#4-getting-started\"\u003e4. Verification: Reading Simulations\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/verilog/hdlbits5/#5-verification---writing-testbenches\"\u003e5. Verification: Writing Testbenches\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/verilog/hdlbits6/#6-cs450\"\u003e6. CS450\u003c/a\u003e\u003c/p\u003e\n\u003ch1 id=\"3-circuits\"\u003e3 Circuits\u003c/h1\u003e\n\u003ch2 id=\"31-combinational-logic\"\u003e3.1 Combinational Logic\u003c/h2\u003e\n\u003ch3 id=\"311-basic-gates\"\u003e3.1.1 Basic Gates\u003c/h3\u003e\n\u003ch4 id=\"wire\"\u003eWire\u003c/h4\u003e\n\u003cp\u003e\u003cimg alt=\"q4h\" loading=\"lazy\" src=\"https://hdlbits.01xz.net/mw/images/d/d7/Exams_m2014q4h.png\"\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Verilog\" data-lang=\"Verilog\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003emodule\u003c/span\u003e top_module (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003einput\u003c/span\u003e in,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eoutput\u003c/span\u003e out);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eassign\u003c/span\u003e out \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e in;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eendmodule\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch4 id=\"gnd\"\u003eGND\u003c/h4\u003e\n\u003cp\u003e\u003cimg alt=\"GND\" loading=\"lazy\" src=\"https://hdlbits.01xz.net/mw/images/5/54/Exams_m2014q4i.png\"\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Verilog\" data-lang=\"Verilog\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003emodule\u003c/span\u003e top_module (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eoutput\u003c/span\u003e out);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eassign\u003c/span\u003e out \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u0026#39;b0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eendmodule\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch4 id=\"nor\"\u003eNOR\u003c/h4\u003e\n\u003cp\u003e\u003cimg alt=\"NOR\" loading=\"lazy\" src=\"https://hdlbits.01xz.net/mw/images/e/e9/Exams_m2014q4e.png\"\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Verilog\" data-lang=\"Verilog\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003emodule\u003c/span\u003e top_module (\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003einput\u003c/span\u003e in1,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003einput\u003c/span\u003e in2,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eoutput\u003c/span\u003e out);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eassign\u003c/span\u003e out \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e~\u003c/span\u003e(in1\u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003ein2);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eendmodule\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003chr\u003e\n\u003ch4 id=\"another-gate\"\u003eAnother Gate\u003c/h4\u003e\n\u003cp\u003e\u003cimg alt=\"AnotherGate\" loading=\"lazy\" src=\"https://hdlbits.01xz.net/mw/images/b/b6/Exams_m2014q4f.png\"\u003e\u003c/p\u003e","title":"[VHDL] HDLbits 3 - Circuits"},{"content":"4 Verification - Reading Simulations 4.1 Finding bugs in code 4.2 Build a circuit from a simulation waveform 1. Getting Started\n2. Verilog Language\n3. Circuits\n4. Verification: Reading Simulations\n5. Verification: Writing Testbenches\n6. CS450\n","permalink":"https://intervalrain.github.io/verilog/hdlbits4/","summary":"\u003ch1 id=\"4-verification---reading-simulations\"\u003e4 Verification - Reading Simulations\u003c/h1\u003e\n\u003ch2 id=\"41-finding-bugs-in-code\"\u003e4.1 Finding bugs in code\u003c/h2\u003e\n\u003ch2 id=\"42-build-a-circuit-from-a-simulation-waveform\"\u003e4.2 Build a circuit from a simulation waveform\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"/verilog/hdlbits1/#1-getting-started\"\u003e1. Getting Started\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/verilog/hdlbits2/#2-verilog-language\"\u003e2. Verilog Language\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/verilog/hdlbits3/#3-circuits\"\u003e3. Circuits\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/verilog/hdlbits4/#4-getting-started\"\u003e4. Verification: Reading Simulations\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/verilog/hdlbits5/#5-verification---writing-testbenches\"\u003e5. Verification: Writing Testbenches\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/verilog/hdlbits6/#6-cs450\"\u003e6. CS450\u003c/a\u003e\u003c/p\u003e","title":"[VHDL] HDLbits 4 - Verification: Reading Simulations"},{"content":"5 Verification - Writing Testbenches 1. Getting Started\n2. Verilog Language\n3. Circuits\n4. Verification: Reading Simulations\n5. Verification: Writing Testbenches\n6. CS450\n","permalink":"https://intervalrain.github.io/verilog/hdlbits5/","summary":"\u003ch1 id=\"5-verification---writing-testbenches\"\u003e5 Verification - Writing Testbenches\u003c/h1\u003e\n\u003cp\u003e\u003ca href=\"/verilog/hdlbits1/#1-getting-started\"\u003e1. Getting Started\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/verilog/hdlbits2/#2-verilog-language\"\u003e2. Verilog Language\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/verilog/hdlbits3/#3-circuits\"\u003e3. Circuits\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/verilog/hdlbits4/#4-getting-started\"\u003e4. Verification: Reading Simulations\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/verilog/hdlbits5/#5-verification---writing-testbenches\"\u003e5. Verification: Writing Testbenches\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/verilog/hdlbits6/#6-cs450\"\u003e6. CS450\u003c/a\u003e\u003c/p\u003e","title":"[VHDL] HDLbits 5 - Verification: Writing Testbenches"},{"content":"6 CS450 1. Getting Started\n2. Verilog Language\n3. Circuits\n4. Verification: Reading Simulations\n5. Verification: Writing Testbenches\n6. CS450\n","permalink":"https://intervalrain.github.io/verilog/hdlbits6/","summary":"\u003ch1 id=\"6-cs450\"\u003e6 CS450\u003c/h1\u003e\n\u003cp\u003e\u003ca href=\"/verilog/hdlbits1/#1-getting-started\"\u003e1. Getting Started\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/verilog/hdlbits2/#2-verilog-language\"\u003e2. Verilog Language\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/verilog/hdlbits3/#3-circuits\"\u003e3. Circuits\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/verilog/hdlbits4/#4-getting-started\"\u003e4. Verification: Reading Simulations\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/verilog/hdlbits5/#5-verification---writing-testbenches\"\u003e5. Verification: Writing Testbenches\u003c/a\u003e\u003cbr\u003e\n\u003ca href=\"/verilog/hdlbits6/#6-cs450\"\u003e6. CS450\u003c/a\u003e\u003c/p\u003e","title":"[VHDL] HDLbits 6 - CS450"},{"content":"TCAD 模擬收斂問題 收斂問題 Sentaurus Device 有非常多種可模擬大電場下之飽和遷移率的模型，而這主要是設定有效電場的模型。其中，最自然的選擇就是 Eparallel driving model。這種模型取總電場平行於電流方向上的分量。不過這通常會導致嚴重的收斂問題。主要是因為電場跟電流有著極為密切的關係，除此之外，以 MOSFET 通道為例，通常垂直與平行通道方向之電場數量級差很多，因為演算之數值誤差會「混合」這兩個分量，所以這種 Eparallel 模型會使得每個節點上的 driving force變化許多，進而改變電流方向，又接著改變電場分量，所以會造成極為不穩定的情況。\n其中一個折衷的辦法，就是只考慮平行於 silicon-oxide 界面上的電場，可以使用 HighFieldSaturation(EparallelToInterface) 指令來啟動這模型。只要大部分的電流都平行於界面，那基本上這就是個很好的模型。然而，目前最新科技通常會使得 source/drain 的電流以「向外散開，向內吸入」的方式進入與離開。例如說目前的 ultrashalow source and drain extensions。電流散開之後，電流就不再平行於界面，而這模型可能會帶來將近 5-15 % 的誤差。因此，如果你知道電流的方向，那麼你也可以設定用來計算平行電場分量之方向向量，而不再只是單純地與最鄰近的界面平行的方向。例如說，如果你覺得電流主要是沿著 x 軸在流動，那麼可以在 Math section 設定 EparallelToInterface (Direction = (1 0 0))。\n最常用的 driving force 是 quasi-Fermi potential 的梯度模型。通常這跟平行電場模型是一樣的，但它的演算法比較穩定。可以用 HighFieldSaturation(GradQuasiFermi) 選項來啟動它。不過，即便如此，還是可能會造成收斂問題。這是因為通常 quasi-Fermi potential 的梯度都非常的陡峭，變化得太過劇烈或是非常的不平滑，而這往往切得比較不好的網格所造成的。\n但在有些時候，即便網格切得很好，還是沒辦法收斂。有時是因為低載子濃度的區域的濃度相對誤差都滿高的，而這會進一步導致 quasi-Fermi potential 的誤差變得滿大的。因為這些區域通常對總電流的貢獻並不是很顯著，所以算得太準反而會讓模擬跑得更慢。不過，你確實需要確認一下這些低密度是不是導致發散。\n除此之外，也可藉由設定 RefDens_eGradQuasiFermi_EparallelToInterface 與 RefDens_hGradQuasiFermi_EparallelToInterface 來使用「內插 GradQuasiFermi 與 Eparallel」的 driving force 模型。該參數定義了 gradual transition 發生的局域載子濃度。例如說，如果設定為 1e12，那麼當載子濃度高於 1e12，就使用 GradQuasiFermi model，反之則使用 Eparallel model。通常 1e12 並不會影響到總電流，但仍能改善收斂問題。有時甚至需要用到 1e14 ～ 1e16 以獲得更好的收斂，但要留意不同設定所得到的電流是否一致，以確定 Eparallel driving force 帶來的誤差仍可接受。\n另一種內插法是 QausiGradFermi 與 電場本身，可使用 RefDens_eGradQuasiFermi_ElectricField 與 RefDens_eGradQuasiFermi_ElectricField 參數來設定。\n還有一種方法改善收斂，就是在低濃度的地方逐漸忽略 driving force。可以藉由 RefDens_eGradQuasiFermi_Zero (for electrons) and RefDens_hGradQuasiFermi_Zero (for holes) 設定，將它們設定為正值即可。例如說，如果設定為 1e10，那麼在 1e10 濃度以下的地方就不會用到 driving force。\n還有一個在物理上可行的做法，就是使用 hydrodynamic transport model。這時 sdevice 會計算局域載子溫度，接著並用來計算 driving force。可以藉由 HighFieldSaturation(CarrierTempDrive) 來開啟它。有時會因為有比較好的收斂而改善通常 HT model 算太慢的現象。總之，如果你在使用 GradQuasiFermi 時遇到了收斂問題。那麼你可以：\n確保通道的網格足夠細緻與均勻 考慮改成 EparallelToInterface 如果 terminal currents 誤差實在很大，那麼可考慮將 RefDens_e/hGradQuasiFermi_ElectricField 設定為 1e12 或者更高。 設定 RefDens_e/hGradQuasiFermi_Zero 到 1e10 或者更高以忽略在低於該濃度時的 driving force 計算 最後可以考慮改用 hydrodynamic transport model。 常見模擬參數之意義 HighFieldSaturation(GradQuasiFermi) RefDens_hGradQuasiFermi_Zero：低於其值則忽略 damp 有效電場 RefDens_eGradQuasiFermi_EparallelToInterface：高於其值則使用 GradQuasiFermi，低於則 EparallelToInterface。 RefDens_eGradQuasiFermi_ElectricField：高於其值則使用 GradQuasiFermi，低於則 Eparallel External resistor method 這方法很有用，但是非常慢。\n簡單來說，只是在元件上串聯一個電阻。\n但因為我們設定 \\(R=V_b/I_b\\)，所以在 InnerVoltage 到達 \\(V_b\\) 時，OuterVoltage 會是兩倍的崩潰電壓。而在那之前，因為電流實在是很小，所以外接電阻分配到的分壓並沒有追到元件分壓，使得大部分分壓都會正常地落在元件上。設定方法為，先在其中一個電極設定電阻，如下所示。\nElectrode { { Name= \u0026#34;substrate\u0026#34; Voltage= 0.0 } #if \u0026#34;@BVmethod@\u0026#34; == \u0026#34;resistor\u0026#34; { Name= \u0026#34;anode\u0026#34; Voltage= 0.0 Resistor= @R@} #else { Name= \u0026#34;anode\u0026#34; Voltage= 0.0 } #endif } 設定好之後其實就大功告成了。不過此時因為你只能夠控制某電極的電位，而在其中一個電極電位被設定為 Voltage=0.0 的情況下，這相當於設定兩電極（anode與substrate）之間的電壓，即「元件與電阻」的總跨壓。因此，倘若元件開始崩潰，電流開始爆增，那麼「元件與電阻」的總跨壓將會變得非常大。因此如果將後續的模擬目標電壓設定為-50V 或甚至是 -100V，那因為元件分到的跨壓一定比較小，所以很可能沒達到目標。因此這時需要將最後的目標電壓設定得高一點，通常我都設定-500到-1000。有時為了更加準確而會設定為-2000。\nTrap 設定(sdevice) Another available species is the fixed charge, which is a trap fully occupied by either electrons or holes. Therefore, its charge stays constant throughout the entire simulation and does not depend on electrical bias conditions. Electron–hole recombination through such a trap is not allowed. This type of trap uses the FixedCharge keyword for a trap specification.\nRecombination \u0026amp; Generation rate 基本上它們都遵守 SRH recombination rate:\n$$ R_{SRH}=\\frac{np-n_i^2}{\\tau_{p0}(n+n_1)+\\tau_{n_0}(p+p_1)} $$ 但是沒辦法在 sdevice 用 SRHRecombination( Integrate( Semiconductor ) ) 觀察到這些特地、額外設定的 trap 造成的 SHR recombination rate，反而必須使用：\nCurrentPlot { eGapStatesRecombination( Integrate( Semiconductor ) ) eGapStatesRecombination( Integrate( Region=\u0026#34;Absorption\u0026#34; ) ) eGapStatesRecombination( Integrate( Region=\u0026#34;Multiplication\u0026#34; ) ) hGapStatesRecombination( Integrate( Semiconductor ) ) hGapStatesRecombination( Integrate( Region=\u0026#34;Absorption\u0026#34; ) ) hGapStatesRecombination( Integrate( Region=\u0026#34;Multiplication\u0026#34; ) ) } 才能夠看見這些 trap 的貢獻。\nTrap-assisted tunneling 這些 Trap 預設並沒有 trap-assisted tunneling 效果。換言之，即便之前設定了 Physics{Recombination(SRH(ElectricField(Lifetime=Hurkx)))}，也不會讓 trap 有此效應。這需要額外設定：\nPhysics(Region=\u0026#34;Absorption\u0026#34;){ Traps(eNeutral Level fromMidBandGap EnergyMid=@Eti@ Conc=1e15 eXsection=@eXsec@ hXsection=@hXsec@ SpatialShape=Gaussian SpaceMid=(@PosX@, 1.5) SpaceSig=(@Lx@, 1e3) Tunneling(Hurkx) ) } 上面的Tunneling(Hurkx)就是 trap-assisted tunneling 效應。\nLifetime 雖然 lifetime 滿足底下公式：\n$$ \\tau_{n,p}=\\frac{1}{\\sigma_{n,p}v_{n,p}N_t} $$\n但是沒辦法直接使用eLifetime與hLifetime觀察，需要手動將上述數據相乘。\n","permalink":"https://intervalrain.github.io/device/simulationconvergece/","summary":"\u003ch1 id=\"tcad-模擬收斂問題\"\u003eTCAD 模擬收斂問題\u003c/h1\u003e\n\u003ch2 id=\"收斂問題\"\u003e收斂問題\u003c/h2\u003e\n\u003cp\u003eSentaurus Device 有非常多種可模擬大電場下之飽和遷移率的模型，而這主要是設定有效電場的模型。其中，最自然的選擇就是 Eparallel driving model。這種模型取總電場平行於電流方向上的分量。不過這通常會導致嚴重的收斂問題。主要是因為電場跟電流有著極為密切的關係，除此之外，以 MOSFET 通道為例，通常垂直與平行通道方向之電場數量級差很多，因為演算之數值誤差會「混合」這兩個分量，所以這種 Eparallel 模型會使得每個節點上的 driving force變化許多，進而改變電流方向，又接著改變電場分量，所以會造成極為不穩定的情況。\u003c/p\u003e\n\u003cp\u003e其中一個折衷的辦法，就是只考慮平行於 silicon-oxide 界面上的電場，可以使用 HighFieldSaturation(EparallelToInterface) 指令來啟動這模型。只要大部分的電流都平行於界面，那基本上這就是個很好的模型。然而，目前最新科技通常會使得 source/drain 的電流以「向外散開，向內吸入」的方式進入與離開。例如說目前的 ultrashalow source and drain extensions。電流散開之後，電流就不再平行於界面，而這模型可能會帶來將近 5-15 % 的誤差。因此，如果你知道電流的方向，那麼你也可以設定用來計算平行電場分量之方向向量，而不再只是單純地與最鄰近的界面平行的方向。例如說，如果你覺得電流主要是沿著 x 軸在流動，那麼可以在 Math section 設定 EparallelToInterface (Direction = (1 0 0))。\u003c/p\u003e\n\u003cp\u003e最常用的 driving force 是 quasi-Fermi potential 的梯度模型。通常這跟平行電場模型是一樣的，但它的演算法比較穩定。可以用 HighFieldSaturation(GradQuasiFermi) 選項來啟動它。不過，即便如此，還是可能會造成收斂問題。這是因為通常 quasi-Fermi potential 的梯度都非常的陡峭，變化得太過劇烈或是非常的不平滑，而這往往切得比較不好的網格所造成的。\u003c/p\u003e\n\u003cp\u003e但在有些時候，即便網格切得很好，還是沒辦法收斂。有時是因為低載子濃度的區域的濃度相對誤差都滿高的，而這會進一步導致 quasi-Fermi potential 的誤差變得滿大的。因為這些區域通常對總電流的貢獻並不是很顯著，所以算得太準反而會讓模擬跑得更慢。不過，你確實需要確認一下這些低密度是不是導致發散。\u003c/p\u003e\n\u003cp\u003e除此之外，也可藉由設定 RefDens_eGradQuasiFermi_EparallelToInterface 與 RefDens_hGradQuasiFermi_EparallelToInterface 來使用「內插 GradQuasiFermi 與 Eparallel」的 driving force 模型。該參數定義了 gradual transition 發生的局域載子濃度。例如說，如果設定為 1e12，那麼當載子濃度高於 1e12，就使用 GradQuasiFermi model，反之則使用 Eparallel model。通常 1e12 並不會影響到總電流，但仍能改善收斂問題。有時甚至需要用到 1e14 ～ 1e16 以獲得更好的收斂，但要留意不同設定所得到的電流是否一致，以確定 Eparallel driving force 帶來的誤差仍可接受。\u003c/p\u003e","title":"[TCAD] 模擬收斂問題"},{"content":"1 Verilog HDL 1.1 Verilog 簡介 一套硬體描述語言 輔助設計數位系統 描述電路的行為 電子自動化工具 類似C語言的硬體描述語言 易學、容易接受 高階行為描述 切勿使用軟體思維(循序)撰寫(硬體描述語言多是並行的) 支援多種硬體層級的描述方式 從低階到高階模式 依照不同的方法設計 支援階層式的設計方法 樹狀式的設計結構 由繁化簡 1.2 Verilog 的模型 1.2.1 電晶體層級 Transistor Level 或低階交換層次模型(Switch Level Model) Verilog 最低階的層次模型 電路是由開關與電晶體所組成 一般不會採取低階的層級來進行設計 1.2.2 邏輯閘層級 Gate Level 使用基本的邏輯閘元件 AND、OR、NOT 邏輯電路圖 1.2.3 資料流層級 Data Flow Level 描述電路中資料的處理方式 資料如何在電路中運算及傳送 輸入持續驅動輸出 運算式 如：out = a + b + c 1.2.4 行為模型 Behavior Level Verilog 最高階的層次模型 不需考慮硬體元件的特型，只需放在模組的功能描述 很像 C 語言 合成軟體工具 1.2.5 結構式模型 Structure Level 引用硬體模組的模式 類似邏輯閘層次模型 支援階層式設計法 將複雜電路分為層狀結構 架構上類似樹狀結構 Bottom-up：元件→子模組→設計目標 Top-Down：設計目標→子模組→元件 Mixed：設計目標→子模組←元件(常用於大型複雜系統) \\( \\boxed{\\text{Full Adder}} \\begin{cases} \\boxed{\\text{Half Adder}} \\begin{cases} \\boxed{\\text{XOR}}\\\\ \\boxed{\\text{AND}} \\end{cases}\\\\ \\boxed{\\text{Half Adder}} \\begin{cases} \\boxed{\\text{XOR}}\\\\ \\boxed{\\text{AND}} \\end{cases}\\\\ \\boxed{\\text{OR}} \\end{cases}\\\\ \\text{設計目標}\\qquad\\qquad\\text{子模組}\\qquad\\text{元件} \\) 1.3 Verilog 語法詞彙 由一連串的標記(token)所組成 識別字(identifiers) 關鍵字(keywords) 字串(strings) 註解(comments) 空白(whitespace) 數值(numbers) 1.3.1 識別字(identifiers) 描述電路行為所使用的自訂物件 不違反命名規則，工程師自行定義的物件名稱 命名規則 字母、數字、底線_或是錢字號$所組合而成。 開頭只能使用字母或底線。 識別字是有大小寫之分的。 舉例 Shift_reg_b (Valid) _bus123 (Valid) $error_condition (Invalid) NT$899 (Valid) 3_bit_data (Invalid) 1.3.2 關鍵字(keywords) 描述電路語法所保留的一組特殊名稱的標記 定義語言的結構來描述電路 輸入(input)、輸出(output) 資料型態、電路行為 所有關鍵字都必須使用小寫表示 不可當作識別字使用 常見關鍵字 \\(\\begin{array}{|l|l|l|l|l|l|}\\hline \\text{always}\u0026amp;\\text{and}\u0026amp;\\text{assign}\u0026amp;\\text{begin}\u0026amp;\\text{buf}\u0026amp;\\text{bufif0}\\\\\\hline \\text{bufif1}\u0026amp;\\text{case}\u0026amp;\\text{casex}\u0026amp;\\text{casez}\u0026amp;\\text{cmos}\u0026amp;\\text{default}\\\\\\hline \\text{defparam}\u0026amp;\\text{else}\u0026amp;\\text{end}\u0026amp;\\text{endcase}\u0026amp;\\text{endfunction}\u0026amp;\\text{endmodule}\\\\\\hline \\text{endtask}\u0026amp;\\text{event}\u0026amp;\\text{for}\u0026amp;\\text{forever}\u0026amp;\\text{fork}\u0026amp;\\text{function}\\\\\\hline \\text{highz0}\u0026amp;\\text{highz1}\u0026amp;\\text{if}\u0026amp;\\text{initial}\u0026amp;\\text{inout}\u0026amp;\\text{input}\\\\\\hline \\text{integer}\u0026amp;\\text{join}\u0026amp;\\text{module}\u0026amp;\\text{nand}\u0026amp;\\text{negedge}\u0026amp;\\text{nmos}\\\\\\hline \\text{nor}\u0026amp;\\text{not}\u0026amp;\\text{notif0}\u0026amp;\\text{notif1}\u0026amp;\\text{or}\u0026amp;\\text{output}\\\\\\hline \\text{parameter}\u0026amp;\\text{pmos}\u0026amp;\\text{posedge}\u0026amp;\\text{pull0}\u0026amp;\\text{pull1}\u0026amp;\\text{pulldown}\\\\\\hline \\text{pullup}\u0026amp;\\text{rcmos}\u0026amp;\\text{real}\u0026amp;\\text{realtime}\u0026amp;\\text{reg}\u0026amp;\\text{repeat}\\\\\\hline \\text{rnmos}\u0026amp;\\text{rpmos}\u0026amp;\\text{rtran}\u0026amp;\\text{rtranif0}\u0026amp;\\text{rtranif1}\u0026amp;\\text{strong0}\\\\\\hline \\text{string1}\u0026amp;\\text{supply0}\u0026amp;\\text{supply1}\u0026amp;\\text{task}\u0026amp;\\text{time}\u0026amp;\\text{tran}\\\\\\hline \\text{tranif0}\u0026amp;\\text{tranif1}\u0026amp;\\text{tri}\u0026amp;\\text{tri0}\u0026amp;\\text{tri1}\u0026amp;\\text{triand}\\\\\\hline \\text{trior}\u0026amp;\\text{trireg}\u0026amp;\\text{wait}\u0026amp;\\text{wand}\u0026amp;\\text{weak0}\u0026amp;\\text{weak1}\\\\\\hline \\text{while}\u0026amp;\\text{wire}\u0026amp;\\text{wor}\u0026amp;\\text{xnor}\u0026amp;\\text{xor}\\\\\\hline \\end{array}\\) 1.3.3 字串(strings) 一連串字元(character)組成的單一個體 可含有字母、數字、及一些特殊字元 字串的所有字元必須在同一行上，並在雙引號之間 1.3.4 註解(comments) 程式碼中加入說明文字 可讀性(readability) 文件化(documentation) 版權宣告(license declaration) 以//開頭的單行註解(one-line comment) 以/*為開頭，並以*/為結尾的多行註解(multiple-line comment) 多行註解不支援巢狀結構 1.3.5 空白(whitespace) 區隔不同物件 空格(blank spaces，\\b) 欄位(tabs，\\t) 換行(newlines，\\n) 除字串內空白，註解與空白在編譯與合成時會被忽略 1.3.6 數值(numbers) Verilog 有兩種數值表示法 固定長度(\bsized): 定義位元寬度 \u0026lt;size\u0026gt;'\u0026lt;bsase format\u0026gt;\u0026lt;number\u0026gt; \u0026lt;size\u0026gt;：十進位來表示此數的位元數(bits) \u0026lt;base format\u0026gt;：定義進制 'H|'h：十六進制 'D|'d：十進制 'O|'p：八進制 'B|'b：二進制 \u0026lt;number\u0026gt;：用\u0026lt;base format\u0026gt;來表示數值 若為負號，將-放在\u0026lt;size\u0026gt;前面 舉例： 18'h47CB：18 bits 的十六進位數 47CB 13'h47CB：13 bits 的十六進位數(因未給定高位元自動補0) 7CB 12'd1023：12 bits 的十進位數 1023 9'o723：9 bits 的八進位數 723 5'b11101：5bits 的二進位數 11101 5'b1xx01：含有 unknown values 的表示法 不定長度(unsized): 未定義位元寬度 \u0026lsquo;\u0026lt;base format\u0026gt;\u0026lt;number 不使用\u0026lt;size\u0026gt;規定位元長度 使用 HDL 編譯器內定的長度(32bit的寬度) 沒有寫明\u0026lt;base format\u0026gt;，則內定為十進制 舉例： 'h47CB：32 bits 的十六進位數 47CB 1023：32 bits 的十進位數 1023 'o723：32 bits 的八進位數 723 'b11101：32 bits 的二進位數 11101 Verilog 有四種數值位準(value level) \\(\\begin{array}{|c|l|}\\hline \\text{數值位準}\u0026amp;\\text{實際電路狀態}\\\\\\hline \\text{0}\u0026amp;\\text{邏輯0，假(false)，接地}\\\\\\hline \\text{1}\u0026amp;\\text{邏輯1，真(true)，接壓電源}\\\\\\hline \\text{x}\u0026amp;\\text{不確定值(unknown value)}\\\\\\hline \\text{z}\u0026amp;\\text{高阻抗(high impedance)，浮接狀態(floating state)}\\\\\\hline \\end{array} \\) 1.4 Verilog 資料物件與型態 資料物件(data objects) 描述行為過程中所使用的訊號載具 一個物件經過處理再傳到另一個物件 資料型態(data type) 定義資料物件的類型 接線、暫存器、參數等 1.4.1 接線(Nets) 接線(nets)是連接實體元件的連接線 要被驅動才能改變其內部的值 最主要的關鍵字是 wire 一個位元的純量(scalar) 多位元長度的向量(vector) 內定值為 z(高阻抗、浮接) 宣告方式 wire w; // 宣告一條接線，命名為\bw，內定預設值為z wire x = 1\u0026#39;b0; // 宣告一條接線，命名為x，並指定x為邏輯0 wire a, b, c // 宣告三條接線，命名為a, b, c 1.4.2 暫存器(Registers) 抽象的資料儲存物件(有別於實體暫存器 D flip-flop) 保留一個數值直到下一次指定新值為止 觀念類似 C 語言中的變數 主要的關鍵字是 reg 一個位元的純量(scalar) 多位元長度的向量(vector) 內定值為 x(未知) \\(\\begin{array}{|l|l|}\\hline \\text{reg}\u0026amp;\\text{可變動位元寬度的無號整數(unsigned integer variable)}\\\\\\hline \\text{integer}\u0026amp;\\text{32位元寬度的有號整數(signed 32-bit integer variable)，}\\\\ \u0026amp;\\text{算術運算產生2補數結果(2\u0026rsquo;s complement results))}\\\\\\hline \\text{real}\u0026amp;\\text{雙倍精確度之有號浮點數}\\\\ \u0026amp;\\text{(signed floating-point variable with double precision)}\\\\\\hline \\text{time}\u0026amp;\\text{64位元寬度的無號整數(unsigned 64-bit integer variable)}\\\\\\hline \\end{array}\\) 設計電路請以reg為主，其他類型合成器可能不支援。 宣告方式 reg a; // 宣告 1 個 1 位元暫存器為 a，定位值為 1 位元的 x reg x, y; // 宣告 2 個宣存器，命名為 x, y integer count; // 宣告 1 個整數為 count，值可以為正負 real fraction; // 宣告 1 個浮點數為 fraction，值含小數點 1.4.3 純量與向量(scalar and vector) 純量(scalar) 一個位元的物件 向量(vector) 多個位元的物件 接線(ex. wire) 與 reg 內定一位元 [大數字:小數字]、[小數字:大數字]→[MSB:LSB] 宣告方式 wire a; // 宣告 1 個 1-bits 接線 wire [4:0] x; // 宣告 1 個 5-bits 接線 reg b; // 宣告 1 個 1-bits 暫存器 reg [0:7] y; // 宣告 1 個 8-bits 暫存器 reg [31:0] z; // 宣告 1 個 32-bits 暫存器 1.4.4 陣列(Array) 多個暫存器、接線的聚合體 索引值(index)定義聚合體中的個別物件 支援多維度的陣列 記憶體(memory)、暫存器檔案(register file) 陣列中暫存器、接線的個數 [大數字:小數字]、[小數字:大數字] 宣告方式 // mem_block 是一個包含 128 個暫存器的陣列， // 每個暫存器皆為 32 位元寬 reg [31:0] mem_block [127:0]; // mem_2D 是一個 2 維 4x64 的暫存器陣列， // 每個暫存器皆為 8 位元寬 reg [7:0] mem_2D [3:0][63:0]; 1.4.5 參數(parameter) 定義編譯合成電路時的常數 每次編譯合成前更改，編譯合成器會根據參數值產生相對應的電路 重複使用 關鍵字 parameter 宣告方式 parameter width = 4; wire [width-1:0] a, b; // 接線 a 和 b 的位元寬度，會隨著參數值的改變而變動 reg [width-1:0] y; // 暫存器 y 的位元寬度，會隨著參數值的改變而變動 1.5 模組(Module)、埠(Port) 1.5.1 模組(Module) 一個電路區塊、可以由其他模組組成 連接模組時 考慮模組的輸入與輸出介面 不需要考慮模組內部的詳細電路 電路設計時 只修改模組內部電路 不會改變電路外部及周遭的模組 模組內部的電路描述可包含 訊號資料型態宣告 引用其他模組(邏輯閘) assign 資料處理模型之描述 always 行為模型之描述 函數(function) 與 任務(task) 除訊號宣告需先描述，其他部分撰寫的順序，不影響電路行為 模組宣告 以關鍵字 module 為開頭，在其後加一個識別用的模組名稱(module name) 再來是輸入與輸出埠列(module terminal list)和埠列宣告，接著是模組內部關於電路的描述 以關鍵字 endmodule 做為模組結尾 支援階層`式的設計概念 module module_name(terminal_list) port_declaration(...) param_declaration(optional) data_type_declaration(wire, reg) other_module(logic_gate) assign data_flow_model always behavior_model function, task endmodule 1.5.2 埠(port) 終端點、模組與外界溝通的介面接點(門) 一個模組通常是經由一串的輸入輸出埠稱為埠列(terminal list)來與外界溝通 若模組與外界不需要溝通，則埠列也就不存在(封閉系統) 測試環境(test bench) 埠的宣告 埠的宣告可分為輸入埠(input)、輸出埠(output)、雙向埠(inout)三種。 埠的宣告型態內定為接線(net)的 wire，若需要將訊號儲存起來則埠號型態須宣告成暫存器 reg。 輸入埠和雙向埠只能是接線(net)，不可宣告成暫存器。 輸出埠可以宣告成接線(net)或暫存器。 module full_adder(a, b, carry, sum); // 埠列 input [3:0] a, b; // 輸入埠(4位元向量) input carry // 輸入埠(1位元純量) output [4:0] sum; // 輸出埠(5位元向量) reg [4:0] sum; // 因輸出sum需儲存資料，故宣告成暫存器 ... endmodule 1.6 邏輯閘層次模型 利用關鍵字即可引用基本的邏輯閘元件 基本的邏輯閘關鍵字 and nand or nor not xor xnor 1.6.1 多個輸入邏輯閘(Multiple-Input Gates) and、nand、or、nor、xor、xnor 具有多個純量(scalar)的輸入，但是只有一個純量的輸出 多個輸入邏輯閘的輸出總是放在埠列(post list)的第一個位置，而輸入則是跟在輸出的後面 輸出必須透過接線(wire)連接，輸入無規定 多個輸入邏輯閘的別名可以加或是不加 使用方法 gate_type instance(out, in_1, in_2, in_3, ..., in_n); gate_type inst_1(out_1, in1_1, in1_2, in1_3, ..., in1_n), inst_2(out_2, in2_1, in2_2, in2_3, ..., in2_n), inst_3(out_3, in3_1, in3_2, in3_3, ..., in3_n), ... inst_m(out_m, in_m1, in_m2, in_m3, ..., in_mn); \\(\\begin{array}{ccc} \\underbrace{\\text{a, b, c, d}}_{\\text{輸入}} \\rightarrow \\boxed{\\text{Multiple-Input Gate}} \\rightarrow \\underbrace{\\text{e}} _{\\text{輸出}} \\end{array} \\) \\(\\text{and\\quad a1(} \\underbrace{\\text{e}}_{\\text{輸出}} \\text{, } \\underbrace{\\text{a, b, c, d}} _{\\text{輸入}} \\text{);} \\) 1.6.2 多個輸出邏輯閘(Multiple-Output Gates) not、buf\n具有一個或是多個純量(scalar)的輸出，但是只有一個純量的輸入\n多個輸出邏輯閘的輸出是放在埠列(port list)的前面位置，而輸入則是放在列後面位置\n輸出必須透過接線(wire)連接，輸入無規定 多個輸出邏輯閘的別名可以加或是不加\n使用方法\ngate_type instance(out_1, out_2, out_3, ..., out_n, in); gate_type inst_1(out1_1, out1_2, out1_3, ..., out1_n, in1), inst_2(out2_1, out2_2, out2_3, ..., out2_n, in2), inst_3(out3_1, out3_2, out3_3, ..., out3_n, in3), ... inst_m(out_m1, out_m2, out_m3, ..., out_mn, in_m); \\(\\begin{array}{ccc} \\underbrace{\\text{d}}_{\\text{輸入}} \\rightarrow \\boxed{\\text{Multiple-Output Gate}} \\rightarrow \\underbrace{\\text{a, b, c}} _{\\text{輸出}} \\end{array} \\)\n\\(\\text{not\\quad n1(} \\underbrace{\\text{a, b, c}}_{\\text{輸出}} \\text{, } \\underbrace{\\text{d}} _{\\text{輸入}} \\text{);} \\)\n邏輯閘層次模型範例\nmodule and_or_gate(in1, in2, in3, in4, out; input in1, in2, in3, in4; output out; wire w1, w2; and a1(w1, in1, in2); and a2(w2, in3, in4); or o1(out, w1, w2); endmodule 2 實作 Implementation in Github\n1. HDLbits 2. Verilog 3. Circuits 4. Verification: Reading Simulations 5. Verification: Writing Testbenches 6. CS450 ","permalink":"https://intervalrain.github.io/verilog/intro/","summary":"\u003ch1 id=\"1-verilog-hdl\"\u003e1 Verilog HDL\u003c/h1\u003e\n\u003ch2 id=\"11-verilog-簡介\"\u003e1.1 Verilog 簡介\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e一套硬體描述語言\n\u003cul\u003e\n\u003cli\u003e輔助設計\u003cstrong\u003e數位系統\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e描述電路的行為\u003c/li\u003e\n\u003cli\u003e電子自動化工具\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e類似C語言的硬體描述語言\n\u003cul\u003e\n\u003cli\u003e易學、容易接受\u003c/li\u003e\n\u003cli\u003e高階行為描述\u003c/li\u003e\n\u003cli\u003e切勿使用軟體思維(循序)撰寫(硬體描述語言多是並行的)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e支援多種硬體層級的描述方式\n\u003cul\u003e\n\u003cli\u003e從低階到高階模式\u003c/li\u003e\n\u003cli\u003e依照不同的方法設計\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e支援階層式的設計方法\n\u003cul\u003e\n\u003cli\u003e樹狀式的設計結構\u003c/li\u003e\n\u003cli\u003e由繁化簡\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"12-verilog-的模型\"\u003e1.2 Verilog 的模型\u003c/h2\u003e\n\u003ch3 id=\"121-電晶體層級\"\u003e1.2.1 電晶體層級\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eTransistor Level\u003c/li\u003e\n\u003cli\u003e或低階交換層次模型(Switch Level Model)\u003c/li\u003e\n\u003cli\u003eVerilog 最低階的層次模型\u003c/li\u003e\n\u003cli\u003e電路是由開關與電晶體所組成\u003c/li\u003e\n\u003cli\u003e一般不會採取低階的層級來進行設計\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"122-邏輯閘層級\"\u003e1.2.2 邏輯閘層級\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eGate Level\u003c/li\u003e\n\u003cli\u003e使用基本的邏輯閘元件\u003c/li\u003e\n\u003cli\u003eAND、OR、NOT\u003c/li\u003e\n\u003cli\u003e邏輯電路圖\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"123-資料流層級\"\u003e1.2.3 資料流層級\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eData Flow Level\u003c/li\u003e\n\u003cli\u003e描述電路中資料的處理方式\u003c/li\u003e\n\u003cli\u003e資料如何在電路中運算及傳送\u003c/li\u003e\n\u003cli\u003e輸入持續驅動輸出\u003c/li\u003e\n\u003cli\u003e運算式\n\u003cul\u003e\n\u003cli\u003e如：\u003ccode\u003eout = a + b + c\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"124-行為模型\"\u003e1.2.4 行為模型\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eBehavior Level\u003c/li\u003e\n\u003cli\u003eVerilog 最高階的層次模型\u003c/li\u003e\n\u003cli\u003e不需考慮硬體元件的特型，只需放在模組的功能描述\u003c/li\u003e\n\u003cli\u003e很像 C 語言\u003c/li\u003e\n\u003cli\u003e合成軟體工具\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"125-結構式模型\"\u003e1.2.5 結構式模型\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eStructure Level\u003c/li\u003e\n\u003cli\u003e引用硬體模組的模式\u003c/li\u003e\n\u003cli\u003e類似邏輯閘層次模型\u003c/li\u003e\n\u003cli\u003e支援階層式設計法\n\u003cul\u003e\n\u003cli\u003e將複雜電路分為層狀結構\u003c/li\u003e\n\u003cli\u003e架構上類似樹狀結構\n\u003cul\u003e\n\u003cli\u003eBottom-up：元件→子模組→設計目標\u003c/li\u003e\n\u003cli\u003eTop-Down：設計目標→子模組→元件\u003c/li\u003e\n\u003cli\u003eMixed：設計目標→子模組←元件(常用於大型複雜系統)\n\u003cul\u003e\n\u003cli\u003e\\(\n\\boxed{\\text{Full Adder}}\n\\begin{cases}\n\\boxed{\\text{Half Adder}}\n\\begin{cases}\n\\boxed{\\text{XOR}}\\\\\n\\boxed{\\text{AND}}\n\\end{cases}\\\\\n\\boxed{\\text{Half Adder}}\n\\begin{cases}\n\\boxed{\\text{XOR}}\\\\\n\\boxed{\\text{AND}}\n\\end{cases}\\\\\n\\boxed{\\text{OR}}\n\\end{cases}\\\\\n\\text{設計目標}\\qquad\\qquad\\text{子模組}\\qquad\\text{元件}\n\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"13-verilog-語法詞彙\"\u003e1.3 Verilog 語法詞彙\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e由一連串的標記(token)所組成\n\u003cul\u003e\n\u003cli\u003e識別字(identifiers)\u003c/li\u003e\n\u003cli\u003e關鍵字(keywords)\u003c/li\u003e\n\u003cli\u003e字串(strings)\u003c/li\u003e\n\u003cli\u003e註解(comments)\u003c/li\u003e\n\u003cli\u003e空白(whitespace)\u003c/li\u003e\n\u003cli\u003e數值(numbers)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"131-識別字identifiers\"\u003e1.3.1 識別字(identifiers)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e描述電路行為所使用的自訂物件\n\u003cul\u003e\n\u003cli\u003e不違反命名規則，工程師自行定義的物件名稱\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e命名規則\n\u003cul\u003e\n\u003cli\u003e字母、數字、底線\u003ccode\u003e_\u003c/code\u003e或是錢字號\u003ccode\u003e$\u003c/code\u003e所組合而成。\u003c/li\u003e\n\u003cli\u003e開頭只能使用字母或底線。\u003c/li\u003e\n\u003cli\u003e識別字是有\u003cstrong\u003e大小寫\u003c/strong\u003e之分的。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e舉例\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-plaintext\" data-lang=\"plaintext\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eShift_reg_b         (Valid)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e_bus123             (Valid)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e$error_condition    (Invalid)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eNT$899              (Valid)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e3_bit_data          (Invalid)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"132-關鍵字keywords\"\u003e1.3.2 關鍵字(keywords)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e描述電路語法所保留的一組特殊名稱的標記\u003c/li\u003e\n\u003cli\u003e定義語言的結構來描述電路\n\u003cul\u003e\n\u003cli\u003e輸入(input)、輸出(output)\u003c/li\u003e\n\u003cli\u003e資料型態、電路行為\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e所有關鍵字都必須使用小寫表示\u003c/li\u003e\n\u003cli\u003e不可當作識別字使用\u003c/li\u003e\n\u003cli\u003e常見關鍵字\n\\(\\begin{array}{|l|l|l|l|l|l|}\\hline\n\\text{always}\u0026amp;\\text{and}\u0026amp;\\text{assign}\u0026amp;\\text{begin}\u0026amp;\\text{buf}\u0026amp;\\text{bufif0}\\\\\\hline\n\\text{bufif1}\u0026amp;\\text{case}\u0026amp;\\text{casex}\u0026amp;\\text{casez}\u0026amp;\\text{cmos}\u0026amp;\\text{default}\\\\\\hline\n\\text{defparam}\u0026amp;\\text{else}\u0026amp;\\text{end}\u0026amp;\\text{endcase}\u0026amp;\\text{endfunction}\u0026amp;\\text{endmodule}\\\\\\hline\n\\text{endtask}\u0026amp;\\text{event}\u0026amp;\\text{for}\u0026amp;\\text{forever}\u0026amp;\\text{fork}\u0026amp;\\text{function}\\\\\\hline\n\\text{highz0}\u0026amp;\\text{highz1}\u0026amp;\\text{if}\u0026amp;\\text{initial}\u0026amp;\\text{inout}\u0026amp;\\text{input}\\\\\\hline\n\\text{integer}\u0026amp;\\text{join}\u0026amp;\\text{module}\u0026amp;\\text{nand}\u0026amp;\\text{negedge}\u0026amp;\\text{nmos}\\\\\\hline\n\\text{nor}\u0026amp;\\text{not}\u0026amp;\\text{notif0}\u0026amp;\\text{notif1}\u0026amp;\\text{or}\u0026amp;\\text{output}\\\\\\hline\n\\text{parameter}\u0026amp;\\text{pmos}\u0026amp;\\text{posedge}\u0026amp;\\text{pull0}\u0026amp;\\text{pull1}\u0026amp;\\text{pulldown}\\\\\\hline\n\\text{pullup}\u0026amp;\\text{rcmos}\u0026amp;\\text{real}\u0026amp;\\text{realtime}\u0026amp;\\text{reg}\u0026amp;\\text{repeat}\\\\\\hline\n\\text{rnmos}\u0026amp;\\text{rpmos}\u0026amp;\\text{rtran}\u0026amp;\\text{rtranif0}\u0026amp;\\text{rtranif1}\u0026amp;\\text{strong0}\\\\\\hline\n\\text{string1}\u0026amp;\\text{supply0}\u0026amp;\\text{supply1}\u0026amp;\\text{task}\u0026amp;\\text{time}\u0026amp;\\text{tran}\\\\\\hline\n\\text{tranif0}\u0026amp;\\text{tranif1}\u0026amp;\\text{tri}\u0026amp;\\text{tri0}\u0026amp;\\text{tri1}\u0026amp;\\text{triand}\\\\\\hline\n\\text{trior}\u0026amp;\\text{trireg}\u0026amp;\\text{wait}\u0026amp;\\text{wand}\u0026amp;\\text{weak0}\u0026amp;\\text{weak1}\\\\\\hline\n\\text{while}\u0026amp;\\text{wire}\u0026amp;\\text{wor}\u0026amp;\\text{xnor}\u0026amp;\\text{xor}\\\\\\hline\n\\end{array}\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"133-字串strings\"\u003e1.3.3 字串(strings)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e一連串字元(character)組成的單一個體\u003c/li\u003e\n\u003cli\u003e可含有字母、數字、及一些特殊字元\u003c/li\u003e\n\u003cli\u003e字串的所有字元必須在同一行上，並在\u003cstrong\u003e雙引號\u003c/strong\u003e之間\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"134-註解comments\"\u003e1.3.4 註解(comments)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e程式碼中加入說明文字\n\u003cul\u003e\n\u003cli\u003e可讀性(readability)\u003c/li\u003e\n\u003cli\u003e文件化(documentation)\u003c/li\u003e\n\u003cli\u003e版權宣告(license declaration)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e以\u003ccode\u003e//\u003c/code\u003e開頭的單行註解(one-line comment)\u003c/li\u003e\n\u003cli\u003e以\u003ccode\u003e/*\u003c/code\u003e為開頭，並以\u003ccode\u003e*/\u003c/code\u003e為結尾的多行註解(multiple-line comment)\u003c/li\u003e\n\u003cli\u003e多行註解不支援巢狀結構\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"135-空白whitespace\"\u003e1.3.5 空白(whitespace)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e區隔不同物件\u003c/li\u003e\n\u003cli\u003e空格(blank spaces，\\b)\u003c/li\u003e\n\u003cli\u003e欄位(tabs，\\t)\u003c/li\u003e\n\u003cli\u003e換行(newlines，\\n)\u003c/li\u003e\n\u003cli\u003e除字串內空白，註解與空白在編譯與合成時會被忽略\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"136-數值numbers\"\u003e1.3.6 數值(numbers)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eVerilog 有兩種數值表示法\n\u003cul\u003e\n\u003cli\u003e固定長度(\bsized): 定義位元寬度\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;size\u0026gt;'\u0026lt;bsase format\u0026gt;\u0026lt;number\u0026gt;\u003c/code\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;size\u0026gt;\u003c/code\u003e：十進位來表示此數的位元數(bits)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;base format\u0026gt;\u003c/code\u003e：定義進制\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e'H\u003c/code\u003e|\u003ccode\u003e'h\u003c/code\u003e：十六進制\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e'D\u003c/code\u003e|\u003ccode\u003e'd\u003c/code\u003e：十進制\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e'O\u003c/code\u003e|\u003ccode\u003e'p\u003c/code\u003e：八進制\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e'B\u003c/code\u003e|\u003ccode\u003e'b\u003c/code\u003e：二進制\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\u0026lt;number\u0026gt;\u003c/code\u003e：用\u003ccode\u003e\u0026lt;base format\u0026gt;\u003c/code\u003e來表示數值\u003c/li\u003e\n\u003cli\u003e若為負號，將\u003ccode\u003e-\u003c/code\u003e放在\u003ccode\u003e\u0026lt;size\u0026gt;\u003c/code\u003e前面\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e舉例：\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e18'h47CB\u003c/code\u003e：18 bits 的十六進位數 47CB\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e13'h47CB\u003c/code\u003e：13 bits 的十六進位數(因未給定高位元自動補0) 7CB\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e12'd1023\u003c/code\u003e：12 bits 的十進位數 1023\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e9'o723\u003c/code\u003e：9 bits 的八進位數 723\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e5'b11101\u003c/code\u003e：5bits 的二進位數 11101\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e5'b1xx01\u003c/code\u003e：含有 unknown values 的表示法\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e不定長度(unsized): 未定義位元寬度\n\u003cul\u003e\n\u003cli\u003e\u0026lsquo;\u003ccode\u003e\u0026lt;base format\u0026gt;\u0026lt;number\u003c/code\u003e\n\u003cul\u003e\n\u003cli\u003e不使用\u003ccode\u003e\u0026lt;size\u0026gt;\u003c/code\u003e規定位元長度\u003c/li\u003e\n\u003cli\u003e使用 HDL 編譯器內定的長度(32bit的寬度)\u003c/li\u003e\n\u003cli\u003e沒有寫明\u003ccode\u003e\u0026lt;base format\u0026gt;\u003c/code\u003e，則\u003cstrong\u003e內定為十進制\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e舉例：\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e'h47CB\u003c/code\u003e：32 bits 的十六進位數 47CB\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e1023\u003c/code\u003e：32 bits 的十進位數 1023\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e'o723\u003c/code\u003e：32 bits 的八進位數 723\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e'b11101\u003c/code\u003e：32 bits 的二進位數 11101\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eVerilog 有四種數值位準(value level)\n\u003cul\u003e\n\u003cli\u003e\\(\\begin{array}{|c|l|}\\hline\n\\text{數值位準}\u0026amp;\\text{實際電路狀態}\\\\\\hline\n\\text{0}\u0026amp;\\text{邏輯0，假(false)，接地}\\\\\\hline\n\\text{1}\u0026amp;\\text{邏輯1，真(true)，接壓電源}\\\\\\hline\n\\text{x}\u0026amp;\\text{不確定值(unknown value)}\\\\\\hline\n\\text{z}\u0026amp;\\text{高阻抗(high impedance)，浮接狀態(floating state)}\\\\\\hline\n\\end{array}\n\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"14-verilog-資料物件與型態\"\u003e1.4 Verilog 資料物件與型態\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e資料物件(data objects)\n\u003cul\u003e\n\u003cli\u003e描述行為過程中所使用的訊號載具\u003c/li\u003e\n\u003cli\u003e一個物件經過處理再傳到另一個物件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e資料型態(data type)\n\u003cul\u003e\n\u003cli\u003e定義資料物件的類型\u003c/li\u003e\n\u003cli\u003e接線、暫存器、參數等\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"141-接線nets\"\u003e1.4.1 接線(Nets)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e接線(nets)是連接實體元件的連接線\u003c/li\u003e\n\u003cli\u003e要被驅動才能改變其內部的值\u003c/li\u003e\n\u003cli\u003e最主要的關鍵字是 \u003ccode\u003ewire\u003c/code\u003e\n\u003cul\u003e\n\u003cli\u003e一個位元的純量(scalar)\u003c/li\u003e\n\u003cli\u003e多位元長度的向量(vector)\u003c/li\u003e\n\u003cli\u003e內定值為 \u003ccode\u003ez\u003c/code\u003e(高阻抗、浮接)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e宣告方式\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Verilog\" data-lang=\"Verilog\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003ewire\u003c/span\u003e w;         \u003cspan style=\"color:#75715e\"\u003e// 宣告一條接線，命名為\bw，內定預設值為z\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003ewire\u003c/span\u003e x \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u0026#39;b0\u003c/span\u003e;  \u003cspan style=\"color:#75715e\"\u003e// 宣告一條接線，命名為x，並指定x為邏輯0\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003ewire\u003c/span\u003e a, b, c    \u003cspan style=\"color:#75715e\"\u003e// 宣告三條接線，命名為a, b, c\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"142-暫存器registers\"\u003e1.4.2 暫存器(Registers)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e抽象的資料儲存物件(有別於實體暫存器 D flip-flop)\u003c/li\u003e\n\u003cli\u003e保留一個數值直到下一次指定新值為止\u003c/li\u003e\n\u003cli\u003e觀念類似 C 語言中的變數\u003c/li\u003e\n\u003cli\u003e主要的關鍵字是 \u003ccode\u003ereg\u003c/code\u003e\n\u003cul\u003e\n\u003cli\u003e一個位元的純量(scalar)\u003c/li\u003e\n\u003cli\u003e多位元長度的向量(vector)\u003c/li\u003e\n\u003cli\u003e內定值為 \u003ccode\u003ex\u003c/code\u003e(未知)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\\(\\begin{array}{|l|l|}\\hline\n\\text{reg}\u0026amp;\\text{可變動位元寬度的無號整數(unsigned integer variable)}\\\\\\hline\n\\text{integer}\u0026amp;\\text{32位元寬度的有號整數(signed 32-bit integer variable)，}\\\\\n\u0026amp;\\text{算術運算產生2補數結果(2\u0026rsquo;s complement results))}\\\\\\hline\n\\text{real}\u0026amp;\\text{雙倍精確度之有號浮點數}\\\\\n\u0026amp;\\text{(signed floating-point variable with double precision)}\\\\\\hline\n\\text{time}\u0026amp;\\text{64位元寬度的無號整數(unsigned 64-bit integer variable)}\\\\\\hline\n\\end{array}\\)\n\u003cul\u003e\n\u003cli\u003e設計電路請以\u003ccode\u003ereg\u003c/code\u003e為主，其他類型合成器可能不支援。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e宣告方式\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Verilog\" data-lang=\"Verilog\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003ereg\u003c/span\u003e a;          \u003cspan style=\"color:#75715e\"\u003e// 宣告 1 個 1 位元暫存器為 a，定位值為 1 位元的 x\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003ereg\u003c/span\u003e x, y;       \u003cspan style=\"color:#75715e\"\u003e// 宣告 2 個宣存器，命名為 x, y\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003einteger\u003c/span\u003e count;  \u003cspan style=\"color:#75715e\"\u003e// 宣告 1 個整數為 count，值可以為正負\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003ereal\u003c/span\u003e fraction;  \u003cspan style=\"color:#75715e\"\u003e// 宣告 1 個浮點數為 fraction，值含小數點\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"143-純量與向量scalar-and-vector\"\u003e1.4.3 純量與向量(scalar and vector)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e純量(scalar)\n\u003cul\u003e\n\u003cli\u003e一個位元的物件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e向量(vector)\n\u003cul\u003e\n\u003cli\u003e多個位元的物件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e接線(ex. wire) 與 reg\n\u003cul\u003e\n\u003cli\u003e內定一位元\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e[大數字:小數字]\u003c/code\u003e、\u003ccode\u003e[小數字:大數字]\u003c/code\u003e→\u003ccode\u003e[MSB:LSB]\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e宣告方式\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Verilog\" data-lang=\"Verilog\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003ewire\u003c/span\u003e a;         \u003cspan style=\"color:#75715e\"\u003e// 宣告 1 個 1-bits 接線\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003ewire\u003c/span\u003e [\u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e] x;   \u003cspan style=\"color:#75715e\"\u003e// 宣告 1 個 5-bits 接線\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003ereg\u003c/span\u003e b;          \u003cspan style=\"color:#75715e\"\u003e// 宣告 1 個 1-bits 暫存器\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003ereg\u003c/span\u003e [\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e] y;    \u003cspan style=\"color:#75715e\"\u003e// 宣告 1 個 8-bits 暫存器\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003ereg\u003c/span\u003e [\u003cspan style=\"color:#ae81ff\"\u003e31\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e] z;   \u003cspan style=\"color:#75715e\"\u003e// 宣告 1 個 32-bits 暫存器\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"144-陣列array\"\u003e1.4.4 陣列(Array)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e多個暫存器、接線的聚合體\u003c/li\u003e\n\u003cli\u003e索引值(index)定義聚合體中的個別物件\u003c/li\u003e\n\u003cli\u003e支援多維度的陣列\u003c/li\u003e\n\u003cli\u003e記憶體(memory)、暫存器檔案(register file)\u003c/li\u003e\n\u003cli\u003e陣列中暫存器、接線的個數\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e[大數字:小數字]\u003c/code\u003e、\u003ccode\u003e[小數字:大數字]\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e宣告方式\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Verilog\" data-lang=\"Verilog\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// mem_block 是一個包含 128 個暫存器的陣列，\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 每個暫存器皆為 32 位元寬\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003ereg\u003c/span\u003e [\u003cspan style=\"color:#ae81ff\"\u003e31\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e] mem_block [\u003cspan style=\"color:#ae81ff\"\u003e127\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// mem_2D 是一個 2 維 4x64 的暫存器陣列，\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 每個暫存器皆為 8 位元寬\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003ereg\u003c/span\u003e [\u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e] mem_2D [\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e][\u003cspan style=\"color:#ae81ff\"\u003e63\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"145-參數parameter\"\u003e1.4.5 參數(parameter)\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e定義編譯合成電路時的常數\u003c/li\u003e\n\u003cli\u003e每次編譯合成前更改，編譯合成器會根據參數值產生相對應的電路\u003c/li\u003e\n\u003cli\u003e重複使用\u003c/li\u003e\n\u003cli\u003e關鍵字 \u003ccode\u003eparameter\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e宣告方式\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Verilog\" data-lang=\"Verilog\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eparameter\u003c/span\u003e width \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003ewire\u003c/span\u003e [width\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e] a, b;  \u003cspan style=\"color:#75715e\"\u003e// 接線 a 和 b 的位元寬度，會隨著參數值的改變而變動\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003ereg\u003c/span\u003e [width\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e] y;      \u003cspan style=\"color:#75715e\"\u003e// 暫存器 y 的位元寬度，會隨著參數值的改變而變動\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"15-模組module埠port\"\u003e1.5 模組(Module)、埠(Port)\u003c/h2\u003e\n\u003ch3 id=\"151-模組module\"\u003e1.5.1 模組(Module)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e一個電路區塊、可以由其他模組組成\u003c/li\u003e\n\u003cli\u003e連接模組時\n\u003cul\u003e\n\u003cli\u003e考慮模組的輸入與輸出介面\u003c/li\u003e\n\u003cli\u003e不需要考慮模組內部的詳細電路\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e電路設計時\n\u003cul\u003e\n\u003cli\u003e只修改模組內部電路\u003c/li\u003e\n\u003cli\u003e不會改變電路外部及周遭的模組\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e模組內部的電路描述可包含\n\u003cul\u003e\n\u003cli\u003e訊號資料型態宣告\u003c/li\u003e\n\u003cli\u003e引用其他模組(邏輯閘)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eassign\u003c/code\u003e 資料處理模型之描述\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ealways\u003c/code\u003e 行為模型之描述\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e函數(function)\u003c/strong\u003e 與 \u003cstrong\u003e任務(task)\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e除訊號宣告需先描述，其他部分撰寫的順序，不影響電路行為\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e模組宣告\n\u003cul\u003e\n\u003cli\u003e以關鍵字 \u003ccode\u003emodule\u003c/code\u003e 為開頭，在其後加一個識別用的模組名稱(module name)\u003c/li\u003e\n\u003cli\u003e再來是\u003cstrong\u003e輸入與輸出埠列\u003c/strong\u003e(module terminal list)和埠列宣告，接著是模組內部關於電路的描述\u003c/li\u003e\n\u003cli\u003e以關鍵字 \u003ccode\u003eendmodule\u003c/code\u003e 做為模組結尾\u003c/li\u003e\n\u003cli\u003e支援階層`式的設計概念\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Verilog\" data-lang=\"Verilog\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003emodule\u003c/span\u003e module_name(terminal_list)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eport_declaration(...)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eparam_declaration(optional)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003edata_type_declaration(\u003cspan style=\"color:#66d9ef\"\u003ewire\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003ereg\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eother_module(logic_gate)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eassign\u003c/span\u003e data_flow_model\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003ealways\u003c/span\u003e behavior_model\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efunction\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003etask\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eendmodule\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"152-埠port\"\u003e1.5.2 埠(port)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e終端點、模組與外界溝通的介面接點(門)\u003c/li\u003e\n\u003cli\u003e一個模組通常是經由一串的輸入輸出埠稱為埠列(terminal list)來與外界溝通\u003c/li\u003e\n\u003cli\u003e若模組與外界不需要溝通，則埠列也就不存在(封閉系統)\n\u003cul\u003e\n\u003cli\u003e測試環境(test bench)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e埠的宣告\n\u003cul\u003e\n\u003cli\u003e埠的宣告可分為輸入埠(input)、輸出埠(output)、雙向埠(inout)三種。\u003c/li\u003e\n\u003cli\u003e埠的宣告型態內定為接線(net)的 \u003ccode\u003ewire\u003c/code\u003e，若需要將訊號儲存起來則埠號型態須宣告成暫存器 \u003ccode\u003ereg\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e輸入埠和雙向埠只能是接線(net)，\u003cstrong\u003e不可宣告成暫存器\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e輸出埠可以宣告成接線(net)或暫存器。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Verilog\" data-lang=\"Verilog\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003emodule\u003c/span\u003e full_adder(a, b, carry, sum);    \u003cspan style=\"color:#75715e\"\u003e// 埠列\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003einput\u003c/span\u003e  [\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e] a, b;                      \u003cspan style=\"color:#75715e\"\u003e// 輸入埠(4位元向量)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003einput\u003c/span\u003e  carry                            \u003cspan style=\"color:#75715e\"\u003e// 輸入埠(1位元純量)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eoutput\u003c/span\u003e [\u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e] sum;                       \u003cspan style=\"color:#75715e\"\u003e// 輸出埠(5位元向量)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003ereg\u003c/span\u003e    [\u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e] sum;                       \u003cspan style=\"color:#75715e\"\u003e// 因輸出sum需儲存資料，故宣告成暫存器\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e...\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eendmodule\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"16-邏輯閘層次模型\"\u003e1.6 邏輯閘層次模型\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e利用關鍵字即可引用基本的邏輯閘元件\u003c/li\u003e\n\u003cli\u003e基本的邏輯閘關鍵字\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eand\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enand\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eor\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enor\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003enot\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003exor\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003exnor\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"161-多個輸入邏輯閘multiple-input-gates\"\u003e1.6.1 多個輸入邏輯閘(Multiple-Input Gates)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eand\u003c/code\u003e、\u003ccode\u003enand\u003c/code\u003e、\u003ccode\u003eor\u003c/code\u003e、\u003ccode\u003enor\u003c/code\u003e、\u003ccode\u003exor\u003c/code\u003e、\u003ccode\u003exnor\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e具有多個純量(scalar)的輸入，但是只有一個純量的輸出\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e多個輸入邏輯閘的輸出總是放在埠列(post list)的第一個位置，而輸入則是跟在輸出的後面\u003c/strong\u003e\n輸出必須透過接線(wire)連接，輸入無規定\u003c/li\u003e\n\u003cli\u003e多個輸入邏輯閘的別名可以加或是不加\u003c/li\u003e\n\u003cli\u003e使用方法\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Verilog\" data-lang=\"Verilog\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egate_type instance(out, in_1, in_2, in_3, ..., in_n);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003egate_type inst_1(out_1, in1_1, in1_2, in1_3, ..., in1_n),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          inst_2(out_2, in2_1, in2_2, in2_3, ..., in2_n),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          inst_3(out_3, in3_1, in3_2, in3_3, ..., in3_n),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          ...\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          inst_m(out_m, in_m1, in_m2, in_m3, ..., in_mn);\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\\(\\begin{array}{ccc}\n\\underbrace{\\text{a, b, c, d}}_{\\text{輸入}}\n\\rightarrow\n\\boxed{\\text{Multiple-Input Gate}}\n\\rightarrow\n\\underbrace{\\text{e}} _{\\text{輸出}}\n\\end{array}\n\\)\u003c/li\u003e\n\u003cli\u003e\\(\\text{and\\quad a1(}\n\\underbrace{\\text{e}}_{\\text{輸出}}\n\\text{, }\n\\underbrace{\\text{a, b, c, d}} _{\\text{輸入}}\n\\text{);}\n\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"162-多個輸出邏輯閘multiple-output-gates\"\u003e1.6.2 多個輸出邏輯閘(Multiple-Output Gates)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003enot\u003c/code\u003e、\u003ccode\u003ebuf\u003c/code\u003e\u003c/p\u003e","title":"[VHDL] Verilog Hardware Description Language"},{"content":"前言 MVC MVC 是一種軟體架構模式。 模型 (Model) 視圖 (View) 控制器 (Controller) 目的是實現一種動態且有彈性的程式設計，使後續對程式設計的維護與擴充都變得更容易，另一方面也能使程式的某一部分被重複使用而提升設計效率。 SSH SSH 是 MVC 的一種，是常用的系統框架，由下面三種集合而成： Struts Spring Hibernate SSM SSH 是 MVC 的一種，是常用的系統框架，由下面三種集合而成： Spring-MVC Spring MyBatis SSH v.s. SSM Spring-MVC v.s. Struts Struts 和 Spring-MVC 都負責取轉發，但兩者針對 request 的請求上區別很大， Struts 是針對一個 Action class 來進行 request，即一個 Action 對應一個 request，屬於類攔截，請求的數據類共享。 Spring-MVC 則是針對 method 級別的 request，即一個 method 對應一個 request，屬於方法攔截，請求的數據方法不共享。 Spring-MVC 的配置文件相對較少，容易上手，方便開發。 Spring-MVC 的入口是 Servlet 級別的而 Struts 的級別是 Filter 級別的。 Hibernate v.s. MyBatis Hibernate 是一種 O/R 關係型，即完成資料庫和持久化類別之間的映射；而 MyBatis 是針對的 SQL-Mapping。猶如 Hibernate 是對資料庫封裝完成後，調用相對應的語句(HQL)來控制資料庫；而 MyBatis 是用原生的資料庫語法。 基於以上原因，Hibernate 的優化較 MyBatis 難，MyBatis 不需要額外學習新的語法，入門較快。 對於更高級的 Queuy，MyBatis 需要編寫 SQL 語句與 ResultMap。而 Hibernate 有因應的映射機制，無需關心 SQL 的生成與結果映射，可以專注於開發流程。 Hibernate 的資料庫移植性很好，MyBatis 的資料庫移植性不好，不同的資料庫需要寫不同的 SQL。 Spring Spring、Spring MVC、Spring Boot Spring 是一種框架，包含一系列的 IoC 容器的設計和依賴注入(DI) 及 整合AOP功能。 Spring MVC 是一種以 Spring 為核心的框架。 Spring Boot 是一種以 Spring 為核心的框架，同時又能簡化配置(configuration)。 Spring 的核心基礎 DI DI = 依賴注入 Dependency Injection 一種 coding style，為了未來在維護上能更加的靈活，概念類似： // 1 System.out.println(\u0026#34;This is Spring\u0026#34;); // 2 String str = \u0026#34;This is Spring\u0026#34;; System.out.println(str); IoC IoC = 控制反轉 Inversion of Control 將產生物件這件事交給IoC去做。簡單來說，IoC是一個xml檔，也可以是一個class(Bean class)。 IoC做的事情就是設定其他class(Bean class)的名稱，以及 Constructor 會用到的參數或物件。 public class User{ Family family = new Family(\u0026#34;Jason\u0026#34;, \u0026#34;Jocelyn\u0026#34;, \u0026#34;Mark\u0026#34;, \u0026#34;Eva\u0026#34;); public void showAll(){ family.showFamily(); } } public class Family{ String dad; String mom; String son; String dau; public Family(String dad, String mom, String son, String dau){ this.dad = dad; this.mom = mom; this.son = son; this.dau = dau; } public void showFamily(){ System.out.println(dad + \u0026#34; \u0026#34; + mom + \u0026#34; \u0026#34; + son + \u0026#34; \u0026#34; + dau); } } \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;beans\u0026gt; \u0026lt;bean id=\u0026#34;family\u0026#34; class=\u0026#34;Family\u0026#34;\u0026gt; \u0026lt;property name=\u0026#34;dad\u0026#34; value=\u0026#34;Jason\u0026#34; /\u0026gt; \u0026lt;property name=\u0026#34;mom\u0026#34; value=\u0026#34;Jocelyn\u0026#34; /\u0026gt; \u0026lt;property name=\u0026#34;son\u0026#34; value=\u0026#34;Mike\u0026#34; /\u0026gt; \u0026lt;property name=\u0026#34;dau\u0026#34; value=\u0026#34;Eva\u0026#34; /\u0026gt; \u0026lt;/bean\u0026gt; \u0026lt;bean id=\u0026#34;user\u0026#34; class=\u0026#34;User\u0026#34;\u0026gt; \u0026lt;property name=\u0026#34;allFamily\u0026#34; value=\u0026#34;family\u0026#34; /\u0026gt; \u0026lt;/bean\u0026gt; \u0026lt;/beans\u0026gt; 實例 DI + IoC Dinner public class Diner{ Food food; public void getDinner(){ food.getFood(); } } xml \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;beans\u0026gt; \u0026lt;bean id=\u0026#34;pork\u0026#34; class=\u0026#34;Pork\u0026#34;/\u0026gt; \u0026lt;bean id=\u0026#34;chicken\u0026#34; class=\u0026#34;Chicken\u0026#34;/\u0026gt; \u0026lt;bean id=\u0026#34;food\u0026#34; class=\u0026#34;Food\u0026#34;\u0026gt; \u0026lt;property name=\u0026#34;food\u0026#34; value=\u0026#34;chicken\u0026#34; /\u0026gt; \u0026lt;/bean\u0026gt; \u0026lt;/beans\u0026gt; classes public interface Food{ public void getFood(); } public class Chicken implements Food{ @override public void getFood(){ System.out.println(\u0026#34;Eat chicken\u0026#34;); } } public class Pork implements Food{ @override public void getFood(){ System.out.println(\u0026#34;Eat pork\u0026#34;); } } Spring Boot 由 Pivotal 團隊在 2013 年開始研發、2014年4月發布第一個版本。 是基於 Spring4.0 所設計的一種新型框架，繼承的 Spring 框架原有的優秀特性，還通過簡化配置來進一步簡化了 Spring 應用的整個搭建和開發過程。 通過集成大量的框架使得依賴包的版本衝突與引用的不穩定性得到很好的解決。 官方說明: Spring Boot makes it easy to create stand-alone, production-grade Spring baesd Applications that you can \u0026ldquo;just run\u0026rdquo;. We take an opinionated view of the Spring platform and third-party libraries so you can get started with minimum fuss. Most Spring Boot applications need very little Spring configuration.\nString Boot 預設了各種合理的默認配置包括放棄了 XML，Spring Boot Web 應用程式使用了一個嵌入式 Tomcat 容器，可以自定義 Spring Boot 應用程式等。 簡而言之，Spring Boot 提供一組工具，可以快速構建且容易配置的 Spring 應用程式。同時不需要在重新定義基本的配置，從而成為可以達到快速開發的效果。 特色 創建獨立的 Spring 應用程式 嵌入式 Tomcat、Jetty; Undertow(不用部署 WAR 包) 提出自主的 starter 來簡化配置 隨時自動地配置 Spring 及相關的第三方庫 提供已隨時就緒的功能如 Metrics，程式的健檢及外部化配置 不會生成任何代碼及無任何 XML 配置的前設要求 ","permalink":"https://intervalrain.github.io/java/java_mvc/","summary":"\u003ch1 id=\"前言\"\u003e前言\u003c/h1\u003e\n\u003ch2 id=\"mvc\"\u003eMVC\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eMVC 是一種軟體架構模式。\n\u003cul\u003e\n\u003cli\u003e模型 (Model)\u003c/li\u003e\n\u003cli\u003e視圖 (View)\u003c/li\u003e\n\u003cli\u003e控制器 (Controller)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e目的是實現一種動態且有彈性的程式設計，使後續對程式設計的維護與擴充都變得更容易，另一方面也能使程式的某一部分被重複使用而提升設計效率。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"ssh\"\u003eSSH\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eSSH 是 MVC 的一種，是常用的系統框架，由下面三種集合而成：\n\u003cul\u003e\n\u003cli\u003eStruts\u003c/li\u003e\n\u003cli\u003eSpring\u003c/li\u003e\n\u003cli\u003eHibernate\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"ssm\"\u003eSSM\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eSSH 是 MVC 的一種，是常用的系統框架，由下面三種集合而成：\n\u003cul\u003e\n\u003cli\u003eSpring-MVC\u003c/li\u003e\n\u003cli\u003eSpring\u003c/li\u003e\n\u003cli\u003eMyBatis\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"ssh-vs-ssm\"\u003eSSH v.s. SSM\u003c/h2\u003e\n\u003ch3 id=\"spring-mvc-vs-struts\"\u003eSpring-MVC v.s. Struts\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003eStruts 和 Spring-MVC 都負責取轉發，但兩者針對 request 的請求上區別很大，\n\u003cul\u003e\n\u003cli\u003eStruts 是針對一個 Action \u003cstrong\u003eclass\u003c/strong\u003e 來進行 request，即一個 Action 對應一個 request，屬於類攔截，請求的數據類共享。\u003c/li\u003e\n\u003cli\u003eSpring-MVC 則是針對 \u003cstrong\u003emethod\u003c/strong\u003e 級別的 request，即一個 method 對應一個 request，屬於方法攔截，請求的數據方法不共享。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eSpring-MVC 的配置文件相對較少，容易上手，方便開發。\u003c/li\u003e\n\u003cli\u003eSpring-MVC 的入口是 Servlet 級別的而 Struts 的級別是 Filter 級別的。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"hibernate-vs-mybatis\"\u003eHibernate v.s. MyBatis\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003eHibernate 是一種 O/R 關係型，即完成資料庫和持久化類別之間的映射；而 MyBatis 是針對的 SQL-Mapping。猶如 Hibernate 是對資料庫封裝完成後，調用相對應的語句(HQL)來控制資料庫；而 MyBatis 是用原生的資料庫語法。\u003c/li\u003e\n\u003cli\u003e基於以上原因，Hibernate 的優化較 MyBatis 難，MyBatis 不需要額外學習新的語法，入門較快。\u003c/li\u003e\n\u003cli\u003e對於更高級的 Queuy，MyBatis 需要編寫 SQL 語句與 ResultMap。而 Hibernate 有因應的映射機制，無需關心 SQL 的生成與結果映射，可以專注於開發流程。\u003c/li\u003e\n\u003cli\u003eHibernate 的資料庫移植性很好，MyBatis 的資料庫移植性不好，不同的資料庫需要寫不同的 SQL。\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch1 id=\"spring\"\u003eSpring\u003c/h1\u003e\n\u003ch2 id=\"springspring-mvcspring-boot\"\u003eSpring、Spring MVC、Spring Boot\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eSpring\n\u003cul\u003e\n\u003cli\u003e是一種框架，包含一系列的 \u003cstrong\u003eIoC 容器\u003c/strong\u003e的設計和\u003cstrong\u003e依賴注入(DI)\u003c/strong\u003e 及 \u003cstrong\u003e整合AOP\u003c/strong\u003e功能。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eSpring MVC\n\u003cul\u003e\n\u003cli\u003e是一種以 Spring 為核心的框架。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eSpring Boot\n\u003cul\u003e\n\u003cli\u003e是一種以 Spring 為核心的框架，同時又能簡化配置(configuration)。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"spring-的核心基礎\"\u003eSpring 的核心基礎\u003c/h2\u003e\n\u003ch3 id=\"di\"\u003eDI\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cem\u003eDI = 依賴注入 Dependency Injection\u003c/em\u003e\u003c/li\u003e\n\u003cli\u003e一種 coding style，為了未來在維護上能更加的靈活，概念類似：\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Java\" data-lang=\"Java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eSystem.\u003cspan style=\"color:#a6e22e\"\u003eout\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eprintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;This is Spring\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eString str \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;This is Spring\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eSystem.\u003cspan style=\"color:#a6e22e\"\u003eout\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eprintln\u003c/span\u003e(str);\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"ioc\"\u003eIoC\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cem\u003eIoC = 控制反轉 Inversion of Control\u003c/em\u003e\u003c/li\u003e\n\u003cli\u003e將產生物件這件事交給IoC去做。簡單來說，IoC是一個xml檔，也可以是一個class(Bean class)。\u003c/li\u003e\n\u003cli\u003eIoC做的事情就是設定其他class(Bean class)的名稱，以及 Constructor 會用到的參數或物件。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003epublic class User{\n    Family family = new Family(\u0026#34;Jason\u0026#34;, \u0026#34;Jocelyn\u0026#34;, \u0026#34;Mark\u0026#34;, \u0026#34;Eva\u0026#34;);\n    public void showAll(){\n        family.showFamily();\n    }\n}\n\npublic class Family{\n    String dad;\n    String mom;\n    String son;\n    String dau;\n\n    public Family(String dad, String mom, String son, String dau){\n        this.dad = dad;\n        this.mom = mom;\n        this.son = son;\n        this.dau = dau;\n    }\n\n    public void showFamily(){\n        System.out.println(dad + \u0026#34; \u0026#34; + mom + \u0026#34; \u0026#34; + son + \u0026#34; \u0026#34; + dau);\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-xml\" data-lang=\"xml\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;beans\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026lt;bean\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eid=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;family\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclass=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Family\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003e\u0026lt;property\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ename=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;dad\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003evalue=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Jason\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003e\u0026lt;property\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ename=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;mom\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003evalue=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Jocelyn\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003e\u0026lt;property\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ename=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;son\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003evalue=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Mike\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003e\u0026lt;property\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ename=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;dau\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003evalue=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Eva\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026lt;/bean\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026lt;bean\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eid=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;user\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclass=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;User\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003e\u0026lt;property\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ename=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;allFamily\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003evalue=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;family\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026lt;/bean\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/beans\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"實例-di--ioc\"\u003e實例 DI + IoC\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eDinner\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Java\" data-lang=\"Java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eDiner\u003c/span\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    Food food;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egetDinner\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        food.\u003cspan style=\"color:#a6e22e\"\u003egetFood\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003exml\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-xml\" data-lang=\"xml\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;beans\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026lt;bean\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eid=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;pork\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclass=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Pork\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026lt;bean\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eid=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;chicken\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclass=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Chicken\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026lt;bean\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eid=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;food\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclass=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Food\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#f92672\"\u003e\u0026lt;property\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ename=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;food\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003evalue=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;chicken\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e/\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#f92672\"\u003e\u0026lt;/bean\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/beans\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eclasses\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003epublic interface Food{\n    public void getFood();\n}\npublic class Chicken implements Food{\n    @override\n    public void getFood(){\n        System.out.println(\u0026#34;Eat chicken\u0026#34;);\n    }\n}\npublic class Pork implements Food{\n    @override\n    public void getFood(){\n        System.out.println(\u0026#34;Eat pork\u0026#34;);\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003ch1 id=\"spring-boot\"\u003eSpring Boot\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e由 Pivotal 團隊在 2013 年開始研發、2014年4月發布第一個版本。\u003c/li\u003e\n\u003cli\u003e是基於 Spring4.0 所設計的一種新型框架，繼承的 Spring 框架原有的優秀特性，還通過簡化配置來進一步簡化了 Spring 應用的整個搭建和開發過程。\u003c/li\u003e\n\u003cli\u003e通過集成大量的框架使得依賴包的\u003cstrong\u003e版本衝突\u003c/strong\u003e與\u003cstrong\u003e引用的不穩定性\u003c/strong\u003e得到很好的解決。\u003c/li\u003e\n\u003cli\u003e官方說明:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003eSpring Boot makes it easy to create stand-alone, production-grade Spring baesd Applications that you can \u0026ldquo;just run\u0026rdquo;.\nWe take an opinionated view of the Spring platform and third-party libraries so you can get started with minimum fuss.\nMost Spring Boot applications need very little Spring configuration.\u003c/p\u003e","title":"[Java] 淺談 Java MVC"},{"content":"Microservices Definition Separate business logic functions. Instead of one big problem, several smaller applications. Communicative via well defined APIs - usually HTTP In demand Advantages and Disavantages Advantages Language independent Fast iterations Small teams Fault Isolation Pair well with containers Scalable Big plus Disavantages Complex networking Overhead Databases Servers Docker is an open platform for developers and sysadmins to build, ship, and run distributed applications, whether on laptops, data center VMs, or the cloud. Definition Containers are a way to package software in a format that can run isolated on a shared operating system. Unlike VMs, containers do not bundle a full operating system - only libraries and setting required to make the software work are needed. This makes for efficientm, lightweight, self-contained systems and guarantees that software will always run the same, regardless of where it\u0026rsquo;s deployed. Docker vs VM VM = App + Bins/Libs + guest OS Container = App + Bins/Libs + Docker Dockerfile Describes the build process for an image Can be run to automatically create an image Contains all the commands necessary to build the image and run your application. Kubernetes Components Node Kubelet Communicates with master Run Pods Pod Runs 1+ containers Exists on a node Service Handles requests Usually a load balancer Deployment Defines desired state - kubernetes handles the rest ","permalink":"https://intervalrain.github.io/it/microservices_docker_kubernetes/","summary":"\u003ch1 id=\"microservices\"\u003eMicroservices\u003c/h1\u003e\n\u003cp\u003e\u003cimg alt=\"microservice\" loading=\"lazy\" src=\"/images/IT/microservices.png\"\u003e\u003c/p\u003e\n\u003ch2 id=\"definition\"\u003eDefinition\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eSeparate business logic functions.\u003c/li\u003e\n\u003cli\u003eInstead of one big problem, several smaller applications.\u003c/li\u003e\n\u003cli\u003eCommunicative via well defined APIs - usually HTTP\u003c/li\u003e\n\u003cli\u003eIn demand\n\u003cimg alt=\"microservice2\" loading=\"lazy\" src=\"/images/IT/microservices2.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"advantages-and-disavantages\"\u003eAdvantages and Disavantages\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eAdvantages\n\u003cul\u003e\n\u003cli\u003eLanguage independent\u003c/li\u003e\n\u003cli\u003eFast iterations\u003c/li\u003e\n\u003cli\u003eSmall teams\u003c/li\u003e\n\u003cli\u003eFault Isolation\u003c/li\u003e\n\u003cli\u003ePair well with containers\u003c/li\u003e\n\u003cli\u003eScalable\n\u003cul\u003e\n\u003cli\u003eBig plus\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eDisavantages\n\u003cul\u003e\n\u003cli\u003eComplex networking\u003c/li\u003e\n\u003cli\u003eOverhead\n\u003cul\u003e\n\u003cli\u003eDatabases\u003c/li\u003e\n\u003cli\u003eServers\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"docker\"\u003eDocker\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eis an open platform for developers and sysadmins to build, ship, and run distributed applications, whether on laptops, data center VMs, or the cloud.\n\u003cimg alt=\"docker\" loading=\"lazy\" src=\"/images/IT/docker.png\"\u003e\u003c/p\u003e","title":"[IT] Introduction to Microservices, Docker and Kubernetes"},{"content":"map 宣告 map \u0026lt;int, int\u0026gt; mp; // key和value都是整數 方法 mp[key] = value; 加入新的key-value pair mp.count(key); 檢查 key 是否存在 map 中 mp.erase(key); 刪除 key mp.clear(); 清空 map 中的所有元素： value = mp[key] 利用 key 取值 mp.empty() 判斷是否為空的map map 的遍歷 遍歷整個map時，利用iterator操作： 取key：it-\u0026gt;first 或 *(it).first 取value：it-\u0026gt;second 或 *(it).second for (auto it = mp.begin(); it != mp.end(); ++it){ cout \u0026lt;\u0026lt; it-\u0026gt;first \u0026lt;\u0026lt; \u0026#34; =\u0026gt; \u0026#34; \u0026lt;\u0026lt; it-\u0026gt;second \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; } for (auto it = mp.begin(); it != mp.end(); ++it){ cout \u0026lt;\u0026lt; (*it).first \u0026lt;\u0026lt; \u0026#34; =\u0026gt; \u0026#34; \u0026lt;\u0026lt; (*it).second \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; } ","permalink":"https://intervalrain.github.io/c++/stl_map/","summary":"\u003ch1 id=\"map\"\u003emap\u003c/h1\u003e\n\u003ch2 id=\"宣告\"\u003e宣告\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Cpp\" data-lang=\"Cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emap \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e mp; \u003cspan style=\"color:#75715e\"\u003e// key和value都是整數\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"方法\"\u003e方法\u003c/h2\u003e\n\u003ch3 id=\"mpkey--value\"\u003emp[key] = value;\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e加入新的key-value pair\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"mpcountkey\"\u003emp.count(key);\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e檢查 key 是否存在 map 中\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"mperasekey\"\u003emp.erase(key);\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e刪除 key\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"mpclear\"\u003emp.clear();\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e清空 map 中的所有元素：\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"value--mpkey\"\u003evalue = mp[key]\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e利用 key 取值\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"mpempty\"\u003emp.empty()\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e判斷是否為空的map\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"map-的遍歷\"\u003emap 的遍歷\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e遍歷整個map時，利用iterator操作：\u003c/li\u003e\n\u003cli\u003e取key：it-\u0026gt;first 或 *(it).first\u003c/li\u003e\n\u003cli\u003e取value：it-\u0026gt;second 或 *(it).second\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Cpp\" data-lang=\"Cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eauto\u003c/span\u003e it \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e mp.begin(); it \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e mp.end(); \u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003eit){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e it\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003efirst \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34; =\u0026gt; \u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e it\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003esecond \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\\n\u0026#39;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eauto\u003c/span\u003e it \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e mp.begin(); it \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e mp.end(); \u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003eit){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e (\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003eit).first \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34; =\u0026gt; \u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e (\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003eit).second \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\\n\u0026#39;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"[C++] The C++ Standard Template Library(STL) - map"},{"content":"程式碼 static final int hash(Object key){ int h; return (key == null) ? 0 : (h = key.hashCode()) ^ (h \u0026gt;\u0026gt;\u0026gt; 16); } h \u0026raquo; 16 的用途 h是key.hashCode()，h \u0026gt;\u0026gt;\u0026gt; 16代表的是取其高位的16位 key.hashCode() ^ (h \u0026raquo; 16) 這與 Java1.8 中 tab[(n-1) \u0026amp; hash] 的原理有關 static int indexFor(int h, int length){ return h \u0026amp; (length - 1); } 返回的值即為陣列的下標。 大多數情況下，capacity 都小於2^16，所以在此的 \u0026amp; 運算，只會對 h 的低16位進行 \u0026amp; 運算。 若將高位16位也加入計算，可以增加下標的發散度，避免衝突的次數。 而使用 XOR 的原因是，更較於 AND 或 OR 均勻，因為 AND 會使結果趨向於 0，OR 會使結果趨向於 1。 ","permalink":"https://intervalrain.github.io/java/hashmap/hashcode/","summary":"\u003ch1 id=\"程式碼\"\u003e程式碼\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Java\" data-lang=\"Java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efinal\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehash\u003c/span\u003e(Object key){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e h;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e (key \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e 0 : (h \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e key.\u003cspan style=\"color:#a6e22e\"\u003ehashCode\u003c/span\u003e()) \u003cspan style=\"color:#f92672\"\u003e^\u003c/span\u003e (h \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e 16);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"h--16-的用途\"\u003eh \u0026raquo; 16 的用途\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eh是\u003ccode\u003ekey.hashCode()\u003c/code\u003e，\u003ccode\u003eh \u0026gt;\u0026gt;\u0026gt; 16\u003c/code\u003e代表的是取其高位的16位\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"keyhashcode--h--16\"\u003ekey.hashCode() ^ (h \u0026raquo; 16)\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e這與 Java1.8 中 \u003ccode\u003etab[(n-1) \u0026amp; hash]\u003c/code\u003e 的原理有關\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Java\" data-lang=\"Java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eindexFor\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e h, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e length){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e h \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e (length \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e 1);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e返回的值即為陣列的下標。\u003c/li\u003e\n\u003cli\u003e大多數情況下，capacity 都小於2^16，所以在此的 \u0026amp; 運算，只會對 h 的低16位進行 \u0026amp; 運算。\u003c/li\u003e\n\u003cli\u003e若將高位16位也加入計算，可以增加下標的發散度，避免衝突的次數。\u003c/li\u003e\n\u003cli\u003e而使用 XOR 的原因是，更較於 AND 或 OR 均勻，因為 AND 會使結果趨向於 0，OR 會使結果趨向於 1。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","title":"[Java] HashMap中的hashCode設計原理"},{"content":"C++ 易錯題目收集 1. bit-format expression #include \u0026lt;bits/stdc++.h\u0026gt; using namespace std; int main(){ unsigned int x = -1; int y = ~0; if (x==y) cout \u0026lt;\u0026lt; \u0026#34;same\u0026#34;; else cout \u0026lt;\u0026lt; \u0026#34;not same\u0026#34;; return 0; } 結果 same 解析 unsigned int x = -1 相當於11111111 y = ~0 也相當於11111111 2. 如何使 C(n,3) 正確且 n 的有效值最大? 結果 return n*(n-1)/2*(n-2)/3; 解析 n*(n-1)必為基偶相乘 n*(n-1)*(n-2)必為3的倍數 故此題的作法可避免因整數除法而造成的小數位消去 3. register在C++中的用法 #include \u0026lt;bits/stdc++.h\u0026gt; using namespace std; int main(){ register int i = 10; int *ptr = \u0026amp;i; cout \u0026lt;\u0026lt; *ptr; return 0; } 選項 Prints 10 on all compilers Prints 0 on all compilers May generate Compilation Error May generate Runtime Error 結果 May generate Compilation Error 解析 register關鍵字用來分配變數儲存於CPU的register，以達到快速存取。所以對其提取有可能造成編譯錯誤，因為指標指向的位址不在在RAM上。 在大部分的C++編譯器，不推薦使用register關鍵字，因為沒有任何意義，儘管他會被默認成auto關鍵字，使得C++編譯器可能可能適用。 4. 有趣的 for loop 問題 int fun(){ static int num = 16; return num--; } int main(){ for(fun(); fun(); fun()) cout \u0026lt;\u0026lt; fun(); return 0; } 結果 14 11 8 5 2 解析 main()中的 for-loop 可以寫成等效的 while-loop 如下 int main(){ int num = 16; num--; // num = 15 while (num-- != 0){ // 先判斷後遞減 15 !=0, num = 14 cout \u0026lt;\u0026lt; (num--) \u0026lt;\u0026lt; \u0026#34; \u0026#34;; // 先印出後遞減印出 14, num = 13 num--; // 遞減後回到while, num = 12 } return 0; } static int num = 16 設定初值為 16，並遞減，故 num = 15 判斷 num 是否為真，後遞減。15 != 0，遞減使 num = 14，進入迴圈 印出 num = 14 後，遞減，num = 13 迴圈結束前作遞減，num = 12，重新回到 step2 5. const 與 volatile Pick the correct statemewnt for const and volatile keywords. 選項 const is the opposite of volatile and vice versa const and volatile can\u0026rsquo;t be used for struct and union const and volatile can\u0026rsquo;t be used for enum const and volatile can\u0026rsquo;t be used for typedef const and volatile are independent i.e. it\u0026rsquo;s possible that a variable is defined as both const and volatile 結果 const and volatile are independent i.e. it\u0026#39;s possible that a variable is defined as both const and volatile 解析 const 是確保變數不會變修改，使其值變成唯讀。 volatile 通常用在具有最佳化或多執行緒相關的變數或物件，volatile用來阻止編譯器因誤認某段程式碼無法被程式碼本身所改變，而造成的過度優化。volatile會使得每次存取這個變數或物件時，都會直接從變數位址中取得資料，避免可能使用暫存器中的值，在變數可能被其他程式更新的狀況下，產生錯誤的值。 6. operator priority int main(){ cout \u0026lt;\u0026lt; (1 \u0026lt;\u0026lt; 2 + 3 \u0026lt;\u0026lt; 4); return 0 } 結果 512 解析 +優先於\u0026lt;\u0026lt; 故此段敘述等效於 cout \u0026lt;\u0026lt; (1 \u0026lt;\u0026lt; (2 + 3) \u0026lt;\u0026lt; 4); cout \u0026lt;\u0026lt; (1 \u0026lt;\u0026lt; 5 \u0026lt;\u0026lt; 4); cout \u0026lt;\u0026lt; (32 \u0026lt;\u0026lt; 4); cout \u0026lt;\u0026lt; 512; 7. floating constant Suppose a C++ program has floating constant 1.414, what\u0026#39;s the best way to convert this as \u0026#34;float\u0026#34; data type? 選項 (float)1.414 float(1.414) 1.414f or 1.414F 1.414 itself of \u0026ldquo;float\u0026rdquo; data type i.e. nothing else required 結果 `1.414f` or `1.414F` 解析 floating constant 被預設為 double 資料型態，故利用f或F的suffix，即可將之轉為 float 資料型態。 8. array pointer int main(){ int arr[5]; // Assume base address of arr is 2000 and size of integer is 32 bit printf(%u %u, arr+1, \u0026amp;arr+1); return 0; } 結果 2004 2020 解析 array 的名稱會傳回第一個元素的地址(除了使用 sizeof)。 對 array 加 1 會加上 sizeof(type)。 \u0026amp;array 代表整個 array 的地址，加 1 回加上 sizeof(while array)。 9. initialize array int main(){ int a[][] = {{1,2},{3,4}}; int i, j; for (int i = 0; i \u0026lt; 2; i++){ for (int j = 0; j \u0026lt; 2; j++){ printf(\u0026#34;%d \u0026#34;, a[i][j]); } } return 0; } 結果 Compilation Error 解析 Array 在記憶體中是以row-major的型式儲存的。 儘管 array 是多維陣列，他都是被儲存成單一線性的區塊 下列 assign 的方式是合法的，(第一個可被省略) int a[] = {...}; int a[][10] = {{...}, ...}; int a[][5][10] = {{{...},...},...}; ","permalink":"https://intervalrain.github.io/c++/question/","summary":"\u003ch1 id=\"c-易錯題目收集\"\u003eC++ 易錯題目收集\u003c/h1\u003e\n\u003ch2 id=\"1-bit-format-expression\"\u003e1. bit-format expression\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Cpp\" data-lang=\"Cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;bits/stdc++.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eusing\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enamespace\u003c/span\u003e std;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eunsigned\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e x \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e y \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e~\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (x\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003ey)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;same\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;not same\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e結果\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003esame\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003e解析\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eunsigned int x = -1\u003c/code\u003e 相當於\u003ccode\u003e11111111\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ey = ~0\u003c/code\u003e 也相當於\u003ccode\u003e11111111\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"2-如何使-cn3-正確且-n-的有效值最大\"\u003e2. 如何使 C(n,3) 正確且 n 的有效值最大?\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e結果\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ereturn n*(n-1)/2*(n-2)/3;\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003e解析\n\u003cul\u003e\n\u003cli\u003en*(n-1)必為基偶相乘\u003c/li\u003e\n\u003cli\u003en*(n-1)*(n-2)必為3的倍數\u003c/li\u003e\n\u003cli\u003e故此題的作法可避免因整數除法而造成的小數位消去\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"3-register在c中的用法\"\u003e3. register在C++中的用法\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Cpp\" data-lang=\"Cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;bits/stdc++.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eusing\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enamespace\u003c/span\u003e std;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eregister\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003eptr \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003ei;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003eptr;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e選項\n\u003cul\u003e\n\u003cli\u003ePrints 10 on all compilers\u003c/li\u003e\n\u003cli\u003ePrints 0 on all compilers\u003c/li\u003e\n\u003cli\u003eMay generate Compilation Error\u003c/li\u003e\n\u003cli\u003eMay generate Runtime Error\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e結果\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eMay generate Compilation Error\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003e解析\n\u003cul\u003e\n\u003cli\u003eregister關鍵字用來分配變數儲存於CPU的register，以達到快速存取。所以對其提取有可能造成編譯錯誤，因為指標指向的位址不在在RAM上。\u003c/li\u003e\n\u003cli\u003e在大部分的C++編譯器，不推薦使用register關鍵字，因為沒有任何意義，儘管他會被默認成auto關鍵字，使得C++編譯器可能可能適用。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"4-有趣的-for-loop-問題\"\u003e4. 有趣的 for loop 問題\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Cpp\" data-lang=\"Cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efun\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e num \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e16\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e num\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e(fun(); fun(); fun())\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e fun();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e結果\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e14 11 8 5 2\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003e解析\n\u003cul\u003e\n\u003cli\u003emain()中的 for-loop 可以寫成等效的 while-loop 如下\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Cpp\" data-lang=\"Cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e num \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e16\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    num\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003e;                          \u003cspan style=\"color:#75715e\"\u003e// num = 15\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (num\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e){             \u003cspan style=\"color:#75715e\"\u003e// 先判斷後遞減 15 !=0, num = 14\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e (num\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e;     \u003cspan style=\"color:#75715e\"\u003e// 先印出後遞減印出 14, num = 13\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e        num\u003cspan style=\"color:#f92672\"\u003e--\u003c/span\u003e;                      \u003cspan style=\"color:#75715e\"\u003e// 遞減後回到while, num = 12\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col\u003e\n\u003cli\u003e\u003ccode\u003estatic int num = 16\u003c/code\u003e 設定初值為 16，並遞減，故 num = 15\u003c/li\u003e\n\u003cli\u003e判斷 num 是否為真，後遞減。15 != 0，遞減使 num = 14，進入迴圈\u003c/li\u003e\n\u003cli\u003e印出 num = 14 後，遞減，num = 13\u003c/li\u003e\n\u003cli\u003e迴圈結束前作遞減，num = 12，重新回到 step2\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"5-const-與-volatile\"\u003e5. const 與 volatile\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003ePick the correct statemewnt for const and volatile keywords.\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003e選項\n\u003cul\u003e\n\u003cli\u003econst is the opposite of volatile and vice versa\u003c/li\u003e\n\u003cli\u003econst and volatile can\u0026rsquo;t be used for struct and union\u003c/li\u003e\n\u003cli\u003econst and volatile can\u0026rsquo;t be used for enum\u003c/li\u003e\n\u003cli\u003econst and volatile can\u0026rsquo;t be used for typedef\u003c/li\u003e\n\u003cli\u003econst and volatile are independent i.e. it\u0026rsquo;s possible that a variable is defined as both const and volatile\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e結果\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003econst and volatile are independent i.e. it\u0026#39;s possible that a variable is defined as both const and volatile\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003e解析\n\u003cul\u003e\n\u003cli\u003econst 是確保變數不會變修改，使其值變成唯讀。\u003c/li\u003e\n\u003cli\u003evolatile 通常用在具有\u003cstrong\u003e最佳化\u003c/strong\u003e或\u003cstrong\u003e多執行緒\u003c/strong\u003e相關的變數或物件，volatile用來阻止編譯器因誤認某段程式碼無法被程式碼本身所改變，而造成的過度優化。\u003cstrong\u003evolatile會使得每次存取這個變數或物件時，都會直接從變數位址中取得資料\u003c/strong\u003e，避免可能使用暫存器中的值，在變數可能被其他程式更新的狀況下，產生錯誤的值。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"6-operator-priority\"\u003e6. operator priority\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Cpp\" data-lang=\"Cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e (\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e結果\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e512\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003e解析\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e+\u003c/code\u003e優先於\u003ccode\u003e\u0026lt;\u0026lt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e故此段敘述等效於 \u003ccode\u003ecout \u0026lt;\u0026lt; (1 \u0026lt;\u0026lt; (2 + 3) \u0026lt;\u0026lt; 4);\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ecout \u0026lt;\u0026lt; (1 \u0026lt;\u0026lt; 5 \u0026lt;\u0026lt; 4);\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ecout \u0026lt;\u0026lt; (32 \u0026lt;\u0026lt; 4);\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ecout \u0026lt;\u0026lt; 512;\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"7-floating-constant\"\u003e7. floating constant\u003c/h2\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eSuppose a C++ program has floating constant 1.414, what\u0026#39;s the best way to convert this as \u0026#34;float\u0026#34; data type?\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003e選項\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e(float)1.414\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efloat(1.414)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e1.414f\u003c/code\u003e or \u003ccode\u003e1.414F\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e1.414 itself of \u0026ldquo;float\u0026rdquo; data type i.e. nothing else required\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e結果\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e`1.414f` or `1.414F`\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003e解析\n\u003cul\u003e\n\u003cli\u003efloating constant 被預設為 double 資料型態，故利用\u003ccode\u003ef\u003c/code\u003e或\u003ccode\u003eF\u003c/code\u003e的suffix，即可將之轉為 float 資料型態。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"8-array-pointer\"\u003e8. array pointer\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Cpp\" data-lang=\"Cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e arr[\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// Assume base address of arr is 2000 and size of integer is 32 bit\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    printf(\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003eu \u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003eu, arr\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003earr\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e結果\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e2004 2020\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003e解析\n\u003cul\u003e\n\u003cli\u003earray 的名稱會傳回第一個元素的地址(除了使用 sizeof)。\u003c/li\u003e\n\u003cli\u003e對 array 加 1 會加上 sizeof(type)。\u003c/li\u003e\n\u003cli\u003e\u0026amp;array 代表整個 array 的地址，加 1 回加上 sizeof(while array)。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"9-initialize-array\"\u003e9. initialize array\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Cpp\" data-lang=\"Cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e a[][] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {{\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e},{\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e}};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i, j;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e; i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e j \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; j \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e; j\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            printf(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;%d \u0026#34;\u003c/span\u003e, a[i][j]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e結果\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eCompilation Error\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003e解析\n\u003cul\u003e\n\u003cli\u003eArray 在記憶體中是以\u003cstrong\u003erow-major\u003c/strong\u003e的型式儲存的。\u003c/li\u003e\n\u003cli\u003e儘管 array 是多維陣列，他都是被儲存成單一線性的區塊\u003c/li\u003e\n\u003cli\u003e下列 assign 的方式是合法的，(第一個可被省略)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Cpp\" data-lang=\"Cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e a[] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {...};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e a[][\u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {{...}, ...};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e a[][\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e][\u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {{{...},...},...};\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e","title":"[C++] 易錯題目收集"},{"content":"list Lists 是序列式容器，但其記憶體的分配並非連續的。 跟 vector 相比，其遍歷的速度會較慢\\(O(n)\\，但一旦位置確定後，其插入(insert)或移除(delete)元素的速度很快\\(O(1)\\)。 一般來說，List 指的是雙向鏈結陣列(doubly linked list)。 而單向鏈結陣列則為 forward_list 函式庫 #include \u0026lt;list\u0026gt; 宣告 list\u0026lt;data_type\u0026gt; list_name; 初始化 list\u0026lt;int\u0026gt; lst; // 宣告 函式 1. front() 2. back() 3. push_front() 4. push_back() 5. pop_front() 6. pop_back() 7. list::begin() 8. list::end() 9. list::rbegin() 10. list::rend() 11. list::cbegin() 12. list::cend() 13. list::crbegin() 14. list::crend() 15. empty() 16. insert() 17. erase() 18. assign() 19. remove() 20. list::remove_if() 21. reverse() 22. size() 23. list::resize() 24. sort() 25. list::max_size() 26. list::unique() 27. list::emplace_front() 28. list::emplace_back() 29. list::clear() 30. list::operator= 31. list::swap() 32. list::splice() 33. list::merge()4 34. list::emplace() 示例 #include \u0026lt;iostream\u0026gt; #include \u0026lt;iterator\u0026gt; #include \u0026lt;list\u0026gt; using namespace std; void print(list\u0026lt;int\u0026gt; lst){ list\u0026lt;int\u0026gt;::iterator it; for (it = lst.begin(); it != lst.end(); ++it){ cout \u0026lt;\u0026lt; *it \u0026lt;\u0026lt; \u0026#34; \u0026#34;; } cout \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; } int main(){ list\u0026lt;int\u0026gt; lst1, lst2; for (int i = 0; i \u0026lt; 10; ++i){ lst1.push_back(i); lst2.push_front(i); } cout \u0026lt;\u0026lt; \u0026#34;List1 is : \u0026#34;; print(lst1); cout \u0026lt;\u0026lt; \u0026#34;List2 is : \u0026#34;; print(lst2); cout \u0026lt;\u0026lt; \u0026#34;List1.front() : \u0026#34; \u0026lt;\u0026lt; lst1.front() \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; cout \u0026lt;\u0026lt; \u0026#34;List2.back() : \u0026#34; \u0026lt;\u0026lt; lst2.back() \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; cout \u0026lt;\u0026lt; \u0026#34;After List1.pop_front() : \u0026#34;; lst1.pop_front(); print(lst1); cout \u0026lt;\u0026lt; \u0026#34;After List2.pop_back() : \u0026#34;; lst2.pop_back(); print(lst2); cout \u0026lt;\u0026lt; \u0026#34;After List1.reverse() : \u0026#34;; lst1.reverse(); print(lst1); cout \u0026lt;\u0026lt; \u0026#34;After List2.sort() : \u0026#34;; lst2.sort(); print(lst2); return 0; } 函式(functions) 1. list.front() Returns the value of the first element in the list. 2. list.back() Returns the value of the last element in the list. 3. list.push_front(E val) Adds a new element val at the beginning of the list. 4. list.push_back(E val) Adds a new element val at the end of the list. 5. list.pop_front() Removes the first element of the list, and reduces size of the list by 1. Won\u0026rsquo;t return value. 6. list.pop_back() Removes the last element of the list, and reduces size of the list by 1. Won\u0026rsquo;t return value. 7. list.begin() Returns a iterator pointing to the first element of the list. 6. list.end() Returns a iterator pointing to the theoretical last element which follows the last element. 7. list.rbegin() Returns a reverse iterator which points to the last element of the list. 8. list.rend() Returns a reverse iterator which points to the position before the beginning of the list. 9. list.cbegin() Returns a constant random access iterator which points to the beginning of the list. 10. list.cend() Returns a constant random access iterator which points to the end of the list. 11. list.crbegin() Returns a constant reverse random access iterator which points to the beginning of the list. 12. list.crend() Returns a constant reverse random access iterator which points to the end of the list. 13. list.empty() Returns whether the list is empty or not. 14. list.insert(pos, n, val) pos: iterator, to point out the position to insert n: the numbers of val to insert (optional, default = 1) val: the insert elements Inserts new elements in the list before the element at a specified position. 15. list.erase(pos) pos: iterator, to point out the position to erase Removes a single element from the list. 16. list.erase(first, last) first: iterator, to point out the begining of the range. last: iterator, to point out the end of the range. Removes a range of elements from the list. 17. list.assign() 18. list.remove() 19. list.remove_if() 20. list.reverse() 21. list.size() 22. list.resize() 23. list.sort() 24. list.max_size() 25. list.unique() 26. list.emplace_front() 27. list.emplace_back() 28. list.clear() 29. list.swap() 30. list.splice() 31. list.merge() 32. list.emplace() 你可能會想繼續閱讀… 回到容器(Containers) vector deque arrays forward_list ","permalink":"https://intervalrain.github.io/c++/stl_list/","summary":"\u003ch1 id=\"list\"\u003elist\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eLists 是序列式容器，但其記憶體的分配並非連續的。\u003c/li\u003e\n\u003cli\u003e跟 vector 相比，其遍歷的速度會較慢\\(O(n)\\，但一旦位置確定後，其插入(insert)或移除(delete)元素的速度很快\\(O(1)\\)。\u003c/li\u003e\n\u003cli\u003e一般來說，List 指的是雙向鏈結陣列(doubly linked list)。\u003c/li\u003e\n\u003cli\u003e而單向鏈結陣列則為 forward_list\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"函式庫\"\u003e函式庫\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e#include \u0026lt;list\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"宣告\"\u003e宣告\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003elist\u0026lt;data_type\u0026gt; list_name;\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"初始化\"\u003e初始化\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003elist\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e lst;          \u003cspan style=\"color:#75715e\"\u003e// 宣告\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"函式\"\u003e函式\u003c/h2\u003e\n\u003ch3 id=\"1-front\"\u003e1. front()\u003c/h3\u003e\n\u003ch3 id=\"2-back\"\u003e2. back()\u003c/h3\u003e\n\u003ch3 id=\"3-push_front\"\u003e3. push_front()\u003c/h3\u003e\n\u003ch3 id=\"4-push_back\"\u003e4. push_back()\u003c/h3\u003e\n\u003ch3 id=\"5-pop_front\"\u003e5. pop_front()\u003c/h3\u003e\n\u003ch3 id=\"6-pop_back\"\u003e6. pop_back()\u003c/h3\u003e\n\u003ch3 id=\"7-listbegin\"\u003e7. list::begin()\u003c/h3\u003e\n\u003ch3 id=\"8-listend\"\u003e8. list::end()\u003c/h3\u003e\n\u003ch3 id=\"9-listrbegin\"\u003e9. list::rbegin()\u003c/h3\u003e\n\u003ch3 id=\"10-listrend\"\u003e10. list::rend()\u003c/h3\u003e\n\u003ch3 id=\"11-listcbegin\"\u003e11. list::cbegin()\u003c/h3\u003e\n\u003ch3 id=\"12-listcend\"\u003e12. list::cend()\u003c/h3\u003e\n\u003ch3 id=\"13-listcrbegin\"\u003e13. list::crbegin()\u003c/h3\u003e\n\u003ch3 id=\"14-listcrend\"\u003e14. list::crend()\u003c/h3\u003e\n\u003ch3 id=\"15-empty\"\u003e15. empty()\u003c/h3\u003e\n\u003ch3 id=\"16-insert\"\u003e16. insert()\u003c/h3\u003e\n\u003ch3 id=\"17-erase\"\u003e17. erase()\u003c/h3\u003e\n\u003ch3 id=\"18-assign\"\u003e18. assign()\u003c/h3\u003e\n\u003ch3 id=\"19-remove\"\u003e19. remove()\u003c/h3\u003e\n\u003ch3 id=\"20-listremove_if\"\u003e20. list::remove_if()\u003c/h3\u003e\n\u003ch3 id=\"21-reverse\"\u003e21. reverse()\u003c/h3\u003e\n\u003ch3 id=\"22-size\"\u003e22. size()\u003c/h3\u003e\n\u003ch3 id=\"23-listresize\"\u003e23. list::resize()\u003c/h3\u003e\n\u003ch3 id=\"24-sort\"\u003e24. sort()\u003c/h3\u003e\n\u003ch3 id=\"25-listmax_size\"\u003e25. list::max_size()\u003c/h3\u003e\n\u003ch3 id=\"26-listunique\"\u003e26. list::unique()\u003c/h3\u003e\n\u003ch3 id=\"27-listemplace_front\"\u003e27. list::emplace_front()\u003c/h3\u003e\n\u003ch3 id=\"28-listemplace_back\"\u003e28. list::emplace_back()\u003c/h3\u003e\n\u003ch3 id=\"29-listclear\"\u003e29. list::clear()\u003c/h3\u003e\n\u003ch3 id=\"30-listoperator\"\u003e30. list::operator=\u003c/h3\u003e\n\u003ch3 id=\"31-listswap\"\u003e31. list::swap()\u003c/h3\u003e\n\u003ch3 id=\"32-listsplice\"\u003e32. list::splice()\u003c/h3\u003e\n\u003ch3 id=\"33-listmerge4\"\u003e33. list::merge()4\u003c/h3\u003e\n\u003ch3 id=\"34-listemplace\"\u003e34. list::emplace()\u003c/h3\u003e\n\u003ch2 id=\"示例\"\u003e示例\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Cpp\" data-lang=\"Cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;iterator\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;list\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eusing\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enamespace\u003c/span\u003e std;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eprint\u003c/span\u003e(list\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e lst){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    list\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;::\u003c/span\u003eiterator it;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (it \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e lst.begin(); it \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e lst.end(); \u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003eit){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003eit \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    list\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e lst1, lst2;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e; \u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003ei){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        lst1.push_back(i);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        lst2.push_front(i);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;List1 is : \u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    print(lst1);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;List2 is : \u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    print(lst2);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;List1.front() : \u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e lst1.front() \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;List2.back() : \u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e lst2.back() \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;After List1.pop_front() : \u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    lst1.pop_front();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    print(lst1);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;After List2.pop_back() : \u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    lst2.pop_back();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    print(lst2);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;After List1.reverse() : \u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    lst1.reverse();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    print(lst1);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;After List2.sort() : \u0026#34;\u003c/span\u003e; \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    lst2.sort();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    print(lst2);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"函式functions\"\u003e函式(functions)\u003c/h2\u003e\n\u003ch4 id=\"1-listfront\"\u003e1. list.front()\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the value of the first element in the list.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"2-listback\"\u003e2. list.back()\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns the value of the last element in the list.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"3-listpush_fronte-val\"\u003e3. list.push_front(E val)\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eAdds a new element \u003ccode\u003eval\u003c/code\u003e at the beginning of the list.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"4-listpush_backe-val\"\u003e4. list.push_back(E val)\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eAdds a new element \u003ccode\u003eval\u003c/code\u003e at the end of the list.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"5-listpop_front\"\u003e5. list.pop_front()\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eRemoves the first element of the list, and reduces size of the list by 1. Won\u0026rsquo;t return value.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"6-listpop_back\"\u003e6. list.pop_back()\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eRemoves the last element of the list, and reduces size of the list by 1. Won\u0026rsquo;t return value.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"7-listbegin-1\"\u003e7. list.begin()\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns a \u003cstrong\u003eiterator\u003c/strong\u003e pointing to the first element of the list.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"6-listend\"\u003e6. list.end()\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns a \u003cstrong\u003eiterator\u003c/strong\u003e pointing to the theoretical last element which follows the last element.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"7-listrbegin\"\u003e7. list.rbegin()\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns a \u003cstrong\u003ereverse iterator\u003c/strong\u003e which points to the last element of the list.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"8-listrend\"\u003e8. list.rend()\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns a \u003cstrong\u003ereverse iterator\u003c/strong\u003e which points to the position before the beginning of the list.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"9-listcbegin\"\u003e9. list.cbegin()\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns a \u003cstrong\u003econstant random access iterator\u003c/strong\u003e which points to the beginning of the list.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"10-listcend\"\u003e10. list.cend()\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns a \u003cstrong\u003econstant random access iterator\u003c/strong\u003e which points to the end of the list.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"11-listcrbegin\"\u003e11. list.crbegin()\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns a \u003cstrong\u003econstant reverse random access iterator\u003c/strong\u003e which points to the beginning of the list.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"12-listcrend\"\u003e12. list.crend()\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns a \u003cstrong\u003econstant reverse random access iterator\u003c/strong\u003e which points to the end of the list.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"13-listempty\"\u003e13. list.empty()\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003eReturns whether the list is empty or not.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"14-listinsertpos-n-val\"\u003e14. list.insert(pos, n, val)\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003epos\u003c/code\u003e: iterator, to point out the position to insert\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003en\u003c/code\u003e: the numbers of val to insert (optional, default = 1)\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eval\u003c/code\u003e: the insert elements\u003c/li\u003e\n\u003cli\u003eInserts new elements in the list before the element at a specified position.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"15-listerasepos\"\u003e15. list.erase(pos)\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003epos\u003c/code\u003e: iterator, to point out the position to erase\u003c/li\u003e\n\u003cli\u003eRemoves a single element from the list.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"16-listerasefirst-last\"\u003e16. list.erase(first, last)\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003efirst\u003c/code\u003e: iterator, to point out the begining of the range.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003elast\u003c/code\u003e: iterator, to point out the end of the range.\u003c/li\u003e\n\u003cli\u003eRemoves a range of elements from the list.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"17-listassign\"\u003e17. list.assign()\u003c/h4\u003e\n\u003ch4 id=\"18-listremove\"\u003e18. list.remove()\u003c/h4\u003e\n\u003ch4 id=\"19-listremove_if\"\u003e19. list.remove_if()\u003c/h4\u003e\n\u003ch4 id=\"20-listreverse\"\u003e20. list.reverse()\u003c/h4\u003e\n\u003ch4 id=\"21-listsize\"\u003e21. list.size()\u003c/h4\u003e\n\u003ch4 id=\"22-listresize\"\u003e22. list.resize()\u003c/h4\u003e\n\u003ch4 id=\"23-listsort\"\u003e23. list.sort()\u003c/h4\u003e\n\u003ch4 id=\"24-listmax_size\"\u003e24. list.max_size()\u003c/h4\u003e\n\u003ch4 id=\"25-listunique\"\u003e25. list.unique()\u003c/h4\u003e\n\u003ch4 id=\"26-listemplace_front\"\u003e26. list.emplace_front()\u003c/h4\u003e\n\u003ch4 id=\"27-listemplace_back\"\u003e27. list.emplace_back()\u003c/h4\u003e\n\u003ch4 id=\"28-listclear\"\u003e28. list.clear()\u003c/h4\u003e\n\u003ch4 id=\"29-listswap\"\u003e29. list.swap()\u003c/h4\u003e\n\u003ch4 id=\"30-listsplice\"\u003e30. list.splice()\u003c/h4\u003e\n\u003ch4 id=\"31-listmerge\"\u003e31. list.merge()\u003c/h4\u003e\n\u003ch4 id=\"32-listemplace\"\u003e32. list.emplace()\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e你可能會想繼續閱讀…\n\u003cul\u003e\n\u003cli\u003e回到\u003ca href=\"/c++/stl_container\"\u003e容器(Containers)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/c++/stl_vector\"\u003evector\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/c++/stl_deque\"\u003edeque\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/c++/stl_arrays\"\u003earrays\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/c++/stl_forward_list\"\u003eforward_list\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","title":"[C++] The C++ Standard Template Library(STL) - list, forward_list"},{"content":"vector Vectors 是一動態陣列，可以自動的調整其容器的容量。 Vector 的元素被儲存在連續的記憶體空間，所以可以使用迭代器(iterators)來進行存取。 在 vectors 中，元素是被插入在尾端的，插入尾端的時間取決於是否須進行容量的調整。 在 vectors 中，刪除尾端元素的時間複雜度則是固定的\\(O(1)\\)，因為不會發生容量調整。 在 vectors 的前端或中間插入元素或是清除元素，時間的複雜度都是\\(O(n)\\)。 迭代器(Iterators) 1. vec.begin() 回傳指向 vector 中第一個元素的迭代器 (vec[0]) 2. vec.end() 回傳指向 vector 中最後一個元素之後一個的迭代器 (vec[n+1]) 3. vec.rbegin() 回傳指向 vector 中最後一個元素的反向迭代器 (vec[n]) 4. vec.rend() 回傳指向 vector 中第一個元素之前一個的反向迭代器 (vec[-1]) 5. vec.cbegin() 回傳指向 vector 中第一個元素的常數迭代器 (vec[0]) 6. vec.cend() 回傳指向 vector 中最後一個元素之後一個的常數迭代器 (vec[n+1]) 7. vec.crbegin() 回傳指向 vector 中最後一個元素的反向常數迭代器 (vec[n]) 8. vec.crend() 回傳指向 vector 中第一個元素之前一個的反向常數迭代器 (vec[-1]) #include \u0026lt;bits/stdc++.h\u0026gt; using namespace std; int main(){ int arr[] = {1,1,2,3,5,8,13,21,34,55}; int n = sizeof(arr)/sizeof(arr[0]); vector\u0026lt;int\u0026gt; vec(arr, arr + n); // initialize with array cout \u0026lt;\u0026lt; \u0026#34;Output of begin() and end(): \u0026#34;; for (auto i = vec.begin(); i != vec.end(); ++i) cout \u0026lt;\u0026lt; *i \u0026lt;\u0026lt; \u0026#34; \u0026#34;; cout \u0026lt;\u0026lt; \u0026#34;\\nOutput of rbegin() and rend(): \u0026#34;; for (auto i = vec.rbegin(); i != vec.rend(); ++i) cout \u0026lt;\u0026lt; *i \u0026lt;\u0026lt; \u0026#34; \u0026#34;; cout \u0026lt;\u0026lt; \u0026#34;\\nOutput of cbegin() and cend(): \u0026#34;; for (auto i = vec.cbegin(); i != vec.cend(); ++i) cout \u0026lt;\u0026lt; *i \u0026lt;\u0026lt; \u0026#34; \u0026#34;; cout \u0026lt;\u0026lt; \u0026#34;\\nOutput of crbegin() and crend(): \u0026#34;; for (auto i = vec.crbegin(); i != vec.crend(); ++i) cout \u0026lt;\u0026lt; *i \u0026lt;\u0026lt; \u0026#34; \u0026#34;; return 0; } 結果：\nOutput of begin() and end(): 1 1 2 3 5 8 13 21 34 55 Output of rbegin() and rend(): 55 34 21 13 8 5 3 2 1 1 Output of cbegin() and cend(): 1 1 2 3 5 8 13 21 34 55 Output of crbegin() and crend(): 55 34 21 13 8 5 3 2 1 1 容量(capacity) 1. vec.size() 回傳 vector 的元素數量 2. vec.max_size() 回傳 vector 可以持有的最大元素數量 3. vec.capacity() 回傳 vector 當前被分配到的儲存空間，以元素數目表示 4. vec.empty() 回傳容器是否沒有元素的 5. vec.shrink_to_fit() 將容器的容量縮減到剛好符合它的元素數量，並丟棄所有超出容量的元素 6. vec.resize(int n) 將容器的容量重新調整到 n 個元素的大小 7. vec.reserve(int n) 將容器的容量重新調整到至少可以容納 n 個元素的大小。 #include \u0026lt;bits/stdc++.h\u0026gt; #include \u0026#34;print.cc\u0026#34; using namespace std; int main(){ vector\u0026lt;int\u0026gt; vec; for (int i = 0; i \u0026lt;= 12; ++i) vec.push_back(i); cout \u0026lt;\u0026lt; \u0026#34;Max_size: \u0026#34; \u0026lt;\u0026lt; vec.max_size() \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; cout \u0026lt;\u0026lt; \u0026#34;==================================\\n\u0026#34;; cout \u0026lt;\u0026lt; \u0026#34;Initial\u0026#34; \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; cout \u0026lt;\u0026lt; \u0026#34;Size: \u0026#34; \u0026lt;\u0026lt; vec.size() \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; cout \u0026lt;\u0026lt; \u0026#34;Capacity: \u0026#34; \u0026lt;\u0026lt; vec.capacity() \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; print(vec); cout \u0026lt;\u0026lt; \u0026#34;==================================\\n\u0026#34;; vec.resize(8); cout \u0026lt;\u0026lt; \u0026#34;After resize(8)\u0026#34; \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; cout \u0026lt;\u0026lt; \u0026#34;Size: \u0026#34; \u0026lt;\u0026lt; vec.size() \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; cout \u0026lt;\u0026lt; \u0026#34;Capacity: \u0026#34; \u0026lt;\u0026lt; vec.capacity() \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; print(vec); cout \u0026lt;\u0026lt; \u0026#34;==================================\\n\u0026#34;; vec.shrink_to_fit(); cout \u0026lt;\u0026lt; \u0026#34;After fitting\u0026#34; \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; cout \u0026lt;\u0026lt; \u0026#34;Size: \u0026#34; \u0026lt;\u0026lt; vec.size() \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; cout \u0026lt;\u0026lt; \u0026#34;Capacity: \u0026#34; \u0026lt;\u0026lt; vec.capacity() \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; print(vec); cout \u0026lt;\u0026lt; \u0026#34;==================================\\n\u0026#34;; vec.reserve(20); cout \u0026lt;\u0026lt; \u0026#34;After reserve(20)\u0026#34; \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; cout \u0026lt;\u0026lt; \u0026#34;Size: \u0026#34; \u0026lt;\u0026lt; vec.size() \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; cout \u0026lt;\u0026lt; \u0026#34;Capacity: \u0026#34; \u0026lt;\u0026lt; vec.capacity() \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; print(vec); cout \u0026lt;\u0026lt; \u0026#34;==================================\\n\u0026#34;; cout \u0026lt;\u0026lt; \u0026#34;If the vector is empty: \u0026#34;; vec.empty() ? (cout \u0026lt;\u0026lt; \u0026#34;Empty\u0026#34;) : (cout \u0026lt;\u0026lt; \u0026#34;Not empty\u0026#34;) \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; return 0; } 結果：\nMax_size: 4611686018427387903 ================================== Initial Size: 13 Capacity: 16 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12] ================================== After resize(8) Size: 8 Capacity: 16 [0, 1, 2, 3, 4, 5, 6, 7] ================================== After fitting Size: 8 Capacity: 8 [0, 1, 2, 3, 4, 5, 6, 7] ================================== After reserve(20) Size: 8 Capacity: 20 [0, 1, 2, 3, 4, 5, 6, 7] ================================== If the vector is empty: Not empty 存取元素(access elements) 1. vec[int n] 回傳 n 指標位置的值 2. at(int n) 回傳 n 指標位置的位 3. front() 回傳第一個元素的值 4. back() 回傳最後一個元素的值 5. data() 回傳一個直接的指標指向 vector 的記憶體位置 #include \u0026lt;bits/stdc++.h\u0026gt; #include \u0026#34;print.cc\u0026#34; using namespace std; int main(){ int arr[] = {0, 1, 2, 3, 4, 5, 6, 7}; int n = sizeof(arr)/sizeof(arr[0]); vector\u0026lt;int\u0026gt; vec(arr, arr + n); print(vec); cout \u0026lt;\u0026lt; \u0026#34;vec[2]: \u0026#34; \u0026lt;\u0026lt; vec[2] \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; cout \u0026lt;\u0026lt; \u0026#34;vec.at(4): \u0026#34; \u0026lt;\u0026lt; vec.at(4) \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; cout \u0026lt;\u0026lt; \u0026#34;vec.front(): \u0026#34; \u0026lt;\u0026lt; vec.front() \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; cout \u0026lt;\u0026lt; \u0026#34;vec.back(): \u0026#34; \u0026lt;\u0026lt; vec.back() \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; int* pos = vec.data(); for (int* i = pos; i != pos + vec.size(); i++){ cout \u0026lt;\u0026lt; *i \u0026lt;\u0026lt; \u0026#34; \u0026#34;; } return 0; } 結果\n[0, 1, 2, 3, 4, 5, 6, 7] vec[2]: 2 vec.at(4): 4 vec.front(): 0 vec.back(): 7 0 1 2 3 4 5 6 7 修改元素(modify elements) 1. assign(int n, E val) 指派新的值到 vector 中，並取代舊的值 2. push_back(E val) 將新的值加到 vector 的尾端 3. pop_back() 將 vector 的尾端的值取出並移除 4. insert(iterator it, E val) 在 vector 的指定位置加入新的值 5. erase(iterator it) 移除 vector 指定位置的移 6. v1.swap(v2) 交換兩個 vector 的值 7. vec.clear() 清除 vector 的所有值 #include \u0026lt;bits/stdc++.h\u0026gt; #include \u0026#34;print.cc\u0026#34; using namespace std; int main(){ vector\u0026lt;int\u0026gt; vec; cout \u0026lt;\u0026lt; \u0026#34;After assign(5, 10): \\n\u0026#34;; vec.assign(5, 10); print(vec); cout \u0026lt;\u0026lt; \u0026#34;After push_back(15): \\n\u0026#34;; vec.push_back(15); print(vec); int n = vec.size(); cout \u0026lt;\u0026lt; \u0026#34;The last element is: \u0026#34; \u0026lt;\u0026lt; vec.back() \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; cout \u0026lt;\u0026lt; \u0026#34;After pop_back(): \\n\u0026#34;; vec.pop_back(); print(vec); cout \u0026lt;\u0026lt; \u0026#34;After insert(vec.begin(), 5): \\n\u0026#34;; vec.insert(vec.begin(), 5); print(vec); cout \u0026lt;\u0026lt; \u0026#34;After erase(vec.begin()): \\n\u0026#34;; vec.erase(vec.begin()); print(vec); vec.clear(); cout \u0026lt;\u0026lt; \u0026#34;Vector size after clear(): \u0026#34; \u0026lt;\u0026lt; vec.size() \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; vector\u0026lt;int\u0026gt; v1, v2; v1.push_back(1); v1.push_back(2); v2.push_back(3); v2.push_back(4); cout \u0026lt;\u0026lt; \u0026#34;Vector 1: \u0026#34;; print(v1); cout \u0026lt;\u0026lt; \u0026#34;Vector 2: \u0026#34;; print(v2); // Swaps v1 and v2 v1.swap(v2); cout \u0026lt;\u0026lt; \u0026#34;After Swap \\nVector 1: \u0026#34;; print(v1); cout \u0026lt;\u0026lt; \u0026#34;Vector 2: \u0026#34;; print(v2); return 0; } 結果\nAfter assign(5, 10): [10, 10, 10, 10, 10] After push_back(15): [10, 10, 10, 10, 10, 15] The last element is: 15 After pop_back(): [10, 10, 10, 10, 10] After insert(vec.begin(), 5): [5, 10, 10, 10, 10, 10] After erase(vec.begin()): [10, 10, 10, 10, 10] Vector size after clear(): 0 Vector 1: [1, 2] Vector 2: [3, 4] After Swap Vector 1: [3, 4] Vector 2: [1, 2] 你可能會想繼續閱讀… 回到容器(Containers) list deque arrays forward_list ","permalink":"https://intervalrain.github.io/c++/stl_vector/","summary":"\u003ch1 id=\"vector\"\u003evector\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eVectors 是一動態陣列，可以自動的調整其容器的容量。\u003c/li\u003e\n\u003cli\u003eVector 的元素被儲存在連續的記憶體空間，所以可以使用迭代器(iterators)來進行存取。\u003c/li\u003e\n\u003cli\u003e在 vectors 中，元素是被插入在尾端的，插入尾端的時間取決於是否須進行容量的調整。\u003c/li\u003e\n\u003cli\u003e在 vectors 中，刪除尾端元素的時間複雜度則是固定的\\(O(1)\\)，因為不會發生容量調整。\u003c/li\u003e\n\u003cli\u003e在 vectors 的前端或中間插入元素或是清除元素，時間的複雜度都是\\(O(n)\\)。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"迭代器iterators\"\u003e迭代器(Iterators)\u003c/h2\u003e\n\u003ch4 id=\"1-vecbegin\"\u003e1. vec.begin()\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e回傳指向 vector 中第一個元素的迭代器 (vec[0])\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"2-vecend\"\u003e2. vec.end()\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e回傳指向 vector 中最後一個元素之後一個的迭代器 (vec[n+1])\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"3-vecrbegin\"\u003e3. vec.rbegin()\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e回傳指向 vector 中最後一個元素的反向迭代器 (vec[n])\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"4-vecrend\"\u003e4. vec.rend()\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e回傳指向 vector 中第一個元素之前一個的反向迭代器 (vec[-1])\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"5-veccbegin\"\u003e5. vec.cbegin()\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e回傳指向 vector 中第一個元素的常數迭代器 (vec[0])\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"6-veccend\"\u003e6. vec.cend()\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e回傳指向 vector 中最後一個元素之後一個的常數迭代器 (vec[n+1])\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"7-veccrbegin\"\u003e7. vec.crbegin()\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e回傳指向 vector 中最後一個元素的反向常數迭代器 (vec[n])\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"8-veccrend\"\u003e8. vec.crend()\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e回傳指向 vector 中第一個元素之前一個的反向常數迭代器 (vec[-1])\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Cpp\" data-lang=\"Cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;bits/stdc++.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eusing\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enamespace\u003c/span\u003e std;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e arr[] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e8\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e13\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e21\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e34\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e55\u003c/span\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003esizeof\u003c/span\u003e(arr)\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003esizeof\u003c/span\u003e(arr[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e vec(arr, arr \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e n);  \u003cspan style=\"color:#75715e\"\u003e// initialize with array\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Output of begin() and end(): \u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eauto\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e vec.begin(); i \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e vec.end(); \u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003ei) cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003ei \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003eOutput of rbegin() and rend(): \u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eauto\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e vec.rbegin(); i \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e vec.rend(); \u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003ei) cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003ei \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003eOutput of cbegin() and cend(): \u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eauto\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e vec.cbegin(); i \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e vec.cend(); \u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003ei) cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003ei \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003eOutput of crbegin() and crend(): \u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eauto\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e vec.crbegin(); i \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e vec.crend(); \u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003ei) cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003ei \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e結果：\u003c/p\u003e","title":"[C++] The C++ Standard Template Library(STL) - vector"},{"content":"容器(Containers) C++ container 基本上分為四大類： Sequence containers Container adaptors Associative containers Unordered associative containers 還有兩個特殊 containers: valarray, bitset \\(\\begin{array}{|l|l|l|l|l|l|}\\hline \\text{Name}\u0026amp;\\text{Iterators}\u0026amp;\\text{Capacity}\u0026amp;\\text{Access}\u0026amp;\\text{Modifiers}\u0026amp;\\text{Others} \\\\\\hline \\text{array}\u0026amp;\\text{begin}\u0026amp;\\text{size}\u0026amp;\\text{[]}\u0026amp;\\text{swap} \\\\\u0026amp;\\text{end}\u0026amp;\\text{empty}\u0026amp;\\text{at} \\\\\u0026amp;\u0026amp;\u0026amp;\\text{front} \\\\\u0026amp;\u0026amp;\u0026amp;\\text{back} \\\\\\hline \\text{vector}\u0026amp;\\text{begin}\u0026amp;\\text{size}\u0026amp;\\text{[]}\u0026amp;\\text{push\\_back}\u0026amp;\\text{} \\\\\u0026amp;\\text{end}\u0026amp;\\text{empty}\u0026amp;\\text{at}\u0026amp;\\text{pop\\_back} \\\\\u0026amp;\u0026amp;\\text{capacity}\u0026amp;\\text{front}\u0026amp;\\text{insert} \\\\\u0026amp;\u0026amp;\u0026amp;\\text{back}\u0026amp;\\text{erase} \\\\\u0026amp;\u0026amp;\u0026amp;\u0026amp;\\text{swap} \\\\\u0026amp;\u0026amp;\u0026amp;\u0026amp;\\text{clear} \\\\\\hline \\text{deque}\u0026amp;\\text{begin}\u0026amp;\\text{size}\u0026amp;\\text{[]}\u0026amp;\\text{push\\_back}\u0026amp;\\text{} \\\\\u0026amp;\\text{end}\u0026amp;\\text{empty}\u0026amp;\\text{at}\u0026amp;\\text{pop\\_back} \\\\\u0026amp;\u0026amp;\u0026amp;\\text{front}\u0026amp;\\text{insert} \\\\\u0026amp;\u0026amp;\u0026amp;\\text{back}\u0026amp;\\text{erase} \\\\\u0026amp;\u0026amp;\u0026amp;\u0026amp;\\text{swap} \\\\\u0026amp;\u0026amp;\u0026amp;\u0026amp;\\text{clear} \\\\\\hline \\text{list}\u0026amp;\\text{begin}\u0026amp;\\text{size}\u0026amp;\\text{front}\u0026amp;\\text{push\\_back}\u0026amp;\\text{sort} \\\\\u0026amp;\\text{end}\u0026amp;\\text{empty}\u0026amp;\\text{back}\u0026amp;\\text{pop\\_back}\u0026amp;\\text{reverse} \\\\\u0026amp;\u0026amp;\u0026amp;\u0026amp;\\text{insert} \\\\\u0026amp;\u0026amp;\u0026amp;\u0026amp;\\text{erase} \\\\\u0026amp;\u0026amp;\u0026amp;\u0026amp;\\text{swap} \\\\\u0026amp;\u0026amp;\u0026amp;\u0026amp;\\text{clear} \\\\\\hline \\text{forward\\_list}\u0026amp;\\text{begin}\u0026amp;\\text{empty}\u0026amp;\\text{front}\u0026amp;\\text{push\\_front}\u0026amp;\\text{sort} \\\\\u0026amp;\\text{end}\u0026amp;\u0026amp;\u0026amp;\\text{pop\\_back}\u0026amp;\\text{reverse} \\\\\u0026amp;\u0026amp;\u0026amp;\u0026amp;\\text{insert\\_after} \\\\\u0026amp;\u0026amp;\u0026amp;\u0026amp;\\text{erase\\_after} \\\\\u0026amp;\u0026amp;\u0026amp;\u0026amp;\\text{swap} \\\\\u0026amp;\u0026amp;\u0026amp;\u0026amp;\\text{clear} \\\\\\hline \\end{array} \\)\n基礎容器 pair 序列式容器(Sequence Containers) 特點是不會對儲存的元素進行排序，元素排列的順序取決於儲存的順序。 vector list, forward_list deque arrays 容器適配器(Container Adaptors) 用於封裝序列容器的類模板，在一般的序列容器的基礎上提供一些不同的功能，通過實現適配器的介面來提供不同的功能。 queue priority_queue stack 關聯性容器(Associative Containers) 又名 Map、Dictionary，是一種抽象的資料結構，包含著類似於(key, value)的有序對(entry)。 一個關聯陣列中的有序對(entry)可以重複(如multimap)，也可以不重複(map)。 利用雜湊表(Hash Table)或搜尋樹(search tree)實現，有些情況下，有可以使用直接定址的陣列、二元搜尋樹或其他專門的結構。 set multiset map multimap 無序關聯容器(Unordered Associative Containers(C++11)) 通過雜湊表(Hash Table)實現的資料結構。 無序是指元素的名字(或者鍵值)的儲存是無序的；這與用平衡二元樹實現的有序的關聯性容器是相對概念。 unordered_set unordered_multiset unordered_map unordered_mutlimap 你可能會想繼續閱讀… 演算法(Algorithms) 函式(Functions) 迭代器(Iterators) Utility Library ","permalink":"https://intervalrain.github.io/c++/stl_container/","summary":"\u003ch1 id=\"容器containers\"\u003e容器(Containers)\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eC++ container 基本上分為四大類：\n\u003cul\u003e\n\u003cli\u003eSequence containers\u003c/li\u003e\n\u003cli\u003eContainer adaptors\u003c/li\u003e\n\u003cli\u003eAssociative containers\u003c/li\u003e\n\u003cli\u003eUnordered associative containers\u003c/li\u003e\n\u003cli\u003e還有兩個特殊 containers: valarray, bitset\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\\(\\begin{array}{|l|l|l|l|l|l|}\\hline\n\\text{Name}\u0026amp;\\text{Iterators}\u0026amp;\\text{Capacity}\u0026amp;\\text{Access}\u0026amp;\\text{Modifiers}\u0026amp;\\text{Others}\n\\\\\\hline\n\\text{array}\u0026amp;\\text{begin}\u0026amp;\\text{size}\u0026amp;\\text{[]}\u0026amp;\\text{swap}\n\\\\\u0026amp;\\text{end}\u0026amp;\\text{empty}\u0026amp;\\text{at}\n\\\\\u0026amp;\u0026amp;\u0026amp;\\text{front}\n\\\\\u0026amp;\u0026amp;\u0026amp;\\text{back}\n\\\\\\hline\n\\text{vector}\u0026amp;\\text{begin}\u0026amp;\\text{size}\u0026amp;\\text{[]}\u0026amp;\\text{push\\_back}\u0026amp;\\text{}\n\\\\\u0026amp;\\text{end}\u0026amp;\\text{empty}\u0026amp;\\text{at}\u0026amp;\\text{pop\\_back}\n\\\\\u0026amp;\u0026amp;\\text{capacity}\u0026amp;\\text{front}\u0026amp;\\text{insert}\n\\\\\u0026amp;\u0026amp;\u0026amp;\\text{back}\u0026amp;\\text{erase}\n\\\\\u0026amp;\u0026amp;\u0026amp;\u0026amp;\\text{swap}\n\\\\\u0026amp;\u0026amp;\u0026amp;\u0026amp;\\text{clear}\n\\\\\\hline\n\\text{deque}\u0026amp;\\text{begin}\u0026amp;\\text{size}\u0026amp;\\text{[]}\u0026amp;\\text{push\\_back}\u0026amp;\\text{}\n\\\\\u0026amp;\\text{end}\u0026amp;\\text{empty}\u0026amp;\\text{at}\u0026amp;\\text{pop\\_back}\n\\\\\u0026amp;\u0026amp;\u0026amp;\\text{front}\u0026amp;\\text{insert}\n\\\\\u0026amp;\u0026amp;\u0026amp;\\text{back}\u0026amp;\\text{erase}\n\\\\\u0026amp;\u0026amp;\u0026amp;\u0026amp;\\text{swap}\n\\\\\u0026amp;\u0026amp;\u0026amp;\u0026amp;\\text{clear}\n\\\\\\hline\n\\text{list}\u0026amp;\\text{begin}\u0026amp;\\text{size}\u0026amp;\\text{front}\u0026amp;\\text{push\\_back}\u0026amp;\\text{sort}\n\\\\\u0026amp;\\text{end}\u0026amp;\\text{empty}\u0026amp;\\text{back}\u0026amp;\\text{pop\\_back}\u0026amp;\\text{reverse}\n\\\\\u0026amp;\u0026amp;\u0026amp;\u0026amp;\\text{insert}\n\\\\\u0026amp;\u0026amp;\u0026amp;\u0026amp;\\text{erase}\n\\\\\u0026amp;\u0026amp;\u0026amp;\u0026amp;\\text{swap}\n\\\\\u0026amp;\u0026amp;\u0026amp;\u0026amp;\\text{clear}\n\\\\\\hline\n\\text{forward\\_list}\u0026amp;\\text{begin}\u0026amp;\\text{empty}\u0026amp;\\text{front}\u0026amp;\\text{push\\_front}\u0026amp;\\text{sort}\n\\\\\u0026amp;\\text{end}\u0026amp;\u0026amp;\u0026amp;\\text{pop\\_back}\u0026amp;\\text{reverse}\n\\\\\u0026amp;\u0026amp;\u0026amp;\u0026amp;\\text{insert\\_after}\n\\\\\u0026amp;\u0026amp;\u0026amp;\u0026amp;\\text{erase\\_after}\n\\\\\u0026amp;\u0026amp;\u0026amp;\u0026amp;\\text{swap}\n\\\\\u0026amp;\u0026amp;\u0026amp;\u0026amp;\\text{clear}\n\\\\\\hline\n\\end{array}\n\\)\u003c/p\u003e\n\u003ch2 id=\"基礎容器\"\u003e基礎容器\u003c/h2\u003e\n\u003ch3 id=\"paircstl_pair\"\u003e\u003ca href=\"/c++/stl_pair\"\u003epair\u003c/a\u003e\u003c/h3\u003e\n\u003ch2 id=\"序列式容器sequence-containers\"\u003e序列式容器(Sequence Containers)\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e特點是不會對儲存的元素進行排序，元素排列的順序取決於儲存的順序。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"vectorcstl_vector\"\u003e\u003ca href=\"/c++/stl_vector\"\u003evector\u003c/a\u003e\u003c/h3\u003e\n\u003ch3 id=\"list-forward_listcstl_list\"\u003e\u003ca href=\"/c++/stl_list\"\u003elist, forward_list\u003c/a\u003e\u003c/h3\u003e\n\u003ch3 id=\"dequecstl_deque\"\u003e\u003ca href=\"/c++/stl_deque\"\u003edeque\u003c/a\u003e\u003c/h3\u003e\n\u003ch3 id=\"arrayscstl_arrays\"\u003e\u003ca href=\"/c++/stl_arrays\"\u003earrays\u003c/a\u003e\u003c/h3\u003e\n\u003ch2 id=\"容器適配器container-adaptors\"\u003e容器適配器(Container Adaptors)\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e用於封裝序列容器的類模板，在一般的序列容器的基礎上提供一些不同的功能，通過實現適配器的介面來提供不同的功能。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"queuecstl_queue\"\u003e\u003ca href=\"/c++/stl_queue\"\u003equeue\u003c/a\u003e\u003c/h3\u003e\n\u003ch3 id=\"priority_queuecstl_priority_queue\"\u003e\u003ca href=\"/c++/stl_priority_queue\"\u003epriority_queue\u003c/a\u003e\u003c/h3\u003e\n\u003ch3 id=\"stackcstl_stack\"\u003e\u003ca href=\"/c++/stl_stack\"\u003estack\u003c/a\u003e\u003c/h3\u003e\n\u003ch2 id=\"關聯性容器associative-containers\"\u003e關聯性容器(Associative Containers)\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e又名 Map、Dictionary，是一種抽象的資料結構，包含著類似於(key, value)的有序對(entry)。\u003c/li\u003e\n\u003cli\u003e一個關聯陣列中的有序對(entry)可以重複(如multimap)，也可以不重複(map)。\u003c/li\u003e\n\u003cli\u003e利用雜湊表(Hash Table)或搜尋樹(search tree)實現，有些情況下，有可以使用直接定址的陣列、二元搜尋樹或其他專門的結構。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"setcstl_set\"\u003e\u003ca href=\"/c++/stl_set\"\u003eset\u003c/a\u003e\u003c/h3\u003e\n\u003ch3 id=\"multisetcstl_multiset\"\u003e\u003ca href=\"/c++/stl_multiset\"\u003emultiset\u003c/a\u003e\u003c/h3\u003e\n\u003ch3 id=\"mapcstl_map\"\u003e\u003ca href=\"/c++/stl_map\"\u003emap\u003c/a\u003e\u003c/h3\u003e\n\u003ch3 id=\"multimapcstl_multimap\"\u003e\u003ca href=\"/c++/stl_multimap\"\u003emultimap\u003c/a\u003e\u003c/h3\u003e\n\u003ch2 id=\"無序關聯容器unordered-associative-containersc11\"\u003e無序關聯容器(Unordered Associative Containers(C++11))\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e通過雜湊表(Hash Table)實現的資料結構。\u003c/li\u003e\n\u003cli\u003e無序是指元素的名字(或者鍵值)的儲存是無序的；這與用平衡二元樹實現的有序的關聯性容器是相對概念。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"unordered_setcstl_unordered_set\"\u003e\u003ca href=\"/c++/stl_unordered_set\"\u003eunordered_set\u003c/a\u003e\u003c/h3\u003e\n\u003ch3 id=\"unordered_multisetcstl_unordered_multiset\"\u003e\u003ca href=\"/c++/stl_unordered_multiset\"\u003eunordered_multiset\u003c/a\u003e\u003c/h3\u003e\n\u003ch3 id=\"unordered_mapcstl_unordered_map\"\u003e\u003ca href=\"/c++/stl_unordered_map\"\u003eunordered_map\u003c/a\u003e\u003c/h3\u003e\n\u003ch3 id=\"unordered_mutlimapcstl_unordered_multimap\"\u003e\u003ca href=\"/c++/stl_unordered_multimap\"\u003eunordered_mutlimap\u003c/a\u003e\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e你可能會想繼續閱讀…\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"/c++/stl_algo\"\u003e演算法(Algorithms)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/c++/stl_function\"\u003e函式(Functions)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/c++/stl_iterator\"\u003e迭代器(Iterators)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/c++/stl_util\"\u003eUtility Library\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","title":"[C++] The C++ Standard Template Library(STL) - Container"},{"content":"前言 在做 WAT 量測後的資料處理時，IDAS 老舊的 VBA macro 執行時間實在過於久，且佔用大量的記憶體，於是就下了一個命題，想減少產生報表的時間。 想法 通常量測多片 wafer 的狀況下，不同 wafer 的排列順序是一致的，如果可以加入 Java 中 HashMap 的資料結構來處理 VBA 中 Lookup()，便可大幅減少 summary table 時，對 rawdata 做搜尋的時間。 令時間複雜度從\\(O(n)\\)進步到\\(O(1)\\)。 做法 產生 Dictionary 物件 由於 VBA 預設並沒有 Dictionary 的物，所以需要用 CreateObject(\u0026quot;Scritping.Dictionary\u0026quot;) 的程式碼，引入 Dictionary。 其 Dictionary 物件的 method 可參考 Microsoft 的文件：點此 在此先預先定義一個 function setDict() 可以對初始化 Dictionary。 接著宣告兩個 Dictionary 物件來存取 spec 和 data 工作頁的列數(\brow)。 Dim SpecDict As Object \u0026#39; Claim a dict to store spec rows in worksheet SPEC. Dim DataDict As Object \u0026#39; Claim a dict to store rawdata rows in worksheet Data. Set SpecDict = CreateObject(\u0026#34;Scripting.Dictionary\u0026#34;) Set DataDict = CreateObject(\u0026#34;Scripting.Dictionary\u0026#34;) Call setDict(\u0026#34;SPEC\u0026#34;, 3, SpecDict, Worksheets(\u0026#34;SPEC\u0026#34;).UsedRange, True) Call setDict(\u0026#34;Data\u0026#34;, 2, DataDict, Range(Worksheets(\u0026#34;Data\u0026#34;).Names(1)), True) 實作 setDict() 函數 利用 HashTable 的概念對不同的 parameter 列數先做一次記錄，因為只需一次迴圈，故時間複雜度是 \\(O(n)\\)，其中 n = SPEC 的列數 或是 量測的 parameter 數。 在此設計了五個 arguments，方便在未來如果還有使用到 Dictionary 的需求時，可以方便使用。 sheetName 字串，需要作儲存的工作頁(worksheet)。 Target 要儲存的列數(row)或欄數(column)。 Dict 要存放的 Dictionary 物件。 mRange 要做儲存的資料範圍，若表頭並是在第一列或第一欄時可指定。 若表頭是第一列或第一欄時，可直接代入 Worksheets(\u0026quot;工作頁名稱\u0026quot;).UsedRange byRows 看要儲存的對象是列(row)或是欄(column)，預設是以列來搜尋。 Public Function setDict(ByVal sheetName As String, ByVal Target As Integer, ByRef Dict As Object, ByVal mRange As Range, Optional ByVal byRows As Boolean = True) Dim nowSheet As Worksheet If Not IsExistSheet(sheetName) Then Exit Function Set nowSheet = Worksheets(sheetName) Dim i As Long Dim n As Long On Error Resume Next If byRows = True Then For i = 1 To mRange.Rows.Count If Not Trim(mRange.Cells(i, Target).Value) = \u0026#34;\u0026#34; Then Dict.Add mRange.Cells(i, Target).Value, i End If Next i Else For i = 1 To mRange.Columns.Count If Not Trim(mRange.Cells(Target, i).Value) = \u0026#34;\u0026#34; Then Dict.Add mRange.Cells(Target, i).Value, i End If Next i End If End Function 對 getSPECByPara() 做重製 將 parameter or SPEC 做 hashing 的處理後，可以用 Dictionary 物件來查值，時間複雜度為 \\(O(1)\\)。 在此不對原本的設計做更動，只做單純的 implement。 nowPara 要搜尋的 parameter 字串。 n 要搜尋的欄數(column)，specColumn是原作者預設的 enum，存放工作頁 SPEC 的每一欄的表頭。 \bsheetName 要搜尋的工作頁，預設為 SPECTEMP，是按完 initial，從 SPEC 工作頁複製出來的隱藏工作頁。 Public Function getSPECByPara(ByVal nowPara As String, ByVal n As specColumn, Optional sheetName As String = \u0026#34;SPECTEMP\u0026#34;) Dim reValue Dim nowRange As Range Dim TargetSheet As Worksheet If Left(nowPara, 1) = \u0026#34;\u0026#39;\u0026#34; Then nowPara = Mid(nowPara, 2) Set TargetSheet = Worksheets(sheetName) Set nowRange = TargetSheet.UsedRange On Error Resume Next reValue = TargetSheet.Cells(SpecDict(nowPara), n) If Not IsEmpty(reValue) Then If Trim(reValue) = \u0026#34;\u0026#34; Then Set reValue = Nothing End If getSPECByPara = reValue End Function 對 getRangeByPara() 做重製 將 parameter or SPEC 做 hashing 的處理後，可以用 Dictionary 物件來查值，時間複雜度為 \\(O(1)\\)。 Public Function getRangeByPara(nowWafer As String, nowPara As String, Optional dieNum As Integer = 0) Dim nowRow As Long Dim nowRange As Range Set nowRange = Worksheets(\u0026#34;Data\u0026#34;).Range(\u0026#34;wafer_\u0026#34; \u0026amp; nowWafer) Set getRangeByPara = Nothing If DataDict.Exists(nowPara) Then nowRow = DataDict(nowPara) Set getRangeByPara = nowRange.Range(N2L(4) \u0026amp; CStr(nowRow) \u0026amp; \u0026#34;:\u0026#34; \u0026amp; N2L(dieNum + 3) \u0026amp; CStr(nowRow)) End If End Function 解析 優點：較快的執行速度。經測試可以將 2~3 分鐘的執行時間縮短到 30 秒內。 缺點：若修改 rawdata，會發生錯誤。但若針對每一片 wafer 都做 setDict()的話，會浪費太多 memory。 ","permalink":"https://intervalrain.github.io/vba/idas+_record/","summary":"\u003ch1 id=\"前言\"\u003e前言\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e在做 WAT 量測後的資料處理時，IDAS 老舊的 VBA macro 執行時間實在過於久，且佔用大量的記憶體，於是就下了一個命題，想減少產生報表的時間。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"想法\"\u003e想法\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e通常量測多片 wafer 的狀況下，不同 wafer 的排列順序是一致的，如果可以加入 Java 中 \u003ccode\u003eHashMap\u003c/code\u003e 的資料結構來處理 VBA 中 \u003ccode\u003eLookup()\u003c/code\u003e，便可大幅減少 summary table 時，對 rawdata 做搜尋的時間。\u003c/li\u003e\n\u003cli\u003e令時間複雜度從\\(O(n)\\)進步到\\(O(1)\\)。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"做法\"\u003e做法\u003c/h1\u003e\n\u003ch2 id=\"產生-dictionary-物件\"\u003e產生 Dictionary 物件\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e由於 VBA 預設並沒有 Dictionary 的物，所以需要用 \u003ccode\u003eCreateObject(\u0026quot;Scritping.Dictionary\u0026quot;)\u003c/code\u003e 的程式碼，引入 Dictionary。\u003c/li\u003e\n\u003cli\u003e其 Dictionary 物件的 method 可參考 Microsoft 的文件：\u003ca href=\"https://docs.microsoft.com/zh-tw/office/vba/language/reference/user-interface-help/dictionary-object\"\u003e點此\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e在此先預先定義一個 function \u003ccode\u003esetDict()\u003c/code\u003e 可以對初始化 Dictionary。\u003c/li\u003e\n\u003cli\u003e接著宣告兩個 Dictionary 物件來存取 spec 和 data 工作頁的列數(\brow)。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-VB.NET\" data-lang=\"VB.NET\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eDim\u003c/span\u003e SpecDict \u003cspan style=\"color:#f92672\"\u003eAs\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eObject\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026#39; Claim a dict to store spec rows in worksheet SPEC.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eDim\u003c/span\u003e DataDict \u003cspan style=\"color:#f92672\"\u003eAs\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eObject\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026#39; Claim a dict to store rawdata rows in worksheet Data.\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eSet\u003c/span\u003e SpecDict \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e CreateObject(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Scripting.Dictionary\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eSet\u003c/span\u003e DataDict \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e CreateObject(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Scripting.Dictionary\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eCall\u003c/span\u003e setDict(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;SPEC\u0026#34;\u003c/span\u003e, 3, SpecDict, Worksheets(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;SPEC\u0026#34;\u003c/span\u003e).UsedRange, \u003cspan style=\"color:#66d9ef\"\u003eTrue\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eCall\u003c/span\u003e setDict(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Data\u0026#34;\u003c/span\u003e, 2, DataDict, Range(Worksheets(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Data\u0026#34;\u003c/span\u003e).Names(1)), \u003cspan style=\"color:#66d9ef\"\u003eTrue\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"實作-setdict-函數\"\u003e實作 setDict() 函數\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e利用 HashTable 的概念對不同的 parameter 列數先做一次記錄，因為只需一次迴圈，故時間複雜度是 \\(O(n)\\)，其中 n = SPEC 的列數 或是 量測的 parameter 數。\u003c/li\u003e\n\u003cli\u003e在此設計了五個 arguments，方便在未來如果還有使用到 Dictionary 的需求時，可以方便使用。\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003esheetName\u003c/code\u003e 字串，需要作儲存的工作頁(worksheet)。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eTarget\u003c/code\u003e 要儲存的列數(row)或欄數(column)。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eDict\u003c/code\u003e 要存放的 Dictionary 物件。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003emRange\u003c/code\u003e 要做儲存的資料範圍，若表頭並是在第一列或第一欄時可指定。\n\u003cul\u003e\n\u003cli\u003e若表頭是第一列或第一欄時，可直接代入 \u003ccode\u003eWorksheets(\u0026quot;工作頁名稱\u0026quot;).UsedRange\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebyRows\u003c/code\u003e 看要儲存的對象是列(row)或是欄(column)，預設是以列來搜尋。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-VB.NET\" data-lang=\"VB.NET\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003ePublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eFunction\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esetDict\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eByVal\u003c/span\u003e sheetName \u003cspan style=\"color:#f92672\"\u003eAs\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eString\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003eByVal\u003c/span\u003e Target \u003cspan style=\"color:#f92672\"\u003eAs\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eInteger\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003eByRef\u003c/span\u003e Dict \u003cspan style=\"color:#f92672\"\u003eAs\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eObject\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003eByVal\u003c/span\u003e mRange \u003cspan style=\"color:#f92672\"\u003eAs\u003c/span\u003e Range, \u003cspan style=\"color:#66d9ef\"\u003eOptional\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eByVal\u003c/span\u003e byRows \u003cspan style=\"color:#f92672\"\u003eAs\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eBoolean\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eTrue\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eDim\u003c/span\u003e nowSheet \u003cspan style=\"color:#f92672\"\u003eAs\u003c/span\u003e Worksheet\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eIf\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eNot\u003c/span\u003e IsExistSheet(sheetName) \u003cspan style=\"color:#66d9ef\"\u003eThen\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eExit\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eFunction\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eSet\u003c/span\u003e nowSheet \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Worksheets(sheetName)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eDim\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003eAs\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eLong\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eDim\u003c/span\u003e n \u003cspan style=\"color:#f92672\"\u003eAs\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eLong\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eOn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eError\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eResume\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eNext\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eIf\u003c/span\u003e byRows \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eTrue\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eThen\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eFor\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 1 \u003cspan style=\"color:#66d9ef\"\u003eTo\u003c/span\u003e mRange.Rows.Count\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eIf\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eNot\u003c/span\u003e Trim(mRange.Cells(i, Target).Value) \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eThen\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                Dict.Add mRange.Cells(i, Target).Value, i\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eEnd\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eIf\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eNext\u003c/span\u003e i\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eElse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eFor\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 1 \u003cspan style=\"color:#66d9ef\"\u003eTo\u003c/span\u003e mRange.Columns.Count\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eIf\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eNot\u003c/span\u003e Trim(mRange.Cells(Target, i).Value) \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eThen\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                Dict.Add mRange.Cells(Target, i).Value, i\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003eEnd\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eIf\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eNext\u003c/span\u003e i\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eEnd\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eIf\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eEnd\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eFunction\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"對-getspecbypara-做重製\"\u003e對 getSPECByPara() 做重製\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e將 parameter or SPEC 做 hashing 的處理後，可以用 Dictionary 物件來查值，時間複雜度為 \\(O(1)\\)。\u003c/li\u003e\n\u003cli\u003e在此不對原本的設計做更動，只做單純的 implement。\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003enowPara\u003c/code\u003e 要搜尋的 parameter 字串。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003en\u003c/code\u003e 要搜尋的欄數(column)，specColumn是原作者預設的 enum，存放工作頁 SPEC 的每一欄的表頭。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e\bsheetName\u003c/code\u003e 要搜尋的工作頁，預設為 SPECTEMP，是按完 initial，從 SPEC 工作頁複製出來的隱藏工作頁。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-VB.NET\" data-lang=\"VB.NET\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003ePublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eFunction\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egetSPECByPara\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eByVal\u003c/span\u003e nowPara \u003cspan style=\"color:#f92672\"\u003eAs\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eString\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003eByVal\u003c/span\u003e n \u003cspan style=\"color:#f92672\"\u003eAs\u003c/span\u003e specColumn, \u003cspan style=\"color:#66d9ef\"\u003eOptional\u003c/span\u003e sheetName \u003cspan style=\"color:#f92672\"\u003eAs\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eString\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;SPECTEMP\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eDim\u003c/span\u003e reValue\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eDim\u003c/span\u003e nowRange \u003cspan style=\"color:#f92672\"\u003eAs\u003c/span\u003e Range\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eDim\u003c/span\u003e TargetSheet \u003cspan style=\"color:#f92672\"\u003eAs\u003c/span\u003e Worksheet\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eIf\u003c/span\u003e Left(nowPara, 1) \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#39;\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eThen\u003c/span\u003e nowPara \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Mid(nowPara, 2)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eSet\u003c/span\u003e TargetSheet \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Worksheets(sheetName)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eSet\u003c/span\u003e nowRange \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e TargetSheet.UsedRange\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eOn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eError\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eResume\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eNext\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    reValue \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e TargetSheet.Cells(SpecDict(nowPara), n)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eIf\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eNot\u003c/span\u003e IsEmpty(reValue) \u003cspan style=\"color:#66d9ef\"\u003eThen\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eIf\u003c/span\u003e Trim(reValue) \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eThen\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eSet\u003c/span\u003e reValue \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eNothing\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eEnd\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eIf\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    getSPECByPara \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e reValue\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eEnd\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eFunction\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"對-getrangebypara-做重製\"\u003e對 getRangeByPara() 做重製\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e將 parameter or SPEC 做 hashing 的處理後，可以用 Dictionary 物件來查值，時間複雜度為 \\(O(1)\\)。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-VB.NET\" data-lang=\"VB.NET\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003ePublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eFunction\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egetRangeByPara\u003c/span\u003e(nowWafer \u003cspan style=\"color:#f92672\"\u003eAs\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eString\u003c/span\u003e, nowPara \u003cspan style=\"color:#f92672\"\u003eAs\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eString\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003eOptional\u003c/span\u003e dieNum \u003cspan style=\"color:#f92672\"\u003eAs\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eInteger\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 0)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eDim\u003c/span\u003e nowRow \u003cspan style=\"color:#f92672\"\u003eAs\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eLong\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eDim\u003c/span\u003e nowRange \u003cspan style=\"color:#f92672\"\u003eAs\u003c/span\u003e Range\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eSet\u003c/span\u003e nowRange \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Worksheets(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Data\u0026#34;\u003c/span\u003e).Range(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;wafer_\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e nowWafer)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eSet\u003c/span\u003e getRangeByPara \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eNothing\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eIf\u003c/span\u003e DataDict.Exists(nowPara) \u003cspan style=\"color:#66d9ef\"\u003eThen\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        nowRow \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e DataDict(nowPara)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eSet\u003c/span\u003e getRangeByPara \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e nowRange.Range(N2L(4) \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eCStr\u003c/span\u003e(nowRow) \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;:\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e N2L(dieNum \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e 3) \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eCStr\u003c/span\u003e(nowRow))\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eEnd\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eIf\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eEnd\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eFunction\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"解析\"\u003e解析\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e優點：較快的執行速度。經測試可以將 2~3 分鐘的執行時間縮短到 30 秒內。\u003c/li\u003e\n\u003cli\u003e缺點：若修改 rawdata，會發生錯誤。但若針對每一片 wafer 都做 setDict()的話，會浪費太多 memory。\u003c/li\u003e\n\u003c/ul\u003e","title":"[IDAS+] Optimize Summary Table Function"},{"content":"rand() 函數 在 C/C++ 中可以使用 rand() 這個函數，產生最簡單的亂數： 需引用 \u0026lt;stdlib.h\u0026gt; 函式庫 在呼叫 rand() 前需要先使用srand()設定初始的亂數種子，增加「亂度」。(實際上產生的亂數是有規則的，以示例為例，是以時間做為種子，故是有可能被預測的) 其產生的亂數是一個介於 0 到 RAND_MAX(INT_MAX)的整數。 C 與 C++ 幾乎一樣，只差在表頭檔的使用。 C-style #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;time.h\u0026gt; int main(){ srand(time(NULL)); // random seed int x = rand(); printf(\u0026#34;x = %d\\n\u0026#34;, x); return 0; } Cpp-style #include \u0026lt;iostream\u0026gt; #include \u0026lt;cstdlib\u0026gt; #include \u0026lt;ctime\u0026gt; using namespace std; int main(){ srand(time(NULL)); int x = rand(); cout \u0026lt;\u0026lt; \u0026#34;x = \u0026#34; \u0026lt;\u0026lt; x \u0026lt;\u0026lt; endl; cout \u0026lt;\u0026lt; \u0026#34;x is between 0 and \u0026#34; \u0026lt;\u0026lt; RAND_MAX \u0026lt;\u0026lt; endl; return 0; } 亂數種子 由於電腦實際上並沒有辦法自己產生「真正的亂數」，只能透過複雜的數學演算法模擬出類似亂數的數值資料，而在模擬亂數時，需要設定一個亂數種子，電腦會根據這個亂數種子來計算出一連串的亂數，相同的亂數種子就會產生相同的亂數序列，所以如果要讓產生的亂數每次都不同，就要設定不同的亂數種子。 上例中使用的亂數種子是時間，因為時間每分每秒都在變化，所以每次產生的亂數都會不同，如果是用於數值模擬的話， 固定亂數種子 由於電腦實際上並沒有辦法自己產生「真正的亂數」，只能透過複雜的數學演算法模擬出類似亂數的數值資料，而在模擬亂數時，需要設定一個亂數種子，電腦會根據這個亂數種子來計算出一連串的亂數，相同的亂數種子就會產生相同的亂數序列，所以如果要讓產生的亂數每次都不同，就要設定不同的亂數種子。若是做數值模擬的話，通常會讓模擬結果具有可重復性(repeatability)，方便除錯與驗證，這種狀況就可以將亂數種子固定不變，以確保每次的結果都相同。 [0, 1) 浮點數亂數 [0, 1) 代表 0 \u0026lt;= x \u0026lt; 1 若要產生 0 到 1 之間的浮點數亂數，可以這樣寫： #include \u0026lt;iostream\u0026gt; #include \u0026lt;cstdlib\u0026gt; #include \u0026lt;ctime\u0026gt; using namespace std; int main(){ srand(time(NULL)); double x = (double)rand()/(RAND_MAX + 1.0); cout \u0026lt;\u0026lt; \u0026#34;x = \u0026#34; \u0026lt;\u0026lt; x \u0026lt;\u0026lt; endl; return 0; } [a, b)特定範圍浮點數亂數 [a, b) 表 a \u0026lt;= x \u0026lt; b #include \u0026lt;iostream\u0026gt; #include \u0026lt;cstdlib\u0026gt; #include \u0026lt;ctime\u0026gt; using namespace std; int main(){ srand(time(NULL)); double x = (double)rand()/(RAND_MAX + 1.0); cout \u0026lt;\u0026lt; \u0026#34;x = \u0026#34; \u0026lt;\u0026lt; x \u0026lt;\u0026lt; endl; return 0; } [a, b)特定範圍整數亂數 #include \u0026lt;iostream\u0026gt; #include \u0026lt;cstdlib\u0026gt; #include \u0026lt;ctime\u0026gt; using namespace std; int main(){ srand(time(NULL)); int a = 1; // min int b = 100; // max int x = rand() % (b - a + 1) + a; cout \u0026lt;\u0026lt; \u0026#34;x = \u0026#34; \u0026lt;\u0026lt; x \u0026lt;\u0026lt; endl; return 0; } 上面這種使用餘數運算（%）的方式只是比較方便的寫法，事實上使用餘數運算所產生的整數亂數在理論上不是標準的均勻分布。\n我們以一個簡單的例子來解釋，假設 RAND_MAX 的值為 10，而我們要產生介於 3 到 5 之間的整數亂數（亦即 min = 3、max = 5），以下是所有的可能性對照表：\n\\(\\def\\arraystretch{1.4}\\begin{array}{c|l|c} 轉換後的整數亂數\u0026amp;\\text{rand()}函數產生的亂數\u0026amp;出現機率\\\\\\hline 3\u0026amp;0,3,6,9\u0026amp;4/11\\\\\\hline 4\u0026amp;1,4,7,10\u0026amp;4/11\\\\\\hline 5\u0026amp;2,5,8\u0026amp;3/11 \\end{array}\\) rand() 函數所產生的每一個整數其出現的機率是均等的，但是經過於數運算的轉換之後，因為 RAND_MAX 通常不會被整除，所以轉換之後的整數亂數出現機率就存在有細微的偏差，以這個例子來說，3、4、5 三個數字出現的機率比是 4:4:3。\n另外有些人會先產生固定範圍的浮點數亂數，再將浮點數轉型為整數，例如產生 [3, 6) 的浮點數亂數，然後轉型為 [3, 5] 的整數亂數，其實這種方式跟餘數運算一樣會有每個整數出現機率不均等的問題，簡單來說就是現在有 11 個球要放進 3 個籃子裡，不管怎麼放，每個籃子的球都不可能一樣多。\n均勻分布亂數(uniform distribution) #include \u0026lt;iostream\u0026gt; #include \u0026lt;cstdlib\u0026gt; #include \u0026lt;ctime\u0026gt; using namespace std; int randint(int n){ if ((n - 1) == RAND_MAX) return rand(); long end = RAND_MAX / n; assert (end \u0026gt; 0L); end *= n; int r; while ((r = rand()) \u0026gt;= end); return r % n; } int main(){ int x = randint(5); cout \u0026lt;\u0026lt; x \u0026lt;\u0026lt; endl; } 使用 randint 函數產生特定範圍整數亂數： int x = randint(max - min + 1) + min; 這種作法就好像要把 11 個球要放進 3 個籃子裡，而最後多出來的 2 顆球就直接丟掉，確保每個籃子都一樣只有 3 顆，這樣大家的機率就可以相等了。\n這種使用截斷分布（truncated distribution）來校正機率的方式雖然在理論上是正確的，但是 rand 函數是使用 LCG（Linear Congruential Generator）來產生亂數的，他的優點只是快速、方便而已，但它本身所產生的亂數品質沒有非常好，再怎麼校正效果都有限，若需要高品質的亂數，請改用 C++11 標準的 函式庫。\n","permalink":"https://intervalrain.github.io/c++/random/","summary":"\u003ch1 id=\"rand-函數\"\u003erand() 函數\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e在 C/C++ 中可以使用 \u003ccode\u003erand()\u003c/code\u003e 這個函數，產生最簡單的亂數：\u003c/li\u003e\n\u003cli\u003e需引用 \u003ccode\u003e\u0026lt;stdlib.h\u0026gt;\u003c/code\u003e 函式庫\u003c/li\u003e\n\u003cli\u003e在呼叫 \u003ccode\u003erand()\u003c/code\u003e 前需要先使用\u003ccode\u003esrand()\u003c/code\u003e設定初始的亂數種子，增加「亂度」。(實際上產生的亂數是有規則的，以示例為例，是以時間做為種子，故是有可能被預測的)\u003c/li\u003e\n\u003cli\u003e其產生的亂數是一個介於 0 到 RAND_MAX(INT_MAX)的整數。\u003c/li\u003e\n\u003cli\u003eC 與 C++ 幾乎一樣，只差在表頭檔的使用。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"c-style\"\u003eC-style\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C\" data-lang=\"C\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdlib.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;time.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003esrand\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003etime\u003c/span\u003e(NULL));      \u003cspan style=\"color:#75715e\"\u003e// random seed\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e x \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003erand\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;x = %d\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e, x);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"cpp-style\"\u003eCpp-style\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Cpp\" data-lang=\"Cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;cstdlib\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;ctime\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eusing\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enamespace\u003c/span\u003e std;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    srand(time(NULL));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e x \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e rand();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;x = \u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e x \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e endl;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;x is between 0 and \u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e RAND_MAX \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e endl;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"亂數種子\"\u003e亂數種子\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e由於電腦實際上並沒有辦法自己產生「真正的亂數」，只能透過複雜的數學演算法模擬出類似亂數的數值資料，而在模擬亂數時，需要設定一個亂數種子，電腦會根據這個亂數種子來計算出一連串的亂數，相同的亂數種子就會產生相同的亂數序列，所以如果要讓產生的亂數每次都不同，就要設定不同的亂數種子。\u003c/li\u003e\n\u003cli\u003e上例中使用的亂數種子是時間，因為時間每分每秒都在變化，所以每次產生的亂數都會不同，如果是用於數值模擬的話，\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"固定亂數種子\"\u003e固定亂數種子\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e由於電腦實際上並沒有辦法自己產生「真正的亂數」，只能透過複雜的數學演算法模擬出類似亂數的數值資料，而在模擬亂數時，需要設定一個亂數種子，電腦會根據這個亂數種子來計算出一連串的亂數，相同的亂數種子就會產生相同的亂數序列，所以如果要讓產生的亂數每次都不同，就要設定不同的亂數種子。若是做數值模擬的話，通常會讓模擬結果具有可重復性(repeatability)，方便除錯與驗證，這種狀況就可以將亂數種子固定不變，以確保每次的結果都相同。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"0-1-浮點數亂數\"\u003e[0, 1) 浮點數亂數\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e[0, 1) 代表 0 \u0026lt;= x \u0026lt; 1\u003c/li\u003e\n\u003cli\u003e若要產生 0 到 1 之間的浮點數亂數，可以這樣寫：\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Cpp\" data-lang=\"Cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;cstdlib\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;ctime\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eusing\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enamespace\u003c/span\u003e std;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    srand(time(NULL));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edouble\u003c/span\u003e x \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003edouble\u003c/span\u003e)rand()\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e(RAND_MAX \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1.0\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;x = \u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e x \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e endl;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"a-b特定範圍浮點數亂數\"\u003e[a, b)特定範圍浮點數亂數\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e[a, b) 表 a \u0026lt;= x \u0026lt; b\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Cpp\" data-lang=\"Cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;cstdlib\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;ctime\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eusing\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enamespace\u003c/span\u003e std;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    srand(time(NULL));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edouble\u003c/span\u003e x \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003edouble\u003c/span\u003e)rand()\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e(RAND_MAX \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1.0\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;x = \u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e x \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e endl;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"a-b特定範圍整數亂數\"\u003e[a, b)特定範圍整數亂數\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Cpp\" data-lang=\"Cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;cstdlib\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;ctime\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eusing\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enamespace\u003c/span\u003e std;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    srand(time(NULL));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e a \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;    \u003cspan style=\"color:#75715e\"\u003e// min\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e b \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e100\u003c/span\u003e;  \u003cspan style=\"color:#75715e\"\u003e// max\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e x \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e rand() \u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e (b \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e a \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e a;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;x = \u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e x \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e endl;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e上面這種使用餘數運算（%）的方式只是比較方便的寫法，事實上使用餘數運算所產生的整數亂數在理論上不是標準的均勻分布。\u003c/p\u003e","title":"[C++] 如何產生 random 值"},{"content":"cout Functions 設定顯示小數點位數 setprecision(int n) and fixed #include \u0026lt;iostream\u0026gt; #include \u0026lt;iomanip\u0026gt; using namespace std; int main(){ double a = 5.43/2.653; cout \u0026lt;\u0026lt; a \u0026lt;\u0026lt; endl; // 2.04674 cout \u0026lt;\u0026lt; setprecision(3) \u0026lt;\u0026lt; fixed; cout \u0026lt;\u0026lt; a \u0026lt;\u0026lt; endl; // 2.047 return 0; } 顯示 Boolean 值 std::boolalpha #include \u0026lt;iostream\u0026gt; using namespace std; int main(){ bool a = true; cout \u0026lt;\u0026lt; a \u0026lt;\u0026lt; endl; // 1 cout \u0026lt;\u0026lt; std::boolalpha; cout \u0026lt;\u0026lt; a \u0026lt;\u0026lt; endl; // true return 0; } ","permalink":"https://intervalrain.github.io/c++/cout/","summary":"\u003ch1 id=\"cout-functions\"\u003ecout Functions\u003c/h1\u003e\n\u003ch3 id=\"設定顯示小數點位數\"\u003e設定顯示小數點位數\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003esetprecision(int n)\u003c/code\u003e and \u003ccode\u003efixed\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Cpp\" data-lang=\"Cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;iomanip\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eusing\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enamespace\u003c/span\u003e std;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003edouble\u003c/span\u003e a \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e5.43\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e2.653\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e a \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e endl;                  \u003cspan style=\"color:#75715e\"\u003e// 2.04674\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e setprecision(\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e fixed;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e a \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e endl;                  \u003cspan style=\"color:#75715e\"\u003e// 2.047\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"顯示-boolean-值\"\u003e顯示 Boolean 值\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003estd::boolalpha\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Cpp\" data-lang=\"Cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eusing\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enamespace\u003c/span\u003e std;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ebool\u003c/span\u003e a \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e true;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e a \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e endl;          \u003cspan style=\"color:#75715e\"\u003e// 1\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e std\u003cspan style=\"color:#f92672\"\u003e::\u003c/span\u003eboolalpha;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e a \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e endl;          \u003cspan style=\"color:#75715e\"\u003e// true\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"[C++] Cout functions"},{"content":"演算法(Algorithms) Non-Manupulating Algorithms 1. sort() sort(first_iterator, last_iterator) 對 vector 作排序 2. reverse() reverse(first_iterator, last_iterator) 反轉 vector 的排序 3. *max_element() *max_element(first_iterator, last_iterator) 找出 vector 的最大值 4. *min_element() *min_element(first_iterator, last_iterator)` 找出 vector 的最小值 5. accumulate accumulate(first_iterator, last_iterator, initial value of sum) 計算 vector 的總和 #include \u0026lt;iostream\u0026gt; #include \u0026lt;algorithm\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;numeric\u0026gt; using namespace std; void print(vector\u0026lt;int\u0026gt;\u0026amp; vec){ for (vector\u0026lt;int\u0026gt;::iterator it = vec.begin(); it != vec.end(); it++){ cout \u0026lt;\u0026lt; *it \u0026lt;\u0026lt; \u0026#34; \u0026#34;; } cout \u0026lt;\u0026lt; endl; } int main(){ int arr[] = {10, 20, 5, 23, 42, 15}; int n = sizeof(arr)/sizeof(arr[0]); vector\u0026lt;int\u0026gt; vec(arr, arr + n); // print initial vector print(vec); // [10, 20, 5, 23, 42, 15] // sort sort(vec.begin(), vec.end()); // [5, 10, 15, 20, 23, 42] print(vec); // reverse reverse(vec.begin(), vec.end()); // [42, 23, 20, 15, 10, 5] print(vec); // max \u0026amp; min cout \u0026lt;\u0026lt; *max_element(vec.begin(), vec.end()) \u0026lt;\u0026lt; endl; // 42 cout \u0026lt;\u0026lt; *min_element(vec.begin(), vec.end()) \u0026lt;\u0026lt; endl; // 5 // accumulate cout \u0026lt;\u0026lt; accumulate(vec.begin(), vec.end(), 0) \u0026lt;\u0026lt; endl; // 115 return 0; } 6. count() count(first_iterator, last_iterator, x) 計算 vector 中 x 的數量 7. find() find(fist_iterator, last_iterator, x) 回傳 vector 中第一個符合的 iterator，若無則傳回 v.end()。 #include \u0026lt;algorithm\u0026gt; #include \u0026lt;iostream\u0026gt; #include \u0026lt;vector\u0026gt; using namespace std; int main() { int arr[] = {10, 20, 5, 23 ,42, 20, 15}; int n = sizeof(arr)/sizeof(arr[0]); vector\u0026lt;int\u0026gt; vec(arr, arr + n); cout \u0026lt;\u0026lt; count(vec.begin(), vec.end(), 20); // 2 find(vec.begin(), vec.end(),5) != vec.end() ? // Element found cout \u0026lt;\u0026lt; \u0026#34;\\nElement found\u0026#34;: cout \u0026lt;\u0026lt; \u0026#34;\\nElement not found\u0026#34;; return 0; } 8. binary_search() binary_search(first_iterator, last_iterator, x) 測試 x 是否存在已排序的 vector 中 9. lower_bound() lower_bound(first_iterator, last_iterator, x) 傳回指向不大於 x 的元素的 iterator 10. upper_bound() upper_bound(first_iterator, last_iterator, x) 傳回指向大於 x 的元素的 iterator #include \u0026lt;iostream\u0026gt; #include \u0026lt;algorithm\u0026gt; #include \u0026lt;vector\u0026gt; using namespace std; int main(){ int arr[] = {5, 10, 15, 20, 20, 23, 42, 45}; int n = sizeof(arr)/sizeof(arr[0]); vector\u0026lt;int\u0026gt; vec(arr, arr + n); sort(vec.begin(), vec.end()); cout \u0026lt;\u0026lt; binary_search(vec.begin(), vec.end(), 20) \u0026lt;\u0026lt; endl; // 1 cout \u0026lt;\u0026lt; (lower_bound(vec.begin(), vec.end(), 20) - vec.begin()) \u0026lt;\u0026lt; endl; // 3 cout \u0026lt;\u0026lt; (upper_bound(vec.begin(), vec.end(), 20) - vec.begin()) \u0026lt;\u0026lt; endl; // 5 return 0; } Manipulating Algorithms 1. vec.erase() arr.erase(position_to_be_deleted) 移除指定位置的元素 2. vec.erase(unique()) arr.erase(unique(arr.begin(), arr.end()), arr.end()) 移除已排序的 vector 中重複的元素 #include \u0026lt;iostream\u0026gt; #include \u0026lt;algorithm\u0026gt; #include \u0026lt;vector\u0026gt; using namespace std; int main(){ int arr[] = {5, 10, 15, 20, 20, 23, 42, 45, 20, 20, 20, 20, 20}; int n = sizeof(arr)/sizeof(arr[0]); vector\u0026lt;int\u0026gt; vec(arr, arr + n); // [5, 10, 15, 20, 20, 23, 42, 45, 20, 20, 20, 20, 20] vec.erase(vec.begin() + 1); // [5, 15, 20, 20, 23, 42, 45, 20, 20, 20, 20, 20] sort(vec.begin(), vec.end()); // [5, 15, 20, 20, 20, 20, 20, 20, 20, 23, 42, 45] vec.erase(unique(vec.begin(), vec.end()), vec.end()); // [5, 15, 20, 23, 42, 45] return 0; } 3. next_permutation() next_permutation(first_iterator, last_iterator) 對 vector 作動成下一個字典排序 4. prev_permutation() prev_permutation(first_iterator, last_iterator) 對 vector 作動成上一個字典排序 #include \u0026lt;iostream\u0026gt; #include \u0026lt;algorithm\u0026gt; #include \u0026lt;vector\u0026gt; using namespace std; int main(){ int arr[] = {1,2,3,4,5,6,7}; int n = sizeof(arr)/sizeof(arr[0]); vector\u0026lt;int\u0026gt; vec(arr, arr + n); // [1,2,3,4,5,6,7] next_permutation(vec.begin(), vec.end()); // [1,2,3,4,5,7,6] next_permutation(vec.begin(), vec.end()); // [1,2,3,4,6,5,7] next_permutation(vec.begin(), vec.end()); // [1,2,3,4,6,7,5] next_permutation(vec.begin(), vec.end()); // [1,2,3,4,7,5,6] prev_permutation(vec.begin(), vec.end()); // [1,2,3,4,6,7,5] return 0; } 5. distance() distance(first_iterator, last_iterator) #include \u0026lt;iostream\u0026gt; #include \u0026lt;algorithm\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026#34;print.cc\u0026#34; using namespace std; int main(){ int arr[] = {5\b,10,15,20,20,23,42,45}; int n = sizeof(arr)/sizeof(arr[0]); vector\u0026lt;int\u0026gt; vec(arr, arr + n); cout \u0026lt;\u0026lt; distance(vec.begin(), max_element(vec.begin(), vec.end())) \u0026lt;\u0026lt; endl; // 7 // == max_element(vec.begin(), vec.end()) - vec.begin(); return 0; } Array algorithms 1. any_of() any_of(first_iterator, last_iterator, [](passing_value { return statement; })) ? if_true : if_false; vector 中是否有任何元素滿足條件 2. all_of() all(first_iterator, last_iterator, [](passing_value { return statement; })) ? if_true : if_false; vector 中是否有全部元素滿足條件 3 none_of() none_of(first_iterator, last_iterator, [](passing_value { return statement; })) ? if_true : if_false; vector 中是否沒有元素滿足條件 #include \u0026lt;iostream\u0026gt; #include \u0026lt;vector\u0026gt; #include \u0026lt;algorithm\u0026gt; using namespace std; int main(){ vector\u0026lt;int\u0026gt; vec1 {1,3,7,9,11,17,23}; all_of(vec1.begin(), vec1.end(), [](int x) { return (x \u0026amp; 1) == 1;}) ? cout \u0026lt;\u0026lt; \u0026#34;All odds\\n\u0026#34; : cout \u0026lt;\u0026lt; \u0026#34;Not all odds\\n\u0026#34;; vector\u0026lt;int\u0026gt; vec2 {1,3,6,8,9,11,13}; any_of(vec2.begin(), vec2.end(), [](int x) { return (x \u0026amp; 1) == 0;}) ? cout \u0026lt;\u0026lt; \u0026#34;There are at least one even\\n\u0026#34; : cout \u0026lt;\u0026lt; \u0026#34;There are no any even\\n\u0026#34;; none_of(vec1.begin(), vec1.end(), [](int x) { return (x \u0026amp; 1) == 0;}) ? cout \u0026lt;\u0026lt; \u0026#34;There are no any even\\n\u0026#34; : cout \u0026lt;\u0026lt; \u0026#34;There are at least one even\\n\u0026#34;; return 0; } 4. copy_n() copy_n(source_array, array_size, target_array) 複製陣列 #include \u0026lt;iostream\u0026gt; #include \u0026lt;algorithm\u0026gt; using namespace std; int main(){ int arr[] = {1,2,3,4,5,6}; int arr2[6]; copy_n(arr, 6, arr2); for (int i : arr2){ cout \u0026lt;\u0026lt; i \u0026lt;\u0026lt; \u0026#34; \u0026#34;; } return 0; } 5. iota() iota(array_name, array_size, starting_number) 逐一增加並寫入指定大小的陣列 // C++ code to demonstrate working of iota() #include\u0026lt;iostream\u0026gt; #include\u0026lt;numeric\u0026gt; // for iota() using namespace std; int main(){ // Initializing array with 0 values int ar[6] = {0}; // Using iota() to assign values iota(ar, ar+6, 20); // Displaying the new array cout \u0026lt;\u0026lt; \u0026#34;The new array after assigning values is : \u0026#34;; for (int i=0; i\u0026lt;6 ; i++) cout \u0026lt;\u0026lt; ar[i] \u0026lt;\u0026lt; \u0026#34; \u0026#34;; return 0; } Partition operations C++ 在標準模板資料庫(STL)中有一個 class 可以來做 partition 的演算法。 Partition 就是用來將容器裡面的元素依指定的條件做分隔。 1. partition() partition(begin, end, conditon) 依照指定條件做分隔。 2. is_partition() is_partitioned(begin, end, condition 判斷元素是否依照條件分開。 #include \u0026lt;iostream\u0026gt; #include \u0026lt;algorithm\u0026gt; #include \u0026lt;vector\u0026gt; using namespace std; int main(){ vector\u0026lt;int\u0026gt; vec = {2,1,5,6,8,7}; is_partitioned(vec.begin(), vec.end(), [](int x){ return x % 2 == 0; }) ? cout \u0026lt;\u0026lt; \u0026#34;Vector is partitioned\u0026#34;: cout \u0026lt;\u0026lt; \u0026#34;Vector is not partitioned\u0026#34;; cout \u0026lt;\u0026lt; endl; partition(vec.begin(), vec.end(), [](int x){ return x % 2 == 0; }) ? cout \u0026lt;\u0026lt; \u0026#34;The partitioned vector is : \u0026#34;; for (int \u0026amp;x : vec) cout \u0026lt;\u0026lt; x \u0026lt;\u0026lt; \u0026#34; \u0026#34;; return 0; } 3. stable_partition() stable_partition(begin, end, condition) 依指定條件作分隔，同時保留元素的相對位置。 4. partition_point() partition_point(begin, end, condition) 返回指向分隔位置的迭代器，也就是在 [begin, end] 範圍內的第一個元素。 This function returns an iterator pointing to the partition point of container i.e. the first element in the partitioned range [beg,end) for which condition is not true. The container should already be partitioned for this function to work. // C++ code to demonstrate the working of // stable_partition() and partition_point() #include\u0026lt;iostream\u0026gt; #include\u0026lt;algorithm\u0026gt; // for partition algorithm #include\u0026lt;vector\u0026gt; // for vector using namespace std; int main() { // Initializing vector vector\u0026lt;int\u0026gt; vect = { 2, 1, 5, 6, 8, 7 }; // partitioning vector using stable_partition() // in sorted order stable_partition(vect.begin(), vect.end(), [](int x) { return x%2 == 0;\t}); // Displaying partitioned Vector cout \u0026lt;\u0026lt; \u0026#34;The partitioned vector is : \u0026#34;; for (int \u0026amp;x : vect) cout \u0026lt;\u0026lt; x \u0026lt;\u0026lt; \u0026#34; \u0026#34;; cout \u0026lt;\u0026lt; endl; // Declaring iterator vector\u0026lt;int\u0026gt;::iterator it1; // using partition_point() to get ending position of partition auto it = partition_point(vect.begin(), vect.end(), [](int x) { return x%2==0; }); // Displaying partitioned Vector cout \u0026lt;\u0026lt; \u0026#34;The vector elements returning true for condition are : \u0026#34;; for ( it1= vect.begin(); it1!=it; it1++) cout \u0026lt;\u0026lt; *it1 \u0026lt;\u0026lt; \u0026#34; \u0026#34;; cout \u0026lt;\u0026lt; endl; return 0; } 5. partition_copy() partition_copy(begin, end, begin1, begin2, condition) This function copies the partitioned elements in the different containers mentioned in its arguments. It takes 5 arguments. Beginning and ending position of container, beginning position of new container where elements have to be copied (elements returning true for condition), beginning position of new container where other elements have to be copied (elements returning false for condition) and the condition. Resizing new containers is necessary for this function. // C++ code to demonstrate the working of // partition_copy() #include\u0026lt;iostream\u0026gt; #include\u0026lt;algorithm\u0026gt; // for partition algorithm #include\u0026lt;vector\u0026gt; // for vector using namespace std; int main() { // Initializing vector vector\u0026lt;int\u0026gt; vect = { 2, 1, 5, 6, 8, 7 }; // Declaring vector1 vector\u0026lt;int\u0026gt; vect1; // Declaring vector1 vector\u0026lt;int\u0026gt; vect2; // Resizing vectors to suitable size using count_if() and resize() int n = count_if (vect.begin(), vect.end(), [](int x) { return x%2==0; } ); vect1.resize(n); vect2.resize(vect.size()-n); // Using partition_copy() to copy partitions partition_copy(vect.begin(), vect.end(), vect1.begin(), vect2.begin(), [](int x) { return x%2==0; }); // Displaying partitioned Vector cout \u0026lt;\u0026lt; \u0026#34;The elements that return true for condition are : \u0026#34;; for (int \u0026amp;x : vect1) cout \u0026lt;\u0026lt; x \u0026lt;\u0026lt; \u0026#34; \u0026#34;; cout \u0026lt;\u0026lt; endl; // Displaying partitioned Vector cout \u0026lt;\u0026lt; \u0026#34;The elements that return false for condition are : \u0026#34;; for (int \u0026amp;x : vect2) cout \u0026lt;\u0026lt; x \u0026lt;\u0026lt; \u0026#34; \u0026#34;; cout \u0026lt;\u0026lt; endl; return 0; } Numeric algorithms 1. apply() apply([](int x){return operation;}) 對陣列所有元素做運算 2. arr.sum() arr.sum() 計算陣列所有元素的總合 // C++ code to demonstrate the working of // apply() and sum() #include\u0026lt;iostream\u0026gt; #include\u0026lt;valarray\u0026gt; // for valarray functions using namespace std; int main() { // Initializing valarray valarray\u0026lt;int\u0026gt; varr = { 10, 2, 20, 1, 30 }; // Declaring new valarray valarray\u0026lt;int\u0026gt; varr1 ; // Using apply() to increment all elements by 5 varr1 = varr.apply([](int x){return x=x+5;}); // Displaying new elements value cout \u0026lt;\u0026lt; \u0026#34;The new valarray with manipulated values is : \u0026#34;; for (int \u0026amp;x: varr1) cout \u0026lt;\u0026lt; x \u0026lt;\u0026lt; \u0026#34; \u0026#34;; cout \u0026lt;\u0026lt; endl; // Displaying sum of both old and new valarray cout \u0026lt;\u0026lt; \u0026#34;The sum of old valarray is : \u0026#34;; cout \u0026lt;\u0026lt; varr.sum() \u0026lt;\u0026lt; endl; cout \u0026lt;\u0026lt; \u0026#34;The sum of new valarray is : \u0026#34;; cout \u0026lt;\u0026lt; varr1.sum() \u0026lt;\u0026lt; endl; return 0; } 3. arr.min() arr.min() 傳回陣列中最小的元素 4. arr.max() arr.max() 傳回陣列中最大的元素 // C++ code to demonstrate the working of // max() and min() #include\u0026lt;iostream\u0026gt; #include\u0026lt;valarray\u0026gt; // for valarray functions using namespace std; int main() { // Initializing valarray valarray\u0026lt;int\u0026gt; varr = { 10, 2, 20, 1, 30 }; // Displaying largest element of valarray cout \u0026lt;\u0026lt; \u0026#34;The largest element of valarray is : \u0026#34;; cout \u0026lt;\u0026lt; varr.max() \u0026lt;\u0026lt; endl; // Displaying smallest element of valarray cout \u0026lt;\u0026lt; \u0026#34;The smallest element of valarray is : \u0026#34;; cout \u0026lt;\u0026lt; varr.min() \u0026lt;\u0026lt; endl; return 0; } 5. arr.shift() \barr.shift(int n) 對陣列做 n 個位的移動，正為向右移，負為向左移，缺位補零。 6. cshift() arr.cshift(int n) 對陣列做 n 個位的移動，正為向右移，負為向左移，缺位使用循環補位。 // C++ code to demonstrate the working of // shift() and cshift() #include\u0026lt;iostream\u0026gt; #include\u0026lt;valarray\u0026gt; // for valarray functions using namespace std; int main() { // Initializing valarray valarray\u0026lt;int\u0026gt; varr = { 10, 2, 20, 1, 30 }; // Declaring new valarray valarray\u0026lt;int\u0026gt; varr1; // using shift() to shift elements to left // shifts valarray by 2 position varr1 = varr.shift(2); // Displaying elements of valarray after shifting cout \u0026lt;\u0026lt; \u0026#34;The new valarray after shifting is : \u0026#34;; for ( int\u0026amp;x : varr1) cout \u0026lt;\u0026lt; x \u0026lt;\u0026lt; \u0026#34; \u0026#34;; cout \u0026lt;\u0026lt; endl; // using cshift() to circulary shift elements to right // rotates valarray by 3 position varr1 = varr.cshift(-3); // Displaying elements of valarray after circular shifting cout \u0026lt;\u0026lt; \u0026#34;The new valarray after circular shifting is : \u0026#34;; for ( int\u0026amp;x : varr1) cout \u0026lt;\u0026lt; x \u0026lt;\u0026lt; \u0026#34; \u0026#34;; cout \u0026lt;\u0026lt; endl; return 0; } 7. arr1.swap(arr2) arr1.swap(arr2) 陣列做交換 // C++ code to demonstrate the working of // swap() #include\u0026lt;iostream\u0026gt; #include\u0026lt;valarray\u0026gt; // for valarray functions using namespace std; int main(){ // Initializing 1st valarray valarray\u0026lt;int\u0026gt; varr1 = {1, 2, 3, 4}; // Initializing 2nd valarray valarray\u0026lt;int\u0026gt; varr2 = {2, 4, 6, 8}; // Displaying valarrays before swapping cout \u0026lt;\u0026lt; \u0026#34;The contents of 1st valarray \u0026#34; \u0026#34;before swapping are : \u0026#34;; for (int \u0026amp;x : varr1) cout \u0026lt;\u0026lt; x \u0026lt;\u0026lt; \u0026#34; \u0026#34;; cout \u0026lt;\u0026lt; endl; cout \u0026lt;\u0026lt; \u0026#34;The contents of 2nd valarray \u0026#34; \u0026#34;before swapping are : \u0026#34;; for (int \u0026amp;x : varr2) cout \u0026lt;\u0026lt; x \u0026lt;\u0026lt; \u0026#34; \u0026#34;; cout \u0026lt;\u0026lt; endl; // Use of swap() to swap the valarrays varr1.swap(varr2); // Displaying valarrays after swapping cout \u0026lt;\u0026lt; \u0026#34;The contents of 1st valarray \u0026#34; \u0026#34;after swapping are : \u0026#34;; for (int \u0026amp;x : varr1) cout \u0026lt;\u0026lt; x \u0026lt;\u0026lt; \u0026#34; \u0026#34;; cout \u0026lt;\u0026lt; endl; cout \u0026lt;\u0026lt; \u0026#34;The contents of 2nd valarray \u0026#34; \u0026#34;after swapping are : \u0026#34;; for (int \u0026amp;x : varr2) cout \u0026lt;\u0026lt; x \u0026lt;\u0026lt; \u0026#34; \u0026#34;; cout \u0026lt;\u0026lt; endl; return 0;\t} 你可能會想繼續閱讀… 容器(Containers) 函式(Functions) 迭代器(Iterators) Utility Library ","permalink":"https://intervalrain.github.io/c++/stl_algo/","summary":"\u003ch1 id=\"演算法algorithms\"\u003e演算法(Algorithms)\u003c/h1\u003e\n\u003ch2 id=\"non-manupulating-algorithms\"\u003eNon-Manupulating Algorithms\u003c/h2\u003e\n\u003ch3 id=\"1-sort\"\u003e1. sort()\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003esort(first_iterator, last_iterator)\u003c/li\u003e\n\u003cli\u003e對 vector 作排序\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"2-reverse\"\u003e2. reverse()\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ereverse(first_iterator, last_iterator)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e反轉 vector 的排序\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"3-max_element\"\u003e3. *max_element()\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e*max_element(first_iterator, last_iterator)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e找出 vector 的最大值\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"4-min_element\"\u003e4. *min_element()\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e*min_element(first_iterator, last_iterator)`\u003c/li\u003e\n\u003cli\u003e找出 vector 的最小值\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"5-accumulate\"\u003e5. accumulate\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eaccumulate(first_iterator, last_iterator, initial value of sum)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e計算 vector 的總和\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Cpp\" data-lang=\"Cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;algorithm\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;vector\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;numeric\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eusing\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enamespace\u003c/span\u003e std;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eprint\u003c/span\u003e(vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026amp;\u003c/span\u003e vec){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;::\u003c/span\u003eiterator it \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e vec.begin(); it \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e vec.end(); it\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003eit \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e endl;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e arr[] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {\u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e20\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e23\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e42\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e15\u003c/span\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003esizeof\u003c/span\u003e(arr)\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003esizeof\u003c/span\u003e(arr[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e vec(arr, arr \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e n);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// print initial vector\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    print(vec);                         \u003cspan style=\"color:#75715e\"\u003e// [10, 20, 5, 23, 42, 15]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// sort\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    sort(vec.begin(), vec.end());       \u003cspan style=\"color:#75715e\"\u003e// [5, 10, 15, 20, 23, 42]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    print(vec);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// reverse\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    reverse(vec.begin(), vec.end());    \u003cspan style=\"color:#75715e\"\u003e// [42, 23, 20, 15, 10, 5]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    print(vec);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// max \u0026amp; min\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003emax_element(vec.begin(), vec.end()) \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e endl;   \u003cspan style=\"color:#75715e\"\u003e// 42\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003emin_element(vec.begin(), vec.end()) \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e endl;   \u003cspan style=\"color:#75715e\"\u003e// 5\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// accumulate\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e accumulate(vec.begin(), vec.end(), \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e endl;  \u003cspan style=\"color:#75715e\"\u003e// 115\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"6-count\"\u003e6. count()\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ecount(first_iterator, last_iterator, x)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e計算 vector 中 x 的數量\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"7-find\"\u003e7. find()\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003efind(fist_iterator, last_iterator, x)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e回傳 vector 中第一個符合的 iterator，若無則傳回 v.end()。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Cpp\" data-lang=\"Cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;algorithm\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;vector\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eusing\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enamespace\u003c/span\u003e std;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e arr[] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {\u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e20\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e23\u003c/span\u003e ,\u003cspan style=\"color:#ae81ff\"\u003e42\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e20\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e15\u003c/span\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003esizeof\u003c/span\u003e(arr)\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003esizeof\u003c/span\u003e(arr[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tvector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e vec(arr, arr \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e n);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tcout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e count(vec.begin(), vec.end(), \u003cspan style=\"color:#ae81ff\"\u003e20\u003c/span\u003e);      \u003cspan style=\"color:#75715e\"\u003e// 2\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tfind(vec.begin(), vec.end(),\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e vec.end() \u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e   \u003cspan style=\"color:#75715e\"\u003e// Element found \n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\t\t\t\t   cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003eElement found\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t   cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003eElement not found\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"8-binary_search\"\u003e8. binary_search()\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ebinary_search(first_iterator, last_iterator, x)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e測試 x 是否存在已排序的 vector 中\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"9-lower_bound\"\u003e9. lower_bound()\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003elower_bound(first_iterator, last_iterator, x)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e傳回指向不大於 x 的元素的 iterator\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"10-upper_bound\"\u003e10. upper_bound()\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eupper_bound(first_iterator, last_iterator, x)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e傳回指向大於 x 的元素的 iterator\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Cpp\" data-lang=\"Cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;algorithm\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;vector\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eusing\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enamespace\u003c/span\u003e std;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e arr[] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e15\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e20\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e20\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e23\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e42\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e45\u003c/span\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003esizeof\u003c/span\u003e(arr)\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003esizeof\u003c/span\u003e(arr[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e vec(arr, arr \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e n);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    sort(vec.begin(), vec.end());\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e binary_search(vec.begin(), vec.end(), \u003cspan style=\"color:#ae81ff\"\u003e20\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e endl;                  \u003cspan style=\"color:#75715e\"\u003e// 1\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e (lower_bound(vec.begin(), vec.end(), \u003cspan style=\"color:#ae81ff\"\u003e20\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e vec.begin()) \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e endl;    \u003cspan style=\"color:#75715e\"\u003e// 3\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e (upper_bound(vec.begin(), vec.end(), \u003cspan style=\"color:#ae81ff\"\u003e20\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e vec.begin()) \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e endl;    \u003cspan style=\"color:#75715e\"\u003e// 5\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"manipulating-algorithms\"\u003eManipulating Algorithms\u003c/h2\u003e\n\u003ch3 id=\"1-vecerase\"\u003e1. vec.erase()\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003earr.erase(position_to_be_deleted)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e移除指定位置的元素\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"2-veceraseunique\"\u003e2. vec.erase(unique())\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003earr.erase(unique(arr.begin(), arr.end()), arr.end())\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e移除已排序的 vector 中重複的元素\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Cpp\" data-lang=\"Cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;algorithm\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;vector\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eusing\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enamespace\u003c/span\u003e std;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e arr[] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e15\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e20\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e20\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e23\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e42\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e45\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e20\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e20\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e20\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e20\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e20\u003c/span\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003esizeof\u003c/span\u003e(arr)\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003esizeof\u003c/span\u003e(arr[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e vec(arr, arr \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e n);                          \u003cspan style=\"color:#75715e\"\u003e// [5, 10, 15, 20, 20, 23, 42, 45, 20, 20, 20, 20, 20]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    vec.erase(vec.begin() \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e);                             \u003cspan style=\"color:#75715e\"\u003e// [5, 15, 20, 20, 23, 42, 45, 20, 20, 20, 20, 20]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    sort(vec.begin(), vec.end());                           \u003cspan style=\"color:#75715e\"\u003e// [5, 15, 20, 20, 20, 20, 20, 20, 20, 23, 42, 45]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    vec.erase(unique(vec.begin(), vec.end()), vec.end());   \u003cspan style=\"color:#75715e\"\u003e// [5, 15, 20, 23, 42, 45]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"3-next_permutation\"\u003e3. next_permutation()\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003enext_permutation(first_iterator, last_iterator)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e對 vector 作動成下一個字典排序\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"4-prev_permutation\"\u003e4. prev_permutation()\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eprev_permutation(first_iterator, last_iterator)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e對 vector 作動成上一個字典排序\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Cpp\" data-lang=\"Cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;algorithm\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;vector\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eusing\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enamespace\u003c/span\u003e std;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e arr[] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003esizeof\u003c/span\u003e(arr)\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003esizeof\u003c/span\u003e(arr[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e vec(arr, arr \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e n);              \u003cspan style=\"color:#75715e\"\u003e// [1,2,3,4,5,6,7]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    next_permutation(vec.begin(), vec.end());   \u003cspan style=\"color:#75715e\"\u003e// [1,2,3,4,5,7,6]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    next_permutation(vec.begin(), vec.end());   \u003cspan style=\"color:#75715e\"\u003e// [1,2,3,4,6,5,7]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    next_permutation(vec.begin(), vec.end());   \u003cspan style=\"color:#75715e\"\u003e// [1,2,3,4,6,7,5]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    next_permutation(vec.begin(), vec.end());   \u003cspan style=\"color:#75715e\"\u003e// [1,2,3,4,7,5,6]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    prev_permutation(vec.begin(), vec.end());   \u003cspan style=\"color:#75715e\"\u003e// [1,2,3,4,6,7,5]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"5-distance\"\u003e5. distance()\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003edistance(first_iterator, last_iterator)\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Cpp\" data-lang=\"Cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;algorithm\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;vector\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026#34;print.cc\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eusing\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enamespace\u003c/span\u003e std;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e arr[] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\b\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e15\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e20\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e20\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e23\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e42\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e45\u003c/span\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003esizeof\u003c/span\u003e(arr)\u003cspan style=\"color:#f92672\"\u003e/\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003esizeof\u003c/span\u003e(arr[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e]);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e vec(arr, arr \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e n);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e distance(vec.begin(), max_element(vec.begin(), vec.end())) \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e endl;     \u003cspan style=\"color:#75715e\"\u003e// 7\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#75715e\"\u003e// == max_element(vec.begin(), vec.end()) - vec.begin();\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"array-algorithms\"\u003eArray algorithms\u003c/h2\u003e\n\u003ch3 id=\"1-any_of\"\u003e1. any_of()\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eany_of(first_iterator, last_iterator, [](passing_value { return statement; })) ? if_true : if_false;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003evector 中是否有\u003cstrong\u003e任何\u003c/strong\u003e元素滿足條件\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"2-all_of\"\u003e2. all_of()\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eall(first_iterator, last_iterator, [](passing_value { return statement; })) ? if_true : if_false;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003evector 中是否有\u003cstrong\u003e全部\u003c/strong\u003e元素滿足條件\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"3-none_of\"\u003e3 none_of()\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003enone_of(first_iterator, last_iterator, [](passing_value { return statement; })) ? if_true : if_false;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003evector 中是否\u003cstrong\u003e沒有\u003c/strong\u003e元素滿足條件\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Cpp\" data-lang=\"Cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;vector\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;algorithm\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eusing\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enamespace\u003c/span\u003e std;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e vec1 {\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e9\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e11\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e17\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e23\u003c/span\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    all_of(vec1.begin(), vec1.end(), [](\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e x) { \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e (x \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e;}) \u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;All odds\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Not all odds\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e vec2 {\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e8\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e9\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e11\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e13\u003c/span\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    any_of(vec2.begin(), vec2.end(), [](\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e x) { \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e (x \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;}) \u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;There are at least one even\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;There are no any even\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    none_of(vec1.begin(), vec1.end(), [](\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e x) { \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e (x \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;}) \u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;There are no any even\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;There are at least one even\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"4-copy_n\"\u003e4. copy_n()\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ecopy_n(source_array, array_size, target_array)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e複製陣列\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Cpp\" data-lang=\"Cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;algorithm\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eusing\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enamespace\u003c/span\u003e std;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e arr[] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e arr2[\u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e];\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    copy_n(arr, \u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e, arr2);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i : arr2){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"5-iota\"\u003e5. iota()\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eiota(array_name, array_size, starting_number)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e逐一增加並寫入指定大小的陣列\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Cpp\" data-lang=\"Cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// C++ code to demonstrate working of iota()\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u0026lt;iostream\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u0026lt;numeric\u0026gt; \u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e// for iota()\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eusing\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enamespace\u003c/span\u003e std;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// Initializing array with 0 values\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e ar[\u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// Using iota() to assign values\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\tiota(ar, ar\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e20\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// Displaying the new array\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\tcout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;The new array after assigning values is : \u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e ; i\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tcout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e ar[i] \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"partition-operations\"\u003ePartition operations\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eC++ 在標準模板資料庫(STL)中有一個 class 可以來做 partition 的演算法。\u003c/li\u003e\n\u003cli\u003ePartition 就是用來將容器裡面的元素依指定的條件做分隔。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"1-partition\"\u003e1. partition()\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003epartition(begin, end, conditon)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e依照指定條件做分隔。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"2-is_partition\"\u003e2. is_partition()\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eis_partitioned(begin, end, condition\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e判斷元素是否依照條件分開。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Cpp\" data-lang=\"Cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;algorithm\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;vector\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eusing\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enamespace\u003c/span\u003e std;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e vec \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e8\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    is_partitioned(vec.begin(), vec.end(), [](\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e x){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e x \u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }) \u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Vector is partitioned\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Vector is not partitioned\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e endl;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    partition(vec.begin(), vec.end(), [](\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e x){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e x \u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }) \u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;The partitioned vector is : \u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003ex : vec) cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e x \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"3-stable_partition\"\u003e3. stable_partition()\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003estable_partition(begin, end, condition)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e依指定條件作分隔，同時保留元素的相對位置。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"4-partition_point\"\u003e4. partition_point()\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003epartition_point(begin, end, condition)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e返回指向分隔位置的迭代器，也就是在 [begin, end] 範圍內的第一個元素。\u003c/li\u003e\n\u003cli\u003eThis function returns an iterator pointing to the partition point of container i.e. the first element in the partitioned range [beg,end) for which condition is not true. The container should already be partitioned for this function to work.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Cpp\" data-lang=\"Cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// C++ code to demonstrate the working of\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// stable_partition() and partition_point()\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u0026lt;iostream\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u0026lt;algorithm\u0026gt; \u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e// for partition algorithm\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u0026lt;vector\u0026gt; \u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e// for vector\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eusing\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enamespace\u003c/span\u003e std;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// Initializing vector\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\tvector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e vect \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e { \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e8\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e };\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// partitioning vector using stable_partition()\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\u003cspan style=\"color:#75715e\"\u003e// in sorted order\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\tstable_partition(vect.begin(), vect.end(), [](\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e x)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e x\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t});\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// Displaying partitioned Vector\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\tcout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;The partitioned vector is : \u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003ex : vect) cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e x \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tcout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e endl;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// Declaring iterator\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\tvector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;::\u003c/span\u003eiterator it1;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// using partition_point() to get ending position of partition\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eauto\u003c/span\u003e it \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e partition_point(vect.begin(), vect.end(), [](\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e x)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e x\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t});\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// Displaying partitioned Vector\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\tcout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;The vector elements returning true for condition are : \u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e ( it1\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e vect.begin(); it1\u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003eit; it1\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tcout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003eit1 \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tcout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e endl;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"5-partition_copy\"\u003e5. partition_copy()\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003epartition_copy(begin, end, begin1, begin2, condition)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eThis function copies the partitioned elements in the different containers mentioned in its arguments. It takes 5 arguments. Beginning and ending position of container, beginning position of new container where elements have to be copied (elements returning true for condition), beginning position of new container where other elements have to be copied (elements returning false for condition) and the condition. Resizing new containers is necessary for this function.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Cpp\" data-lang=\"Cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// C++ code to demonstrate the working of\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// partition_copy()\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u0026lt;iostream\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u0026lt;algorithm\u0026gt; \u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e// for partition algorithm\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u0026lt;vector\u0026gt; \u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e// for vector\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eusing\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enamespace\u003c/span\u003e std;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// Initializing vector\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\tvector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e vect \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e { \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e8\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e7\u003c/span\u003e };\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// Declaring vector1\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\tvector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e vect1;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// Declaring vector1\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\tvector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e vect2;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// Resizing vectors to suitable size using count_if() and resize()\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e n \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e count_if (vect.begin(), vect.end(), [](\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e x)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e x\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t} );\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tvect1.resize(n);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tvect2.resize(vect.size()\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003en);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// Using partition_copy() to copy partitions\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\tpartition_copy(vect.begin(), vect.end(), vect1.begin(),\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\t\t\t\t\t\tvect2.begin(), [](\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e x)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e x\u003cspan style=\"color:#f92672\"\u003e%\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t});\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// Displaying partitioned Vector\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\tcout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;The elements that return true for condition are : \u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003ex : vect1)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\tcout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e x \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tcout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e endl;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// Displaying partitioned Vector\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\tcout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;The elements that return false for condition are : \u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003ex : vect2)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\tcout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e x \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tcout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e endl;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"numeric-algorithms\"\u003eNumeric algorithms\u003c/h2\u003e\n\u003ch3 id=\"1-apply\"\u003e1. apply()\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eapply([](int x){return operation;})\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e對陣列所有元素做運算\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"2-arrsum\"\u003e2. arr.sum()\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003earr.sum()\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e計算陣列所有元素的總合\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Cpp\" data-lang=\"Cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// C++ code to demonstrate the working of\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// apply() and sum()\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u0026lt;iostream\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u0026lt;valarray\u0026gt; \u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e// for valarray functions\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eusing\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enamespace\u003c/span\u003e std;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// Initializing valarray\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\tvalarray\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e varr \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e { \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e20\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e30\u003c/span\u003e };\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// Declaring new valarray\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\tvalarray\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e varr1 ;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// Using apply() to increment all elements by 5\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\tvarr1 \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e varr.apply([](\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e x){\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e x\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003ex\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e;});\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// Displaying new elements value\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\tcout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;The new valarray with manipulated values is : \u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003ex: varr1) cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e x \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tcout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e endl;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// Displaying sum of both old and new valarray\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\tcout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;The sum of old valarray is : \u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tcout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e varr.sum() \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e endl;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tcout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;The sum of new valarray is : \u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tcout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e varr1.sum() \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e endl;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"3-arrmin\"\u003e3. arr.min()\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003earr.min()\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e傳回陣列中最小的元素\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"4-arrmax\"\u003e4. arr.max()\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003earr.max()\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e傳回陣列中最大的元素\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Cpp\" data-lang=\"Cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// C++ code to demonstrate the working of\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// max() and min()\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u0026lt;iostream\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u0026lt;valarray\u0026gt; \u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e// for valarray functions\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eusing\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enamespace\u003c/span\u003e std;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// Initializing valarray\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\tvalarray\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e varr \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e { \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e20\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e30\u003c/span\u003e };\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// Displaying largest element of valarray\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\tcout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;The largest element of valarray is : \u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tcout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e varr.max() \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e endl;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// Displaying smallest element of valarray\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\tcout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;The smallest element of valarray is : \u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tcout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e varr.min() \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e endl;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"5-arrshift\"\u003e5. arr.shift()\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\b\u003ccode\u003earr.shift(int n)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e對陣列做 n 個位的移動，正為向右移，負為向左移，缺位補零。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"6-cshift\"\u003e6. cshift()\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003earr.cshift(int n)\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e對陣列做 n 個位的移動，正為向右移，負為向左移，缺位使用循環補位。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Cpp\" data-lang=\"Cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// C++ code to demonstrate the working of\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// shift() and cshift()\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u0026lt;iostream\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u0026lt;valarray\u0026gt; \u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e// for valarray functions\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eusing\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enamespace\u003c/span\u003e std;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e()\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// Initializing valarray\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\tvalarray\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e varr \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e { \u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e20\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e30\u003c/span\u003e };\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// Declaring new valarray\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\tvalarray\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e varr1;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// using shift() to shift elements to left\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\u003cspan style=\"color:#75715e\"\u003e// shifts valarray by 2 position\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\tvarr1 \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e varr.shift(\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// Displaying elements of valarray after shifting\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\tcout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;The new valarray after shifting is : \u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e ( \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003ex : varr1) cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e x \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tcout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e endl;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// using cshift() to circulary shift elements to right\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\t\u003cspan style=\"color:#75715e\"\u003e// rotates valarray by 3 position\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\tvarr1 \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e varr.cshift(\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// Displaying elements of valarray after circular shifting\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\tcout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;The new valarray after circular shifting is : \u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e ( \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003ex : varr1) cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e x \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tcout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e endl;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"7-arr1swaparr2\"\u003e7. arr1.swap(arr2)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003earr1.swap(arr2)\u003c/li\u003e\n\u003cli\u003e陣列做交換\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Cpp\" data-lang=\"Cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// C++ code to demonstrate the working of\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// swap()\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u0026lt;iostream\u0026gt;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u0026lt;valarray\u0026gt; \u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e// for valarray functions\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eusing\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enamespace\u003c/span\u003e std;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Initializing 1st valarray\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\tvalarray\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e varr1 \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// Initializing 2nd valarray\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\tvalarray\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e varr2 \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e8\u003c/span\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// Displaying valarrays before swapping\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\tcout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;The contents of 1st valarray \u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;before swapping are : \u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003ex : varr1)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tcout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e x \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tcout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e endl;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tcout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;The contents of 2nd valarray \u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;before swapping are : \u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003ex : varr2)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tcout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e x \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tcout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e endl;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// Use of swap() to swap the valarrays\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\tvarr1.swap(varr2);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#75715e\"\u003e// Displaying valarrays after swapping\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\tcout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;The contents of 1st valarray \u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;after swapping are : \u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003ex : varr1)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tcout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e x \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tcout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e endl;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tcout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;The contents of 2nd valarray \u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\t\t\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;after swapping are : \u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003ex : varr2)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\tcout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e x \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\tcout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e endl;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\t\u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\t\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e你可能會想繼續閱讀…\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"/c++/stl_container\"\u003e容器(Containers)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/c++/stl_function\"\u003e函式(Functions)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/c++/stl_iterator\"\u003e迭代器(Iterators)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/c++/stl_util\"\u003eUtility Library\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","title":"[C++] The C++ Standard Template Library(STL) - Algorithm"},{"content":"STL \b標準模板庫(Standard Template Library, STL)是提供常用資料結構模板的程式庫，其包含了類別(classes)、演算法(algorithms)與迭代器(iterators)。\nSTL 是通用的程式庫，所以所有的元素都是泛型的，可以點此瞭解更多模板(template)的內容。\nSTL 的四大組成 演算法(Algorithms) 容器(Containers) 函式(Functions) 迭代器(Iterators) 補充 Utility Library ","permalink":"https://intervalrain.github.io/c++/stl/","summary":"\u003ch1 id=\"stl\"\u003eSTL\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\b標準模板庫(Standard Template Library, STL)是提供常用資料結構模板的程式庫，其包含了類別(classes)、演算法(algorithms)與迭代器(iterators)。\u003cbr\u003e\nSTL 是通用的程式庫，所以所有的元素都是泛型的，可以\u003ca href=\"https://www.geeksforgeeks.org/templates-cpp/\"\u003e點此瞭解更多模板(template)的內容\u003c/a\u003e。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"stl-的四大組成\"\u003eSTL 的四大組成\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"/c++/stl_algo\"\u003e演算法(Algorithms)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/c++/stl_container\"\u003e容器(Containers)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/c++/stl_function\"\u003e函式(Functions)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/c++/stl_iterator\"\u003e迭代器(Iterators)\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"補充\"\u003e補充\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"/c++/stl_util\"\u003eUtility Library\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"[C++] The C++ Standard Template Library(STL)"},{"content":"vector 的介紹 vector 是可變大小陣列的序列容器，採用連續的儲存空間來儲存元素，意味著可以採用下標來對 vector 的元素進行存取，和陣列 array 一樣高效，但是又不像陣列的大小是固定的，vector 的大小可以被動態處理，隨著元素量而增加。 #include \u0026lt;vector\u0026gt; vector 的使用 建構式 constructor vector\u0026lt;int\u0026gt; v1; // 不進行初始化 vector\u0026lt;int\u0026gt; v2 = {1,2,3}; // 像陣列一樣初始化 vector\u0026lt;int\u0026gt; v3(v2); // 利用vector初始化 vector\u0026lt;int\u0026gt; v4(v2.begin(), v2.end()-1); // 利用iterator初始化 vector\u0026lt;int\u0026gt; v5(3, 0); // 含有3個0的vector 談一下特殊的二維vector，其實就是二維矩陣，寫法為 vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt; vv(3, vector\u0026lt;int\u0026gt;(5, 0)); // vv[0] = [0, 0, 0, 0, 0] // vv[1] = [0, 0, 0, 0, 0] // vv[2] = [0, 0, 0, 0, 0] 遍歷 traverse 遍歷的方法有三種，分別是iterator，for loop，[]，其中**[]下標運算子只有string和vector**可以使用，因為他們的地址是連續的。 三種方法均是可讀、可寫。 vector\u0026lt;int\u0026gt; v = {0, 9, 3, 1, 6, 3, 9, 4, 3, 3}; // 1. iterator vector\u0026lt;int\u0026gt;::iterator it = v.begin(); while (it != v.end()){ cout \u0026lt;\u0026lt; *it \u0026lt;\u0026lt; \u0026#34; \u0026#34;; it++; } cout \u0026lt;\u0026lt; endl; // 2. for loop for (int e : v){ cout \u0026lt;\u0026lt; e \u0026lt;\u0026lt; \u0026#34; \u0026#34;; cout \u0026lt;\u0026lt; endl; } // 3. [] for (size_t i = 0; i \u0026lt; v.size(); ++i){ cout \u0026lt;\u0026lt; v[i] \u0026lt;\u0026lt; \u0026#34; \u0026#34;; cout \u0026lt;\u0026lt; endl; } 資料的資刪查改 \\( \\def\\arraystrecth{1.4}\\begin{array}{|l|l|}\\hline \\text{methods}\u0026amp;\\text{description}\\\\\\hline\\hline \\text{push\\_back}\u0026amp;\\text{Add element at the end}\\\\\\hline \\text{pop\\_back}\u0026amp;\\text{Delete last element}\\\\\\hline \\text{insert}\u0026amp;\\text{Insert elements}\\\\\\hline \\text{erase}\u0026amp;\\text{Erase elements}\\\\\\hline \\end{array} \\)\n#include \u0026lt;iostream\u0026gt; #include \u0026lt;vector\u0026gt; using namespace std; int main(){ vector\u0026lt;int\u0026gt; vec; vec.push_back(0); [0] vec.push_back(1); [0,1] vec.push_back(3); [0,1,3] vec.push_back(4); [0,1,3,4] vec.pop_back(); [0,1,3] vector\u0026lt;int\u0026gt;::iterator it = vec.begin(); vec.insert(it + 2, 2); // 在下標為1的位置，插入2 [0,1,2,3] vec.erase(it); [1,2,3] return 0; } resize 和 reserve int main(){ cout \u0026lt;\u0026lt; \u0026#34;size: \u0026#34; \u0026lt;\u0026lt; v.size() \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; // 0 cout \u0026lt;\u0026lt; \u0026#34;capacity: \u0026#34; \u0026lt;\u0026lt; v.capacity()() \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; // 0 v.resize(30); cout \u0026lt;\u0026lt; \u0026#34;size: \u0026#34; \u0026lt;\u0026lt; v.size() \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; // 30 cout \u0026lt;\u0026lt; \u0026#34;capacity: \u0026#34; \u0026lt;\u0026lt; v.capacity()() \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; // 30 v.reservse(50); cout \u0026lt;\u0026lt; \u0026#34;size: \u0026#34; \u0026lt;\u0026lt; v.size() \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; // 30 cout \u0026lt;\u0026lt; \u0026#34;capacity: \u0026#34; \u0026lt;\u0026lt; v.capacity()() \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; // 50 } vector 的實作 member variables template \u0026lt;class T\u0026gt; class myVector{ private: size_t _size; // 儲存現有 elements 的數目 size_t _capacity; // 此時陣列所有的最大容量 public: T* arr; // 儲存 elements 的陣列指標 }; 建構式 constructor public: // 無引數的初始化 myVector(){ this-\u0026gt;_size = 0; this-\u0026gt;_capacity = DEFAULT_CAPACITY; this-\u0026gt;arr = new int[this-\u0026gt;_capacity]; } // 指定容量的初始化 myVector(int capacity){ this-\u0026gt;_size = 0; this-\u0026gt;_capacity = capacity; this-\u0026gt;arr = new int[this-\u0026gt;capacity]; } // 以另一個 myVector 初始化 myVector(const myVector\u0026lt;T\u0026gt;\u0026amp; v): _size(v.size), _capacity(v._capacity) { this-\u0026gt;reserve(v.capacity); for (size_t i = 0; i \u0026lt; v._size; ++i){ this-\u0026gt;push_back(v[i]); } } // 填滿 n 個 val 的初始化 myVector(size_t n, T val): _size(n), _capacity(n) { this-\u0026gt;arr = new int[this-\u0026gt;_capacity]; for (size_t i = 0; i \u0026lt; n; ++i){ this-\u0026gt;arr[i] = val; } } 解構式 destructor public: ~myVector(){ // 將原有的陣列丟棄 delete[] this-\u0026gt;arr; } 運算子多載 operator overload public: // 令 myVector 可讀可寫 T\u0026amp; operator[](size_t i){ assert (i \u0026lt; this-\u0026gt;_size); return this-\u0026gt;arr[i]; } 函式 Methods public: // 回傳 vector 元素的數目 size_t size(){ return this-\u0026gt;_size; } // 回傳當前 vector 的容量 size_t capacity(){ return this-\u0026gt;_capacity; } // 回傳指向陣列的下標 0 位置 T* begin(){ return this-\u0026gt;arr; } // 回傳指向陣列的最末位 + 1 T* end(){ return this-\u0026gt;arr + this-\u0026gt;_size; } const T* begin() const{ return this-\u0026gt;arr; } const T* end() const{ return this-\u0026gt;arr + this-\u0026gt;_size; } // 回傳此 myVector 是否含有元素 bool isEmpty(){ return this-\u0026gt;_size == 0; } reserve 和 resize public: // force to resize with a n capacity void reserve(size_t n){ if (n \u0026gt; this-\u0026gt;_capacity){ T* tmp = new T[n]; if (arr != nullptr){ for (size_t i = 0; i \u0026lt; this-\u0026gt;_size; ++i){ tmp[i] = this-\u0026gt;arr[i]; } delete[] this-\u0026gt;arr; } this-\u0026gt;arr = tmp; _capacity = n; } } // expand the capacity while adding elements void resize(){ this-\u0026gt;_capacity *= 2; int* tmp = new int[this-\u0026gt;_capacity]; for (size_t i = 0; i \u0026lt; this-\u0026gt;_size; ++i){ tmp[i] = this-\u0026gt;arr[i]; } delete[] this-\u0026gt;arr; this-\u0026gt;arr = tmp; } 資料的增刪查改 public: // adding elements in the last of vector void push_back(T val){ if (this-\u0026gt;_capacity \u0026lt; this-\u0026gt;_size + 1) resize(); this-\u0026gt;arr[this-\u0026gt;_size] = val; this-\u0026gt;_size++; } // remove elements in the last of vector T pop_back(){ assert(!this-\u0026gt;isEmpty()); T tmp = *(this-\u0026gt;end()-1); this-\u0026gt;_size--; return tmp; } // insert element by the index. void insert(size_t i, T val){ assert (i \u0026lt;= this-\u0026gt;_size); if (this-\u0026gt;_size + 1 \u0026gt; this-\u0026gt;capacity()) resize(); int* ptr = this-\u0026gt;begin() + i; for (int* it = this-\u0026gt;end(); it != ptr; --it) *it = *(it - 1); *ptr = val; this-\u0026gt;_size++; } //erase element by the index T erase(size_t i){ assert(i \u0026lt; this-\u0026gt;_size); int* it = this-\u0026gt;begin() + i; T tmp = *it; for (; it != this-\u0026gt;end(); ++it){ *it = *(it + 1); } this-\u0026gt;_size--; return tmp; } Reference: 有解無憂 UJ5U.com\n","permalink":"https://intervalrain.github.io/c++/vector/","summary":"\u003ch1 id=\"vector-的介紹\"\u003evector 的介紹\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003evector 是\u003cstrong\u003e可變大小陣列的序列容器\u003c/strong\u003e，採用連續的儲存空間來儲存元素，意味著可以採用下標來對 vector 的元素進行存取，和陣列 array 一樣高效，但是又不像陣列的大小是固定的，vector 的大小可以被動態處理，隨著元素量而增加。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e#include \u0026lt;vector\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"vector-的使用\"\u003evector 的使用\u003c/h1\u003e\n\u003ch2 id=\"建構式-constructor\"\u003e建構式 constructor\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Cpp\" data-lang=\"Cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003evector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e v1;                         \u003cspan style=\"color:#75715e\"\u003e// 不進行初始化\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003evector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e v2 \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e};               \u003cspan style=\"color:#75715e\"\u003e// 像陣列一樣初始化\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003evector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e v3(v2);                     \u003cspan style=\"color:#75715e\"\u003e// 利用vector初始化\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003evector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e v4(v2.begin(), v2.end()\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e); \u003cspan style=\"color:#75715e\"\u003e// 利用iterator初始化\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003evector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e v5(\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e);                   \u003cspan style=\"color:#75715e\"\u003e// 含有3個0的vector\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e談一下特殊的二維vector，其實就是二維矩陣，寫法為\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Cpp\" data-lang=\"Cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003evector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003evector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e vv(\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e, vector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// vv[0] = [0, 0, 0, 0, 0]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// vv[1] = [0, 0, 0, 0, 0]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// vv[2] = [0, 0, 0, 0, 0]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"遍歷-traverse\"\u003e遍歷 traverse\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e遍歷的方法有三種，分別是\u003cstrong\u003eiterator\u003c/strong\u003e，\u003cstrong\u003efor loop\u003c/strong\u003e，\u003cstrong\u003e[]\u003c/strong\u003e，其中**[]\u003cstrong\u003e下標運算子只有\u003c/strong\u003estring\u003cstrong\u003e和\u003c/strong\u003evector**可以使用，因為他們的地址是連續的。\u003c/li\u003e\n\u003cli\u003e三種方法均是可讀、可寫。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Cpp\" data-lang=\"Cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003evector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e v \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e9\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e9\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 1. iterator\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003evector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;::\u003c/span\u003eiterator it \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e v.begin();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (it \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e v.end()){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003eit \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    it\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e endl;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 2. for loop\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e e : v){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e endl;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// 3. []\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (size_t i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; i \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e v.size(); \u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003ei){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    cout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e v[i] \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e endl;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"資料的資刪查改\"\u003e資料的資刪查改\u003c/h2\u003e\n\u003cp\u003e\\(\n\\def\\arraystrecth{1.4}\\begin{array}{|l|l|}\\hline\n\\text{methods}\u0026amp;\\text{description}\\\\\\hline\\hline\n\\text{push\\_back}\u0026amp;\\text{Add element at the end}\\\\\\hline\n\\text{pop\\_back}\u0026amp;\\text{Delete last element}\\\\\\hline\n\\text{insert}\u0026amp;\\text{Insert elements}\\\\\\hline\n\\text{erase}\u0026amp;\\text{Erase elements}\\\\\\hline\n\\end{array}\n\\)\u003c/p\u003e","title":"[C++] STL: Vector 的使用與實作"},{"content":"TCAD 常用的三種程式語言 工具語言 用於操作 Sentaurus 工具的指令，例如： snmesh sdevice 預處理語言 Sentaurus Workbench Preprocessing Language(SPP)：在 SWB 執行指令檔之前，會先翻譯 SPP 語言。(類似於 C 的 macro) 例如： #define __x__ 1 // 將所有 __x__ 字串取代成字串 1 TCL 公用語言，通常用來處理字串與數據。 範例 SPP 語言：@...@、#開頭的敘述都是 SPP 語言 #if \u0026#34;@tunneling@ == \u0026#34;Hurkx\u0026#34; #define _B2BTunnelModel_ Band2Band(Model=Hurkx) #define _B2BTunnelMath_ NoSRHperPotential #elif \u0026#34;@tunneling@ == \u0026#34;E1\u0026#34; #define _B2BTunnelModel_ Band2Band(Model=E1) #define _B2BTunnelMath_ NoSRHperPotential #elif \u0026#34;@tunneling@ == \u0026#34;E1_5\u0026#34; #define _B2BTunnelModel_ Band2Band(Model=E1_5) #define _B2BTunnelMath_ NoSRHperPotential #elif \u0026#34;@tunneling@ == \u0026#34;E2\u0026#34; #define _B2BTunnelModel_ Band2Band(Model=E2) #define _B2BTunnelMath_ NoSRHperPotential #else #define _B2BTunnelModel_ #define _B2BTunnelMath_ #endif TCL 語言：set 與 puts 其中 @\u0026hellip;@ 因為是 SPP 語言，故會先被前面定義好的 header 取代，之後才會執向 .cmd 檔。 set A [expr -@BF_Thick@-@AB_Thick@-@GR_Thick@-@CH_Thick@-@ML_Thick@] puts \u0026#34;DOE: Xmin [format %.2f $A]\u0026#34; ","permalink":"https://intervalrain.github.io/device/tcad/","summary":"\u003ch1 id=\"tcad-常用的三種程式語言\"\u003eTCAD 常用的三種程式語言\u003c/h1\u003e\n\u003ch3 id=\"工具語言\"\u003e工具語言\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e用於操作 Sentaurus 工具的指令，例如：\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003esnmesh\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003esdevice\u003c/strong\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"預處理語言\"\u003e預處理語言\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eSentaurus Workbench Preprocessing Language(SPP)：在 SWB 執行指令檔之前，會先翻譯 SPP 語言。(類似於 C 的 macro)\n\u003cul\u003e\n\u003cli\u003e例如：\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode class=\"language-TCAD\" data-lang=\"TCAD\"\u003e#define __x__ 1   // 將所有 __x__ 字串取代成字串 1\n\u003c/code\u003e\u003c/pre\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"tcl\"\u003eTCL\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e公用語言，通常用來處理字串與數據。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"範例\"\u003e範例\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eSPP 語言：\u003ccode\u003e@...@\u003c/code\u003e、\u003ccode\u003e#\u003c/code\u003e開頭的敘述都是 SPP 語言\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode class=\"language-SPP\" data-lang=\"SPP\"\u003e#if \u0026#34;@tunneling@ == \u0026#34;Hurkx\u0026#34;\n    #define _B2BTunnelModel_ Band2Band(Model=Hurkx)\n    #define _B2BTunnelMath_ NoSRHperPotential\n#elif \u0026#34;@tunneling@ == \u0026#34;E1\u0026#34;\n    #define _B2BTunnelModel_ Band2Band(Model=E1)\n    #define _B2BTunnelMath_ NoSRHperPotential\n#elif \u0026#34;@tunneling@ == \u0026#34;E1_5\u0026#34;\n    #define _B2BTunnelModel_ Band2Band(Model=E1_5)\n    #define _B2BTunnelMath_ NoSRHperPotential\n#elif \u0026#34;@tunneling@ == \u0026#34;E2\u0026#34;\n    #define _B2BTunnelModel_ Band2Band(Model=E2)\n    #define _B2BTunnelMath_ NoSRHperPotential\n#else\n    #define _B2BTunnelModel_\n    #define _B2BTunnelMath_\n#endif\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003eTCL 語言：\u003ccode\u003eset\u003c/code\u003e 與 \u003ccode\u003eputs\u003c/code\u003e\n\u003cul\u003e\n\u003cli\u003e其中 @\u0026hellip;@ 因為是 SPP 語言，故會先被前面定義好的 header 取代，之後才會執向 .cmd 檔。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Tcl\" data-lang=\"Tcl\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eset\u003c/span\u003e A \u003cspan style=\"color:#66d9ef\"\u003e[expr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e@\u003c/span\u003eBF_Thick\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e@\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e@\u003c/span\u003eAB_Thick\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e@\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e@\u003c/span\u003eGR_Thick\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e@\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e@\u003c/span\u003eCH_Thick\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e@\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e@\u003c/span\u003eML_Thick\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e@\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eputs \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;DOE: Xmin [format %.2f $A]\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","title":"[TCAD] 工具語言"},{"content":"計算機的抽象化與科技 1.1 簡介 有賴於科技高速的成長，計算機工業出現了嶄新的型態，計算機導致了文明的第三次革命-資訊革命，與農業革命和工業革命並駕齊驅。如科幻電影般的生活應用，也如雨後出筍般的出現。 汽車 手機 人類基因組計劃(Human genome project) 全球網路(World Wide Web) 搜尋引擎 計算機的應用分類與其特性 個人電腦(Personal Computer, PCs) 伺服器(Servers) 通過網路連接其它的工作站或電腦，通常面向單一且複雜大型的科學或工程應用，也可能是多而小的工作。 成本和功能的差異性也最廣，可以是沒有螢幕沒有鍵盤的桌電，也可以是如超級計算機(supercomputers)這樣的極端。 嵌入式計算機(Embedded Computers) 最大的計算機類別，也涵蓋最廣泛的應用和性能。 通常具有獨特的應用要求，這些要求將最低效能發揮的淋漓盡致，使成本與功耗成為很重要的指標。 後PC時代 個人行動裝置(Poersonal Mobile Device, PMD) 如智慧型手機與平板的出現，取代的 PC 的地位。 雲端計算(Cloud Computing) 取代了傳統伺服器，這些雲端計算建構在「倉庫規模計算機」(Warehouse Scale Computer, WSC)。 企業如Google、Amazon，提供了 WSC 的租借服務，這類通過雲端佈署的「軟體即服務」(Software as a Service, SaaS)，正在改變軟體業。 學習目標 過去在硬體的限制下，程式設計師需要嚴格的考慮程式的效能：減少記憶體空間以使程式更快。 在計算機設計與記憶體科技的進步下，取而代之程式設計師要考量的事情變成：處理器的並行性和記憶體的分層，或諸如在 PMD 或雲端上運行的程式的能源效率問題。 以下是我們將要學習的目標： 用高級語言編寫的程式如何翻譯成硬體語言，以及硬體如何執行生成的程式？藉此可以理解硬體與軟體的關係，也與程式的性能有關聯。 軟體和硬體間的介面是什麼，軟體如何指示硬體執行所需的工作？這些概念對於理解如何編寫多種軟體至關重要。 什麼決定了一個程式的性能，程式設計師如何提高性能？這關係了源始碼編譯成電腦的語言時，硬體執行程式的效率。 硬體設計人員可以使用哪些技術來提高性能(Performance)？ 硬體設計人員可以使用哪些技術來提升能源效率(Energy Efficiency)？程式設計師又如何協助改善？ 什麼理由導致了循序處理(Sequential processing)轉變成了平行處理(Parallel processing)？ 自第一台商用計算機問世以來，計算機架構師提出了哪些想法來奠定現代計算的基礎？ 1.2 計結中八個重要的思想 摩爾定律(Moore\u0026rsquo;s Law)之於設計 摩爾定律源於 Intel 創辦人之一的 Gordon Moore 對 IC 容量增長的預測。 由於計算機設計需耗時數年，而晶片的成長使得計算機架構師在設計時，必須將眼光放到設計完成時的技術狀態，而非當下。 用抽象化(Abstraction)來簡化設計 程式設計師與計算機架構師都必須要不斷發明新的技術以面對日益更新的科技， 抽象化是一種分層設計的概念。對程式設計師而言，低階的細節被忽略，只需要遵從簡單的模型或規範去進行設計。而硬體工程師則是要去實現出這個定義好的模型的硬體、細節部分。 快速處理常見情況 將常使用的指令進行優化(common case fast)，比起其它不常使用的指令，更能提升效能。 何者為最常使用的指令，必須透過嚴密的實驗與測量才以得知。 平行處理(parallelism) Pipeline 預測 某些情況下，將硬體的效能預測的高一點，好過於等到效能滿足才開始設計。 記憶體的結構化(hierarchy) 透過將記憶體分層，將最快、最小、最昂貴的部分置於層狀結構的頂層；而最慢、最大、最便宜的記憶體置於層狀結構的底層。 用多餘創造可靠性(dependability) 計算機不只要速度快，還要具有可靠性。任何物理設備都可能發生故障，此時可以透過引入冗餘的元件來使系統變的更可靠，這些冗餘的元件可以在發生故障時接管工作並協助檢測故障。 1.3 抽象化 從高階語言編譯或轉譯成簡單的計算機指令，這樣的分層結構，即是一種抽象化的呈現。 應用軟體-系統軟體-硬體，從外而內，即是現代計算機的基本架構。 計算機系統中最重要的兩個系統軟體： 作業系統(Operating System, OS) 處理基本的輸入與輸出操作。 分配儲存空間與記憶體。 在同時使用多個應用程式時提供保護的功能。 編譯器(Compiler) 將高階語言如 C, C++, Java, Visual Basic 轉換成硬體可以執行的指令(機器碼)。 高階語言到硬體語言 二進制 電訊號是與電子硬體進行溝通的唯一橋樑。即是所謂的二進制(Binary digit)。在電子硬體的世界，位元(bit) 即為最基本的單位。 從真實世界的 類比訊號 到方便儲存與傳送的 數位訊號 (Analog to Digital)。 電晶體(Transistor) 電晶體的特性，可以作為一個電子開關。 現今的積體電路最常見的電晶體為 MOSFET (Metal Oxide Silicon Field Effect Transistor)。 利用閘極(Gate)控制源極(Source)與汲極(Drain)的電子通道。 電子開關 → 邏輯閘 → 邏輯電路、記憶元件 → 計算機 彙編語言(Assebly Language) 最早人們使用二進位與電子設備溝通，但效率太慢了，於是發明了更貼近人類思維的符號。 而**彙編程式(Assembler)**即是第一個用來翻譯這些符號的程式。 彙編語言(Assembly Language) add A,B 機器語言(Machine Language) 1000110010100000 高階語言(High-level Language) 高階語言的出現使得計算機的發展更進一步的突破，而高階與言、編譯器與彙編程式即是另一個抽象化的呈現。 好處 高階語言使程式設計師能用更自然的思考，使用英文單字與代數進行程式設計。 高階語言允許語言根據其預期用途設計： Fortran 專為科學計算設計 Cobol 用於業務數據處理 Lisp 用於符號操作 …等等 提升了程式設計的效率，減少了軟體開發的時間，滿足軟體開發的通則「簡潔」。 高階語言是獨立於計算機的，因為編譯器與彙編程式可以在任何電腦上進行編譯。 1.4 計算機結構 任何計算機底層的硬體都執行相同的基本功能： 輸入數據(inputing data) 輸出數據(outputing data) 處理數據(processing data) 儲存數據(storing data) 計算機組織(organization) 輸入(Input)、輸出(Output) 記憶體(Memory) 處理器(Processor) 資料流(Datapath) 控制器(Control) 計算機架構(architecture) 計算機架構 = 指令集架構 + 計算機組織 積體電路(integrated circuits, IC, chips)包含了大部分的計算機組織，包含了 輸入、輸出裝置 液晶顯示器(Liquid crystal displays, LCDs) 觸控面板(touchscreen) 前鏡頭、後鏡頭 麥克風 喇叭 加速度傳感計(accelerometer) 陀螺儀(gyroscope) Wi-Fi 網路、藍芽網路 處理器，或稱中央處理器(central processor unit, CPU)。 資料流，用來處理算術、邏輯運算。 控制器，根據程式的指令告訴資料流、記憶體、I/O裝置要做什麼事。 記憶體 用來儲存程式、程式所需的資料。 由動態隨機存取記憶體 DRAM(dynamic random access memory)組成，相較於循序存取記憶體 sequential access memories，RAM 訪問不同的區域花費的時間基本相同。 快取記憶體(Cache) 是由小型、快速的記憶體所組成，作為 DRAM 的緩衝區。由靜態隨機存取記憶體 SRAM(static random access memory)所組成，SRAM 速度快但密度較低、成本較高。 又分為揮發式(volatile)的與非揮發式(non-volatile)的，通常主記憶體(main memory, primary memory)使用揮發式的(如 DRAM)，而次級的記憶體使用非揮發式的(如磁碟、flash)。 flash 雖比 DRAM 慢，但它具有非揮發式且較便宜的性質，相較於磁碟，flash 更小、更堅固、也更高效，儘管 flash memory 大約會在 寫入 100,000 到 1,000,000 次後磨損，所以文件系統必須要追蹤，並制定記憶體全部磨損的策略。 指令集架構(Instruction Set Architecture, ISA) 包含了所有使二進制機器語言正常工作的內容，包括指令、IO 設備。 通常作業系統會裝這些細節封裝好，使程式設計師只需專心於設計。 由基本指令集與作業系統介面組合而成的介面稱為應用程式二進制介面(Application binary interface, ABI) 指令集架構是為軟體與硬體間提供的一個抽象化架構。 可編程的儲存量(programmable storage) 資料型別與結構：編碼與表現(Encodings and Representations) 指令集(Instruction Set) 指令形式(Instruction Formats) 讀寫資料的模式與指令 例外狀況 網路 Network 1.5 科技推動處理器與記憶體 1.6 效能 1.7 The Power Wall 1.8 從單處理器到多處理器 1.9 Benchmark 1.10 Fallacles and Pitfalls 1.11 小結 1.12 歷史觀點與未來展望 1.13 習題 前言 計算機結構 vs. 計算機組織 計算機結構 Computer Architecture 處理器(processor) 控制器(Control) 資料路徑(Datapath) 記憶體(memory) 裝置(Devices) 輸入(Input): 鍵盤、滑鼠、磁碟 輸出(Output): 磁碟、顯示器、影印機 計算機組織 Computer Organization(架構) 功能元件的性能: 暫存器(registers)、算術邏輯單元(ALU)、移位器(shifters) 結構(Structure) 資料流(Dataflow) 控制邏輯(Control logic) 暫存器傳輸階層(Register Transfer Level, RTL) 描述 計算機結構\n軟體與硬體間的介面。(不同層級抽象化的協同) 因應不同的需求所設計出來的機械結構。 選用的演算法 選用的程式語言或編譯器 選用的作業系統 處理器 I/O 系統與裝置 指令集架構 Instruction Set Architecture(ISA) 可編程的儲存量(programmable storage) 資料型別與結構：編碼與表現(Encodings and Representations) 指令集(Instruction Set) 指令形式(Instruction Formats) 讀寫資料的模式與指令 例外狀況 計算機的發展 電腦的分類與市場：歸因於行動裝置的崛起和技術的進步(CMOS、SoC、CAD tools等)。 桌上型電腦(Desktop computers) 伺服器電腦(Server computers) 嵌入式電腦(Embedded computers) 依指令集的長度、複雜度分為 複雜指令集電腦(Complex Instruction Set Computer, CISC) 精簡指令集電腦(Reduced Instruction Set Computer, RISC) 微處理器(Microprocessor) 的分類與市場：主要有兩大架構 ARM 架構： 過去稱為進階精簡指令集機器(Advanced RISC Machine)。 32 位元 RISC 處理器架構。 低成本、高效能、低耗電。 廣泛使用在嵌入式系統設計。 適用於行動通訊領域。 MIPS 架構： Microprocessor without Interlocked Pipeline Stages RISC 處理器架構，早年使用 32 位元，最新版本已變成 64 位元。 廣泛使用於電子產品、網路設備、個人娛樂裝置與商業裝置。 在 MIPS 架構中，指令被分為 R型、I型、J型，三種類型的指令的最高 6 位均為 6 位的 opcode 碼。 瓶頸 摩爾定律(Moore\u0026rsquo;s Law) 積體電路晶片上所整合的電路數目，每隔 18 個月就增加一倍。 摩爾定律的時代將會結束，因為研究和實驗室的成本需求十分高昂，而有財力投資在建立和維護晶片工廠的企業很少。而且製程也愈來愈接近半導體的物理極限，將會難以再縮小下去。 能耗限制(The power wall) 微處理器的效能提升一直仰賴提高處理器的操作頻率，但在提升操作步率的同時，也會帶來龐大的功耗，故形成 Power Wall。 散熱問題愈趨嚴重、電壓無法再下降。 \\(\\text{P}_\\text{dynamic} = \\text{IV} = \\frac{1}{2}\\text{CV}^2\\times\\frac{1}{\\text{T}} = \\frac{1}{2}\\text{CVF}\\) 多處理器(Multi-processor)開始發展 反應時間(Response Time)不增加，但吞吐量(Throughput)增加。 程式設計師要開始考量平行運算程式設計。 阿姆達爾定律(Amdahl\u0026rsquo;s Law) 它代表了處理器平行運算之後效率提升的能力，無論如何提升處理器的數目，加速比將會達到一個極限。(比方說導線的電導率決定電子傳遞速度的上限) \\(\\text{T} _\\text{improved}=\\frac{\\text{T} _\\text{affected} }{\\text{improvement facetor}}+\\text{T} _\\text{unaffected}\\) \\(\\text{T} _\\text{improved} \\rightarrow 0 + \\text{T} _\\text{unaffected}\\) unaffected term 會決定速度的上限 效能(Performance) 效能的表示法 吞吐量(Throughput)：單位時間的工作量。適用於大型主機。 反應時間(Response time)：任務完成所需的時間。適用於個人電腦。 I/O time CPU time：任務的處理(processing)時間 系統 CPU 使用者 CPU Elapsed time = Total Response time，包含處理器、I/O、OS overhaed、閒置時間 CPU time \\(\\boxed{\\text{CPU Time} = \\text{n}_ \\text{clock}\\times\\text{t}_ \\text{clock}}\\) \\(\\text{n}_\\text{clock}\\)：clock 的數目 \\(\\text{t}_\\text{clock}\\)：單位 clock 的時間 \\(\\boxed{\\text{CPI}=\\frac{\\text{n}_\\text{clock}}{\\text{n} _\\text{IC}}}\\) \\(\\text{n}_\\text{IC}\\)：指令數目(Instruction Count, IC) \\(\\text{CPI}\\)：Cycle per instruction \\(\\boxed{\\text{CPU Time} = \\text{n}_ \\text{IC}\\times\\text{CPI}\\times\\text{t}_ \\text{clock}}\\) \\(\\boxed{\\text{Clock Rate} = \\frac{1}{\\text{t}_\\text{clock}} = \\frac{\\text{n} _\\text{clock}}{\\text{CPU time}}}\\) 影響效能的因素 \\(\\boxed{\\begin{array}{ccccccc} \\text{CPU Time}\u0026amp;=\u0026amp;\\frac{\\text{Instruct.}}{\\text{{Program}}}\u0026amp;\\times\u0026amp;\\frac{\\text{Clock cycles}}{\\text{Instruct.}}\u0026amp;\\times\u0026amp;\\frac{\\text{Seconds}}{\\text{Clock cycle}}\\\\ \u0026amp;=\u0026amp;\\text{n}_ \\text{IC}\u0026amp;\\times\u0026amp;\\text{CPI}\u0026amp;\\times\u0026amp;\\text{t}_ \\text{clock} \\end{array}}\\) \\(\\begin{array}{|l|c|c|c|}\\hline \u0026amp;\\text{Instruction Count}\u0026amp;\\text{CPI}\u0026amp;\\text{Clock Rate}\\\\\\hline \\text{程式、演算法}\u0026amp;\\checkmark\u0026amp;\\checkmark\u0026amp;\\\\\\hline \\text{程式語言、編譯器}\u0026amp;\\checkmark\u0026amp;\\checkmark\u0026amp;\\\\\\hline \\text{指令集}\u0026amp;\\checkmark\u0026amp;\\checkmark\\\\\\hline \\text{計算機結構(ISA已定義好)}\u0026amp;\u0026amp;\\checkmark\u0026amp;\\checkmark\\\\\\hline \\text{科技}\u0026amp;\u0026amp;\u0026amp;\\checkmark\\\\\\hline \\end{array}\\) 效能的測量 不同程式需求，在不同的硬體設計架構上，會有不同的效能呈現。 如矩陣相乘的程式，對有處理矩陣相乘的 ISA，workload 必定會比較小。 如數字相乘的程式，有乘法器的 ISA，必定優於只有加法器的 ISA。 Benchmarks 為不同程式需求，產生不同的標準程式。 Standard Performance Evaluation Corporation(SPEC) SPEC CPU performance benchmark High-performance computing Client-server models Mail systems File systems Web servers SPEC Power benchmark 在不同 workload level 下測量功耗。 \\(\\sum\\text{ssj\\_ops} _\\text{i}/\\sum\\text{power} _\\text{i}\\) MIPS 成為效能的指標 MIPS(Millions of Instructions Per Second) 注意這裡不是 Microprocessor without Interlocked Pipeline Stages \\(\\boxed{\\text{MIPS}=\\frac{\\text{Instruct. count}}{\\text{Execution time}\\times10^6} =\\frac{\\text{Instruct. count}}{\\frac{\\text{Instruct. count}\\times\\text{CPI}}{\\text{Clock rate}}\\times10^6} =\\frac{\\text{Clock rate}}{\\text{CPI}\\times10^6}}\\) 電腦的定義 一種可以進行計算的裝置，特指可編程(programmable) 且可執行高速的數學或邏輯的運算，或可收集、儲存、處理資料的電子器械。 一般用途 or 特別用途 可編程 or 不可編程 科學用 or 商務 機械械 or 電子式 or 電機 \u0026hellip; Instruction 與 data 分開儲存的結構稱為 哈佛架構Harvard Architecture\b 電腦的歷史 ENIAC (Electronic Numberical Integrator and Calculator) 1943 - 1946 at the University of Pennsylvania 約 25 公尺長、2.5 公尺高 由真空管製成: 耗能、易燒壞KJKKI 1900個加法/每秒 商業化、電晶體的發現 in 1947 使用電晶體的電腦 (IBM 14001, Big Blue) in 1959 IC(Integrated Circuit) in 1958 at 德儀 微處理器(Intel 4004) in 1971 Apple II in 1977 個人電腦(IBM PC) in 1981 IBM 開放式系統(open system)使得周邊設備大量的發展 Xerox PARC Alto: 具備滑鼠、以太網路、點陣圖、按鍵、菜單、WYSIWYG編輯器 區域網路 雷射列印 client / server 分散式計算 應用程式 VisiCalc for Applie II in 1979 超大型積體電路 VLSI(Very-Large-Scale Integration) RISC(Reduced Instruction Set Computer) 的出現，對應於 CISC(Complex Instruction Set Computer) RISC: MIPS CISC: Intel x86 processor Post PC Era: Embedded Computer 冰箱、手機、手錶… 電腦的發展 應用 行動電腦 手機 人類基因體計畫 世界網路 搜尋引擎 摩爾定律 Moore\u0026rsquo;s Law Line Width/Feature Size: 電晶體的 Source 與 Drain 的距離，約是 gate length。 電腦的分類 通用電腦 特性： 軟體相容性 產品生命週期短 更好的效能(more transistors)與人機介面 個人電腦 Personal Computers 一般用途、軟體多樣性 取決於成本與效能的權衡 伺服器電腦 Server Computers 基於網路的 高容量、效能、可靠度 範圍可小至伺服，大至建築 超級電腦 Supercomputers 高端的科學與工程計算 最高的效能，但小的市佔 特殊用途電腦 特性： 通常沒有浮點數、記憶體管理 會與各種功能的外部裝置(peripherals)協作 e.g. DSP 多元的 ISA、效能、外部裝置 較不需考量相容性(通常是 pre-determined program)，ISA更簡單、低功耗 更多元的結構、生命週期更長 高產低銷 (Large volume sale and low price) 趨勢：低成本、更多功 SoC(system-on-chip)、micro P core on ASIC 嵌入式電腦 Embedded Computers 隱身在系統中 嚴格的功耗、效能、成本考量 ","permalink":"https://intervalrain.github.io/cs/ca/abstraction/","summary":"\u003ch1 id=\"計算機的抽象化與科技\"\u003e計算機的抽象化與科技\u003c/h1\u003e\n\u003ch2 id=\"11-簡介\"\u003e1.1 簡介\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e有賴於科技高速的成長，計算機工業出現了嶄新的型態，計算機導致了文明的第三次革命-資訊革命，與農業革命和工業革命並駕齊驅。如科幻電影般的生活應用，也如雨後出筍般的出現。\n\u003cul\u003e\n\u003cli\u003e汽車\u003c/li\u003e\n\u003cli\u003e手機\u003c/li\u003e\n\u003cli\u003e人類基因組計劃(Human genome project)\u003c/li\u003e\n\u003cli\u003e全球網路(World Wide Web)\u003c/li\u003e\n\u003cli\u003e搜尋引擎\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"計算機的應用分類與其特性\"\u003e計算機的應用分類與其特性\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e個人電腦(Personal Computer, PCs)\u003c/li\u003e\n\u003cli\u003e伺服器(Servers)\n\u003cul\u003e\n\u003cli\u003e通過網路連接其它的工作站或電腦，通常面向單一且複雜大型的科學或工程應用，也可能是多而小的工作。\u003c/li\u003e\n\u003cli\u003e成本和功能的差異性也最廣，可以是沒有螢幕沒有鍵盤的桌電，也可以是如超級計算機(supercomputers)這樣的極端。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e嵌入式計算機(Embedded Computers)\n\u003cul\u003e\n\u003cli\u003e最大的計算機類別，也涵蓋最廣泛的應用和性能。\u003c/li\u003e\n\u003cli\u003e通常具有獨特的應用要求，這些要求將最低效能發揮的淋漓盡致，使成本與功耗成為很重要的指標。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"後pc時代\"\u003e後PC時代\u003c/h3\u003e\n\u003cp\u003e\u003cimg alt=\"postPC\" loading=\"lazy\" src=\"/CS/CA/images/postPC.png\"\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e個人行動裝置(Poersonal Mobile Device, PMD) 如智慧型手機與平板的出現，取代的 PC 的地位。\u003c/li\u003e\n\u003cli\u003e雲端計算(Cloud Computing) 取代了傳統伺服器，這些雲端計算建構在「倉庫規模計算機」(Warehouse Scale Computer, WSC)。\n\u003cul\u003e\n\u003cli\u003e企業如Google、Amazon，提供了 WSC 的租借服務，這類通過雲端佈署的「軟體即服務」(Software as a Service, SaaS)，正在改變軟體業。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"學習目標\"\u003e學習目標\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e過去在硬體的限制下，程式設計師需要嚴格的考慮程式的效能：\u003cem\u003e減少記憶體空間以使程式更快\u003c/em\u003e。\u003c/li\u003e\n\u003cli\u003e在計算機設計與記憶體科技的進步下，取而代之程式設計師要考量的事情變成：\u003cstrong\u003e處理器的並行性\u003c/strong\u003e和\u003cstrong\u003e記憶體的分層\u003c/strong\u003e，或諸如在 PMD 或雲端上運行的程式的能源效率問題。\u003c/li\u003e\n\u003cli\u003e以下是我們將要學習的目標：\n\u003cul\u003e\n\u003cli\u003e用高級語言編寫的程式如何翻譯成硬體語言，以及硬體如何執行生成的程式？藉此可以理解硬體與軟體的關係，也與程式的性能有關聯。\u003c/li\u003e\n\u003cli\u003e軟體和硬體間的介面是什麼，軟體如何指示硬體執行所需的工作？這些概念對於理解如何編寫多種軟體至關重要。\u003c/li\u003e\n\u003cli\u003e什麼決定了一個程式的性能，程式設計師如何提高性能？這關係了源始碼編譯成電腦的語言時，硬體執行程式的效率。\u003c/li\u003e\n\u003cli\u003e硬體設計人員可以使用哪些技術來提高性能(Performance)？\u003c/li\u003e\n\u003cli\u003e硬體設計人員可以使用哪些技術來提升能源效率(Energy Efficiency)？程式設計師又如何協助改善？\u003c/li\u003e\n\u003cli\u003e什麼理由導致了循序處理(Sequential processing)轉變成了平行處理(Parallel processing)？\u003c/li\u003e\n\u003cli\u003e自第一台商用計算機問世以來，計算機架構師提出了哪些想法來奠定現代計算的基礎？\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"12-計結中八個重要的思想\"\u003e1.2 計結中八個重要的思想\u003c/h2\u003e\n\u003cp\u003e\u003cimg alt=\"great8\" loading=\"lazy\" src=\"/CS/CA/images/great8.png\"\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e摩爾定律(Moore\u0026rsquo;s Law)之於設計\n\u003cul\u003e\n\u003cli\u003e摩爾定律源於 Intel 創辦人之一的 Gordon Moore 對 IC 容量增長的預測。\u003c/li\u003e\n\u003cli\u003e由於計算機設計需耗時數年，而晶片的成長使得計算機架構師在設計時，必須將眼光放到設計完成時的技術狀態，而非當下。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e用抽象化(Abstraction)來簡化設計\n\u003cul\u003e\n\u003cli\u003e程式設計師與計算機架構師都必須要不斷發明新的技術以面對日益更新的科技，\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e抽象化\u003c/strong\u003e是一種分層設計的概念。對程式設計師而言，低階的細節被忽略，只需要遵從簡單的模型或規範去進行設計。而硬體工程師則是要去實現出這個定義好的模型的硬體、細節部分。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e快速處理常見情況\n\u003cul\u003e\n\u003cli\u003e將常使用的指令進行優化(\u003cstrong\u003ecommon case fast\u003c/strong\u003e)，比起其它不常使用的指令，更能提升效能。\u003c/li\u003e\n\u003cli\u003e何者為最常使用的指令，必須透過嚴密的實驗與測量才以得知。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e平行處理(parallelism)\u003c/li\u003e\n\u003cli\u003ePipeline\u003c/li\u003e\n\u003cli\u003e預測\n\u003cul\u003e\n\u003cli\u003e某些情況下，將硬體的效能預測的高一點，好過於等到效能滿足才開始設計。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e記憶體的結構化(hierarchy)\n\u003cul\u003e\n\u003cli\u003e透過將記憶體分層，將最快、最小、最昂貴的部分置於層狀結構的頂層；而最慢、最大、最便宜的記憶體置於層狀結構的底層。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e用多餘創造可靠性(dependability)\n\u003cul\u003e\n\u003cli\u003e計算機不只要速度快，還要具有可靠性。任何物理設備都可能發生故障，此時可以透過引入冗餘的元件來使系統變的更可靠，這些冗餘的元件可以在發生故障時接管工作並協助檢測故障。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"13-抽象化\"\u003e1.3 抽象化\u003c/h2\u003e\n\u003cp\u003e\u003cimg alt=\"abstraction\" loading=\"lazy\" src=\"/CS/CA/images/abstraction.png\"\u003e\u003c/p\u003e","title":"[CA] 計算機的抽象化與科技"},{"content":"題目 題目描述 設計一個類似 stack 的資料結構，實行 push() 跟 pop() 的功能，其中 pop() 會丟出 stack 中出現最多次的元素。 FreqStack class 必須實現： FreqStack() 建構子必須初始化一個空的 FreqStack。 void push(int val) 將 val 推至 stack 的頂端。 int pop() 將 stack 中最頻繁出現的元素移除，並返回。 如果 stack 中最頻繁出現的元素出現平手的狀況，則返回平手的元素中最接近 stack 頂端的元素。 題目範例 輸入\n[\u0026ldquo;FreqStack\u0026rdquo;, \u0026ldquo;push\u0026rdquo;, \u0026ldquo;push\u0026rdquo;, \u0026ldquo;push\u0026rdquo;, \u0026ldquo;push\u0026rdquo;, \u0026ldquo;push\u0026rdquo;, \u0026ldquo;push\u0026rdquo;, \u0026ldquo;pop\u0026rdquo;, \u0026ldquo;pop\u0026rdquo;, \u0026ldquo;pop\u0026rdquo;, \u0026ldquo;pop\u0026rdquo;]\n[[], [5], [7], [5], [7], [4], [5], [], [], [], []]\n輸出\n[null, null, null, null, null, null, null, 5, 7, 5, 4]\n說明\nFreqStack freqStack = new FreqStack(); freqStack.push(5); // The stack is [5] freqStack.push(7); // The stack is [5,7] freqStack.push(5); // The stack is [5,7,5] freqStack.push(7); // The stack is [5,7,5,7] freqStack.push(4); // The stack is [5,7,5,7,4] freqStack.push(5); // The stack is [5,7,5,7,4,5] freqStack.pop(); // return 5, as 5 is the most frequent. The stack becomes [5,7,5,7,4]. freqStack.pop(); // return 7, as 5 and 7 is the most frequent, but 7 is closest to the top. The stack becomes [5,7,5,4]. freqStack.pop(); // return 5, as 5 is the most frequent. The stack becomes [5,7,4]. freqStack.pop(); // return 4, as 4, 5 and 7 is the most frequent, but 4 is closest to the top. The stack becomes [5,7]. 解題 想法 在解題時，我打算在 push 時動手腳，將 push 的元素直接 push 到對的位置後，執行 pop 的動作時，就只要將最頂端的元素取出即可。 FreqStack freqStack = new FreqStack(); freqStack.push(5); // [5] freqStack.push(7); // [5,7] freqStack.push(5); // [5,7,5] freqStack.push(7); // [5,7,5,7] freqStack.push(4); // [5,7,5,7,4] // 此時 4 因為並非最頻繁的元素，所以要將 4 往下推，即變成 [5,7,4,5,7] freqStack.push(5); // [5,7,4,5,7,5] freqStack.pop(); // return 5, [5,7,4,5,7] freqStack.pop(); // return 7, [5,7,4,5] freqStack.pop(); // return 5, [5,7,4] freqStack.pop(); // return 4, [5,7] 為了實現以上的想法，我試想將出現次數相同的元素放在同一個 stack，取出時則從頻率最高的 stack 開始取，即為： freqStack[0] = [5,7,4] // 檢查元素是否出現在 freqStack[0] 否則則往freqStack[1] 移動 freqStack[1] = [5,7] freqStack[2] = [5] // pop 的時候，從freqStack[2] 開始取，空了則將 freqStack[2] 移除 實作1: List of Stacks public class freqStack{ // Field List\u0026lt;Stack\u0026lt;Integer\u0026gt;\u0026gt; stacks; // Constructor public freqStack(){ stacks = new ArrayList\u0026lt;\u0026gt;(); } // Methods public void push(int val){ push(val, 0); } private void push(int val, int freq){ // 當 stacks[freq] 是空的時候，則新建一個 stack。 Stack\u0026lt;Integer\u0026gt; stack; if (freq \u0026gt;= stacks.size()){ stack = new Stack\u0026lt;\u0026gt;(); stacks.add(stack); } else { stack = stacks.get(freq); } // 當該 stacks[freq] 已經有該元素，則往下一個 stacks 找 if (stack.contains(val)){ push(val, freq + 1); } else { stack.push(val); } } public int pop(){ // 直接找到最高的 stack，然後把頂端的元素 pop 出。 Stack\u0026lt;Integer\u0026gt; stack = stacks.get(stacks.size() - 1); int top = stack.pop(); if (stack.isEmpty()){ stacks.remove(stacks.size() - 1); } return top; } } 然而，此時 push 的 \bcomplexity 與欲 push 的元素的出現次數 n 有關，元素出現 n 次，則需要往下找 n 個 stack，也就是 \\(O(n)\\)。 實作2: Use HashMap to record freqency 為了優化，我們可以加入一個 HashMap 來記錄出現的次數，再下次要 push 此元素時，只需要到 HashMap 中查詢出現的次數即可。 public class freqStack{ // Field List\u0026lt;Stack\u0026lt;Integer\u0026gt;\u0026gt; stacks; Map\u0026lt;Integer, Integer\u0026gt; map; // 用來記錄出現次數 // Constructor public freqStack(){ stacks = new ArrayList\u0026lt;\u0026gt;(); map = new HashMap(); } // Methods public void push(int val){ Stack\u0026lt;Integer\u0026gt; stack; // 還沒有此出現次數的元素出現，則新增此 stack if (stacks.size() \u0026lt; map.getOrDefault(val, 0) + 1){ stack = new Stack\u0026lt;\u0026gt;(); } else { // 取得此元素出現的次數，若沒出現過則取得 stacks[0] stack = stacks.get(map.getOrDefault(val, 0)); } stack.push(val); map.put(val, map.getOrDefault(val, 0) + 1); // 更新出現次數 } public int pop(){ // 直接找到最高的 stack，然後把頂端的元素 pop 出。 Stack\u0026lt;Integer\u0026gt; stack = stacks.get(stacks.size() - 1); int top = stack.pop(); map.put(val, map.get(val) - 1); // 更新出現次數 if (stack.isEmpty()){ stacks.remove(stacks.size() - 1); } return top; } } 程式碼 題解：請點此 測試檔：請點此 Reference: Leetcode: 895. Maximum Frequency Stack\n","permalink":"https://intervalrain.github.io/leetcode/freqstack/","summary":"\u003ch1 id=\"題目\"\u003e題目\u003c/h1\u003e\n\u003ch2 id=\"題目描述\"\u003e題目描述\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e設計一個類似 stack 的資料結構，實行 \u003ccode\u003epush()\u003c/code\u003e 跟 \u003ccode\u003epop()\u003c/code\u003e 的功能，其中 \u003ccode\u003epop()\u003c/code\u003e 會丟出 stack 中出現最多次的元素。\u003c/li\u003e\n\u003cli\u003eFreqStack class 必須實現：\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eFreqStack()\u003c/code\u003e 建構子必須初始化一個空的 FreqStack。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003evoid push(int val)\u003c/code\u003e 將 \u003ccode\u003eval\u003c/code\u003e 推至 stack 的頂端。\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eint pop()\u003c/code\u003e 將 stack 中最頻繁出現的元素移除，並返回。\n\u003cul\u003e\n\u003cli\u003e如果 stack 中最頻繁出現的元素出現平手的狀況，則返回平手的元素中最接近 stack 頂端的元素。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"題目範例\"\u003e題目範例\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003e輸入\u003c/strong\u003e\u003cbr\u003e\n[\u0026ldquo;FreqStack\u0026rdquo;, \u0026ldquo;push\u0026rdquo;, \u0026ldquo;push\u0026rdquo;, \u0026ldquo;push\u0026rdquo;, \u0026ldquo;push\u0026rdquo;, \u0026ldquo;push\u0026rdquo;, \u0026ldquo;push\u0026rdquo;, \u0026ldquo;pop\u0026rdquo;, \u0026ldquo;pop\u0026rdquo;, \u0026ldquo;pop\u0026rdquo;, \u0026ldquo;pop\u0026rdquo;]\u003cbr\u003e\n[[], [5], [7], [5], [7], [4], [5], [], [], [], []]\u003cbr\u003e\n\u003cstrong\u003e輸出\u003c/strong\u003e\u003cbr\u003e\n[null, null, null, null, null, null, null, 5, 7, 5, 4]\u003c/p\u003e","title":"[Leetcode] Maximum Frequency Stack 最大頻率堆疊"},{"content":"1. 請說明 Final, Finally, Finalize 三者不同? Final: 一種修飾關鍵字。 加在變數前，使變數成為常數。 加在方法前，使方法無法被覆寫(override)。 加在類別前，使類別不能被繼承(extend)。 Finally: 例外處理關鍵字，Try-Catch-Finally 功能為保證一定執行，用意是做資源釋放。 Finalize: 是Object類別的方法，故所有物件都一定有此方法。 當物件要銷毀前會執行的方法，此外可以透過 System.gc() 呼叫資源回收。 2. 請說明 String 字串中 == 與 .equals() 哪裡不同? ==:\n比較儲存的值，基本型別(primitives)是儲存在 Stack 中，因此值會相同，字串是儲存在 String Pool 中，故 Stack 中存的是址。 使用 == 比較字串時，其實是比較他們的址。 equals():\n是 String 覆寫後的 equals 方法，比較值。 補充：\nJava 的字串有 String Pool 機制，當宣告一個新的字串時，Java 會先去 String Pool 中尋找是否有相同的字串，有則共用，無則新增。 若使用 String s1 = \u0026quot;Hello World\u0026quot;; 來宣告，則會透過字串池。 若使用 String s2 = new String(\u0026quot;Hello World\u0026quot;) 來宣告，則字串會存在 Heap 中，與上者的址不同。 3. 使用 \u0026ldquo;abc\u0026rdquo;.equals(s) 比較好還是 s.equals(\u0026ldquo;abc\u0026rdquo;)? 等效。 前者不會出現 NullPointerException。 4. Arrays 與 ArrayList 的差異? Arrays 可包含原始(primitive)及物件(object)，ArrayList只允許物件。 Arrays 大小固定，ArrayList 可動態調整。 ArrayList 提供許多方法，如 removeAll、iterator等。 5. stack 與 heap 的區別? stack: 可被預測生命週期的變數或函數資訊都放在 stack，例如：區域變數(local variable)、物件或陣列的返回位址(function/method return address)等資訊。 heap: 動態配置的記憶體空間，放置被 new 出來的物件以及內含的成員變數。 6. Arrays 與 String 的大小 Arrays 有 length 這個屬性。 String 有 legnth() 這個方法。 7. throw 與 throws 的區別 throws: throws 關鍵字通常被應用在聲明方法時，放在方法的大括號前，用來拋出異常，多個異常可以使用逗號隔開。後續使用者要調用方法時必須要拋出異常或者使用 try-catch 語句處理異常。 throw: throw 關鍵字通常用在設計方法時，預先宣告可能會產生的例外，後續方法使用者需要使用 try-catch 處理例外，或者使用 throws 關鍵字再拋出例外。 補充： throw 用於方法內，throws 用於方法的聲明。 throw 用於方法內拋出異常，throws 用於方法聲明上拋出異常。 throw 後面只能有一個異常，throws 可以聲明多個異常。 8. int 和 Integer 何者會占用更多記憶體? Integer，Integer 是一個物件，會在 heap 中儲存，並儲存址的值到 stack 中，而 int 只會保存值在 stack 中。 9. 是否能將 int 強制轉型為 byte? 可以，可以使用 b = (byte) a 來進行強制轉換，但是超過範圍的部分會被丟棄。 10. 是否能保證 gc 的執行? 否，垃報回收機制程式設計師無法保證，但可以透過 System.gc() 呼叫。 11. abstract class 與 interface 的區別? abstract class 可以宣告抽象方法，提供子類別實作。 interface 的方法必定是抽象方法。 一個類別可以繼承多個介面，但只能繼承一個抽象類別。 12. List 與 Set 區別? List: 有順序性(索引值)。 可重複。 ArrayList 實作了 List 介面。 ArrayList: 插入、刪除速度 \\(O(n)\\)，走訪速度\\(O(1)\\)。 \bLinkedList: 插入、刪除速度 \\O(1)\\)，走訪速度\\(O(n)\\)。 Set 無順序性(配合 iterator) 不可重複，走訪速度\\(O(1)\\)。 HashSet 實作了 Set 介面。 HashSet: 無順序性，查找速度快。 LinkedHashSet: 有順序性 TreeSet: 有排序性(依字母) Map 1.有元素鍵值(Key-Value)，搜尋快 2.元素可重複，鍵值如果重複新加入值會覆蓋舊有值 3.HashMap: 查找速度慢，插入刪除速度快 4.TreeMap: 有排序性 ","permalink":"https://intervalrain.github.io/java/interviewq/","summary":"\u003ch3 id=\"1-請說明-final-finally-finalize-三者不同\"\u003e1. 請說明 Final, Finally, Finalize 三者不同?\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eFinal:\n\u003cul\u003e\n\u003cli\u003e一種修飾關鍵字。\u003c/li\u003e\n\u003cli\u003e加在\u003cstrong\u003e變數\u003c/strong\u003e前，使變數成為常數。\u003c/li\u003e\n\u003cli\u003e加在\u003cstrong\u003e方法\u003c/strong\u003e前，使方法無法被覆寫(override)。\u003c/li\u003e\n\u003cli\u003e加在\u003cstrong\u003e類別\u003c/strong\u003e前，使類別不能被繼承(extend)。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eFinally:\n\u003cul\u003e\n\u003cli\u003e例外處理關鍵字，Try-Catch-Finally\u003c/li\u003e\n\u003cli\u003e功能為\u003cstrong\u003e保證一定執行\u003c/strong\u003e，用意是做資源釋放。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eFinalize:\n\u003cul\u003e\n\u003cli\u003e是Object類別的方法，故所有物件都一定有此方法。\u003c/li\u003e\n\u003cli\u003e當物件要銷毀前會執行的方法，此外可以透過 \u003ccode\u003eSystem.gc()\u003c/code\u003e 呼叫資源回收。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"2-請說明-string-字串中--與-equals-哪裡不同\"\u003e2. 請說明 String 字串中 == 與 .equals() 哪裡不同?\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e==:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e比較儲存的值，基本型別(primitives)是儲存在 Stack 中，因此值會相同，字串是儲存在 String Pool 中，故 Stack 中存的是\u003cstrong\u003e址\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e使用 \u003ccode\u003e==\u003c/code\u003e 比較字串時，其實是比較他們的\u003cstrong\u003e址\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eequals():\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e是 String 覆寫後的 equals 方法，比較值。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e補充：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eJava 的字串有 String Pool 機制，當宣告一個新的字串時，Java 會先去 String Pool 中尋找是否有相同的字串，有則共用，無則新增。\n\u003cul\u003e\n\u003cli\u003e若使用 \u003ccode\u003eString s1 = \u0026quot;Hello World\u0026quot;;\u003c/code\u003e 來宣告，則會透過字串池。\u003c/li\u003e\n\u003cli\u003e若使用 \u003ccode\u003eString s2 = new String(\u0026quot;Hello World\u0026quot;)\u003c/code\u003e 來宣告，則字串會存在 Heap 中，與上者的址不同。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"3-使用-abcequalss-比較好還是-sequalsabc\"\u003e3. 使用 \u0026ldquo;abc\u0026rdquo;.equals(s) 比較好還是 s.equals(\u0026ldquo;abc\u0026rdquo;)?\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e等效。\u003c/li\u003e\n\u003cli\u003e前者不會出現 NullPointerException。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"4-arrays-與-arraylist-的差異\"\u003e4. Arrays 與 ArrayList 的差異?\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eArrays 可包含原始(primitive)及物件(object)，ArrayList只允許物件。\u003c/li\u003e\n\u003cli\u003eArrays 大小固定，ArrayList 可動態調整。\u003c/li\u003e\n\u003cli\u003eArrayList 提供許多方法，如 removeAll、iterator等。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"5-stack-與-heap-的區別\"\u003e5. stack 與 heap 的區別?\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003estack: 可被預測生命週期的變數或函數資訊都放在 stack，例如：區域變數(local variable)、物件或陣列的返回位址(function/method return address)等資訊。\u003c/li\u003e\n\u003cli\u003eheap: 動態配置的記憶體空間，放置被 new 出來的物件以及內含的成員變數。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"6-arrays-與-string-的大小\"\u003e6. Arrays 與 String 的大小\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eArrays 有 length 這個屬性。\u003c/li\u003e\n\u003cli\u003eString 有 legnth() 這個方法。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"7-throw-與-throws-的區別\"\u003e7. throw 與 throws 的區別\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003ethrows: throws 關鍵字通常被應用在聲明方法時，放在方法的大括號前，用來拋出異常，多個異常可以使用逗號隔開。後續使用者要調用方法時必須要拋出異常或者使用 try-catch 語句處理異常。\u003c/li\u003e\n\u003cli\u003ethrow: throw 關鍵字通常用在設計方法時，預先宣告可能會產生的例外，後續方法使用者需要使用 try-catch 處理例外，或者使用 throws 關鍵字再拋出例外。\u003c/li\u003e\n\u003cli\u003e補充：\n\u003cul\u003e\n\u003cli\u003ethrow 用於方法內，throws 用於方法的聲明。\u003c/li\u003e\n\u003cli\u003ethrow 用於方法內拋出異常，throws 用於方法聲明上拋出異常。\u003c/li\u003e\n\u003cli\u003ethrow 後面只能有一個異常，throws 可以聲明多個異常。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"8-int-和-integer-何者會占用更多記憶體\"\u003e8. int 和 Integer 何者會占用更多記憶體?\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eInteger，Integer 是一個物件，會在 heap 中儲存，並儲存址的值到 stack 中，而 int 只會保存值在 stack 中。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"9-是否能將-int-強制轉型為-byte\"\u003e9. 是否能將 int 強制轉型為 byte?\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e可以，可以使用 \u003ccode\u003eb = (byte) a\u003c/code\u003e 來進行強制轉換，但是超過範圍的部分會被丟棄。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"10-是否能保證-gc-的執行\"\u003e10. 是否能保證 gc 的執行?\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e否，垃報回收機制程式設計師無法保證，但可以透過 \u003ccode\u003eSystem.gc()\u003c/code\u003e 呼叫。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"11-abstract-class-與-interface-的區別\"\u003e11. abstract class 與 interface 的區別?\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eabstract class 可以宣告抽象方法，提供子類別實作。\u003c/li\u003e\n\u003cli\u003einterface 的方法必定是抽象方法。\u003c/li\u003e\n\u003cli\u003e一個類別可以繼承多個介面，但只能繼承一個抽象類別。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"12-list-與-set-區別\"\u003e12. List 與 Set 區別?\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eList:\n\u003col\u003e\n\u003cli\u003e有順序性(索引值)。\u003c/li\u003e\n\u003cli\u003e可重複。\u003c/li\u003e\n\u003cli\u003eArrayList 實作了 List 介面。\u003c/li\u003e\n\u003cli\u003eArrayList: 插入、刪除速度 \\(O(n)\\)，走訪速度\\(O(1)\\)。\u003c/li\u003e\n\u003cli\u003e\bLinkedList: 插入、刪除速度 \\O(1)\\)，走訪速度\\(O(n)\\)。\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003eSet\n\u003col\u003e\n\u003cli\u003e無順序性(配合 iterator)\u003c/li\u003e\n\u003cli\u003e不可重複，走訪速度\\(O(1)\\)。\u003c/li\u003e\n\u003cli\u003eHashSet 實作了 Set 介面。\u003c/li\u003e\n\u003cli\u003eHashSet: 無順序性，查找速度快。\u003c/li\u003e\n\u003cli\u003eLinkedHashSet: 有順序性\u003c/li\u003e\n\u003cli\u003eTreeSet: 有排序性(依字母)\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003eMap\n1.有元素鍵值(Key-Value)，搜尋快\n2.元素可重複，鍵值如果重複新加入值會覆蓋舊有值\n3.HashMap: 查找速度慢，插入刪除速度快\n4.TreeMap: 有排序性\u003c/li\u003e\n\u003c/ul\u003e","title":"[Java] 面試常見問題"},{"content":"C 當我們要去評價程式碼的品質時，我們會考慮以下元素： 正確性(correctness): 程式碼是否有正確的解決我們的問題 設計(design): 程式碼的好壞決定於它的效率與可讀性 風格(style): 程式碼在視覺上是否有良好的format 我們的第一個 C 語言程式： #include \u0026lt;stdio.h\u0026gt; int main(void) { printf(\u0026#34;hello, world\\n\u0026#34;); } 整合開發環境、編譯器、介面 IDEs, compilers, interfaces 在執行程式前，我們必須將程式碼轉變成電腦可讀的 binary codes，也就是 0 與 1。 IDE(integrated development environments) 可以協助我們開發、編譯程式碼。如Visual Studio Code 我們撰寫的程式碼為開源碼(source code)，我們必須將他轉變成機器碼(machine code)，才能被電腦執行。 編譯器(compiler)是將一種語言轉變成另一種語言的程式，例如將開源碼編譯成機器碼。 在 IDE 中，我們可以在一個叫作 terminal 的視窗中輸入指令。 terminal 提供了 command-line interface(CLI) 當我們輸入 make hello，會產生一個叫作 hello 的檔案，我們可以透過輸入 ./hello 執行它。 . 代表當下的目錄，上面的指令代表我們要執行當下目錄中叫作 hello 的檔案。 hello 即是內含機器碼的檔案。 欲刪除檔案可以用 rm 指令。 輸入 ls 列出當下目錄所包含的檔案。 若源碼檔經過修過，則必須重新編譯，才能對執行檔進行修改。 函式、引數、傳回值、變數 Functions, Arguments, Return Values, Variables printf(\u0026#34;Hello, world\u0026#34;); 此處，介紹一個叫作 printf 的函數 f 代表 formatted 的字串。字串是多個字元(characters)組成的字詞，在 C 中，我們需要用雙引號(\u0026quot;\u0026quot;)來包住它。 括號 () 使我們可以輸入引數，也就是 printf 函數的 input。 最後，我們需要分號 ;，來宣告述句的結束。 其中，函式的一種產物叫作 side effect，也就是我們可以觀察到的變化，如螢幕印出字樣，或是發出聲響。 相比與 **side effects，我們也可以將函式的回傳值用於程式中，回傳值通被儲存於變數中。 string answer = get_string(\u0026#34;What\u0026#39;s your name? \u0026#34;); 此處，示範 CS50 IDE 中的一個函數。 這裡的 get_string為函式，而What's your name? 為引數。 然後，我們可以將回傳值存入到變數中，以上例，我們可利用賦值運算子(=)將右值(r_value)傳給左值(l_value)的answer。 最後，我們宣告變數的變數型別(type)。 如果我們嘗試將上述的變數改為其他變數型別，編譯器會顯示錯誤。 printf(\u0026#34;Hello, world\\n\u0026#34;); 我們此處為了換行，而使用了 escape sequence \\n。 ","permalink":"https://intervalrain.github.io/cs50/lec1/","summary":"\u003ch1 id=\"c\"\u003eC\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e當我們要去評價程式碼的品質時，我們會考慮以下元素：\n\u003cul\u003e\n\u003cli\u003e正確性(correctness): 程式碼是否有正確的解決我們的問題\u003c/li\u003e\n\u003cli\u003e設計(design): 程式碼的好壞決定於它的\u003cstrong\u003e效率\u003c/strong\u003e與\u003cstrong\u003e可讀性\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e風格(style): 程式碼在視覺上是否有良好的format\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e我們的第一個 C 語言程式：\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C\" data-lang=\"C\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;hello, world\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1 id=\"整合開發環境編譯器介面-ides-compilers-interfaces\"\u003e整合開發環境、編譯器、介面 IDEs, compilers, interfaces\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e在執行程式前，我們必須將程式碼轉變成電腦可讀的 binary codes，也就是 0 與 1。\u003c/li\u003e\n\u003cli\u003eIDE(integrated development environments) 可以協助我們開發、編譯程式碼。如\u003ca href=\"https://en.wikipedia.org/wiki/Visual_Studio_Code\"\u003eVisual Studio Code\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e我們撰寫的程式碼為開源碼(source code)，我們必須將他轉變成機器碼(machine code)，才能被電腦執行。\u003c/li\u003e\n\u003cli\u003e編譯器(compiler)是將一種語言轉變成另一種語言的程式，例如將開源碼編譯成機器碼。\u003c/li\u003e\n\u003cli\u003e在 IDE 中，我們可以在一個叫作 \u003cstrong\u003eterminal\u003c/strong\u003e 的視窗中輸入指令。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eterminal\u003c/strong\u003e 提供了 command-line interface(CLI)\u003c/li\u003e\n\u003cli\u003e當我們輸入 \u003ccode\u003emake hello\u003c/code\u003e，會產生一個叫作 \u003cstrong\u003ehello\u003c/strong\u003e 的檔案，我們可以透過輸入 \u003ccode\u003e./hello\u003c/code\u003e 執行它。\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e.\u003c/code\u003e 代表當下的目錄，上面的指令代表我們要執行當下目錄中叫作 \u003cstrong\u003ehello\u003c/strong\u003e 的檔案。\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ehello\u003c/strong\u003e 即是內含機器碼的檔案。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e欲刪除檔案可以用 \u003ccode\u003erm\u003c/code\u003e 指令。\u003c/li\u003e\n\u003cli\u003e輸入 \u003ccode\u003els\u003c/code\u003e 列出當下目錄所包含的檔案。\u003c/li\u003e\n\u003cli\u003e若源碼檔經過修過，則必須重新編譯，才能對執行檔進行修改。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"函式引數傳回值變數-functions-arguments-return-values-variables\"\u003e函式、引數、傳回值、變數 Functions, Arguments, Return Values, Variables\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C\" data-lang=\"C\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Hello, world\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e此處，介紹一個叫作 \u003ccode\u003eprintf\u003c/code\u003e 的函數\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ef\u003c/code\u003e 代表 \u003cstrong\u003eformatted\u003c/strong\u003e 的字串。字串是多個字元(characters)組成的字詞，在 C 中，我們需要用雙引號(\u003ccode\u003e\u0026quot;\u0026quot;\u003c/code\u003e)來包住它。\u003c/li\u003e\n\u003cli\u003e括號 \u003ccode\u003e()\u003c/code\u003e 使我們可以輸入引數，也就是 printf 函數的 \u003cstrong\u003einput\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003e最後，我們需要分號 \u003ccode\u003e;\u003c/code\u003e，來宣告述句的結束。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e其中，函式的一種產物叫作 \u003cstrong\u003eside effect\u003c/strong\u003e，也就是我們可以觀察到的變化，如螢幕印出字樣，或是發出聲響。\u003c/li\u003e\n\u003cli\u003e相比與 **side effects，我們也可以將函式的回傳值用於程式中，回傳值通被儲存於變數中。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C\" data-lang=\"C\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003estring answer \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eget_string\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;What\u0026#39;s your name? \u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e此處，示範 CS50 IDE 中的一個函數。\n\u003cul\u003e\n\u003cli\u003e這裡的 \u003ccode\u003eget_string\u003c/code\u003e為函式，而\u003ccode\u003eWhat's your name? \u003c/code\u003e 為引數。\u003c/li\u003e\n\u003cli\u003e然後，我們可以將回傳值存入到變數中，以上例，我們可利用賦值運算子(\u003ccode\u003e=\u003c/code\u003e)將右值(r_value)傳給左值(l_value)的\u003ccode\u003eanswer\u003c/code\u003e。\u003c/li\u003e\n\u003cli\u003e最後，我們宣告變數的\u003cstrong\u003e變數型別(type)\u003c/strong\u003e。\n\u003cul\u003e\n\u003cli\u003e如果我們嘗試將上述的變數改為其他變數型別，編譯器會顯示錯誤。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C\" data-lang=\"C\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Hello, world\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e我們此處為了換行，而使用了 \u003ccode\u003eescape sequence\u003c/code\u003e \u003ccode\u003e\\n\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e","title":"[CS50] Lec 1 - C"},{"content":"1. transient 的作用及使用方法 當一個物件繼承(implements)了 Serializable 介面，這個物件就可以被序列化，Java 的序列化模式為開發者提供了許多便利，開發者可以不必關心具體序列化的過程，只要繼承了 Serializable 介面，該類別(class)的所有屬性(property)和方法(method)都會自動序列化。 然而在實際開發過程中，有些屬性需要序列化，有些屬性則不需要。 用戶的私密訊息如密碼、銀行帳號等，通常不希望在網路操作時被傳輸。 此時，便可在這些對應的變數前加上 transient。 如此一來，這些私密訊息的生命週期只會存在於調用者的記憶體(memory)中，不會寫到磁碟(disk)裡。 注意讀取時，讀取數據的順序一定要和存放數據的順序保持一致。\n範例： import java.io.FileInputStream; import java.io.FileNotFoundException; import java.io.FileOutputStream; import java.io.IOException; import java.io.ObjectInputStream; import java.io.ObjectOutput; import java.io.ObjectOutputStream; import java.io.Serializable; public class TransientExample { public static void main(String[] args){ User user = new User(); user.setUsername(\u0026#34;Rain\u0026#34;); user.setPassword(\u0026#34;12345678\u0026#34;); System.out.println(\u0026#34;Read before Serializable: \u0026#34;); System.out.println(\u0026#34;Username: \u0026#34; + user.getUsername()); System.out.println(\u0026#34;Password: \u0026#34; + user.getPassword()); try { ObjectOutput os = new ObjectOutputStream(new FileOutputStream(\u0026#34;/Users/rainhu/workspace/algo/temp/user.txt\u0026#34;)); os.writeObject(user); os.flush(); os.close(); } catch (FileNotFoundException e){ e.printStackTrace(); } catch (IOException e){ e.printStackTrace(); } try { ObjectInputStream is = new ObjectInputStream(new FileInputStream(\u0026#34;/Users/rainhu/workspace/algo/temp/user.txt\u0026#34;)); user = (User) is.readObject(); is.close(); System.out.println(\u0026#34;Read after Serializable: \u0026#34;); System.out.println(\u0026#34;Username: \u0026#34; + user.getUsername()); System.out.println(\u0026#34;Password: \u0026#34; + user.getPassword()); } catch (FileNotFoundException e){ e.printStackTrace(); } catch (IOException e){ e.printStackTrace(); } catch (ClassNotFoundException e){ e.printStackTrace(); } } } class User implements Serializable{ private static final long serialVersionID = 8294180014912103005L; private String username; private transient String password; public String getUsername(){ return username; } public void setUsername(String username){ this.username = username; } public String getPassword(){ return password; } public void setPassword(String password){ this.password = password; } } 輸出的結果是： Read before Serializable:\nUsername: Rain\nPassword: 12345678\nRead after Serializable:\nUsername: Rain\nPassword: null\n也就是說反序列化並沒有成功從文件獲取到訊息。 2. transient 的小結 一旦變數被 transient 修飾，變數將不再是物件持久化的一部分，該變敗內容將在序列化後無法再次訪問。 transient 關鍵字只能飾飾變數(variable)，不能修飾方法(method)和類別(class)。注意，區域變數是無法被 transient 修飾的。 被 transient 修飾的變數不能再被序列化，一個靜態變數不管是否被 transient 修飾，都不能被序列化。 其中，在上例中的 username 帶有 static 關鍵字，實際上是沒有被序列化的，也就是說我們在讀取之前改變 username 的值，讀取完並不會改變 username 的值，而是 JVM 中對應靜態變數的值。 3. 當遇上了 Externalizable 當被 transient 修飾的變數在存於一個繼承了 Externalizable 的介面，則代表沒有任何東西被自動序列化。 需要在 writeExternal方法中手工指定所要序列化的變數，這與是否被 transient 修飾無關。 ","permalink":"https://intervalrain.github.io/java/transient/","summary":"\u003ch1 id=\"1-transient-的作用及使用方法\"\u003e1. transient 的作用及使用方法\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e當一個物件繼承(implements)了 Serializable 介面，這個物件就可以被序列化，Java 的序列化模式為開發者提供了許多便利，開發者可以不必關心具體序列化的過程，只要繼承了 Serializable 介面，該類別(class)的所有屬性(property)和方法(method)都會自動序列化。\u003c/li\u003e\n\u003cli\u003e然而在實際開發過程中，有些屬性需要序列化，有些屬性則不需要。\n\u003cul\u003e\n\u003cli\u003e用戶的私密訊息如密碼、銀行帳號等，通常不希望在網路操作時被傳輸。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e此時，便可在這些對應的變數前加上 transient。\u003c/li\u003e\n\u003cli\u003e如此一來，這些私密訊息的生命週期只會存在於調用者的記憶體(memory)中，不會寫到磁碟(disk)裡。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e注意讀取時，讀取數據的順序一定要和存放數據的順序保持一致。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e範例：\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Java\" data-lang=\"Java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e java.io.FileInputStream;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e java.io.FileNotFoundException;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e java.io.FileOutputStream;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e java.io.IOException;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e java.io.ObjectInputStream;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e java.io.ObjectOutput;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e java.io.ObjectOutputStream;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e java.io.Serializable;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eTransientExample\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(String\u003cspan style=\"color:#f92672\"\u003e[]\u003c/span\u003e args){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        User user \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e User();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        user.\u003cspan style=\"color:#a6e22e\"\u003esetUsername\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Rain\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        user.\u003cspan style=\"color:#a6e22e\"\u003esetPassword\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;12345678\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        System.\u003cspan style=\"color:#a6e22e\"\u003eout\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eprintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Read before Serializable: \u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        System.\u003cspan style=\"color:#a6e22e\"\u003eout\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eprintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Username: \u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e user.\u003cspan style=\"color:#a6e22e\"\u003egetUsername\u003c/span\u003e());\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        System.\u003cspan style=\"color:#a6e22e\"\u003eout\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eprintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Password: \u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e user.\u003cspan style=\"color:#a6e22e\"\u003egetPassword\u003c/span\u003e());\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003etry\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            ObjectOutput os \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e ObjectOutputStream(\u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e FileOutputStream(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/Users/rainhu/workspace/algo/temp/user.txt\u0026#34;\u003c/span\u003e));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            os.\u003cspan style=\"color:#a6e22e\"\u003ewriteObject\u003c/span\u003e(user);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            os.\u003cspan style=\"color:#a6e22e\"\u003eflush\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            os.\u003cspan style=\"color:#a6e22e\"\u003eclose\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        } \u003cspan style=\"color:#66d9ef\"\u003ecatch\u003c/span\u003e (FileNotFoundException e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            e.\u003cspan style=\"color:#a6e22e\"\u003eprintStackTrace\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        } \u003cspan style=\"color:#66d9ef\"\u003ecatch\u003c/span\u003e (IOException e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            e.\u003cspan style=\"color:#a6e22e\"\u003eprintStackTrace\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003etry\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            ObjectInputStream is \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e ObjectInputStream(\u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e FileInputStream(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/Users/rainhu/workspace/algo/temp/user.txt\u0026#34;\u003c/span\u003e));\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            user \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (User) is.\u003cspan style=\"color:#a6e22e\"\u003ereadObject\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            is.\u003cspan style=\"color:#a6e22e\"\u003eclose\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            System.\u003cspan style=\"color:#a6e22e\"\u003eout\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eprintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Read after Serializable: \u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            System.\u003cspan style=\"color:#a6e22e\"\u003eout\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eprintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Username: \u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e user.\u003cspan style=\"color:#a6e22e\"\u003egetUsername\u003c/span\u003e());\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            System.\u003cspan style=\"color:#a6e22e\"\u003eout\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eprintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Password: \u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e user.\u003cspan style=\"color:#a6e22e\"\u003egetPassword\u003c/span\u003e());\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        } \u003cspan style=\"color:#66d9ef\"\u003ecatch\u003c/span\u003e (FileNotFoundException e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            e.\u003cspan style=\"color:#a6e22e\"\u003eprintStackTrace\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        } \u003cspan style=\"color:#66d9ef\"\u003ecatch\u003c/span\u003e (IOException e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            e.\u003cspan style=\"color:#a6e22e\"\u003eprintStackTrace\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        } \u003cspan style=\"color:#66d9ef\"\u003ecatch\u003c/span\u003e (ClassNotFoundException e){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            e.\u003cspan style=\"color:#a6e22e\"\u003eprintStackTrace\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eUser\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eimplements\u003c/span\u003e Serializable{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efinal\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003elong\u003c/span\u003e serialVersionID \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 8294180014912103005L;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e String username;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003etransient\u003c/span\u003e String password;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e String \u003cspan style=\"color:#a6e22e\"\u003egetUsername\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e username;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esetUsername\u003c/span\u003e(String username){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eusername\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e username;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e String \u003cspan style=\"color:#a6e22e\"\u003egetPassword\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e password;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esetPassword\u003c/span\u003e(String password){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003epassword\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e password;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e輸出的結果是：\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003eRead before Serializable:\u003cbr\u003e\nUsername: Rain\u003cbr\u003e\nPassword: 12345678\u003cbr\u003e\nRead after Serializable:\u003cbr\u003e\nUsername: Rain\u003cbr\u003e\nPassword: null\u003c/p\u003e","title":"[Java] transient 關鍵字"},{"content":"Mismatch 的重要性 Mismatch 就是當元件的結構設計相同，且尺寸相等，發生性質差異的一種行為。 當尺寸漸縮，變異(viriability)的程度會愈來愈大。 變異(viriability)變大會影響到類比邏輯應用的表現。 Variability/Fluctuation 變異度/誤差定義 元件的單體量測值到整體的 Stardard Target 或 Median 的差距。 可分為系統誤差與隨機誤差。 Systematic variability 系統誤差 (Global) 外質特性(extrinsic) 可以透過製程改良或控制來改善 W2W: 裝置穩定度 equipment stability Wafer level: 裝置均勻度 equipment uniformity、黃光穩定度 Litho. stability Die level: 黃光均勻度 Litho. uniformity、溫度均勻度 temp. non-uniformity pattern density like poly gate density might impact temperature uniformity Layout-Dependent: 光學偏移效應 Optical proximity effect、機械應力 Mechanical stress Random variability 隨機誤差 (Local/Mismatch) 本質特性(intrinsic) 較難被改善 沒有空間相關性 尺寸漸縮，比例可能被放大 微擾動: 參雜 dopant, LER, \u0026hellip; random dopant fluctuation(RDF): dopant diffuse randomly gate dieletric roughness line edge roughness(LER) grain irregularity 統計手法 常態分佈 大部分的元件特性都呈常態分布(normal distribution) 中央極限定理 Advanced Central Limit Therem: 相互獨立的隨機變數, 其均值以常態分佈為極限 Sum of normally distributed random variables: 常態分佈的線性組合依然是常態分布 可簡單透過 median 與 sigma 來描述一組數據, 並用來預測數據 常態分布的函數式為 \\(f(x)=\\frac{1}{\\sqrt{2\\pi}\\sigma}e^{-\\frac{(x-u)^2}{2\\sigma^2}}\\) 分析手法 透過刪減 outlier 使 rawdata 盡量接近常態分布 (刪除 3倍 sigma 以外的 outlier，重複 6 次) 通常 Full mapping 量測(66pts) 會有 0~2 點的 outliers 數學公式: A = B + C 且 B 與 C 為不相依的變數時 \\((\\sigma_A)^2=(\\sigma_B)^2+(\\sigma_C)^2\\) $$(\\sigma_{total})^2=(\\sigma_{global})^2+(\\sigma_{local})^2$$ Total: \\(\\sigma(\\text{Vt1,Vt2,\u0026hellip;Vtn})\\) in wafer Global: \\((\\sigma_{total})^2=(\\sigma_{global})^2+(\\sigma_{local})^2\\) \\(\\text{Median(Vt1,Vt2,\u0026hellip;Vtn)}\\) \\(\\sigma(\\text{Med1,Med2,\u0026hellip;Medn})\\) Local: \\(\\sigma(\\text{Vt1,Vt2,\u0026hellip;Vtn})\\) in die local = \\(\\sqrt{\\frac{\\sum\\sigma_i}{n}})\\) mismatch = \\(\\sigma(\\Delta\\text{Vt1},\\Delta\\text{Vt2},\u0026hellip;\\Delta\\text{Vtn})\\) Mismatch量測 量測 Full mapping data 將同個 die 裡面的 device pair(the same W \u0026amp; L) 計算差值 \\(\\Delta\\text{Vt}=Vt1-Vt2\\) \\(\\Delta\\text{Ion}=\\frac{2\\times(\\text{Ion}_1-\\text{Ion}_2)}{\\text{Ion}_1+\\text{Ion}_2}\\) Normalization 同一組 device pair 內，去除 outlier，使數據接近常態分佈 因為 mismatch 受 sacle 影響，故須對 scale 做正常化 1/sqrt(WL)，Standard variation of mismatch is proportional to inverse of square root of area. Draw \\(\\Delta\\text{Vt}-\\frac{1}{\\sqrt{W/L}}\\)圖 斜率即為 Mismatch ","permalink":"https://intervalrain.github.io/device/mismatch/","summary":"\u003ch1 id=\"mismatch-的重要性\"\u003eMismatch 的重要性\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMismatch 就是當元件的結構設計相同，且尺寸相等，發生性質差異的一種行為。\u003c/li\u003e\n\u003cli\u003e當尺寸漸縮，變異(viriability)的程度會愈來愈大。\u003c/li\u003e\n\u003cli\u003e變異(viriability)變大會影響到類比邏輯應用的表現。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"variabilityfluctuation-變異度誤差定義\"\u003eVariability/Fluctuation 變異度/誤差定義\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e元件的單體量測值到整體的 Stardard Target 或 Median 的差距。\u003c/li\u003e\n\u003cli\u003e可分為\u003cstrong\u003e系統誤差\u003c/strong\u003e與\u003cstrong\u003e隨機誤差\u003c/strong\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"systematic-variability-系統誤差-global\"\u003eSystematic variability 系統誤差 (Global)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e外質特性(extrinsic)\u003c/li\u003e\n\u003cli\u003e可以透過製程改良或控制來改善\n\u003cul\u003e\n\u003cli\u003eW2W: 裝置穩定度 equipment stability\u003c/li\u003e\n\u003cli\u003eWafer level: 裝置均勻度 equipment uniformity、黃光穩定度 Litho. stability\u003c/li\u003e\n\u003cli\u003eDie level: 黃光均勻度 Litho. uniformity、溫度均勻度 temp. non-uniformity\n\u003cul\u003e\n\u003cli\u003epattern density like poly gate density might impact temperature uniformity\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eLayout-Dependent: 光學偏移效應 Optical proximity effect、機械應力 Mechanical stress\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"random-variability-隨機誤差-localmismatch\"\u003eRandom variability 隨機誤差 (Local/Mismatch)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e本質特性(intrinsic)\u003c/li\u003e\n\u003cli\u003e較難被改善\u003c/li\u003e\n\u003cli\u003e沒有空間相關性\u003c/li\u003e\n\u003cli\u003e尺寸漸縮，比例可能被放大\n\u003cul\u003e\n\u003cli\u003e微擾動: 參雜 dopant, LER, \u0026hellip;\n\u003cul\u003e\n\u003cli\u003erandom dopant fluctuation(RDF): dopant diffuse randomly\u003c/li\u003e\n\u003cli\u003egate dieletric roughness\u003c/li\u003e\n\u003cli\u003eline edge roughness(LER)\u003c/li\u003e\n\u003cli\u003egrain irregularity\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"統計手法\"\u003e統計手法\u003c/h2\u003e\n\u003ch3 id=\"常態分佈\"\u003e常態分佈\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e大部分的元件特性都呈常態分布(normal distribution)\u003c/li\u003e\n\u003cli\u003e中央極限定理 Advanced Central Limit Therem: 相互獨立的隨機變數, 其均值以常態分佈為極限\u003c/li\u003e\n\u003cli\u003eSum of normally distributed random variables: 常態分佈的線性組合依然是常態分布\u003c/li\u003e\n\u003cli\u003e可簡單透過 median 與 sigma 來描述一組數據, 並用來預測數據\u003c/li\u003e\n\u003cli\u003e常態分布的函數式為 \\(f(x)=\\frac{1}{\\sqrt{2\\pi}\\sigma}e^{-\\frac{(x-u)^2}{2\\sigma^2}}\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"分析手法\"\u003e分析手法\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e透過刪減 outlier 使 rawdata 盡量接近常態分布 (刪除 3倍 sigma 以外的 outlier，重複 6 次)\u003c/li\u003e\n\u003cli\u003e通常 Full mapping 量測(66pts) 會有 0~2 點的 outliers\u003c/li\u003e\n\u003cli\u003e數學公式: A = B + C 且 B 與 C 為不相依的變數時 \\((\\sigma_A)^2=(\\sigma_B)^2+(\\sigma_C)^2\\)\n$$(\\sigma_{total})^2=(\\sigma_{global})^2+(\\sigma_{local})^2$$\u003c/li\u003e\n\u003cli\u003eTotal:\n\u003cul\u003e\n\u003cli\u003e\\(\\sigma(\\text{Vt1,Vt2,\u0026hellip;Vtn})\\) in wafer\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eGlobal:\n\u003cul\u003e\n\u003cli\u003e\\((\\sigma_{total})^2=(\\sigma_{global})^2+(\\sigma_{local})^2\\)\u003c/li\u003e\n\u003cli\u003e\\(\\text{Median(Vt1,Vt2,\u0026hellip;Vtn)}\\)\u003c/li\u003e\n\u003cli\u003e\\(\\sigma(\\text{Med1,Med2,\u0026hellip;Medn})\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eLocal:\n\u003cul\u003e\n\u003cli\u003e\\(\\sigma(\\text{Vt1,Vt2,\u0026hellip;Vtn})\\) in die\u003c/li\u003e\n\u003cli\u003elocal = \\(\\sqrt{\\frac{\\sum\\sigma_i}{n}})\\)\u003c/li\u003e\n\u003cli\u003emismatch = \\(\\sigma(\\Delta\\text{Vt1},\\Delta\\text{Vt2},\u0026hellip;\\Delta\\text{Vtn})\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"mismatch量測\"\u003eMismatch量測\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e量測 Full mapping data\u003c/li\u003e\n\u003cli\u003e將同個 die 裡面的 device pair(the same W \u0026amp; L) 計算差值\n\u003cul\u003e\n\u003cli\u003e\\(\\Delta\\text{Vt}=Vt1-Vt2\\)\u003c/li\u003e\n\u003cli\u003e\\(\\Delta\\text{Ion}=\\frac{2\\times(\\text{Ion}_1-\\text{Ion}_2)}{\\text{Ion}_1+\\text{Ion}_2}\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eNormalization\n\u003cul\u003e\n\u003cli\u003e同一組 device pair 內，去除 outlier，使數據接近常態分佈\u003c/li\u003e\n\u003cli\u003e因為 mismatch 受 sacle 影響，故須對 scale 做正常化 1/sqrt(WL)，Standard variation of mismatch is proportional to inverse of square root of area.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eDraw \\(\\Delta\\text{Vt}-\\frac{1}{\\sqrt{W/L}}\\)圖\n\u003cul\u003e\n\u003cli\u003e斜率即為 Mismatch\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","title":"[Device] Mismatch Introduction"},{"content":"如何初始化 vector 事先準備 #include \u0026lt;iostream\u0026gt; #include \u0026lt;vector\u0026gt; using namespace std; 1. 利用 push_back() 函式 vector\u0026lt;int\u0026gt; A; A.push_back(1); A.push_back(2); A.push_back(3); // A = [1,2,3] 2. 利用重載建構子(overloaded constructor) int size = 5; int fill = 2; vector\u0026lt;int\u0026gt; B(size, fill); // B = [2,2,2,2,2] 3. 將 array 傳給 vector 的建構子(-std=c++11) vector\u0026lt;int\u0026gt; C{1, 2, 3, 4, 5}; // C = [1,2,3,4,5] 4. 利用既有的 array int array[] = {1,2,3,4,5}; vector\u0026lt;int\u0026gt; D(array, array+4); // D = [1,2,3,4] 5. 利用既有的 vector vector\u0026lt;int\u0026gt; E(C.begin()+1, C.end()-3); // E = [2] 6. 利用 fill 函式 vector\u0026lt;int\u0026gt; F(6); fill(F.begin(), F.end(), 3); // F = [3,3,3,3,3,3] Reference\n","permalink":"https://intervalrain.github.io/c++/newvector/","summary":"\u003ch1 id=\"如何初始化-vector\"\u003e如何初始化 vector\u003c/h1\u003e\n\u003ch2 id=\"事先準備\"\u003e事先準備\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003e#include \u0026lt;iostream\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e#include \u0026lt;vector\u0026gt;\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eusing namespace std;\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"1-利用-push_back-函式\"\u003e1. 利用 push_back() 函式\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Cpp\" data-lang=\"Cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003evector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e A;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eA.push_back(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eA.push_back(\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eA.push_back(\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e);  \u003cspan style=\"color:#75715e\"\u003e// A = [1,2,3]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"2-利用重載建構子overloaded-constructor\"\u003e2. 利用重載建構子(overloaded constructor)\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Cpp\" data-lang=\"Cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e size \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e fill \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003evector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e B(size, fill);  \u003cspan style=\"color:#75715e\"\u003e// B = [2,2,2,2,2]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"3-將-array-傳給-vector-的建構子-stdc11\"\u003e3. 將 array 傳給 vector 的建構子(-std=c++11)\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Cpp\" data-lang=\"Cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003evector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e C{\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e};  \u003cspan style=\"color:#75715e\"\u003e// C = [1,2,3,4,5]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"4-利用既有的-array\"\u003e4. 利用既有的 array\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Cpp\" data-lang=\"Cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e array[] \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e,\u003cspan style=\"color:#ae81ff\"\u003e5\u003c/span\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003evector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e D(array, array\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e);   \u003cspan style=\"color:#75715e\"\u003e// D = [1,2,3,4]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"5-利用既有的-vector\"\u003e5. 利用既有的 vector\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Cpp\" data-lang=\"Cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003evector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e E(C.begin()\u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, C.end()\u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e);   \u003cspan style=\"color:#75715e\"\u003e// E = [2]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"6-利用-fill-函式\"\u003e6. 利用 fill 函式\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Cpp\" data-lang=\"Cpp\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003evector\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e F(\u003cspan style=\"color:#ae81ff\"\u003e6\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003efill(F.begin(), F.end(), \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e);   \u003cspan style=\"color:#75715e\"\u003e// F = [3,3,3,3,3,3]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ca href=\"https://www.simplilearn.com/tutorials/cpp-tutorial/how-to-initialize-a-vector-in-cpp\"\u003eReference\u003c/a\u003e\u003c/p\u003e","title":"[C++] How to Initialize vector in C++"},{"content":"Integer.bitCount 的函式解析 要計算整數以二進制的方式表示時，所有 bit 位為 1 的總和。 雛形 從低位開始，檢查是否為 1。 public static int bitCount(int i){ int count = 0; while (i \u0026gt; 0) { if ((i \u0026amp; 1) == 1) // 如果最低位為 1，count就加 1 count++; i \u0026gt;\u0026gt;= 1; // 向右推進 1 位，等同於 num /= 2; } return count; } 時間複雜度為 \\(O(n)\\)，\\(n\\) 為整數的位數(bit 數)。 優化 利用(i - 1) \u0026amp; i 可以消除最低位數的 1 的性質來計算。 public static bitCount(int i){ int count = 0; while (i \u0026gt; 0){ i = i \u0026amp; (i - 1); // 0b0101_1100 - 1 = 0b0101_1011, 且 0b0101_1100 \u0026amp; 0b0101_1011 = 0b0101_1000; count++; } return count; } 時間複雜度為 \\(O(n))\\)，\\(n\\) 為位數為 1 的個數。 利用 int 的特性再優化 \b因為 int 的最大正整數為 2^31，故我們可以兩兩錯位相加來求和 private static int bitCount(int i){ i = (i \u0026amp; 0x55555555) + ((i \u0026gt;\u0026gt;\u0026gt; 1) \u0026amp; 0x55555555); // 0b0101_0101_0101_0101_0101_0101_0101_0101 i = (i \u0026amp; 0x33333333) + ((i \u0026gt;\u0026gt;\u0026gt; 2) \u0026amp; 0x33333333); // 0b0011_0011_0011_0011_0011_0011_0011_0011 i = (i \u0026amp; 0x0f0f0f0f) + ((i \u0026gt;\u0026gt;\u0026gt; 4) \u0026amp; 0x0f0f0f0f); // 0b0000_1111_0000_1111_0000_1111_0000_1111 i = (i \u0026amp; 0x00ff00ff) + ((i \u0026gt;\u0026gt;\u0026gt; 8) \u0026amp; 0x00ff00ff); // 0b0000_0000_1111_1111_0000_0000_1111_1111 i = (i \u0026amp; 0x0000ffff) + ((i \u0026gt;\u0026gt;\u0026gt;16) \u0026amp; 0x0000ffff); // 0b0000_0000_0000_0000_1111_1111_1111_1111 return i; } 時間複雜度為 \\(O(1))\\)。 Source Code(final) public static int bitCount(int i) { // HD, Figure 5-2 i = i - ((i \u0026gt;\u0026gt;\u0026gt; 1) \u0026amp; 0x55555555); i = (i \u0026amp; 0x33333333) + ((i \u0026gt;\u0026gt;\u0026gt; 2) \u0026amp; 0x33333333); i = (i + (i \u0026gt;\u0026gt;\u0026gt; 4)) \u0026amp; 0x0f0f0f0f; i = i + (i \u0026gt;\u0026gt;\u0026gt; 8); i = i + (i \u0026gt;\u0026gt;\u0026gt; 16); return i \u0026amp; 0x3f; } 一、三、四、五步不進行消位，在最後再利用 i \u0026amp; 0x3f 消去不必要的位數 ","permalink":"https://intervalrain.github.io/java/bitcount/","summary":"\u003ch1 id=\"integerbitcount-的函式解析\"\u003eInteger.bitCount 的函式解析\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e要計算整數以二進制的方式表示時，所有 bit 位為 1 的總和。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"雛形\"\u003e雛形\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e從低位開始，檢查是否為 1。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Java\" data-lang=\"Java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ebitCount\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e count \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 0;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (i \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e 0) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e ((i \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e 1) \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e 1)    \u003cspan style=\"color:#75715e\"\u003e// 如果最低位為 1，count就加 1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            count\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        i \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;=\u003c/span\u003e 1;             \u003cspan style=\"color:#75715e\"\u003e// 向右推進 1 位，等同於 num /= 2;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e count;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e時間複雜度為 \\(O(n)\\)，\\(n\\) 為整數的位數(bit 數)。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"優化\"\u003e優化\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e利用(i - 1) \u0026amp; i 可以消除最低位數的 1 的性質來計算。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Java\" data-lang=\"Java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ebitCount\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e count \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e 0;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (i \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e 0){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e (i \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e 1);       \u003cspan style=\"color:#75715e\"\u003e// 0b0101_1100 - 1 = 0b0101_1011, 且 0b0101_1100 \u0026amp; 0b0101_1011 = 0b0101_1000;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        count\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e count;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e時間複雜度為 \\(O(n))\\)，\\(n\\) 為位數為 1 的個數。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"利用-int-的特性再優化\"\u003e利用 int 的特性再優化\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\b因為 int 的最大正整數為 2^31，故我們可以兩兩錯位相加來求和\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Java\" data-lang=\"Java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ebitCount\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (i \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e 0x55555555) \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e ((i \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e 1) \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e 0x55555555);  \u003cspan style=\"color:#75715e\"\u003e// 0b0101_0101_0101_0101_0101_0101_0101_0101\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (i \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e 0x33333333) \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e ((i \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e 2) \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e 0x33333333);  \u003cspan style=\"color:#75715e\"\u003e// 0b0011_0011_0011_0011_0011_0011_0011_0011\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (i \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e 0x0f0f0f0f) \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e ((i \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e 4) \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e 0x0f0f0f0f);  \u003cspan style=\"color:#75715e\"\u003e// 0b0000_1111_0000_1111_0000_1111_0000_1111\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (i \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e 0x00ff00ff) \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e ((i \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e 8) \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e 0x00ff00ff);  \u003cspan style=\"color:#75715e\"\u003e// 0b0000_0000_1111_1111_0000_0000_1111_1111\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (i \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e 0x0000ffff) \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e ((i \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e16) \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e 0x0000ffff);  \u003cspan style=\"color:#75715e\"\u003e// 0b0000_0000_0000_0000_1111_1111_1111_1111\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e i;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e時間複雜度為 \\(O(1))\\)。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"source-codefinal\"\u003eSource Code(final)\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Java\" data-lang=\"Java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ebitCount\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e i) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#75715e\"\u003e// HD, Figure 5-2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e ((i \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e 1) \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e 0x55555555);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (i \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e 0x33333333) \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e ((i \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e 2) \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e 0x33333333);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (i \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e (i \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e 4)) \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e 0x0f0f0f0f;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e (i \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e 8);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    i \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e (i \u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e 16);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e i \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u003c/span\u003e 0x3f;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e一、三、四、五步不進行消位，在最後再利用 i \u0026amp; 0x3f 消去不必要的位數\u003c/li\u003e\n\u003c/ul\u003e","title":"[Java] Integer.bitCount 解析"},{"content":"一、OS 簡介 作業系統(Operating system, OS) 是管理電腦硬體與軟體資源的電腦程式，同時也是電腦系統的核心與基石。OS主要有以下兩個功能：\n資源分配者 監控使用者程式的執行，以防止不正常的運作造成對系統的危害。 一個標準 PC 的作業系統應該提供以下功能： 行程管理 (processing management) 記憶體管理 (memory management) 檔案系統 (file system) 網路通訊 (networking) 安全機制 (security) 使用者介面 (user integerface) 驅動程式 (device drivers) OS 系統依大小來區分： 大型電腦：IBM OS/360 個人電腦：Windows、Linux、BSD、Mac OS X 嵌入式：VxWorks、eCos、Sysbian OS、Palm OS 依品牌來區分： 類 Unix 家族：包含 System V、BSD 與 Linux。 微軟 Windows：Windows NT 核心，包含 Windows 2000、Windows XP。 蘋果 mac OS：執行於蘋果 Macintosh 系列電腦上的作業系統 Chrome OS：基於 Google 的瀏覽器 Google Chrome 的 Linux 核心。 二、常見的系統類型 Multiprogramming System 系統中存在多組行程同時 (concurrent) 執行，避免 CPU 閒置，提升 CPU 利用度。(注意不是平行執行(parallel)) Multiprogramming Degree：系統內所存在的等待執行 process 數目，Multiprogramming degree 愈高，則 CPU 使用度可能愈高。(非必定的原因是可能產生 Thrashing 現象) 當 CPU 效能降低時，系統會引入更多的 process 讓 CPU 盡可能工作。但當存有太多 process 時，大部分的工作會花費在 page fault 造成的 Page Replacement，致使 CPU 效率下降，最後造成 CPU 效能愈來愈低。 [方法1] 降低 Multiprogramming Degree [方法2] 利用 Page Fault Frequency (Ratio) 控制來防止 Thrashing。 [方法3] 利用 Working Set Model 預估各 Process 在不同執行時期所需的頁框數，並依此提供足夠的頁框數。 分時系統 Time Sharing System Multiprogramming System 的一種，OS 透過資源分享，使得每個使用者都認為有一套專屬的系統存在，反應時間(Response Time)通常是一秒內。 常見配置： 行程排程採用 RR 排程(Round-robin scheduling) 記憶體空間所有使用者分享 使用虛擬記憶體技術 I/O Device 透過 Spooling(Simultaneous Peripheral Operation On-Line) 技術(把磁碟當成一個巨大緩衝區使用)共享。 分散式系統 Distributed System 須符合兩個條件，硬體上每台電腦都是自主的，軟體上用戶將整個系統看作是一台電腦。一般分為兩類：\nClient-Server System Peer-to-peer 舉例：志願計算，使用志願者電腦的閒置計算力，透過網際網路進行資料傳輸(如 Folding@home 蛋白質摺疊研究計畫)\n分散式系統的好處：\n資源共享 (Resource sharing) 加快計算速度 (Speed up) 可靠性 (Reliability)：指不容易因為一台電腦 shut down 而全部崩潰 通訊需求 (Coummunication Need) 補充：勿將 Multiprocessor 與分散式系統混為一談\nSymmetric Multiprocessing (SMP)：對稱式多元處理，每一個處理器具有相同的功能，可靠度高，強調負載平衡。 Asymmetric Multiprocessing (ASMP)：非對稱式多元處理，Master/Slave 架構。 即時系統 Real Time System 定義嚴謹的固定時間限制，電腦在處理工作時必須在這個定義的時間內完成，否則工作就算失效。 硬性即時系統(Hard Real Time Sydstem)：對於完成工作的時間有極嚴格的限制。若 Prcess 未能於規定的時間內完成，則 Process 即屬失效。(意義同即時系統之定義) 工廠自動化系統、軍事系統、核能安控等。 Application Program 設計上非常重要。 Data 及 Program 皆存在 ROM 或 RAM 中。 不使用虛擬記憶體，因為 Page Fault 的處理時間過長。 減少 os 的干預以降低 Dispatch Latency。 軟性即時系統(Soft Real Time System)：保證高優先權的 Process 必須先於所有低優先權的 Process 完成。 Multimedia System、Virtual Reality等。(影音多媒體的緩衝時間) CPU 的 Scheduling 應能支援 Priority Scheduling 且不能提供類似 Aging 技術。 可和分時系統、virtual memory 共存。 叢集系統 Clustered System 叢集系統共享儲存裝置，集合許多 CPU 並且經由 LAN 連線緊密地連結以完成工作。 叢集系統主要是利用多台獨立的電腦系統或是工作站來共同完成大型數值的平行計算。 Batch 較好的耐用度、安全性 常用於大量數據分析 常用於醫院、金融業 計算機一次只執行一件事 使用者與計算機的執行沒有互動性 CPU 時常處在閒置的狀態(因為 I/O speed 遠小於 CPU speed) OS 處理完一件事後，才將控制權交給下一個工作 Multi-programming 讓 I/O 與計算的工作可以同時進行，減少 CPU 閒置的時間。\nSpooling(Simultaneous Peripheral Operation On-Line)。\n但仍是一次執行一件事。 OS 的工作包含：\n記憶體管控。 系統必須分配記憶體給不同的程式 CPU 排程。 系統必須決定哪些程式要執行 I/O 系統。 系統提供 I/O 的排程與裝置的分配 Time-sharing System 使用者與系統間具有互動性\nCPU 頻繁的切換不同的工作，所以會有很多時間點可以接收 I/O。 使用者可以及時看到結果。 使用者感受像是同時進行的，但其實是很快速的切換在不同的工作之間。 OS 的工作包含：\nVirtual memory，從硬碟中借儲存空間出來，當作 memory 來使用。 檔案系統和硬碟管理。 同步化(Synchronization) 和 死鎖(deadlock)。 \\( \\def\\arraystretch{1.5}\\begin{array}{|c|c|c|c|}\\hline \u0026amp;\\text{Batch}\u0026amp;\\text{Multi-programming}\u0026amp;\\text{Time-sharing}\\\\\\hline \\text{系統模型}\u0026amp;\\text{單一使用者、單一作業}\u0026amp;\\text{單一使用者、多作業排程}\u0026amp;\\text{多使用者、作業平行處理}\\\\\\hline \\text{目的}\u0026amp;\\text{簡單}\u0026amp;\\text{增加資源利用效率(機本)}\u0026amp;\\text{提升反應速度(人本)}\\\\\\hline \\text{特徵}\u0026amp;\\text{N.A.}\u0026amp;\\text{CPU 排程、記憶體管理、I/O系統}\u0026amp;\\text{檔案系統、虛擬記憶體、同步化、死鎖}\\\\\\hline \\end{array} \\)\n電腦系統結構 桌面系統(Desktop Systems)：單處理器(single processor) PC(personal computer) GUI I/O devices: 鍵盤、滑書、螢幕、印表機… 多元的 OS Window, MacOS, Unix, Linux 缺乏檔案與作業系統的保護 木馬、病毒 平行系統(Parallel Systems)：多處理器(multiprocessor/tightly couplde system) 多核、或多 CPU。 通常共享記憶體 優點： Throughput: 提升計算能力 Economical: 很多裝置可以共用、節省成本 Reliability: 當其中一個 CPU 壞掉時，不會使得電腦完全無法操作。 分類： 對稱式多處理器系統 Symmetric multiprocessor system(SMP) 作業系統控制的每個處理器都扮演相同角色 大多 CPU 屬於這種 需要額外處理 synchronization 非對稱式多處理器系統Asymmetric multiprocessor system 每個處理器被指派處理不同的特殊工作 一個主要的 master CPU 與多個 slave CPUs 常見於極大的系統 多核處理器 Multi-Core Processor 在單一的 CPU 有多核 On-chip communication 比 between-chip communication 還快 One chip with multiple core 比 multiple single-core chips 還節能 Many-Core Processor Nvidia General-Purpose GPU 圖形處理器 Single Instruction Multiple Data 處理矩陣更快 Intel Xeon Phi TILE64 記憶體存取結構(Memory Access Architecture) 統一記憶體存取架構 Uniform memory access(UMA) 非統一記憶體存取架構 Non-uniform memory access(NUMA) 分散式系統(Distributed Systems)： ","permalink":"https://intervalrain.github.io/os/lec1/","summary":"\u003ch1 id=\"一os-簡介\"\u003e一、OS 簡介\u003c/h1\u003e\n\u003cp\u003e作業系統(Operating system, OS) 是管理電腦硬體與軟體資源的電腦程式，同時也是電腦系統的核心與基石。OS主要有以下兩個功能：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e資源分配者\u003c/li\u003e\n\u003cli\u003e監控使用者程式的執行，以防止不正常的運作造成對系統的危害。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"一個標準-pc-的作業系統應該提供以下功能\"\u003e一個標準 PC 的作業系統應該提供以下功能：\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e行程管理 (processing management)\u003c/li\u003e\n\u003cli\u003e記憶體管理 (memory management)\u003c/li\u003e\n\u003cli\u003e檔案系統 (file system)\u003c/li\u003e\n\u003cli\u003e網路通訊 (networking)\u003c/li\u003e\n\u003cli\u003e安全機制 (security)\u003c/li\u003e\n\u003cli\u003e使用者介面 (user integerface)\u003c/li\u003e\n\u003cli\u003e驅動程式 (device drivers)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"os-系統依大小來區分\"\u003eOS 系統依大小來區分：\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e大型電腦：IBM OS/360\u003c/li\u003e\n\u003cli\u003e個人電腦：Windows、Linux、BSD、Mac OS X\u003c/li\u003e\n\u003cli\u003e嵌入式：VxWorks、eCos、Sysbian OS、Palm OS\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"依品牌來區分\"\u003e依品牌來區分：\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e類 Unix 家族：包含 System V、BSD 與 Linux。\u003c/li\u003e\n\u003cli\u003e微軟 Windows：Windows NT 核心，包含 Windows 2000、Windows XP。\u003c/li\u003e\n\u003cli\u003e蘋果 mac OS：執行於蘋果 Macintosh 系列電腦上的作業系統\u003c/li\u003e\n\u003cli\u003eChrome OS：基於 Google 的瀏覽器 Google Chrome 的 Linux 核心。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cimg alt=\"OSillustration\" loading=\"lazy\" src=\"/images/OSillustration.png\"\u003e\n\u003cimg alt=\"LinuxFrame\" loading=\"lazy\" src=\"/images/LinuxFrame.png\"\u003e\u003c/p\u003e","title":"[OS] Lec 1 - Introduction"},{"content":"HashMap.comparableClassFor(Object x) 的函式解讀 原文敘述\nReturns x\u0026rsquo;s Class if it is of the form \u0026ldquo;class C implements Comparable\u0026rdquo;, else null.\n我的翻譯 當x的類別為Comparable的實作時，返回x的類別；否則返回 null。\n藉由這個函式實例的解讀，可以了解一下類別、泛型的相關概念。 Source Code static Class\u0026lt;?\u0026gt; comparableClassFor(Object x) { if (x instanceof Comparable) { Class\u0026lt;?\u0026gt; c; Type[] ts, as; ParameterizedType p; if ((c = x.getClass()) == String.class) // bypass checks return c; if ((ts = c.getGenericInterfaces()) != null) { for (Type t : ts) { if ((t instanceof ParameterizedType) \u0026amp;\u0026amp; ((p = (ParameterizedType) t).getRawType() == Comparable.class) \u0026amp;\u0026amp; (as = p.getActualTypeArguments()) != null \u0026amp;\u0026amp; as.length == 1 \u0026amp;\u0026amp; as[0] == c) // type arg is c return c; } } } return null; } instanceof insanceof 可理解成某類別的實作，無論是執行期時的類別，或是父類別，或是它實現的介面，或父類別實現的介面…，總之只要在繼承鏈上有這個類別就可以了。 getClass() 與instanceof相對應的是getClass()函式，無論該物件如果轉型，getClass()都會返回它執行時期的類別，可以簡單理解成實際類別\b，換言之也就是我們 new 出來物件時使用的類別。 有一種例外情形是匿名物件，當匿名物件調用getClass()時，返回的是依賴它的物件在執行期的類別，並以1,2,3\u0026hellip;的index區分。 getGenericInterfaces() getGenericInterfaces()方法返回的是該物件在執行期時直接實作的介面。必然是該類別自己實作的介面，繼承的則不可。 getGenericSuperclass()和getSuperclass() 這兩個函式雖然沒有出現在 comparableClassFor(Object x)中，但也順帶一提。\ngetSuperclass()返回的是直接父類的類別，不包括泛型參數。 \bgetGenericSuperclass()返回的是包括泛型參數在內的直接父類別。 注意如果父類別聲明了泛型，但子類別繼承時沒有為父類別實作該泛型，這時候也是沒有泛型參數的 ParameterizedType ParameterizedType 是 Type 介面的子介面，表示參數化的類別，亦即實作了泛型參數的類型。 注意如果直接用 bean 物件 instanceof ParameterizedType，结果都是 false。 Class 物件只能是 instanceof ParameterizedType，否則編譯會報錯。 只有用 Type 物件 instanceof ParameterizedType 才能得到想要的比較结果。可以這麼理解：一個 Bean 類別不會是 ParameterizedType，只有代表這個Bean類的類型（Type）才可能是ParameterizedType。 實現泛型參數，可以是給泛型傳入了一個真實的類別，或者傳入另一個新聲明的泛型參數，只聲明泛型而不實作，則 instanceof ParameterizedType 為 false。 getRawType() getRawType()方法返回聲明了這個類別的類或介面，也就是去掉了泛型参数部分的類別物件。 getActualTypeArguments() 與getRawType()相對應，getActualTypeArguments()以數組的形式返回泛型參數列表。 當傳入的是真實類別時，印出來的是全類名 當傳入的是另一個聲明的泛型參數時滿印出來的是代表該泛型參數的符號。 getOwnerType() ParameterizedType介面還有一個getOwnerType()函式，如果該類別是一个內部類別/介面，返回它的外部類別/介面。如果該類型不是內部類型不是内部類別/介面，返回null。 comparableClassFor(Object x) 總結 static Class\u0026lt;?\u0026gt; comparableClassFor(Object x) { if (x instanceof Comparable) { // 判斷是否實作了 Comparable 介面 Class\u0026lt;?\u0026gt; c; Type[] ts, as; ParameterizedType p; if ((c = x.getClass()) == String.class) // 如果是String類別，直接返回String.class return c; if ((ts = c.getGenericInterfaces()) != null) { // 檢查是否有直接實現的介面 for (Type t : ts) { // 遍歷介面 if ((t instanceof ParameterizedType) \u0026amp;\u0026amp; // 當介面實現了泛型 ((p = (ParameterizedType) t).getRawType() == // 取得介面不帶參數時的類別對象 Comparable.class) \u0026amp;\u0026amp; // 且為 Comparable (as = p.getActualTypeArguments()) != null \u0026amp;\u0026amp; // 取得該介面的泛型參數 as.length == 1 \u0026amp;\u0026amp; as[0] == c) // type arg is c // 只帶有一種泛型且是實作類別為其本身 return c; // 返回該類別 } } } return null; // 皆否則回傳 null } ","permalink":"https://intervalrain.github.io/java/hashmap/hashmap/","summary":"\u003ch1 id=\"hashmapcomparableclassforobject-x-的函式解讀\"\u003eHashMap.comparableClassFor(Object x) 的函式解讀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cem\u003e\u003cstrong\u003e原文敘述\u003c/strong\u003e\u003c/em\u003e\u003cbr\u003e\n\u003cem\u003eReturns x\u0026rsquo;s Class if it is of the form \u0026ldquo;class C implements Comparable\u003cC\u003e\u0026rdquo;, else null.\u003c/em\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cem\u003e\u003cstrong\u003e我的翻譯\u003c/strong\u003e\u003c/em\u003e\n\u003cem\u003e當x的類別為Comparable的實作時，返回x的類別；否則返回 null。\u003c/em\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e藉由這個函式實例的解讀，可以了解一下類別、泛型的相關概念。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"source-code\"\u003eSource Code\u003c/h1\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Java\" data-lang=\"Java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e Class\u003cspan style=\"color:#f92672\"\u003e\u0026lt;?\u0026gt;\u003c/span\u003e comparableClassFor(Object x) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (x \u003cspan style=\"color:#66d9ef\"\u003einstanceof\u003c/span\u003e Comparable) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        Class\u003cspan style=\"color:#f92672\"\u003e\u0026lt;?\u0026gt;\u003c/span\u003e c; Type\u003cspan style=\"color:#f92672\"\u003e[]\u003c/span\u003e ts, as; ParameterizedType p;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e ((c \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e x.\u003cspan style=\"color:#a6e22e\"\u003egetClass\u003c/span\u003e()) \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e String.\u003cspan style=\"color:#a6e22e\"\u003eclass\u003c/span\u003e) \u003cspan style=\"color:#75715e\"\u003e// bypass checks\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e c;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e ((ts \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e c.\u003cspan style=\"color:#a6e22e\"\u003egetGenericInterfaces\u003c/span\u003e()) \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (Type t : ts) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e ((t \u003cspan style=\"color:#66d9ef\"\u003einstanceof\u003c/span\u003e ParameterizedType) \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    ((p \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (ParameterizedType) t).\u003cspan style=\"color:#a6e22e\"\u003egetRawType\u003c/span\u003e() \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                        Comparable.\u003cspan style=\"color:#a6e22e\"\u003eclass\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    (as \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e p.\u003cspan style=\"color:#a6e22e\"\u003egetActualTypeArguments\u003c/span\u003e()) \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    as.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e 1 \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e as\u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003e0\u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e c) \u003cspan style=\"color:#75715e\"\u003e// type arg is c\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e c;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"instanceof\"\u003einstanceof\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003einsanceof 可理解成某類別的實作，無論是執行期時的類別，或是父類別，或是它實現的介面，或父類別實現的介面…，總之只要在繼承鏈上有這個類別就可以了。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"getclass\"\u003egetClass()\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e與instanceof相對應的是getClass()函式，無論該物件如果轉型，getClass()都會返回它執行時期的類別，可以簡單理解成實際類別\b，換言之也就是我們 new 出來物件時使用的類別。\u003c/li\u003e\n\u003cli\u003e有一種例外情形是匿名物件，當匿名物件調用getClass()時，返回的是依賴它的物件在執行期的類別，並以1,2,3\u0026hellip;的index區分。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"getgenericinterfaces\"\u003egetGenericInterfaces()\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003egetGenericInterfaces()方法返回的是該物件在執行期時直接實作的介面。必然是該類別自己實作的介面，繼承的則不可。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"getgenericsuperclass和getsuperclass\"\u003egetGenericSuperclass()和getSuperclass()\u003c/h2\u003e\n\u003cp\u003e這兩個函式雖然沒有出現在 comparableClassFor(Object x)中，但也順帶一提。\u003c/p\u003e","title":"[Java] Java 的中 HashMap.comparableClassFor(Object x) 的函式解讀"},{"content":"什麼是 Computer Science(CS)? CS 意在解決問題，更精準地說，是將問題 (input) 轉換成答案 (output) 的過程。 在計算機的世界，為了表達 inputs 和 outputs，我們必須將資訊標準化來儲存與操作它們，因為計算機只讀得懂 0 與 1 (開路/通路)。 如何表達數字? 在人類的世界，人們使用十進制(Decimal)。 在計算機的世界，用的是二進制(Binary)，也就是 0 與 1。 \\(1+1=10\\) \\((1,2,3,4,5,6,7,\u0026hellip;)_{10}=(001,010,011,100,101,110,111,\u0026hellip;)_2\\) 每個二進制的位元(digit)稱為 bit。 在現代計算機結構中，是由數以億計的電晶體(transistors)所組成的。 電晶體是一種具有開關(switch)性質的邏輯元件。 大部分的計算機一次用 8 個 bits，或稱 1 bytes，來表達數字。 \\(8 \\text{bits}=1 \\text{bytes}\\) 如何表達文字? 要表達文字，只需將不同的字元定義到對應的數字即可。 ASCII，American Standard Code for Information Interchange，即是一種基於拉丁字母的編碼系統，可應用顯示現代英語。 A-\u0026gt;65, B-\u0026gt;66, \u0026hellip;etc a-\u0026gt;97, b-\u0026gt;98, \u0026hellip;etc H-\u0026gt;72, I-\u0026gt;73, !-\u0026gt;33, so HI!=72, 73, 33 在不同語言，有不同的字符，就必須定義新的編碼系統，來容納更多的字符。 如 Unicode。 如 emojo 顏文字也是一種字符。 如何表達顏色? 同理，可以把不同的數字定義給不同的顏色，其中最常見的就是 RGB 系統。 由紅綠藍色塊所組成。 紅、綠、藍又個別以 8 bits 儲存的 256 種不同層度的顏色強度表示。 一共由 24 bits 來表達，超過1百萬種顏色。 那圖案、影片、音樂呢? 圖案是由數以萬計的色塊(dots)所組成，在螢幕顯示器上我們稱作畫素(pixels)。 影片則是由連續的圖案經由連續播放所建構而成的。 音樂同樣可以用 bits 來表達，其中 MIDI 是一種用數字來表達音符的形式。 All are composed by 0 and 1 in the computer world.\n演算法 (Algorithms) 我們現在可以表達 inputs 和 outputs 了，接下來要開始解決問題。 演算法就是將 inputs 經過一連串系統性、且有邏輯的指令(instructions)轉化成 outpus 的過程。 試想我們要從電話簿中查朋友的電話，電話簿是按照名字排序的。 我們可以從第一頁往後找到最後一頁，只有名字與電話是存在的，我們就會在電話簿中找到，所以這個方法是無誤的。 我們也可以兩頁兩頁找，但我們有可能因此錯失我們要查的號碼。 我們也可以一次翻到當前電話簿的一半，利用電話簿的排序規則，決定往左半邊找或右半邊找，並且持續這個步驟直到找到。 將上述的演算法效率視覺化如下： 從上圖可見，當我們處理的樣本數很大時(電話簿頁數很多)，那麼我們用方法1解決問題的時間(找到號碼的時間)就會大的很多。而利用方法3解決問題的時間則會呈對數成長。 因此，好的演算法設計，會大大的影響計算機的操作效率。 Pseudocode 我們可以用英文(或人類語言)來表達我們的演算法，這種寫作方式叫作 Pseudocode。 Pick up phone book Open to middle of phone book Look at page If person is on page Call person Else if person is earlier in book Open to middle of left half to book Go back to line 3 Else if person is later in book Open to middle of right half to book Go back to line 3 Else Quit 其中像Pick up、Open to、Look at、Quit這些動作，在計算機中我們稱作函式(functions)。 其中分枝的部分If、Else，稱作條件(conditions)。 而我們需要決定的判斷式如person is on page、person is earlier than book、person is later in book稱為布林邏輯值(Boolean expressions)，也就是Yes or No，是或否。 最後，不斷地重覆Go back to line 3的動作，稱作迴圈(loops)。 接下來我們會繼續遇到各種玩意： function 引數 arguments, 傳回值 return values conditionals Boolean expressions loops variables 和 David 的第一個程式：將 \u0026ldquo;hello, world\u0026rdquo; 印到螢幕上。 #include \u0026lt;stdio.h\u0026gt; int main(void) { printf(\u0026#34;hello, world\\n\u0026#34;); } Scratch 試試看到 Scratch(https://scratch.mit.edu/) 這套圖像化軟體語言操作看看吧！ Reference: https://cs50.harvard.edu/college/2021/fall/notes/0/\n","permalink":"https://intervalrain.github.io/cs50/lec0/","summary":"\u003ch1 id=\"什麼是-computer-sciencecs\"\u003e什麼是 Computer Science(CS)?\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eCS 意在\u003cstrong\u003e解決問題\u003c/strong\u003e，更精準地說，是將問題 (input) 轉換成答案 (output) 的過程。\u003c/li\u003e\n\u003cli\u003e在計算機的世界，為了表達 inputs 和 outputs，我們必須將資訊標準化來儲存與操作它們，因為計算機只讀得懂 0 與 1 (開路/通路)。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"如何表達數字\"\u003e如何表達數字?\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e在人類的世界，人們使用十進制(Decimal)。\u003c/li\u003e\n\u003cli\u003e在計算機的世界，用的是二進制(Binary)，也就是 0 與 1。\n\u003cul\u003e\n\u003cli\u003e\\(1+1=10\\)\u003c/li\u003e\n\u003cli\u003e\\((1,2,3,4,5,6,7,\u0026hellip;)_{10}=(001,010,011,100,101,110,111,\u0026hellip;)_2\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e每個二進制的位元(digit)稱為 bit。\u003c/li\u003e\n\u003cli\u003e在現代計算機結構中，是由數以億計的電晶體(transistors)所組成的。\n\u003cul\u003e\n\u003cli\u003e電晶體是一種具有開關(switch)性質的邏輯元件。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e大部分的計算機一次用 8 個 bits，或稱 1 bytes，來表達數字。\n\u003cul\u003e\n\u003cli\u003e\\(8 \\text{bits}=1 \\text{bytes}\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"如何表達文字\"\u003e如何表達文字?\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e要表達文字，只需將不同的字元定義到對應的數字即可。\u003c/li\u003e\n\u003cli\u003eASCII，American Standard Code for Information Interchange，即是一種基於拉丁字母的編碼系統，可應用顯示現代英語。\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eA-\u0026gt;65\u003c/code\u003e, \u003ccode\u003eB-\u0026gt;66\u003c/code\u003e, \u0026hellip;etc\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ea-\u0026gt;97\u003c/code\u003e, \u003ccode\u003eb-\u0026gt;98\u003c/code\u003e, \u0026hellip;etc\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eH-\u0026gt;72\u003c/code\u003e, \u003ccode\u003eI-\u0026gt;73\u003c/code\u003e, \u003ccode\u003e!-\u0026gt;33\u003c/code\u003e, so \u003ccode\u003eHI!=72, 73, 33\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e在不同語言，有不同的字符，就必須定義新的編碼系統，來容納更多的字符。\n\u003cul\u003e\n\u003cli\u003e如 Unicode。\u003c/li\u003e\n\u003cli\u003e如 emojo 顏文字也是一種字符。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"如何表達顏色\"\u003e如何表達顏色?\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e同理，可以把不同的數字定義給不同的顏色，其中最常見的就是 RGB 系統。\n\u003cul\u003e\n\u003cli\u003e由紅綠藍色塊所組成。\u003c/li\u003e\n\u003cli\u003e紅、綠、藍又個別以 8 bits 儲存的 256 種不同層度的顏色強度表示。\u003c/li\u003e\n\u003cli\u003e一共由 24 bits 來表達，超過1百萬種顏色。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"那圖案影片音樂呢\"\u003e那圖案、影片、音樂呢?\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e圖案是由數以萬計的色塊(dots)所組成，在螢幕顯示器上我們稱作畫素(pixels)。\u003c/li\u003e\n\u003cli\u003e影片則是由連續的圖案經由連續播放所建構而成的。\u003c/li\u003e\n\u003cli\u003e音樂同樣可以用 bits 來表達，其中 MIDI 是一種用數字來表達音符的形式。\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cem\u003e\u003cstrong\u003eAll are composed by 0 and 1 in the computer world.\u003c/strong\u003e\u003c/em\u003e\u003c/p\u003e","title":"[CS50] Lec 0 - Introduction to Computer Science"},{"content":"0. 前言 以往寫筆記通常是使用 Notion，簡單的 Markdown 語法搭配支援 LaTex，使得在撰寫學習筆記時，可以達到快速且美觀的呈現。 雖說 GitHub Pages 支援了 Markdown 的語法，但卻不支援 LaTex，這使得想將筆記從 Notion 移轉到 GitHub Pages，成為一個小缺點。 而此處介紹的是在網頁上顯示較為輕便的 KaTex。 1. 解決方法 利用 KaTex，在靜態頁面掛載 JavaScript 程式碼。 其在官網的描述是： Beautilful math in all browsers A JavaScript display engine for mathematics that works in all browsers. No more setup for readers. It just works.\nStep 1. 創建一個可常駐的靜態頁面 在 \\layouts\\partials\\ 下創建一個叫作 math.html 的頁面。 注意是 global 的 layouts 文件夾中不是 hugo themes 中的文件夾 開啟頁面之後，在 \u0026lt;head\u0026gt; 與 \u0026lt;/head\u0026gt; 之間加入下一步驟內的 JavaScript 程式碼。 Step 2. 將 JavaScript 程式碼貼入 math.html \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.jsdelivr.net/npm/katex@0.13.18/dist/katex.min.css\u0026#34; integrity=\u0026#34;sha384-zTROYFVGOfTw7JV7KUu8udsvW2fx4lWOsCEDqhBreBwlHI4ioVRtmIvEThzJHGET\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt; \u0026lt;script defer src=\u0026#34;https://cdn.jsdelivr.net/npm/katex@0.13.18/dist/katex.min.js\u0026#34; integrity=\u0026#34;sha384-GxNFqL3r9uRJQhR+47eDxuPoNE7yLftQM8LcxzgS4HT73tp970WS/wV5p8UzCOmb\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script defer src=\u0026#34;https://cdn.jsdelivr.net/npm/katex@0.13.18/dist/contrib/auto-render.min.js\u0026#34; integrity=\u0026#34;sha384-vZTG03m+2yp6N6BNi5iM4rW4oIwk5DfcNdFfxkk9ZWpDriOkXX8voJBFrAO7MpVl\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34; onload=\u0026#34;renderMathInElement(document.body);\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 上面的程式碼是將 KaTex 的渲染程式碼寫到 math.html 中。 Step 3. 將 Hugo theme 中的 header.html 複製出來 同樣將 header.html 複製到 global 下的 \\layout\\partials，並貼入 {{- /* Head custom content area start */ -}} {{- /* Insert any custom code (web-analytics, resources, etc.) - it will appear in the \u0026lt;head\u0026gt;\u0026lt;/head\u0026gt; section of every page. */ -}} {{- /* Can be overwritten by partial with the same name in the global layouts. */ -}} {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }} {{- /* Head custom content area end */ -}} 上面的程式碼的功能將 math.html 嵌進 header.html 中，並以 config.yml 中的 .param.math 指令來控制。 Step 4. 開始撰寫 KaTex 一開始先將標頭的定義區將 math: true，即可開啟該頁面的 KaTex 渲染功能。 在 \\\\( 符號與 \\\\) 符號間進行 inline equation 插入。 或在 $ $ 符號與 $ $ 間進行 block equation 的插入。 LaTex 的語法可以參考https://www.cs.pu.edu.tw/~wckuo/doc/latex123/node11.html 參考來源：\nhttps://bend1031.github.io/ https://teddygood.github.io/blog/katex/ ","permalink":"https://intervalrain.github.io/it/latexrendering/","summary":"\u003ch1 id=\"0-前言\"\u003e0. 前言\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e以往寫筆記通常是使用 \u003ca href=\"https://www.notion.so/\"\u003eNotion\u003c/a\u003e，簡單的 Markdown 語法搭配支援 LaTex，使得在撰寫學習筆記時，可以達到快速且美觀的呈現。\u003c/li\u003e\n\u003cli\u003e雖說 GitHub Pages 支援了 Markdown 的語法，但卻不支援 LaTex，這使得想將筆記從 Notion 移轉到 GitHub Pages，成為一個小缺點。\u003c/li\u003e\n\u003cli\u003e而此處介紹的是在網頁上顯示較為輕便的 \u003ca href=\"https://katex.org/docs/autorender.html\"\u003eKaTex\u003c/a\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"1-解決方法\"\u003e1. 解決方法\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e利用 KaTex，在靜態頁面掛載 JavaScript 程式碼。\u003c/li\u003e\n\u003cli\u003e其在官網的描述是：\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cem\u003e\u003cstrong\u003eBeautilful math in all browsers\u003c/strong\u003e\u003c/em\u003e \u003cem\u003eA JavaScript display engine for mathematics that works in all browsers. No more setup for readers. It just works.\u003c/em\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"step-1-創建一個可常駐的靜態頁面\"\u003eStep 1. 創建一個可常駐的靜態頁面\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e在 \\layouts\\partials\\ 下創建一個叫作 \u003ccode\u003emath.html\u003c/code\u003e 的頁面。\n\u003cul\u003e\n\u003cli\u003e注意是 global 的 layouts 文件夾中不是 hugo themes 中的文件夾\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e開啟頁面之後，在 \u003ccode\u003e\u0026lt;head\u0026gt;\u003c/code\u003e 與 \u003ccode\u003e\u0026lt;/head\u0026gt;\u003c/code\u003e 之間加入下一步驟內的 JavaScript 程式碼。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"step-2-將-javascript-程式碼貼入-mathhtml\"\u003eStep 2. 將 JavaScript 程式碼貼入 math.html\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-JavaScript\" data-lang=\"JavaScript\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003elink\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003erel\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;stylesheet\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehref\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;https://cdn.jsdelivr.net/npm/katex@0.13.18/dist/katex.min.css\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eintegrity\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;sha384-zTROYFVGOfTw7JV7KUu8udsvW2fx4lWOsCEDqhBreBwlHI4ioVRtmIvEThzJHGET\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecrossorigin\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;anonymous\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003escript\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esrc\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;https://cdn.jsdelivr.net/npm/katex@0.13.18/dist/katex.min.js\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eintegrity\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;sha384-GxNFqL3r9uRJQhR+47eDxuPoNE7yLftQM8LcxzgS4HT73tp970WS/wV5p8UzCOmb\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecrossorigin\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;anonymous\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e/script\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003escript\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003edefer\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esrc\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;https://cdn.jsdelivr.net/npm/katex@0.13.18/dist/contrib/auto-render.min.js\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eintegrity\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;sha384-vZTG03m+2yp6N6BNi5iM4rW4oIwk5DfcNdFfxkk9ZWpDriOkXX8voJBFrAO7MpVl\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecrossorigin\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;anonymous\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eonload\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;renderMathInElement(document.body);\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u0026lt;\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e/script\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e上面的程式碼是將 KaTex 的渲染程式碼寫到 math.html 中。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"step-3-將-hugo-theme-中的-headerhtml-複製出來\"\u003eStep 3. 將 Hugo theme 中的 header.html 複製出來\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e同樣將 header.html 複製到 global 下的 \\layout\\partials，並貼入\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e{{- /* Head custom content area start */ -}}\n{{- /*     Insert any custom code (web-analytics, resources, etc.) - it will appear in the \u0026lt;head\u0026gt;\u0026lt;/head\u0026gt; section of every page. */ -}}\n{{- /*     Can be overwritten by partial with the same name in the global layouts. */ -}}\n{{ if or .Params.math .Site.Params.math }}\n{{ partial \u0026#34;math.html\u0026#34; . }}\n{{ end }}\n{{- /* Head custom content area end */ -}}\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003e上面的程式碼的功能將 math.html 嵌進 header.html 中，並以 config.yml 中的 .param.math 指令來控制。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"step-4-開始撰寫-katex\"\u003eStep 4. 開始撰寫 KaTex\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e一開始先將標頭的定義區將 \u003ccode\u003emath: true\u003c/code\u003e，即可開啟該頁面的 KaTex 渲染功能。\u003c/li\u003e\n\u003cli\u003e在 \\\\( 符號與 \\\\) 符號間進行 inline equation 插入。\u003c/li\u003e\n\u003cli\u003e或在 $ $ 符號與 $ $ 間進行 block equation 的插入。\u003c/li\u003e\n\u003cli\u003eLaTex 的語法可以參考\u003ca href=\"https://www.cs.pu.edu.tw/~wckuo/doc/latex123/node11.html\"\u003ehttps://www.cs.pu.edu.tw/~wckuo/doc/latex123/node11.html\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e參考來源：\u003c/p\u003e","title":"[IT] 在 GitHub Pages 中渲染 KaTex 公式"},{"content":"前言 2022/3/3 更新\n此篇為筆者以工作經驗為背景寫下的筆記，如有錯誤煩請指教。點此聯絡我。 Ring Oscillator 環形振盪器(RO) 簡介 在 IC 電路設計中，除了 metal routing 會造成訊號的延遲，邏輯閘從高電位轉換到低電位、或從低電位轉換到高電位(switch)，也會造成相對應的 Gate Delay，然而 Gate Delay 非常小，很難以測量，故 RO 是一個便於測量 Gate Delay 的電路設計。 在 IC 電路設計中，除了考慮速度，還會考慮功耗，而邏輯閘開關所造成的動態功耗(dynamic power consumption)佔比非常大，故 Ring Oscillator 也可以用來計算閘開關的功耗。 1. Time Delay 為了方便測量 Time Delay，RO 是一種用奇數 n 個 inverter(NOT Gate) 串接成的電路。透過在輸入端振盪產生方波，經過奇數個 inverter 之後，在輸出端產生反向的方波訊號，其時間差為經過 n 個 inverter 的 time delay。利用 time delay 會透過串接 inverter 累加(或稱propagation)的性質，故可以算出單個閘極的 gate delay(\\(T_p\\), propagation time) \\(t_{HtoL}\\sim t_{LtoH}=t_p=\\Delta T/2n\\) [註] 圖為一個由3個反向器組成的環形振盪器，其輸出頻率為 \\(\\frac{1}{6}t_p\\)(Gate Delay)。 由偶數個 inverter 組成的環形電路無法構成環形振盪器，因為其輸入與輸出相同。然而這種配置可以被用作記憶體的基本單元，它是建構靜態隨機存取記憶體 SRAM (static random access memory)的基本組成。 環形振盪器通常全部由 inverter 所組成，較能抵抗環境影響。事實上也可以用 non-inverter 與 inverter 混合組成，前提是 inverter 的總數要是奇數。其振蕩器的週期等於兩倍的閘延遲(Gate delay)， 為了增加振盪頻率，通常有兩種方法 減少環形電路中的 inverter 數量。 提升電壓，但同時會有較大的電流與功耗。 2. Power consumption 分為 Dynamic Power Consumption 與 Static Power Consumption。 \\(P_{total}=a\\times f\\times(\\frac{1}{2}CV_{DD}^2+V_{DD}I_{SC})+V_{DD}I_{off}+V_{DD}I_{Diode}+V_{DD}I_{Gate}\\) a 為 activity，每個 clock cycle 的平均開關切換數目。 故在電路設計上減少開關的次數也能有效降低功耗。 f 為頻率，代表一秒內可以完成幾次開關(switch)。 Dynamic Power(Switching Power) 為現今 CMOS 振盪器的主要功耗來源。 Dynamic Power 為 RO 在固定方波頻率為 \\(f\\) 時的平均功率(一組方波歷時為 \\(1/f\\))。 每一次開或關(switch)所耗的能為 \\(\\frac{1}{2}CV^2\\) 推導： \\(C=\\frac{Q}{V}\\) \\(I=\\frac{dQ}{dt}=C\\frac{dV}{dt}\\) \\(W=IV=\\int_{0}^{t}CV\\frac{dV}{dt}=\\frac{1}{2}CV^2\\) 故功耗為\\(P_{dynamic}=I_{active}V=CV^2\\) 如何降低功耗? 降低 Activity Clock Gating: 避免不必要的 flip-flop 避免 transition downstream logic 加入 enable 來控制邏輯複雜度 Data Gating: 利用 gating off inputs 來避免不必要的 toggling Bus Encodings Freeze \u0026ldquo;Don\u0026rsquo;t cares\u0026rdquo; Remove Glitches 降低\\(C_{Load}\\) 降低\\(f\\) 降低\\(V_{DD}\\) 平行結構 可降低相同 Throughput 時的功耗 Trade off performance Short-Circuit current 當 NMOS 與 PMOS 同時在切換開關時發生(NMOS尚未完全關閉，但PMOS已經部分啟動或是兩者相反)。 Kept to \u0026lt; 10% of capacitor charging current by making edges fast Static Power 因為 subthreshold leakage，MOS並未完全關閉所造成的漏電流致使的功耗。 在小尺寸(\u0026lt;180nm)元件中，因為 short channel effect 的加劇，此功耗的比例會加劇，甚至達 10~40%。 Diode Leakage Drain 端與 Source 端的 Diode junction 產生的 junction leakage。 通常很小可忽略。 Gate Leakage 因為電子穿隧穿過閘極氧化層(gate oxide)造成的漏電，通常在極薄的閘極氧化層發生，可忽略。 Reference reference1_Eletrical Engineering and Computer Science by MIT\n","permalink":"https://intervalrain.github.io/device/ringoscillator/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003e\u003cem\u003e2022/3/3 更新\u003c/em\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e此篇為筆者以工作經驗為背景寫下的筆記，如有錯誤煩請指教。\u003ca href=\"https://intervalrain.github.io/aboutme/\"\u003e點此聯絡我\u003c/a\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"ring-oscillator-環形振盪器ro\"\u003eRing Oscillator 環形振盪器(RO)\u003c/h1\u003e\n\u003ch2 id=\"簡介\"\u003e簡介\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e在 IC 電路設計中，除了 metal routing 會造成訊號的延遲，邏輯閘從高電位轉換到低電位、或從低電位轉換到高電位(switch)，也會造成相對應的 Gate Delay，然而 Gate Delay 非常小，很難以測量，故 RO 是一個便於測量 Gate Delay 的電路設計。\u003c/li\u003e\n\u003cli\u003e在 IC 電路設計中，除了考慮速度，還會考慮功耗，而邏輯閘開關所造成的動態功耗(dynamic power consumption)佔比非常大，故 Ring Oscillator 也可以用來計算閘開關的功耗。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"1-time-delay\"\u003e1. Time Delay\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e為了方便測量 Time Delay，RO 是一種用奇數 n 個 inverter(NOT Gate) 串接成的電路。透過在輸入端振盪產生方波，經過奇數個 inverter 之後，在輸出端產生反向的方波訊號，其時間差為經過 n 個 inverter 的 time delay。利用 time delay 會透過串接 inverter 累加(或稱propagation)的性質，故可以算出單個閘極的 gate delay(\\(T_p\\), propagation time)\u003c/li\u003e\n\u003cli\u003e\\(t_{HtoL}\\sim t_{LtoH}=t_p=\\Delta T/2n\\)\n\u003cimg alt=\"RO\" loading=\"lazy\" src=\"/images/ro.png\"\u003e [註] 圖為一個由3個反向器組成的環形振盪器，其輸出頻率為 \\(\\frac{1}{6}t_p\\)(Gate Delay)。\u003c/li\u003e\n\u003cli\u003e由偶數個 inverter 組成的環形電路無法構成環形振盪器，因為其輸入與輸出相同。然而這種配置可以被用作記憶體的基本單元，它是建構靜態隨機存取記憶體 SRAM (static random access memory)的基本組成。\u003c/li\u003e\n\u003cli\u003e環形振盪器通常全部由 inverter 所組成，較能抵抗環境影響。事實上也可以用 non-inverter 與 inverter 混合組成，前提是 inverter 的總數要是奇數。其振蕩器的週期等於兩倍的閘延遲(Gate delay)，\u003c/li\u003e\n\u003cli\u003e為了增加振盪頻率，通常有兩種方法\n\u003col\u003e\n\u003cli\u003e減少環形電路中的 inverter 數量。\u003c/li\u003e\n\u003cli\u003e提升電壓，但同時會有較大的電流與功耗。\n\u003cimg alt=\"RO_circuit\" loading=\"lazy\" src=\"/images/ro_circuit.png\"\u003e\n\u003cimg alt=\"td\" loading=\"lazy\" src=\"/images/td.png\"\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"2-power-consumption\"\u003e2. Power consumption\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e分為 Dynamic Power Consumption 與 Static Power Consumption。\u003c/li\u003e\n\u003cli\u003e\\(P_{total}=a\\times f\\times(\\frac{1}{2}CV_{DD}^2+V_{DD}I_{SC})+V_{DD}I_{off}+V_{DD}I_{Diode}+V_{DD}I_{Gate}\\)\n\u003cul\u003e\n\u003cli\u003ea 為 activity，每個 clock cycle 的平均開關切換數目。\n\u003cul\u003e\n\u003cli\u003e故在電路設計上減少開關的次數也能有效降低功耗。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003ef 為頻率，代表一秒內可以完成幾次開關(switch)。\n\u003cimg alt=\"PowerDissipation\" loading=\"lazy\" src=\"/images/powerDissipation.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"dynamic-powerswitching-power\"\u003eDynamic Power(Switching Power)\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e為現今 CMOS 振盪器的主要功耗來源。\u003c/li\u003e\n\u003cli\u003eDynamic Power 為 RO 在固定方波頻率為 \\(f\\) 時的平均功率(一組方波歷時為 \\(1/f\\))。\u003c/li\u003e\n\u003cli\u003e每一次開或關(switch)所耗的能為 \\(\\frac{1}{2}CV^2\\)\n\u003cul\u003e\n\u003cli\u003e推導：\n\u003cul\u003e\n\u003cli\u003e\\(C=\\frac{Q}{V}\\)\u003c/li\u003e\n\u003cli\u003e\\(I=\\frac{dQ}{dt}=C\\frac{dV}{dt}\\)\u003c/li\u003e\n\u003cli\u003e\\(W=IV=\\int_{0}^{t}CV\\frac{dV}{dt}=\\frac{1}{2}CV^2\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e故功耗為\\(P_{dynamic}=I_{active}V=CV^2\\)\u003c/li\u003e\n\u003cli\u003e如何降低功耗?\n\u003cul\u003e\n\u003cli\u003e降低 Activity\n\u003cul\u003e\n\u003cli\u003eClock Gating:\n\u003cul\u003e\n\u003cli\u003e避免不必要的 flip-flop\u003c/li\u003e\n\u003cli\u003e避免 transition downstream logic\u003c/li\u003e\n\u003cli\u003e加入 enable 來控制邏輯複雜度\n\u003cimg alt=\"ClockGating\" loading=\"lazy\" src=\"/images/clockgating.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eData Gating:\n\u003cul\u003e\n\u003cli\u003e利用 gating off inputs 來避免不必要的 toggling\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eBus Encodings\u003c/li\u003e\n\u003cli\u003eFreeze \u0026ldquo;Don\u0026rsquo;t cares\u0026rdquo;\u003c/li\u003e\n\u003cli\u003eRemove Glitches\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e降低\\(C_{Load}\\)\u003c/li\u003e\n\u003cli\u003e降低\\(f\\)\u003c/li\u003e\n\u003cli\u003e降低\\(V_{DD}\\)\u003c/li\u003e\n\u003cli\u003e平行結構\n\u003cul\u003e\n\u003cli\u003e可降低相同 Throughput 時的功耗\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eTrade off performance\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"short-circuit-current\"\u003eShort-Circuit current\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e當 NMOS 與 PMOS 同時在切換開關時發生(NMOS尚未完全關閉，但PMOS已經部分啟動或是兩者相反)。\n\u003cul\u003e\n\u003cli\u003eKept to \u0026lt; 10% of capacitor charging current by making edges fast\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"static-power\"\u003eStatic Power\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e因為 subthreshold leakage，MOS並未完全關閉所造成的漏電流致使的功耗。\u003c/li\u003e\n\u003cli\u003e在小尺寸(\u0026lt;180nm)元件中，因為 short channel effect 的加劇，此功耗的比例會加劇，甚至達 10~40%。\n\u003cimg alt=\"Static Power\" loading=\"lazy\" src=\"/images/staticpower.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"diode-leakage\"\u003eDiode Leakage\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eDrain 端與 Source 端的 Diode junction 產生的 junction leakage。\u003c/li\u003e\n\u003cli\u003e通常很小可忽略。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"gate-leakage\"\u003eGate Leakage\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e因為電子穿隧穿過閘極氧化層(gate oxide)造成的漏電，通常在極薄的閘極氧化層發生，可忽略。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"reference\"\u003eReference\u003c/h1\u003e\n\u003cp\u003e\u003ca href=\"https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-884-complex-digital-systems-spring-2005/lecture-notes/l11_power.pdf\"\u003ereference1_Eletrical Engineering and Computer Science by MIT\u003c/a\u003e\u003c/p\u003e","title":"[Device] Ring Oscillator 環形振盪器"},{"content":"List of Generics equality Case In leetcode no. 39 Combination Sum gives\nGiven an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.\nThe same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.\nIt is guaranteed that the number of unique combinations that sum up to target is less than 150 combinations for the given input.\nExample\nInput: candidates = [2,3,6,7], target = 7\nOutput: [[2,2,3],[7]]\nExplanation\n2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be use mutiple times. 7 is a candidate, and 7 = 7. These are the only two combinations.\nList Equality Consider the following case:\nList\u0026lt;Integer\u0026gt; a = Arrays.asList(1,2,3,4); List\u0026lt;Integer\u0026gt; b = Arrays.asList(4,3,2,1); List\u0026lt;Integer\u0026gt; c = Arrays.asList(4,4,3,2,1); If we apply containsAll methods to test List equality in any order, it might work. But it might not test size of List, so it might go wrong when there is repeated items.\nSystem.out.println(b.containsAll(a)) // true System.out.println(c.containsAll(a)) // true How about applying equals methods after sorting the List?\n// apply sort to all to-be-check items. Collections.sort(a); Collections.sort(b); Collections.sort(c); System.out.println(a.equals(b)); // true System.out.println(a.equals(c)); // false Luckily, List can easily to test elements equality rathan than strict equality of the same object.\nSo, We can see if we want to test List Equality in any order, we can just simply sort List, and apply a.equals(b).\nList of List Equality But in case leetcode no. 39 Combination Sum, list of list of Integer in any order is considered acceptable answer. How do we test list of list of Integer equality?\nclass Solution{ public List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; combinationSum(int[] candidates, int target){..} @Test public void test(){ Solution sol = new Solution(); expected = List.of(List.of(2,2,3), List.of(7)) // [[2,2,3],[7]] actual = sol.combinationSum(new int[]{2,3,6,7} Collections.sort(expected); // fail Collections.sort(actual); // fail assertEquals(expected, acutal) } } The code will fail, and the description shows below.\nThe method sort(List) in the type Collections is not applicable for the arguments (List\u0026lt;List\u0026gt;)Java(67108979)\nThus, we have to turns List of Integers in the List into some other type like String, by using toString(). So, we can do like this:\npublic boolean equalsAnyOrder(List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; expected, List\u0026lt;List\u0026lt;Integer\u0026gt;\u0026gt; actual){ // First we have to check size of list equaltiy if (expected == null \u0026amp;\u0026amp; actual == null) return false; if ((expected == null \u0026amp;\u0026amp; actual != null) || (expected != null \u0026amp;\u0026amp; actual == null) || expected.size() != actual.size()) return false; // Create List of string to turn List of Integer into strings. List\u0026lt;String\u0026gt; c = new ArrayList\u0026lt;\u0026gt;(); List\u0026lt;String\u0026gt; d = new ArrayList\u0026lt;\u0026gt;(); for (int i = 0; i \u0026lt; expected.size(); i++){ c.add(expected.get(i).toString()); d.add(actual.get(i).toString()); } // Sort List of strings Collections.sort(c); Collections.sort(d); // Apply simple list equaltiy (We have known List.equals() just test equality of elements in order.) return c.equals(d); } More materials Leetcode no.39 Solution Test List of List Equality Implementation Test cases for no.39 by Junit ","permalink":"https://intervalrain.github.io/java/listequal/","summary":"\u003ch1 id=\"list-of-generics-equality\"\u003eList of Generics equality\u003c/h1\u003e\n\u003ch2 id=\"case\"\u003eCase\u003c/h2\u003e\n\u003cp\u003eIn \u003ca href=\"https://leetcode.com/problems/combination-sum/\"\u003eleetcode no. 39 Combination Sum\u003c/a\u003e gives\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eGiven an array of \u003cstrong\u003edistinct\u003c/strong\u003e integers \u003ccode\u003ecandidates\u003c/code\u003e and a target integer \u003ccode\u003etarget\u003c/code\u003e, return a \u003cem\u003elist\u003c/em\u003e of all \u003cstrong\u003eunique combinations\u003c/strong\u003e of \u003ccode\u003ecandidates\u003c/code\u003e \u003cem\u003ewhere the chosen numbers sum to target\u003c/em\u003e. You may return the combinations in \u003cstrong\u003eany order\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003eThe \u003cstrong\u003esame\u003c/strong\u003e number may be chosen from \u003ccode\u003ecandidates\u003c/code\u003e an \u003cstrong\u003eunlimited number of times\u003c/strong\u003e. Two combinations are unique if the frequency of at least one of the chosen numbers is different.\u003c/p\u003e","title":"[Java] List of list of something equality"},{"content":"How to say hello to the world?\nJava class Hello{ public static void main(String[] args){ System.out.println(\u0026#34;Hello World!\u0026#34;); } } C #include \u0026lt;stdio.h\u0026gt; int main(){ printf(\u0026#34;Hello World!\u0026#34;); return 0; } C++ #include \u0026lt;iostream\u0026gt; int main(){ std::cout \u0026lt;\u0026lt; \u0026#34;Hello World!\u0026#34; \u0026lt;\u0026lt; std::endl; return 0; } ###C#\nnamespace HelloWorld{ class Hello{ static void Main(String[] args){ System.Console.WriteLine(\u0026#34;Hello World!\u0026#34;); } } } Python print(\u0026#34;Hello World!\u0026#34;) Ruby puts \u0026#39;Hello World!\u0026#39; TCL Language puts \u0026#34;Hello World!\u0026#34; JavaScript console.log(\u0026#34;Hello World!\u0026#34;); TypeScript console.log \u0026#39;Hello World!\u0026#39; Perl print \u0026#34;Hello World!\u0026#34;; R cat(\u0026#39;Hello World!\u0026#39;); Swift println(\u0026#39;Hello World!\u0026#39;); Kotlin fun main(args: Array\u0026lt;String\u0026gt;){ println(\u0026#34;Hello World!\u0026#34;) } Go println(\u0026#39;Hello World!\u0026#39;); PHP echo \u0026#34;Hello World!\u0026#34;; VBA msgbox \u0026#34;Hello World\u0026#34; Assembly Language global _main extern _printf section .text _main: push message call _printf add esp, 4 message: db \u0026#39;Hello World!\u0026#39;, 11, 0 Me Hello the fucking world ","permalink":"https://intervalrain.github.io/helloworld/","summary":"\u003cp\u003eHow to say hello to the world?\u003c/p\u003e\n\u003ch3 id=\"java\"\u003eJava\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Java\" data-lang=\"Java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eHello\u003c/span\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(String\u003cspan style=\"color:#f92672\"\u003e[]\u003c/span\u003e args){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        System.\u003cspan style=\"color:#a6e22e\"\u003eout\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eprintln\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Hello World!\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"c\"\u003eC\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C\" data-lang=\"C\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eprintf\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Hello World!\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"c-1\"\u003eC++\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C++\" data-lang=\"C++\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e#include\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e\u0026lt;iostream\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    std\u003cspan style=\"color:#f92672\"\u003e::\u003c/span\u003ecout \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Hello World!\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e std\u003cspan style=\"color:#f92672\"\u003e::\u003c/span\u003eendl;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e###C#\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-C#\" data-lang=\"C#\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003enamespace\u003c/span\u003e HelloWorld{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eHello\u003c/span\u003e{\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003estatic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e Main(String[] args){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            System.Console.WriteLine(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Hello World!\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"python\"\u003ePython\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Python3\" data-lang=\"Python3\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprint(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Hello World!\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"ruby\"\u003eRuby\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Ruby\" data-lang=\"Ruby\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eputs \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;Hello World!\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"tcl-language\"\u003eTCL Language\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-TCL\" data-lang=\"TCL\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eputs \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Hello World!\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"javascript\"\u003eJavaScript\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Java\" data-lang=\"Java\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003econsole.\u003cspan style=\"color:#a6e22e\"\u003elog\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Hello World!\u0026#34;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"typescript\"\u003eTypeScript\u003c/h3\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003econsole.log \u0026#39;Hello World!\u0026#39;\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"perl\"\u003ePerl\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Perl\" data-lang=\"Perl\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eprint\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Hello World!\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"r\"\u003eR\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-R\" data-lang=\"R\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#a6e22e\"\u003ecat\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;Hello World!\u0026#39;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"swift\"\u003eSwift\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Swift\" data-lang=\"Swift\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprintln(\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u0026#39;\u003c/span\u003eHello World!\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u0026#39;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"kotlin\"\u003eKotlin\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Kotlin\" data-lang=\"Kotlin\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003efun\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emain\u003c/span\u003e(args: Array\u0026lt;String\u0026gt;){\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    println(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Hello World!\u0026#34;\u003c/span\u003e)\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"go\"\u003eGo\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Go\" data-lang=\"Go\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003eprintln(\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eHello\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eWorld\u003c/span\u003e!\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e\u0026#39;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"php\"\u003ePHP\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-PHP\" data-lang=\"PHP\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eecho\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Hello World!\u0026#34;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"vba\"\u003eVBA\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-Shell\" data-lang=\"Shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003emsgbox \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Hello World\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"assembly-language\"\u003eAssembly Language\u003c/h3\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode class=\"language-Assembly\" data-lang=\"Assembly\"\u003e    global _main\n    extern _printf\n\n    section .text\n_main:\n    push message\n    call _printf\n    add   esp, 4\nmessage:\n    db    \u0026#39;Hello World!\u0026#39;, 11, 0\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"me\"\u003eMe\u003c/h3\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eHello the fucking world\n\u003c/code\u003e\u003c/pre\u003e","title":"Hello World"},{"content":"數位系統與開關電路 在現實世界中，資訊是以類比(Analog)的方式傳遞的，換言之，資訊是連續的 在電腦世界中，資訊是以數位(Digital)的方式傳遞的，也就是開與關或是0或1。 A/D \u0026lt;-\u0026gt; DSP(digital signal processor) \u0026lt;-\u0026gt; D/A Switching Circuit 可分為三個層級： System: 模組Modules、算術運算單元 ALU(Arithmetic logic unit)、記憶體 Memory Logic：邏輯閘(gates) Circuit：電晶體(transistors) 經由 switching network 的設計，可將輸入轉成合乎 spec 的輸出。其中 switching network 的種類包含： Combinational network 輸出是輸入的函數，且表達當下的值。 Sequential network 輸出是輸入的函數，可以表達當下的值或是過去的值。 具有記憶體的行為 Switches 由電晶體來實現 transistor level, gate level, module level\u0026hellip; 數字系統與轉換 在現實世界中，最普遍使用的數字系統為十進制(Decimal) 然而在電腦世界中，因為只有代表開與關的 0 與 1，故使用的數字系統是以二進制(Binary)為基礎。 \\(N=(a_2a_1a_0)_R=a_2\\times R^2+a_1\\times R^1+a_0\\times R^0\\) 負數 N 正數表示 -N 正數加負號 1的補數 2的補數 +0 0000 -0 1000 1111 N/A +1 0001 -1 1001 1110 1111 +2 0010 -2 1010 1101 1110 +3 0011 -3 1011 1100 1101 +4 0100 -4 1100 1011 1100 +5 0101 -5 1101 1010 1011 +6 0110 -6 1110 1001 1010 +7 0111 -7 1111 1000 1001 +8 N/A -8 N/A N/A 1000 二進制算數 當兩數相加或兩數相減時，超過可用bits數時會發生overflow， 例如-3+-4=-4是OK的 但-5+-6=-11會產生溢位 二進制的表達方式 Binary codes Decimal Digit 8421 Code(BCD) 6311 Code Excess-3 Code 2-out-of-5 Code Gray Code 0 0000 0000 0011 00011 0000 1 0001 0001 0100 00101 0001 2 0010 0011 0101 00110 0011 3 0011 0100 0110 01001 0010 4 0100 0101 0111 01010 0110 5 0101 0111 1000 01100 1110 6 0110 1000 1001 10001 1010 7 0111 1001 1010 10010 1011 8 1000 1011 1011 10100 1001 9 1001 1100 1100 11000 1000 Weighted Codes 8421 Code 與 6311 都是 Weighted Code，代表每4個bit，各自代表的數字， 例：1011 for 8421 = 8 + 0 + 2 + 1 = 11 例：1011 for 6311 = 6 + 0 + 1 + 1 = 8 Excess-3 Codes Excess-3 是以 8421 Code 為基礎下，額外加 3。 使得 i 與 10-i 互為 1 的補數， 0 與 9 為補數。(0011 與 1100) 1 與 8 為補數。(0100 與 1011) 2 與 7 為補數。(0101 與 1010) 3 與 6 為補數。(0110 與 1001) 4 與 5 為補數。(0111 與 1000) Gray Codes 兩相鄰的數只會相差一個 bit 又名 Reflected Binary Codes(RBC)、Unit distance code、Minimum error code 可以減少 switching operation 如何轉換 Gray Code? 參考Leetcode no.89 ASCII table ","permalink":"https://intervalrain.github.io/logicdesign/lec1/","summary":"\u003ch1 id=\"數位系統與開關電路\"\u003e數位系統與開關電路\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e在現實世界中，資訊是以\u003cstrong\u003e類比\u003c/strong\u003e(Analog)的方式傳遞的，換言之，資訊是\u003cstrong\u003e連續的\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e在電腦世界中，資訊是以\u003cstrong\u003e數位\u003c/strong\u003e(Digital)的方式傳遞的，也就是\u003cstrong\u003e開與關\u003c/strong\u003e或是\u003cstrong\u003e0或1\u003c/strong\u003e。\u003c/li\u003e\n\u003cli\u003eA/D \u0026lt;-\u0026gt; DSP(digital signal processor) \u0026lt;-\u0026gt; D/A\n\u003cimg alt=\"sign\" loading=\"lazy\" src=\"/images/sign.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"switching-circuit\"\u003eSwitching Circuit\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e可分為三個層級：\n\u003cul\u003e\n\u003cli\u003eSystem: 模組Modules、算術運算單元 ALU(Arithmetic logic unit)、記憶體 Memory\u003c/li\u003e\n\u003cli\u003eLogic：邏輯閘(gates)\u003c/li\u003e\n\u003cli\u003eCircuit：電晶體(transistors)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e經由 switching network 的設計，可將輸入轉成合乎 spec 的輸出。其中 switching network 的種類包含：\n\u003cul\u003e\n\u003cli\u003eCombinational network\n\u003cul\u003e\n\u003cli\u003e輸出是輸入的函數，且表達當下的值。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eSequential network\n\u003cul\u003e\n\u003cli\u003e輸出是輸入的函數，可以表達當下的值或是過去的值。\u003c/li\u003e\n\u003cli\u003e具有記憶體的行為\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eSwitches\n\u003cul\u003e\n\u003cli\u003e由電晶體來實現\u003c/li\u003e\n\u003cli\u003etransistor level, gate level, module level\u0026hellip;\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"數字系統與轉換\"\u003e數字系統與轉換\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e在現實世界中，最普遍使用的數字系統為十進制(Decimal)\u003c/li\u003e\n\u003cli\u003e然而在電腦世界中，因為只有代表開與關的 0 與 1，故使用的數字系統是以二進制(Binary)為基礎。\n\u003cul\u003e\n\u003cli\u003e\\(N=(a_2a_1a_0)_R=a_2\\times R^2+a_1\\times R^1+a_0\\times R^0\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"負數\"\u003e負數\u003c/h1\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eN\u003c/th\u003e\n          \u003cth\u003e正數表示\u003c/th\u003e\n          \u003cth\u003e-N\u003c/th\u003e\n          \u003cth\u003e正數加負號\u003c/th\u003e\n          \u003cth\u003e1的補數\u003c/th\u003e\n          \u003cth\u003e2的補數\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e+0\u003c/td\u003e\n          \u003ctd\u003e0000\u003c/td\u003e\n          \u003ctd\u003e-0\u003c/td\u003e\n          \u003ctd\u003e1000\u003c/td\u003e\n          \u003ctd\u003e1111\u003c/td\u003e\n          \u003ctd\u003eN/A\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e+1\u003c/td\u003e\n          \u003ctd\u003e0001\u003c/td\u003e\n          \u003ctd\u003e-1\u003c/td\u003e\n          \u003ctd\u003e1001\u003c/td\u003e\n          \u003ctd\u003e1110\u003c/td\u003e\n          \u003ctd\u003e1111\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e+2\u003c/td\u003e\n          \u003ctd\u003e0010\u003c/td\u003e\n          \u003ctd\u003e-2\u003c/td\u003e\n          \u003ctd\u003e1010\u003c/td\u003e\n          \u003ctd\u003e1101\u003c/td\u003e\n          \u003ctd\u003e1110\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e+3\u003c/td\u003e\n          \u003ctd\u003e0011\u003c/td\u003e\n          \u003ctd\u003e-3\u003c/td\u003e\n          \u003ctd\u003e1011\u003c/td\u003e\n          \u003ctd\u003e1100\u003c/td\u003e\n          \u003ctd\u003e1101\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e+4\u003c/td\u003e\n          \u003ctd\u003e0100\u003c/td\u003e\n          \u003ctd\u003e-4\u003c/td\u003e\n          \u003ctd\u003e1100\u003c/td\u003e\n          \u003ctd\u003e1011\u003c/td\u003e\n          \u003ctd\u003e1100\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e+5\u003c/td\u003e\n          \u003ctd\u003e0101\u003c/td\u003e\n          \u003ctd\u003e-5\u003c/td\u003e\n          \u003ctd\u003e1101\u003c/td\u003e\n          \u003ctd\u003e1010\u003c/td\u003e\n          \u003ctd\u003e1011\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e+6\u003c/td\u003e\n          \u003ctd\u003e0110\u003c/td\u003e\n          \u003ctd\u003e-6\u003c/td\u003e\n          \u003ctd\u003e1110\u003c/td\u003e\n          \u003ctd\u003e1001\u003c/td\u003e\n          \u003ctd\u003e1010\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e+7\u003c/td\u003e\n          \u003ctd\u003e0111\u003c/td\u003e\n          \u003ctd\u003e-7\u003c/td\u003e\n          \u003ctd\u003e1111\u003c/td\u003e\n          \u003ctd\u003e1000\u003c/td\u003e\n          \u003ctd\u003e1001\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e+8\u003c/td\u003e\n          \u003ctd\u003eN/A\u003c/td\u003e\n          \u003ctd\u003e-8\u003c/td\u003e\n          \u003ctd\u003eN/A\u003c/td\u003e\n          \u003ctd\u003eN/A\u003c/td\u003e\n          \u003ctd\u003e1000\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch1 id=\"二進制算數\"\u003e二進制算數\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e當兩數相加或兩數相減時，超過可用bits數時會發生overflow，\n\u003cul\u003e\n\u003cli\u003e例如\u003ccode\u003e-3+-4=-4\u003c/code\u003e是OK的\u003c/li\u003e\n\u003cli\u003e但\u003ccode\u003e-5+-6=-11\u003c/code\u003e會產生溢位\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"二進制的表達方式-binary-codes\"\u003e二進制的表達方式 Binary codes\u003c/h1\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003eDecimal Digit\u003c/th\u003e\n          \u003cth\u003e8421 Code(BCD)\u003c/th\u003e\n          \u003cth\u003e6311 Code\u003c/th\u003e\n          \u003cth\u003eExcess-3 Code\u003c/th\u003e\n          \u003cth\u003e2-out-of-5 Code\u003c/th\u003e\n          \u003cth\u003eGray Code\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e0\u003c/td\u003e\n          \u003ctd\u003e0000\u003c/td\u003e\n          \u003ctd\u003e0000\u003c/td\u003e\n          \u003ctd\u003e0011\u003c/td\u003e\n          \u003ctd\u003e00011\u003c/td\u003e\n          \u003ctd\u003e0000\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e1\u003c/td\u003e\n          \u003ctd\u003e0001\u003c/td\u003e\n          \u003ctd\u003e0001\u003c/td\u003e\n          \u003ctd\u003e0100\u003c/td\u003e\n          \u003ctd\u003e00101\u003c/td\u003e\n          \u003ctd\u003e0001\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e2\u003c/td\u003e\n          \u003ctd\u003e0010\u003c/td\u003e\n          \u003ctd\u003e0011\u003c/td\u003e\n          \u003ctd\u003e0101\u003c/td\u003e\n          \u003ctd\u003e00110\u003c/td\u003e\n          \u003ctd\u003e0011\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e3\u003c/td\u003e\n          \u003ctd\u003e0011\u003c/td\u003e\n          \u003ctd\u003e0100\u003c/td\u003e\n          \u003ctd\u003e0110\u003c/td\u003e\n          \u003ctd\u003e01001\u003c/td\u003e\n          \u003ctd\u003e0010\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e4\u003c/td\u003e\n          \u003ctd\u003e0100\u003c/td\u003e\n          \u003ctd\u003e0101\u003c/td\u003e\n          \u003ctd\u003e0111\u003c/td\u003e\n          \u003ctd\u003e01010\u003c/td\u003e\n          \u003ctd\u003e0110\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e5\u003c/td\u003e\n          \u003ctd\u003e0101\u003c/td\u003e\n          \u003ctd\u003e0111\u003c/td\u003e\n          \u003ctd\u003e1000\u003c/td\u003e\n          \u003ctd\u003e01100\u003c/td\u003e\n          \u003ctd\u003e1110\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e6\u003c/td\u003e\n          \u003ctd\u003e0110\u003c/td\u003e\n          \u003ctd\u003e1000\u003c/td\u003e\n          \u003ctd\u003e1001\u003c/td\u003e\n          \u003ctd\u003e10001\u003c/td\u003e\n          \u003ctd\u003e1010\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e7\u003c/td\u003e\n          \u003ctd\u003e0111\u003c/td\u003e\n          \u003ctd\u003e1001\u003c/td\u003e\n          \u003ctd\u003e1010\u003c/td\u003e\n          \u003ctd\u003e10010\u003c/td\u003e\n          \u003ctd\u003e1011\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e8\u003c/td\u003e\n          \u003ctd\u003e1000\u003c/td\u003e\n          \u003ctd\u003e1011\u003c/td\u003e\n          \u003ctd\u003e1011\u003c/td\u003e\n          \u003ctd\u003e10100\u003c/td\u003e\n          \u003ctd\u003e1001\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e9\u003c/td\u003e\n          \u003ctd\u003e1001\u003c/td\u003e\n          \u003ctd\u003e1100\u003c/td\u003e\n          \u003ctd\u003e1100\u003c/td\u003e\n          \u003ctd\u003e11000\u003c/td\u003e\n          \u003ctd\u003e1000\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"weighted-codes\"\u003eWeighted Codes\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e8421 Code 與 6311 都是 Weighted Code，代表每4個bit，各自代表的數字，\n\u003cul\u003e\n\u003cli\u003e例：1011 for 8421 = 8 + 0 + 2 + 1 = 11\u003c/li\u003e\n\u003cli\u003e例：1011 for 6311 = 6 + 0 + 1 + 1 = 8\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"excess-3-codes\"\u003eExcess-3 Codes\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eExcess-3 是以 8421 Code 為基礎下，額外加 3。\u003c/li\u003e\n\u003cli\u003e使得 i 與 10-i 互為 1 的補數，\n\u003cul\u003e\n\u003cli\u003e0 與 9 為補數。(0011 與 1100)\u003c/li\u003e\n\u003cli\u003e1 與 8 為補數。(0100 與 1011)\u003c/li\u003e\n\u003cli\u003e2 與 7 為補數。(0101 與 1010)\u003c/li\u003e\n\u003cli\u003e3 與 6 為補數。(0110 與 1001)\u003c/li\u003e\n\u003cli\u003e4 與 5 為補數。(0111 與 1000)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"gray-codes\"\u003eGray Codes\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e兩相鄰的數只會相差一個 bit\u003c/li\u003e\n\u003cli\u003e又名 Reflected Binary Codes(RBC)、Unit distance code、Minimum error code\u003c/li\u003e\n\u003cli\u003e可以減少 switching operation\u003c/li\u003e\n\u003cli\u003e如何轉換 Gray Code? 參考\u003ca href=\"https://github.com/intervalrain/leetcode/blob/master/src/main/java/com/rainhu/n89_GrayCode.java\"\u003eLeetcode no.89\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"ascii-table\"\u003eASCII table\u003c/h3\u003e\n\u003cp\u003e\u003cimg alt=\"ascii\" loading=\"lazy\" src=\"/images/ascii.png\"\u003e\u003c/p\u003e","title":"[Logic Design] Lec 01 - 數字系統與轉換"},{"content":"基本邏輯運算 Logic Gates Not Gates Symbol Truth Table\n\\( \\def\\arraystrecth{1.5}\\begin{array}{|c|c|}\\hline \\text{X}\u0026amp;\\overline{\\text{X}}\\text{or}\\text{X\u0026rsquo;}\\\\\\hline 0\u0026amp;1\\\\\\hline 1\u0026amp;0\\\\\\hline \\end{array} \\) And Gates Symbol Truth Table\n\\( \\def\\arraystrecth{1.5}\\begin{array}{|c|c|c|}\\hline \\text{X}\u0026amp;\\text{Y}\u0026amp;\\text{Z=X}\\cdot\\text{Y}\\\\\\hline 0\u0026amp;0\u0026amp;0\\\\\\hline 0\u0026amp;1\u0026amp;0\\\\\\hline 1\u0026amp;0\u0026amp;0\\\\\\hline 1\u0026amp;1\u0026amp;1\\\\\\hline \\end{array} \\) Or Gates Symbol Truth Table \\( \\def\\arraystrecth{1.5}\\begin{array}{|c|c|c|}\\hline \\text{X}\u0026amp;\\text{Y}\u0026amp;\\text{Z=X+Y}\\\\\\hline 0\u0026amp;0\u0026amp;0\\\\\\hline 0\u0026amp;1\u0026amp;1\\\\\\hline 1\u0026amp;0\u0026amp;1\\\\\\hline 1\u0026amp;1\u0026amp;1\\\\\\hline \\end{array} \\) 布林表達式與真值表(Boolean Expression and Truth Table) Boolean expression 用 ' 代表 NOT 用 + 代表 OR 用 . 代表 AND 將輸入用上面的運算子表示成算式，如：\\((A+C)(B\u0026rsquo;+C)\\) Truth Table \\( \\def\\arraystrecth{1.5}\\begin{array}{ccc|cccccc} A\u0026amp;B\u0026amp;C\u0026amp;B\u0026rsquo;\u0026amp;AB\u0026rsquo;\u0026amp;AB\u0026rsquo;+C\u0026amp;A+C\u0026amp;B\u0026rsquo;+C\u0026amp;(A+C)(B\u0026rsquo;+C)\\\\\\hline 0\u0026amp;0\u0026amp;0\u0026amp;1\u0026amp;0\u0026amp;0\u0026amp;0\u0026amp;1\u0026amp;0\\\\ 0\u0026amp;0\u0026amp;1\u0026amp;1\u0026amp;0\u0026amp;1\u0026amp;1\u0026amp;1\u0026amp;1\\\\ 0\u0026amp;1\u0026amp;0\u0026amp;0\u0026amp;0\u0026amp;0\u0026amp;0\u0026amp;0\u0026amp;0\\\\ 0\u0026amp;1\u0026amp;1\u0026amp;0\u0026amp;0\u0026amp;1\u0026amp;1\u0026amp;1\u0026amp;1\\\\ 1\u0026amp;0\u0026amp;0\u0026amp;1\u0026amp;1\u0026amp;1\u0026amp;1\u0026amp;1\u0026amp;1\\\\ 1\u0026amp;0\u0026amp;1\u0026amp;1\u0026amp;1\u0026amp;1\u0026amp;1\u0026amp;1\u0026amp;1\\\\ 1\u0026amp;1\u0026amp;0\u0026amp;0\u0026amp;0\u0026amp;0\u0026amp;1\u0026amp;0\u0026amp;0\\\\ 1\u0026amp;1\u0026amp;1\u0026amp;0\u0026amp;0\u0026amp;1\u0026amp;1\u0026amp;1\u0026amp;1\\\\ \\end{array} \\) 基本運算定理 NOT gate 的基本運算定理 \\( \\boxed{ \\def\\arraystretch{1.5}\\begin{array}{ccc} (x\u0026rsquo;)\u0026rsquo;\u0026amp;=\u0026amp;x \\end{array} } \\)\nAND gate 的基本運算定理 \\( \\boxed{ \\def\\arraystretch{1.5}\\begin{array}{ccc} x+0\u0026amp;=\u0026amp;x\\\\ x+1\u0026amp;=\u0026amp;1\\\\ x+x\u0026amp;=\u0026amp;x\\\\ x+x\u0026rsquo;\u0026amp;=\u0026amp;1 \\end{array} } \\)\nOR gate 的基本運算定理 \\( \\boxed{ \\def\\arraystretch{1.5}\\begin{array}{ccc} x\\cdot 0\u0026amp;=\u0026amp;0\\\\ x\\cdot 1\u0026amp;=\u0026amp;x\\\\ x\\cdot x\u0026amp;=\u0026amp;x\\\\ x\\cdot x\u0026rsquo;\u0026amp;=\u0026amp;0 \\end{array} } \\)\n進階運算定理 交換律 Commutative Law \\( \\boxed{ \\def\\arraystretch{1.5}\\begin{array}{ccc} xy\u0026amp;=\u0026amp;yx\\\\ x+y\u0026amp;=\u0026amp;y+x \\end{array} } \\)\n結合律 Associative Law \\( \\boxed{ \\def\\arraystretch{1.5}\\begin{array}{ccc} (xy)z\u0026amp;=\u0026amp;x(yz)\\\\ (x+y)+z\u0026amp;=\u0026amp;x+(y+z) \\end{array} } \\)\n分配律 Distributive Law \\( \\boxed{ \\def\\arraystretch{1.5}\\begin{array}{ccc} x(y+z)\u0026amp;=\u0026amp;xy+xz\\\\ x+yz\u0026amp;=\u0026amp;(x+y)(x+z) \\end{array} } \\)\nMultiplying out and factoring Sum of Product(SOP) form 將算式化整成各個輸入端先 AND 後再 OR 例： \\(ABC+AB\u0026rsquo;C+AB\u0026rsquo;C\u0026rsquo;\\) Product of Sum(POS) form 將算式化整成各個輸入端先 OR 後再 AND 例： \\((A+B+C)(A+B\u0026rsquo;+C)(A+B\u0026rsquo;+C\u0026rsquo;)\\) Multiplying out： 將算式化簡成 SOP form 善用\\(\\boxed{(A+B)(A+C)=A+BC}\\) 範例：\n\\((A+BC)(A+D+E)\\)\n\\(=(A+x)(A+y)\\)\n\\(=A+xy\\)\n\\(=A+BC(D+E)\\)\n\\(=A+BCD+BCE\\) Factoring： 將算式化簡成 POS form 善用\\(\\boxed{A+BC=(A+B)(A+C)}\\) 範例：\n\\(AB\u0026rsquo;+C\u0026rsquo;D\\)\n\\(=(AB\u0026rsquo;+C\u0026rsquo;)(AB\u0026rsquo;+D)\\)\n\\(=(A+C\u0026rsquo;)(B\u0026rsquo;+C\u0026rsquo;)(A+D)(B\u0026rsquo;+D))\\) 2-level realization 利用 Multiplying out 與 Factoring 可以將電路簡化成 2-level circuit 因為減少了 Delay propagation 可以減少 Total Time Delay DeMorgan\u0026rsquo;s Laws and Duality DeMorgan\u0026rsquo;s Laws 方法： \\(AND\\leftrightarrow OR\\) \\(A\\leftrightarrow A\u0026rsquo;\\)\n\\( \\boxed{ \\def\\arraystretch{1.5}\\begin{array}{ccc} (x+y+z+\u0026hellip;)\u0026rsquo;\u0026amp;=\u0026amp;x\u0026rsquo; y\u0026rsquo; z\u0026rsquo;\u0026hellip;\\\\ (xyz\u0026hellip;)\u0026rsquo;\u0026amp;=\u0026amp;x\u0026rsquo;+y\u0026rsquo;+z\u0026rsquo;\u0026hellip; \\end{array} } \\) Truth Table 證明\n\\( \\def\\arraystretch{1.5}\\begin{array}{ccc|ccc|c|c|c} x\u0026amp;y\u0026amp;z\u0026amp;x\u0026rsquo;\u0026amp;y\u0026rsquo;\u0026amp;z\u0026rsquo;\u0026amp;x+y+z\u0026amp;(x+y+z)\u0026rsquo;\u0026amp;x\u0026rsquo; y\u0026rsquo; z\u0026rsquo;\\\\\\hline 0\u0026amp;0\u0026amp;0\u0026amp;1\u0026amp;1\u0026amp;1\u0026amp;0\u0026amp;1\u0026amp;1\\\\ 0\u0026amp;0\u0026amp;1\u0026amp;1\u0026amp;1\u0026amp;0\u0026amp;1\u0026amp;0\u0026amp;0\\\\ 0\u0026amp;1\u0026amp;0\u0026amp;1\u0026amp;0\u0026amp;1\u0026amp;1\u0026amp;0\u0026amp;0\\\\ 0\u0026amp;1\u0026amp;1\u0026amp;1\u0026amp;0\u0026amp;0\u0026amp;1\u0026amp;0\u0026amp;0\\\\ 1\u0026amp;0\u0026amp;0\u0026amp;0\u0026amp;1\u0026amp;1\u0026amp;1\u0026amp;0\u0026amp;0\\\\ 1\u0026amp;0\u0026amp;1\u0026amp;0\u0026amp;1\u0026amp;0\u0026amp;1\u0026amp;0\u0026amp;0\\\\ 1\u0026amp;1\u0026amp;0\u0026amp;0\u0026amp;0\u0026amp;1\u0026amp;1\u0026amp;0\u0026amp;0\\\\ 1\u0026amp;1\u0026amp;1\u0026amp;0\u0026amp;0\u0026amp;0\u0026amp;1\u0026amp;0\u0026amp;0\\\\ \\end{array} \\) 範例\n\\([(A\u0026rsquo; B+C\u0026rsquo;)(D\u0026rsquo;+EF\u0026rsquo;)+GH+W]\u0026rsquo;\\)\n\\(=[(A+B\u0026rsquo;)C+D(E\u0026rsquo;+F)] (G\u0026rsquo;+H\u0026rsquo;)W\u0026rsquo;\\) Duality 方法\n\\(AND\\leftrightarrow OR\\) \\(0\\leftrightarrow 1\\)\n\\( \\boxed{ \\def\\arraystretch{1.5}\\begin{array}{cccccccccc} [f(\u0026amp;x_1,\u0026amp;x_2,\u0026amp;\u0026hellip;,\u0026amp;x_n,\u0026amp;0,\u0026amp;1,\u0026amp;+,\u0026amp;\\cdot\u0026amp;)]^D\\\\ =f(\u0026amp;x_1,\u0026amp;x_2,\u0026amp;\u0026hellip;,\u0026amp;x_n,\u0026amp;1,\u0026amp;0,\u0026amp;\\cdot,\u0026amp;+\u0026amp;) \\end{array} } \\) 性質\n\\(\\boxed{F=G\\rightarrow F^D=G^D}\\) 範例\n\\((x+y\u0026rsquo;)y=xy\\rightarrow x\\cdot y\u0026rsquo;+y=x+y\\)\n回顧分配律 Distributive Law，即為 Duality 的表現。\n\\( \\boxed{ \\def\\arraystretch{1.5}\\begin{array}{ccc} x(y+z)\u0026amp;=\u0026amp;xy+xz\\\\ x+yz\u0026amp;=\u0026amp;(x+y)(x+z) \\end{array} } \\)\nExclusive-OR and equivalence operations Exlusive-OR(XOR,\\(\\oplus\\)) Symbol Truth Table\n\\( \\def\\arraystrecth{1.5}\\begin{array}{|c|c|c|}\\hline \\text{X}\u0026amp;\\text{Y}\u0026amp;\\text{Z=X}\\oplus\\text{Y}\\\\\\hline 0\u0026amp;0\u0026amp;0\\\\\\hline 0\u0026amp;1\u0026amp;1\\\\\\hline 1\u0026amp;0\u0026amp;1\\\\\\hline 1\u0026amp;1\u0026amp;0\\\\\\hline \\end{array} \\) 性質：\n\\( \\boxed{ \\def\\arraystretch{1.5}\\begin{array}{ccc} x\\oplus 0\u0026amp;=\u0026amp;x\\\\ x\\oplus 1\u0026amp;=\u0026amp;x\u0026rsquo;\\\\ x\\oplus x\u0026amp;=\u0026amp;0\\\\ x\\oplus x\u0026rsquo;\u0026amp;=\u0026amp;1\\\\ x\\oplus y\u0026amp;=\u0026amp;y\\oplus x\\\\ (x\\oplus y)\\oplus z\u0026amp;=\u0026amp;x\\oplus (y\\oplus z)\\\\ x(y\\oplus z)\u0026amp;=\u0026amp;xy\\oplus xz\\\\ x\\oplus y\u0026amp;=\u0026amp;xy+x\u0026rsquo; y' \\end{array} } \\) Equivalence(\\(\\equiv\\)) Symbol Truth Table\n\\( \\def\\arraystrecth{1.5}\\begin{array}{|c|c|c|}\\hline \\text{X}\u0026amp;\\text{Y}\u0026amp;\\text{Z=X}\\equiv{Y}\\\\\\hline 0\u0026amp;0\u0026amp;1\\\\\\hline 0\u0026amp;1\u0026amp;0\\\\\\hline 1\u0026amp;0\u0026amp;0\\\\\\hline 1\u0026amp;1\u0026amp;1\\\\\\hline \\end{array} \\) 性質：\n\\( \\boxed{ \\def\\arraystretch{1.5}\\begin{array}{ccc} x\\equiv 0\u0026amp;=\u0026amp;x\u0026rsquo;\\\\ x\\equiv 1\u0026amp;=\u0026amp;x\\\\ x\\equiv x\u0026amp;=\u0026amp;1\\\\ x\\equiv x\u0026rsquo;\u0026amp;=\u0026amp;0\\\\ x\\equiv y\u0026amp;=\u0026amp;y\\equiv x\\\\ (x\\equiv y)\\equiv z\u0026amp;=\u0026amp;x\\equiv (y\\equiv z)\\\\ x(y\\equiv z)\u0026amp;=\u0026amp;xy\\equiv xz\\\\ x\\equiv y\u0026amp;=\u0026amp;xy\u0026rsquo;+x\u0026rsquo; y \\end{array} } \\) 連鎖律 The consensus thorem 公式： \\(\\boxed{xy+x\u0026rsquo; z+yz=xy+x\u0026rsquo; z}\\) \\(\\boxed{(x+y)(x\u0026rsquo;+z)(y+z)=(x+y)(x\u0026rsquo;+z)}\\) 證明：\n\\(xy+x\u0026rsquo; z+yz\\)\n\\(=xy+x\u0026rsquo; z + (x+x\u0026rsquo;)yz\\)\n\\(=xy+xyz+x\u0026rsquo; z+x\u0026rsquo; yz\\)\n\\(=xy(1+z)+x\u0026rsquo; z(1+y)\\)\n\\(=xy+x\u0026rsquo; z\\) 簡化布林表達式的流程 利用 \\(\\boxed{xy+xy\u0026rsquo;=x(y+y\u0026rsquo;)=x}\\)(AND性質) 利用 \\(\\boxed{x+xy+\u0026hellip;=x(1+y+\u0026hellip;)=x}\\)(OR性質) 利用 \\(\\boxed{xy+x\u0026rsquo; z+yz=xy+x\u0026rsquo;z }\\)(連鎖律) 利用 \\(\\boxed{x+x\u0026rsquo;y=x(y+y\u0026rsquo;)+x\u0026rsquo;y=xy+xy\u0026rsquo;+x\u0026rsquo; y=x+y}\\) 必要時加入 redundant terms Lec3會使用圖表法，較不容易出錯。 如何證明布林表達式的正確性? 建構 Truth Table 簡化 LHS 和 RHS ","permalink":"https://intervalrain.github.io/logicdesign/lec2/","summary":"\u003ch1 id=\"基本邏輯運算\"\u003e基本邏輯運算\u003c/h1\u003e\n\u003ch2 id=\"logic-gates\"\u003eLogic Gates\u003c/h2\u003e\n\u003ch3 id=\"not-gates\"\u003eNot Gates\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eSymbol\n\u003cimg alt=\"notgate\" loading=\"lazy\" src=\"/images/notgate.png\"\u003e\u003c/li\u003e\n\u003cli\u003eTruth Table\u003cbr\u003e\n\\(\n\\def\\arraystrecth{1.5}\\begin{array}{|c|c|}\\hline\n\\text{X}\u0026amp;\\overline{\\text{X}}\\text{or}\\text{X\u0026rsquo;}\\\\\\hline\n0\u0026amp;1\\\\\\hline\n1\u0026amp;0\\\\\\hline\n\\end{array}\n\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"and-gates\"\u003eAnd Gates\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eSymbol\n\u003cimg alt=\"notgate\" loading=\"lazy\" src=\"/images/andgate.png\"\u003e\u003c/li\u003e\n\u003cli\u003eTruth Table\u003cbr\u003e\n\\(\n\\def\\arraystrecth{1.5}\\begin{array}{|c|c|c|}\\hline\n\\text{X}\u0026amp;\\text{Y}\u0026amp;\\text{Z=X}\\cdot\\text{Y}\\\\\\hline\n0\u0026amp;0\u0026amp;0\\\\\\hline\n0\u0026amp;1\u0026amp;0\\\\\\hline\n1\u0026amp;0\u0026amp;0\\\\\\hline\n1\u0026amp;1\u0026amp;1\\\\\\hline\n\\end{array}\n\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"or-gates\"\u003eOr Gates\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eSymbol\n\u003cimg alt=\"notgate\" loading=\"lazy\" src=\"/images/orgate.png\"\u003e\u003c/li\u003e\n\u003cli\u003eTruth Table\n\\(\n\\def\\arraystrecth{1.5}\\begin{array}{|c|c|c|}\\hline\n\\text{X}\u0026amp;\\text{Y}\u0026amp;\\text{Z=X+Y}\\\\\\hline\n0\u0026amp;0\u0026amp;0\\\\\\hline\n0\u0026amp;1\u0026amp;1\\\\\\hline\n1\u0026amp;0\u0026amp;1\\\\\\hline\n1\u0026amp;1\u0026amp;1\\\\\\hline\n\\end{array}\n\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"布林表達式與真值表boolean-expression-and-truth-table\"\u003e布林表達式與真值表(Boolean Expression and Truth Table)\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eBoolean expression\n\u003cul\u003e\n\u003cli\u003e用 \u003ccode\u003e'\u003c/code\u003e 代表 NOT\u003c/li\u003e\n\u003cli\u003e用 \u003ccode\u003e+\u003c/code\u003e 代表 OR\u003c/li\u003e\n\u003cli\u003e用 \u003ccode\u003e.\u003c/code\u003e 代表 AND\u003c/li\u003e\n\u003cli\u003e將輸入用上面的運算子表示成算式，如：\\((A+C)(B\u0026rsquo;+C)\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eTruth Table\n\\(\n\\def\\arraystrecth{1.5}\\begin{array}{ccc|cccccc}\nA\u0026amp;B\u0026amp;C\u0026amp;B\u0026rsquo;\u0026amp;AB\u0026rsquo;\u0026amp;AB\u0026rsquo;+C\u0026amp;A+C\u0026amp;B\u0026rsquo;+C\u0026amp;(A+C)(B\u0026rsquo;+C)\\\\\\hline\n0\u0026amp;0\u0026amp;0\u0026amp;1\u0026amp;0\u0026amp;0\u0026amp;0\u0026amp;1\u0026amp;0\\\\\n0\u0026amp;0\u0026amp;1\u0026amp;1\u0026amp;0\u0026amp;1\u0026amp;1\u0026amp;1\u0026amp;1\\\\\n0\u0026amp;1\u0026amp;0\u0026amp;0\u0026amp;0\u0026amp;0\u0026amp;0\u0026amp;0\u0026amp;0\\\\\n0\u0026amp;1\u0026amp;1\u0026amp;0\u0026amp;0\u0026amp;1\u0026amp;1\u0026amp;1\u0026amp;1\\\\\n1\u0026amp;0\u0026amp;0\u0026amp;1\u0026amp;1\u0026amp;1\u0026amp;1\u0026amp;1\u0026amp;1\\\\\n1\u0026amp;0\u0026amp;1\u0026amp;1\u0026amp;1\u0026amp;1\u0026amp;1\u0026amp;1\u0026amp;1\\\\\n1\u0026amp;1\u0026amp;0\u0026amp;0\u0026amp;0\u0026amp;0\u0026amp;1\u0026amp;0\u0026amp;0\\\\\n1\u0026amp;1\u0026amp;1\u0026amp;0\u0026amp;0\u0026amp;1\u0026amp;1\u0026amp;1\u0026amp;1\\\\\n\\end{array}\n\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"基本運算定理\"\u003e基本運算定理\u003c/h1\u003e\n\u003ch2 id=\"not-gate-的基本運算定理\"\u003eNOT gate 的基本運算定理\u003c/h2\u003e\n\u003cp\u003e\\(\n\\boxed{\n\\def\\arraystretch{1.5}\\begin{array}{ccc}\n(x\u0026rsquo;)\u0026rsquo;\u0026amp;=\u0026amp;x\n\\end{array}\n}\n\\)\u003c/p\u003e","title":"[Logic Design] Lec 02 - 布林代數"},{"content":"布林表達式的轉換 將文字敘述轉換成布林表達式： \\( \\def\\arraystrecth{1.5}\\begin{array}{l} \\underbrace{\\text{The alarm will ring}}_ {Z} \\text{ iff } \\underbrace{\\text{the power of alarm is on}} _{A} \\text{ and } \\underbrace{\\text{the door is not closed}} _{B\u0026rsquo;} \\\\ \\text{ or } \\underbrace{\\text{it is after 6 p.m.}} _{C} \\text{ and } \\underbrace{\\text{the window is not closed}} _{D\u0026rsquo;} \\end{array} \\)\n\\(Z=AB\u0026rsquo;+CD\u0026rsquo;\\) 由真值表開始建構邏輯電路 Truth Table:\n\\( \\boxed{ \\def\\arraystretch{1}\\begin{array}{ccc|c|c} A\u0026amp;B\u0026amp;C\u0026amp;f\u0026amp;f\u0026rsquo;\\\\\\hline 0\u0026amp;0\u0026amp;0\u0026amp;0\u0026amp;1\\\\ 0\u0026amp;0\u0026amp;1\u0026amp;0\u0026amp;1\\\\ 0\u0026amp;1\u0026amp;0\u0026amp;0\u0026amp;1\\\\ 0\u0026amp;1\u0026amp;1\u0026amp;1\u0026amp;0\\\\ 1\u0026amp;0\u0026amp;0\u0026amp;1\u0026amp;0\\\\ 1\u0026amp;0\u0026amp;1\u0026amp;1\u0026amp;0\\\\ 1\u0026amp;1\u0026amp;0\u0026amp;1\u0026amp;0\\\\ 1\u0026amp;1\u0026amp;1\u0026amp;1\u0026amp;0 \\end{array} } \\) 利用 1\u0026rsquo;s 的函數\n\\(f=A\u0026rsquo; BC+AB\u0026rsquo; C\u0026rsquo;+AB\u0026rsquo; C+ABC\u0026rsquo;+ABC\\)\n\\(=A\u0026rsquo; BC+AB\u0026rsquo;+AB\\)\n\\(=A\u0026rsquo; BC+A\\)\n\\(=A+BC\\) 利用 0\u0026rsquo;s 的函數\n\\(f=(A+B+C)(A+B+C\u0026rsquo;)(A+B\u0026rsquo;+C)\\)\n\\(=(A+B)(A+B\u0026rsquo;+C)\\)\n\\(=A+B(B\u0026rsquo;+C)\\)\n\\(=A+BC\\) Minterm 與 maxterm 展開 以 \\(F=A\u0026rsquo; BC+A\\) 為範例 \\( \\boxed{ \\def\\arraystretch{1}\\begin{array}{c|ccc|c|c|cc} \\text{Row No.}\u0026amp;A\u0026amp;B\u0026amp;C\u0026amp;\\text{Minterns}\u0026amp;\\text{Maxterms}\u0026amp;f\u0026amp;f\u0026rsquo;\\\\\\hline 0\u0026amp;0\u0026amp;0\u0026amp;0\u0026amp;\\text{A\u0026rsquo;B\u0026rsquo;C\u0026rsquo;}=\\text{m}_0\u0026amp;\\text{A+B+C}=\\text{M}_0\u0026amp;0\u0026amp;1\\\\ 1\u0026amp;0\u0026amp;0\u0026amp;1\u0026amp;\\text{A\u0026rsquo;B\u0026rsquo;C}=\\text{m}_1\u0026amp;\\text{A+B+C\u0026rsquo;}=\\text{M}_1\u0026amp;0\u0026amp;1\\\\ 2\u0026amp;0\u0026amp;1\u0026amp;0\u0026amp;\\text{A\u0026rsquo;BC\u0026rsquo;}=\\text{m}_2\u0026amp;\\text{A+B\u0026rsquo;+C}=\\text{M}_2\u0026amp;0\u0026amp;1\\\\ 3\u0026amp;0\u0026amp;1\u0026amp;1\u0026amp;\\text{A\u0026rsquo;BC}=\\text{m}_3\u0026amp;\\text{A+B\u0026rsquo;+C\u0026rsquo;}=\\text{M}_3\u0026amp;1\u0026amp;0\\\\ 4\u0026amp;1\u0026amp;0\u0026amp;0\u0026amp;\\text{AB\u0026rsquo;C\u0026rsquo;}=\\text{m}_4\u0026amp;\\text{A\u0026rsquo;+B+C}=\\text{M}_4\u0026amp;1\u0026amp;0\\\\ 5\u0026amp;1\u0026amp;0\u0026amp;1\u0026amp;\\text{AB\u0026rsquo;C}=\\text{m}_5\u0026amp;\\text{A\u0026rsquo;+B+C\u0026rsquo;}=\\text{M}_5\u0026amp;1\u0026amp;0\\\\ 6\u0026amp;1\u0026amp;1\u0026amp;0\u0026amp;\\text{ABC\u0026rsquo;}=\\text{m}_6\u0026amp;\\text{A\u0026rsquo;+B\u0026rsquo;+C}=\\text{M}_6\u0026amp;1\u0026amp;0\\\\ 7\u0026amp;1\u0026amp;1\u0026amp;1\u0026amp;\\text{ABC}=\\text{m}_7\u0026amp;\\text{A\u0026rsquo;+B\u0026rsquo;+C\u0026rsquo;}=\\text{M}_7\u0026amp;1\u0026amp;0\\\\ \\end{array} } \\)\n\\(m_i\u0026rsquo;=M_i\\)\n\\(\\text{f=A\u0026rsquo;BC+A=1}\\)\n\\(\\text{=A\u0026rsquo;BC+AB\u0026rsquo;C\u0026rsquo;+AB\u0026rsquo;C+ABC\u0026rsquo;+ABC}\\)\n\\(=m_3+m_4+m_5+m_6+m_7\\)\n\\(=\\sum m(3,4,5,6,7)\\)\n\\(\\text{f=(A+B+C)(A+B+C\u0026rsquo;)(A+B\u0026rsquo;+C)=0}\\)\n\\(=M_0M_1M_2\\)\n\\(=\\prod M(0,1,2)\\)\nMaxterm 與 minterm 的轉換\n\\( \\boxed{ \\def\\arraystretch{1}\\begin{array}{rcl} g\u0026amp;=\u0026amp;\\sum m(2,3,4,6,7)\\\\ \u0026amp;=\u0026amp;\\prod M(0,1,5)\\\\ g\u0026rsquo;\u0026amp;=\u0026amp;\\sum m(0,1,5)\\\\ g\u0026amp;=\u0026amp;[\\sum m(0,1,5)]\u0026rsquo;\\\\ \u0026amp;=\u0026amp;\\prod m\u0026rsquo;(0,1,5)\\\\ \u0026amp;=\u0026amp;\\prod M(0,1,5) \\end{array} } \\)\n性質：\n\\(\\boxed{\\text{m}_i\\text{m}_j=0\\text{ if i}\\neq j}\\) 未完整定義的函式(Don\u0026rsquo;t Care) Truth table:\n\\( \\boxed{ \\def\\arraystretch{1}\\begin{array}{lll|l} A\u0026amp;B\u0026amp;C\u0026amp;F\\\\\\hline 0\u0026amp;0\u0026amp;0\u0026amp;1\\\\ 0\u0026amp;0\u0026amp;1\u0026amp;X\\leftarrow \\text{Don\u0026rsquo;t care}\\\\ 0\u0026amp;1\u0026amp;0\u0026amp;0\\\\ 0\u0026amp;1\u0026amp;1\u0026amp;1\\\\ 1\u0026amp;0\u0026amp;0\u0026amp;0\\\\ 1\u0026amp;0\u0026amp;1\u0026amp;0\\\\ 1\u0026amp;1\u0026amp;0\u0026amp;X\\leftarrow \\text{Don\u0026rsquo;t care}\\\\ 1\u0026amp;1\u0026amp;1\u0026amp;1\\\\ \\end{array} } \\) 表達式： \\(F=\\sum m(0,3,7)+\\sum d(1,6)=\\prod M(2,4,5)\\cdot \\prod(1,6)\\) Binary adders and subtracters Half Adder 半加器 \\(X,Y_{\\text{in}}\\rightarrow{\\boxed{\\text{Half Adder}}\\rightarrow \\text{Sum}}\\) Truth Table:\n\\( \\boxed{ \\def\\arraystretch{1}\\begin{array}{cc|c} X\u0026amp;Y\u0026amp;Sum\\\\\\hline 0\u0026amp;0\u0026amp;0\\\\ 0\u0026amp;1\u0026amp;1\\\\ 1\u0026amp;0\u0026amp;1\\\\ 1\u0026amp;1\u0026amp;0\\\\ \\end{array} } \\) 表達式： \\(\\text{Sum}=X\u0026rsquo; Y+XY\u0026rsquo;\\) Full Adder 全加器 \\(X,Y,C_{\\text{in}}\\rightarrow{\\boxed{\\text{Full Adder}}\\rightarrow C_{out}, \\text{Sum}}\\) Truth Table:\n\\( \\boxed{ \\def\\arraystretch{1}\\begin{array}{ccc|cc} X\u0026amp;Y\u0026amp;C_{\\text{in}}\u0026amp;C_{\\text{out}}\u0026amp;\\text{Sum}\\\\\\hline 0\u0026amp;0\u0026amp;0\u0026amp;0\u0026amp;0\\\\ 0\u0026amp;0\u0026amp;1\u0026amp;0\u0026amp;1\\\\ 0\u0026amp;1\u0026amp;0\u0026amp;0\u0026amp;1\\\\ 0\u0026amp;1\u0026amp;1\u0026amp;1\u0026amp;0\\\\ 1\u0026amp;0\u0026amp;0\u0026amp;0\u0026amp;1\\\\ 1\u0026amp;0\u0026amp;1\u0026amp;1\u0026amp;0\\\\ 1\u0026amp;1\u0026amp;0\u0026amp;1\u0026amp;0\\\\ 1\u0026amp;1\u0026amp;1\u0026amp;1\u0026amp;1\\\\ \\end{array} } \\) 表達式： \\(\\text{Sum}=X\\oplus Y\\oplus C_{\\text{in}}\\) \\(C_\\text{out}=YC_{\\text{in}}+XC_{\\text{in}}+XY\\) 邏輯電路 4-Bit Parallel Adder (Ripple Carry Adder 漣波加法器) 四個平行串接的全加器 (Full Adder) Binary Subtracter using Full Adders 用全加器來實現減法器 Full Subtracter \\(x_i,y_i,b_i\\rightarrow\\boxed{\\text{Full Subtracter}}\\rightarrow b_{i+1},d_i\\)\nTruth Table:\n\\( \\boxed{ \\def\\arraystretch{1}\\begin{array}{ccc|cc} x_i\u0026amp;y_i\u0026amp;b_i\u0026amp;b_{i+1}\u0026amp;d_i\\\\\\hline 0\u0026amp;0\u0026amp;0\u0026amp;0\u0026amp;0\\\\ 0\u0026amp;0\u0026amp;1\u0026amp;1\u0026amp;1\\\\ 0\u0026amp;1\u0026amp;0\u0026amp;1\u0026amp;1\\\\ 0\u0026amp;1\u0026amp;1\u0026amp;1\u0026amp;0\\\\ 1\u0026amp;0\u0026amp;0\u0026amp;0\u0026amp;1\\\\ 1\u0026amp;0\u0026amp;1\u0026amp;0\u0026amp;0\\\\ 1\u0026amp;1\u0026amp;0\u0026amp;0\u0026amp;0\\\\ 1\u0026amp;1\u0026amp;1\u0026amp;1\u0026amp;1\\\\ \\end{array} } \\)\n示意\n\\( \\boxed{ \\def\\arraystretch{1}\\begin{array}{c|cc} \u0026amp;\\text{Column i Before Borrow}\u0026amp;\\text{Column i After Borrow}\\\\\\hline x_i\u0026amp;0\u0026amp;10\u0026amp;\\\\ -b_i\u0026amp;-1\u0026amp;-1\\\\ -y_i\u0026amp;-1\u0026amp;-1\\\\\\hline d_i\u0026amp;\u0026amp;0(b_{i+1}=1)\\\\ \\end{array} } \\)\nParallel Subtracter Speeding up integer additions Ripple Carry Adder 一般的漣波進位加法器 設計簡單、規律 有較大的 Time Delay 一個 Full Adder 為\\(C_\\text{out}=YC_{\\text{in}}+XC_{\\text{in}}+XY\\) 也就是先 AND 再 OR，兩個 gate delay 故 n-bit adder 的 time delay 是 2n Carry Lockahead Adder(CLA) \\(\\text{Sum}=A\\oplus B\\oplus C_{in}\\) \\(C_{out}=AB+(A+B)C_{in}\\) \\(C_{i+1}=A_iB_i+(A_i+B_i)C_i\\) \\(C_{i+1}=g_i+p_iC_i\\) \\(g_i=A_iB_i\\) generate function \\(p_i=A_i+B_i\\) propagate function \\(C_2=g_1+p_1C_1\\) \\(C_2=g_1+p_1p_0g_0+p_1p_0C_0\\) \\(C_n=g_{n-1}+p_{n-1}g_{n-2}+p_{n-1}p_{n-2}g_{n-3}+\u0026hellip;+p_{n-1}p_{n-2}\u0026hellip;p_1g_0+p_{n-1}p_{n-2}\u0026hellip;p_0C_0\\) 換句話說，\\(C_n\\)可以藉由 \\(C_0\\)運算出來，以 4-bit 為例，可以從漣波的 8 次降到 5 次的 Gate delay。 Carry Select Adder 將兩個加法作平行處理 預先假設 carry-in 的值，待前一級的 carry-in 算出後再用 selector 選擇正確的 carry-in，減去收到前級 carry-in 再開始運算的時間。 Binary multiplication 用邏輯閘模擬一般十進制進位法的乘法 示意\n\\( \\def\\arraystretch{1}\\begin{array}{rcccc} \\text{Multiplicand}\u0026amp;\u0026amp;\u0026amp;B_1\u0026amp;B_0\\\\ \\text{Multiplier}\u0026amp;\u0026amp;\u0026amp;A_1\u0026amp;A_0\\\\\\hline \\text{Partial products}\u0026amp;\u0026amp;\u0026amp;A_0B_1\u0026amp;A_0B_0\\\\ \\text{shift one bit left}\u0026amp;\u0026amp;A_1B_1\u0026amp;A_1B_0\\\\ \\text{Sum of partial products}\u0026amp;C1\u0026amp;C2\u0026amp;C3\u0026amp;C4\\\\ \\end{array} \\) ","permalink":"https://intervalrain.github.io/logicdesign/lec3/","summary":"\u003ch1 id=\"布林表達式的轉換\"\u003e布林表達式的轉換\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e將文字敘述轉換成布林表達式：\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\\(\n\\def\\arraystrecth{1.5}\\begin{array}{l}\n\\underbrace{\\text{The alarm will ring}}_ {Z}\n\\text{ iff }\n\\underbrace{\\text{the power of alarm is on}} _{A}\n\\text{ and }\n\\underbrace{\\text{the door is not closed}} _{B\u0026rsquo;} \\\\\n\\text{ or }\n\\underbrace{\\text{it is after 6 p.m.}} _{C}\n\\text{ and }\n\\underbrace{\\text{the window is not closed}} _{D\u0026rsquo;}\n\\end{array}\n\\)\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e\\(Z=AB\u0026rsquo;+CD\u0026rsquo;\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"由真值表開始建構邏輯電路\"\u003e由真值表開始建構邏輯電路\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eTruth Table:\u003cbr\u003e\n\\(\n\\boxed{\n\\def\\arraystretch{1}\\begin{array}{ccc|c|c}\nA\u0026amp;B\u0026amp;C\u0026amp;f\u0026amp;f\u0026rsquo;\\\\\\hline\n0\u0026amp;0\u0026amp;0\u0026amp;0\u0026amp;1\\\\\n0\u0026amp;0\u0026amp;1\u0026amp;0\u0026amp;1\\\\\n0\u0026amp;1\u0026amp;0\u0026amp;0\u0026amp;1\\\\\n0\u0026amp;1\u0026amp;1\u0026amp;1\u0026amp;0\\\\\n1\u0026amp;0\u0026amp;0\u0026amp;1\u0026amp;0\\\\\n1\u0026amp;0\u0026amp;1\u0026amp;1\u0026amp;0\\\\\n1\u0026amp;1\u0026amp;0\u0026amp;1\u0026amp;0\\\\\n1\u0026amp;1\u0026amp;1\u0026amp;1\u0026amp;0\n\\end{array}\n}\n\\)\u003c/li\u003e\n\u003cli\u003e利用 1\u0026rsquo;s 的函數\u003cbr\u003e\n\\(f=A\u0026rsquo; BC+AB\u0026rsquo; C\u0026rsquo;+AB\u0026rsquo; C+ABC\u0026rsquo;+ABC\\)\u003cbr\u003e\n\\(=A\u0026rsquo; BC+AB\u0026rsquo;+AB\\)\u003cbr\u003e\n\\(=A\u0026rsquo; BC+A\\)\u003cbr\u003e\n\\(=A+BC\\)\u003c/li\u003e\n\u003cli\u003e利用 0\u0026rsquo;s 的函數\u003cbr\u003e\n\\(f=(A+B+C)(A+B+C\u0026rsquo;)(A+B\u0026rsquo;+C)\\)\u003cbr\u003e\n\\(=(A+B)(A+B\u0026rsquo;+C)\\)\u003cbr\u003e\n\\(=A+B(B\u0026rsquo;+C)\\)\u003cbr\u003e\n\\(=A+BC\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"minterm-與-maxterm-展開\"\u003eMinterm 與 maxterm 展開\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e以 \\(F=A\u0026rsquo; BC+A\\) 為範例\n\\(\n\\boxed{\n\\def\\arraystretch{1}\\begin{array}{c|ccc|c|c|cc}\n\\text{Row No.}\u0026amp;A\u0026amp;B\u0026amp;C\u0026amp;\\text{Minterns}\u0026amp;\\text{Maxterms}\u0026amp;f\u0026amp;f\u0026rsquo;\\\\\\hline\n0\u0026amp;0\u0026amp;0\u0026amp;0\u0026amp;\\text{A\u0026rsquo;B\u0026rsquo;C\u0026rsquo;}=\\text{m}_0\u0026amp;\\text{A+B+C}=\\text{M}_0\u0026amp;0\u0026amp;1\\\\\n1\u0026amp;0\u0026amp;0\u0026amp;1\u0026amp;\\text{A\u0026rsquo;B\u0026rsquo;C}=\\text{m}_1\u0026amp;\\text{A+B+C\u0026rsquo;}=\\text{M}_1\u0026amp;0\u0026amp;1\\\\\n2\u0026amp;0\u0026amp;1\u0026amp;0\u0026amp;\\text{A\u0026rsquo;BC\u0026rsquo;}=\\text{m}_2\u0026amp;\\text{A+B\u0026rsquo;+C}=\\text{M}_2\u0026amp;0\u0026amp;1\\\\\n3\u0026amp;0\u0026amp;1\u0026amp;1\u0026amp;\\text{A\u0026rsquo;BC}=\\text{m}_3\u0026amp;\\text{A+B\u0026rsquo;+C\u0026rsquo;}=\\text{M}_3\u0026amp;1\u0026amp;0\\\\\n4\u0026amp;1\u0026amp;0\u0026amp;0\u0026amp;\\text{AB\u0026rsquo;C\u0026rsquo;}=\\text{m}_4\u0026amp;\\text{A\u0026rsquo;+B+C}=\\text{M}_4\u0026amp;1\u0026amp;0\\\\\n5\u0026amp;1\u0026amp;0\u0026amp;1\u0026amp;\\text{AB\u0026rsquo;C}=\\text{m}_5\u0026amp;\\text{A\u0026rsquo;+B+C\u0026rsquo;}=\\text{M}_5\u0026amp;1\u0026amp;0\\\\\n6\u0026amp;1\u0026amp;1\u0026amp;0\u0026amp;\\text{ABC\u0026rsquo;}=\\text{m}_6\u0026amp;\\text{A\u0026rsquo;+B\u0026rsquo;+C}=\\text{M}_6\u0026amp;1\u0026amp;0\\\\\n7\u0026amp;1\u0026amp;1\u0026amp;1\u0026amp;\\text{ABC}=\\text{m}_7\u0026amp;\\text{A\u0026rsquo;+B\u0026rsquo;+C\u0026rsquo;}=\\text{M}_7\u0026amp;1\u0026amp;0\\\\\n\\end{array}\n}\n\\)\u003c/p\u003e","title":"[Logic Design] Lec 03 - Minterm 與 Maxterm 展開"},{"content":"布林邏輯式的簡化 卡諾圖(Karnaugh Maps, K-maps)是一種簡單、快速的簡化布林邏輯的方法。 SOP 將布林邏輯化簡成最簡SOP(Minimum Sum of products) \\(F=A\u0026rsquo; B\u0026rsquo; C\u0026rsquo;+A\u0026rsquo; B\u0026rsquo; C+A\u0026rsquo; BC\u0026rsquo;+AB\u0026rsquo; C+ABC\u0026rsquo; +ABC\\) \\(F=A\u0026rsquo; B\u0026rsquo;+B\u0026rsquo; C+BC\u0026rsquo;+AB\\) \\(F=A\u0026rsquo; B\u0026rsquo;+BC\u0026rsquo;+AC\\) POS 將布林邏輯化簡成最簡POS(Minimum Product of Sums) \\(F=(A+B\u0026rsquo;+C+D\u0026rsquo;)(A+B\u0026rsquo;+C\u0026rsquo;+D\u0026rsquo;)(A+B\u0026rsquo;+C\u0026rsquo;+D)(A\u0026rsquo;+B\u0026rsquo;+C\u0026rsquo;+D)(A+B+C\u0026rsquo;+D)(A\u0026rsquo;+B+C\u0026rsquo;+D)\\) \\(F=(A+B\u0026rsquo;+D\u0026rsquo;)(A+B\u0026rsquo;+C\u0026rsquo;)(B\u0026rsquo;+C\u0026rsquo;+D)(B+C\u0026rsquo;+D)\\) \\(F=(A+B\u0026rsquo;+D)(A+B\u0026rsquo;+C\u0026rsquo;)(C\u0026rsquo;+D)\\) \\(F=(A+B\u0026rsquo;+D\u0026rsquo;)(C\u0026rsquo;+D)\\) 2或3個變數的卡諾圖 簡化2個變數的布林邏輯式 \\(F=A\u0026rsquo; B\u0026rsquo;+A\u0026rsquo; B\\) 布林代數： \\(F=A\u0026rsquo; B\u0026rsquo;+A\u0026rsquo; B=A\u0026rsquo;(B\u0026rsquo;+B)=A\u0026rsquo;\\) 卡諾圖： \\( \\boxed{ \\def\\arraystretch{1.4}\\begin{array}{c|c|c} \\downarrow B\\rightarrow A\u0026amp;0\u0026amp;1\u0026amp;\\\\\\hline 0\u0026amp;\\text{A=0,B=0}\u0026amp;\\text{A=1,B=0}\\\\\\hline 1\u0026amp;\\text{A=0,B=1}\u0026amp;\\text{A=1,B=1}\\\\ \\end{array} } \\rightarrow \\boxed{ \\def\\arraystretch{1.4}\\begin{array}{c|c|c} \u0026amp;A\u0026rsquo;\u0026amp;A\u0026amp;\\\\\\hline B\u0026rsquo;\u0026amp;1\u0026amp;0\\\\\\hline B\u0026amp;1\u0026amp;0\\\\ \\end{array} } \\rightarrow A' \\) 簡化3個變數的布林邏輯式 \\(F=\\sum m(2,3,6)=A\u0026rsquo; BC\u0026rsquo;+A\u0026rsquo; BC+ABC\u0026rsquo;\\) 布林代數： \\(F=A\u0026rsquo; BC\u0026rsquo;+A\u0026rsquo; BC+ABC\u0026rsquo;=A\u0026rsquo; B+BC\u0026rsquo;\\) 卡諾圖：*注意相鄰以grey code排列 \\( \\boxed{ \\def\\arraystretch{1.4}\\begin{array}{c|c|c} \\downarrow BC\\rightarrow A\u0026amp;0\u0026amp;1\u0026amp;\\\\\\hline 00\u0026amp;m_0(000)\u0026amp;m_4(100)\\\\\\hline 01\u0026amp;m_1(001)\u0026amp;m_5(101)\\\\\\hline 11\u0026amp;m_3(011)\u0026amp;m_7(111)\\\\\\hline 10\u0026amp;m_2(010)\u0026amp;m_6(110)\\\\ \\end{array} } \\rightarrow \\boxed{ \\def\\arraystretch{1.4}\\begin{array}{c|c|c} \u0026amp;A\u0026rsquo;\u0026amp;A\u0026amp;\\\\\\hline B\u0026rsquo; C\u0026rsquo;\u0026amp;0\u0026amp;0\\\\\\hline B\u0026rsquo; C \u0026amp;0\u0026amp;0\\\\\\hline B C \u0026amp;1\u0026amp;0\\\\\\hline B C\u0026rsquo; \u0026amp;1\u0026amp;1\\\\ \\end{array} } \\rightarrow A\u0026rsquo; B+BC' \\) 相鄰(Adjacency)的定義 最上面可以與最下面相接，視為相鄰 最左邊可以與最右邊相接，視為相鄰 \\( \\boxed{ \\def\\arraystretch{1.4}\\begin{array}{c|c|c} \u0026amp;A\u0026rsquo;\u0026amp;A\u0026amp;\\\\\\hline B\u0026rsquo; C\u0026rsquo;\u0026amp;0\u0026amp;0\\\\\\hline B\u0026rsquo; C \u0026amp;0\u0026amp;0\\\\\\hline B C \u0026amp;1\u0026amp;1\\\\\\hline B C\u0026rsquo; \u0026amp;0\u0026amp;0\\\\ \\end{array} } \\rightarrow BC \\) \\( \\boxed{ \\def\\arraystretch{1.4}\\begin{array}{c|c|c} \u0026amp;A\u0026rsquo;\u0026amp;A\u0026amp;\\\\\\hline B\u0026rsquo; C\u0026rsquo;\u0026amp;1\u0026amp;0\\\\\\hline B\u0026rsquo; C \u0026amp;0\u0026amp;0\\\\\\hline B C \u0026amp;0\u0026amp;0\\\\\\hline B C\u0026rsquo; \u0026amp;1\u0026amp;0\\\\ \\end{array} } \\rightarrow A\u0026rsquo; C' \\) 組合的規則 以組合相鄰且以2為倍數為規則 組合的元素愈多愈好 可以重複選(cover) 等效最簡式 \\(\\boxed{\\def\\arraystretch{1.4}\\begin{array}{c|c|c} \u0026amp;A\u0026rsquo;\u0026amp;A\u0026amp;\\\\\\hline B\u0026rsquo; C\u0026rsquo;\u0026amp;1\u0026amp;0\\\\\\hline B\u0026rsquo; C \u0026amp;1\u0026amp;1\\\\\\hline B C \u0026amp;0\u0026amp;1\\\\\\hline B C\u0026rsquo; \u0026amp;1\u0026amp;1\\\\ \\end{array}} \\rightarrow F=A\u0026rsquo; B\u0026rsquo;+BC\u0026rsquo;+AC=A\u0026rsquo; C\u0026rsquo;+B\u0026rsquo;C+AB \\) 4個變數的卡諾圖 \\(F=ACD+A\u0026rsquo; B+D\u0026rsquo;\\) 以卡諾圖表示 \\(\\boxed{\\def\\arraystretch{1.4}\\begin{array}{c|c|c|c|c} \u0026amp;A\u0026rsquo; B\u0026rsquo;\u0026amp;A\u0026rsquo; B\u0026amp;AB\u0026amp;AB\u0026rsquo;\\\\\\hline C\u0026rsquo; D\u0026rsquo;\u0026amp;1\u0026amp;1\u0026amp;1\u0026amp;1\\\\\\hline C\u0026rsquo; D \u0026amp; \u0026amp;1\u0026amp; \u0026amp; \\\\\\hline C D \u0026amp; \u0026amp;1\u0026amp;1\u0026amp;1\\\\\\hline C D\u0026rsquo; \u0026amp;1\u0026amp;1\u0026amp;1\u0026amp;1\\\\ \\end{array}} \\quad \\boxed{\\def\\arraystretch{1.4}\\begin{array}{c|c|c|c|c} \u0026amp;00\u0026amp;01\u0026amp;11\u0026amp;10\\\\\\hline 00\u0026amp;m_0\u0026amp;m_4\u0026amp;m_{12}\u0026amp;m_8\\\\\\hline 01\u0026amp;m_1\u0026amp;m_5\u0026amp;m_{13}\u0026amp;m_9\\\\\\hline 11\u0026amp;m_3\u0026amp;m_7\u0026amp;m_{15}\u0026amp;m_{11}\\\\\\hline 10\u0026amp;m_2\u0026amp;m_6\u0026amp;m_{14}\u0026amp;m_{10}\\\\ \\end{array}} \\) 以 min-term expression 方式解題 解 \\(F(a,b,c,d)=\\sum m(1,3,4,5,10,12,13)\\) \\( \\boxed{\\def\\arraystretch{1.4}\\begin{array}{c|c|c|c|c} \u0026amp;00\u0026amp;01\u0026amp;11\u0026amp;10\\\\\\hline 00\u0026amp; \u0026amp;1\u0026amp;1\u0026amp; \\\\\\hline 01\u0026amp;1\u0026amp;1\u0026amp;1\u0026amp; \\\\\\hline 11\u0026amp;1\u0026amp; \u0026amp; \u0026amp; \\\\\\hline 10\u0026amp; \u0026amp; \u0026amp; \u0026amp;1\\\\ \\end{array}} \\rightarrow F=bc\u0026rsquo;+a\u0026rsquo; b\u0026rsquo; d+ab\u0026rsquo; c\u0026rsquo;d \\) 考慮 Don\u0026rsquo;t care 的情況 解 \\(F(a,b,c,d)=\\sum m(1,3,5,7,9)+\\sum d(6,12,13)\\) \\( \\boxed{\\def\\arraystretch{1.4}\\begin{array}{c|c|c|c|c} \u0026amp;00\u0026amp;01\u0026amp;11\u0026amp;10\\\\\\hline 00\u0026amp; \u0026amp; \u0026amp;X\u0026amp; \\\\\\hline 01\u0026amp;1\u0026amp;1\u0026amp;X\u0026amp;1\\\\\\hline 11\u0026amp;1\u0026amp;1\u0026amp; \u0026amp; \\\\\\hline 10\u0026amp; \u0026amp;X\u0026amp; \u0026amp; \\\\ \\end{array}} \\rightarrow F=a\u0026rsquo;d+c\u0026rsquo;d \\) 以 max-term expression 方式解題 解 \\(F(a,b,c,d)=\\sum m(0,2,3,4,8,10,11,15)=\\prod M(1,5,6,7,9,12,13,14)\\) \\( \\boxed{\\def\\arraystretch{1.4}\\begin{array}{c|c|c|c|c} \u0026amp;00\u0026amp;01\u0026amp;11\u0026amp;10\\\\\\hline 00\u0026amp; \u0026amp; \u0026amp;0\u0026amp; \\\\\\hline 01\u0026amp;0\u0026amp;0\u0026amp;0\u0026amp;0\\\\\\hline 11\u0026amp; \u0026amp;0\u0026amp; \u0026amp; \\\\\\hline 10\u0026amp; \u0026amp;0\u0026amp;0\u0026amp; \\\\ \\end{array}} \\)\n\\(\\rightarrow F\u0026rsquo;=c\u0026rsquo; d+a\u0026rsquo; bc+abd\u0026rsquo;\\)\n\\(\\rightarrow F=(c+d)(a+b\u0026rsquo;+c\u0026rsquo;)(a\u0026rsquo;+b\u0026rsquo;+d)\\) 基本質函項(essential prime implicants) 名詞定義 蘊函項(Implicant) 任何可以被組合的單一或群元素(意指為 \\(F\\)的子集。) 質函項(Prime Implicant) 已不能再被組合更多的函項。(意指最大的、框選最多的子集) 基本質函項(Essential Prime Implicant) 一個帶有只能被單一質函項框選到的元素的質函項 \\( \\boxed{\\def\\arraystretch{1.4}\\begin{array}{c|c|c|c|c} \u0026amp;00\u0026amp;01\u0026amp;11\u0026amp;10\\\\\\hline 00\u0026amp; \u0026amp; \u0026amp;1\u0026amp; \\\\\\hline 01\u0026amp;1\u0026amp;1\u0026amp;1\u0026amp; \\\\\\hline 11\u0026amp; \u0026amp;1\u0026amp;1\u0026amp;1\\\\\\hline 10\u0026amp; \u0026amp;1\u0026amp; \u0026amp; \\\\ \\end{array}} \\) 蘊函項：\\(A\u0026rsquo; C\u0026rsquo; D, ABC\u0026rsquo;, ACD, A\u0026rsquo; BC, BD, m_1, m_5, m_6, m_7\u0026hellip;. \\) 質函項：\\(A\u0026rsquo; C\u0026rsquo; D, ABC\u0026rsquo;, ACD, A\u0026rsquo; BC, BD \\) 基本質函項：\\(A\u0026rsquo; C\u0026rsquo; D,ABC\u0026rsquo;,A\u0026rsquo; BC, ACD\\) 簡化原則 因為有可能存在多個等效的最簡式，所以： 盡可能將式子展開成質函項(Prime implicants)。 用盡可能最少的質函項來表式布林函式。 例題 \\( \\boxed{\\def\\arraystretch{1.4}\\begin{array}{c|c|c|c|c} \u0026amp;00\u0026amp;01\u0026amp;11\u0026amp;10\\\\\\hline 00\u0026amp; \u0026amp;1\u0026amp;1\u0026amp; \\\\\\hline 01\u0026amp;1\u0026amp;1\u0026amp;1\u0026amp; \\\\\\hline 11\u0026amp;1\u0026amp; \u0026amp;1\u0026amp;1\\\\\\hline 10\u0026amp; \u0026amp; \u0026amp;1\u0026amp;1\\\\ \\end{array}} \\rightarrow F=A\u0026rsquo; B\u0026rsquo; D+BC\u0026rsquo;+AC \\) 5個變數的卡諾圖 表示法1 表示法2 ","permalink":"https://intervalrain.github.io/logicdesign/lec4/","summary":"\u003ch1 id=\"布林邏輯式的簡化\"\u003e布林邏輯式的簡化\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e卡諾圖(Karnaugh Maps, K-maps)是一種簡單、快速的簡化布林邏輯的方法。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"sop\"\u003eSOP\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e將布林邏輯化簡成最簡SOP(Minimum Sum of products)\n\u003cul\u003e\n\u003cli\u003e\\(F=A\u0026rsquo; B\u0026rsquo; C\u0026rsquo;+A\u0026rsquo; B\u0026rsquo; C+A\u0026rsquo; BC\u0026rsquo;+AB\u0026rsquo; C+ABC\u0026rsquo; +ABC\\)\u003c/li\u003e\n\u003cli\u003e\\(F=A\u0026rsquo; B\u0026rsquo;+B\u0026rsquo; C+BC\u0026rsquo;+AB\\)\u003c/li\u003e\n\u003cli\u003e\\(F=A\u0026rsquo; B\u0026rsquo;+BC\u0026rsquo;+AC\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"pos\"\u003ePOS\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e將布林邏輯化簡成最簡POS(Minimum Product of Sums)\n\u003cul\u003e\n\u003cli\u003e\\(F=(A+B\u0026rsquo;+C+D\u0026rsquo;)(A+B\u0026rsquo;+C\u0026rsquo;+D\u0026rsquo;)(A+B\u0026rsquo;+C\u0026rsquo;+D)(A\u0026rsquo;+B\u0026rsquo;+C\u0026rsquo;+D)(A+B+C\u0026rsquo;+D)(A\u0026rsquo;+B+C\u0026rsquo;+D)\\)\u003c/li\u003e\n\u003cli\u003e\\(F=(A+B\u0026rsquo;+D\u0026rsquo;)(A+B\u0026rsquo;+C\u0026rsquo;)(B\u0026rsquo;+C\u0026rsquo;+D)(B+C\u0026rsquo;+D)\\)\u003c/li\u003e\n\u003cli\u003e\\(F=(A+B\u0026rsquo;+D)(A+B\u0026rsquo;+C\u0026rsquo;)(C\u0026rsquo;+D)\\)\u003c/li\u003e\n\u003cli\u003e\\(F=(A+B\u0026rsquo;+D\u0026rsquo;)(C\u0026rsquo;+D)\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"2或3個變數的卡諾圖\"\u003e2或3個變數的卡諾圖\u003c/h1\u003e\n\u003ch2 id=\"簡化2個變數的布林邏輯式\"\u003e簡化2個變數的布林邏輯式\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\\(F=A\u0026rsquo; B\u0026rsquo;+A\u0026rsquo; B\\)\n\u003cul\u003e\n\u003cli\u003e布林代數：\n\u003cul\u003e\n\u003cli\u003e\\(F=A\u0026rsquo; B\u0026rsquo;+A\u0026rsquo; B=A\u0026rsquo;(B\u0026rsquo;+B)=A\u0026rsquo;\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e卡諾圖：\n\u003cul\u003e\n\u003cli\u003e\\(\n\\boxed{\n\\def\\arraystretch{1.4}\\begin{array}{c|c|c}\n\\downarrow B\\rightarrow A\u0026amp;0\u0026amp;1\u0026amp;\\\\\\hline\n0\u0026amp;\\text{A=0,B=0}\u0026amp;\\text{A=1,B=0}\\\\\\hline\n1\u0026amp;\\text{A=0,B=1}\u0026amp;\\text{A=1,B=1}\\\\\n\\end{array}\n}\n\\rightarrow\n\\boxed{\n\\def\\arraystretch{1.4}\\begin{array}{c|c|c}\n\u0026amp;A\u0026rsquo;\u0026amp;A\u0026amp;\\\\\\hline\nB\u0026rsquo;\u0026amp;1\u0026amp;0\\\\\\hline\nB\u0026amp;1\u0026amp;0\\\\\n\\end{array}\n}\n\\rightarrow\nA'\n\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"簡化3個變數的布林邏輯式\"\u003e簡化3個變數的布林邏輯式\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\\(F=\\sum m(2,3,6)=A\u0026rsquo; BC\u0026rsquo;+A\u0026rsquo; BC+ABC\u0026rsquo;\\)\n\u003cul\u003e\n\u003cli\u003e布林代數：\n\u003cul\u003e\n\u003cli\u003e\\(F=A\u0026rsquo; BC\u0026rsquo;+A\u0026rsquo; BC+ABC\u0026rsquo;=A\u0026rsquo; B+BC\u0026rsquo;\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e卡諾圖：*\u003cstrong\u003e注意相鄰以grey code排列\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e\\(\n\\boxed{\n\\def\\arraystretch{1.4}\\begin{array}{c|c|c}\n\\downarrow BC\\rightarrow A\u0026amp;0\u0026amp;1\u0026amp;\\\\\\hline\n00\u0026amp;m_0(000)\u0026amp;m_4(100)\\\\\\hline\n01\u0026amp;m_1(001)\u0026amp;m_5(101)\\\\\\hline\n11\u0026amp;m_3(011)\u0026amp;m_7(111)\\\\\\hline\n10\u0026amp;m_2(010)\u0026amp;m_6(110)\\\\\n\\end{array}\n}\n\\rightarrow\n\\boxed{\n\\def\\arraystretch{1.4}\\begin{array}{c|c|c}\n\u0026amp;A\u0026rsquo;\u0026amp;A\u0026amp;\\\\\\hline\nB\u0026rsquo; C\u0026rsquo;\u0026amp;0\u0026amp;0\\\\\\hline\nB\u0026rsquo; C \u0026amp;0\u0026amp;0\\\\\\hline\nB C  \u0026amp;1\u0026amp;0\\\\\\hline\nB C\u0026rsquo; \u0026amp;1\u0026amp;1\\\\\n\\end{array}\n}\n\\rightarrow\nA\u0026rsquo; B+BC'\n\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"相鄰adjacency的定義\"\u003e相鄰(Adjacency)的定義\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e最上面可以與最下面相接，視為相鄰\u003c/li\u003e\n\u003cli\u003e最左邊可以與最右邊相接，視為相鄰\n\u003cul\u003e\n\u003cli\u003e\\(\n\\boxed{\n\\def\\arraystretch{1.4}\\begin{array}{c|c|c}\n\u0026amp;A\u0026rsquo;\u0026amp;A\u0026amp;\\\\\\hline\nB\u0026rsquo; C\u0026rsquo;\u0026amp;0\u0026amp;0\\\\\\hline\nB\u0026rsquo; C \u0026amp;0\u0026amp;0\\\\\\hline\nB C  \u0026amp;1\u0026amp;1\\\\\\hline\nB C\u0026rsquo; \u0026amp;0\u0026amp;0\\\\\n\\end{array}\n}\n\\rightarrow BC\n\\)\u003c/li\u003e\n\u003cli\u003e\\(\n\\boxed{\n\\def\\arraystretch{1.4}\\begin{array}{c|c|c}\n\u0026amp;A\u0026rsquo;\u0026amp;A\u0026amp;\\\\\\hline\nB\u0026rsquo; C\u0026rsquo;\u0026amp;1\u0026amp;0\\\\\\hline\nB\u0026rsquo; C \u0026amp;0\u0026amp;0\\\\\\hline\nB C  \u0026amp;0\u0026amp;0\\\\\\hline\nB C\u0026rsquo; \u0026amp;1\u0026amp;0\\\\\n\\end{array}\n}\n\\rightarrow A\u0026rsquo; C'\n\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"組合的規則\"\u003e組合的規則\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e以組合\u003cstrong\u003e相鄰\u003c/strong\u003e且\u003cstrong\u003e以2為倍數\u003c/strong\u003e為規則\u003c/li\u003e\n\u003cli\u003e組合的元素愈多愈好\u003c/li\u003e\n\u003cli\u003e可以重複選(cover)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"等效最簡式\"\u003e等效最簡式\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\\(\\boxed{\\def\\arraystretch{1.4}\\begin{array}{c|c|c}\n\u0026amp;A\u0026rsquo;\u0026amp;A\u0026amp;\\\\\\hline\nB\u0026rsquo; C\u0026rsquo;\u0026amp;1\u0026amp;0\\\\\\hline\nB\u0026rsquo; C \u0026amp;1\u0026amp;1\\\\\\hline\nB C  \u0026amp;0\u0026amp;1\\\\\\hline\nB C\u0026rsquo; \u0026amp;1\u0026amp;1\\\\\n\\end{array}}\n\\rightarrow\nF=A\u0026rsquo; B\u0026rsquo;+BC\u0026rsquo;+AC=A\u0026rsquo; C\u0026rsquo;+B\u0026rsquo;C+AB\n\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"4個變數的卡諾圖\"\u003e4個變數的卡諾圖\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\\(F=ACD+A\u0026rsquo; B+D\u0026rsquo;\\)\u003c/li\u003e\n\u003cli\u003e以卡諾圖表示\n\u003cul\u003e\n\u003cli\u003e\\(\\boxed{\\def\\arraystretch{1.4}\\begin{array}{c|c|c|c|c}\n\u0026amp;A\u0026rsquo; B\u0026rsquo;\u0026amp;A\u0026rsquo; B\u0026amp;AB\u0026amp;AB\u0026rsquo;\\\\\\hline\nC\u0026rsquo; D\u0026rsquo;\u0026amp;1\u0026amp;1\u0026amp;1\u0026amp;1\\\\\\hline\nC\u0026rsquo; D \u0026amp; \u0026amp;1\u0026amp; \u0026amp; \\\\\\hline\nC D  \u0026amp; \u0026amp;1\u0026amp;1\u0026amp;1\\\\\\hline\nC D\u0026rsquo; \u0026amp;1\u0026amp;1\u0026amp;1\u0026amp;1\\\\\n\\end{array}}\n\\quad\n\\boxed{\\def\\arraystretch{1.4}\\begin{array}{c|c|c|c|c}\n\u0026amp;00\u0026amp;01\u0026amp;11\u0026amp;10\\\\\\hline\n00\u0026amp;m_0\u0026amp;m_4\u0026amp;m_{12}\u0026amp;m_8\\\\\\hline\n01\u0026amp;m_1\u0026amp;m_5\u0026amp;m_{13}\u0026amp;m_9\\\\\\hline\n11\u0026amp;m_3\u0026amp;m_7\u0026amp;m_{15}\u0026amp;m_{11}\\\\\\hline\n10\u0026amp;m_2\u0026amp;m_6\u0026amp;m_{14}\u0026amp;m_{10}\\\\\n\\end{array}}\n\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"以-min-term-expression-方式解題\"\u003e以 min-term expression 方式解題\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e解 \\(F(a,b,c,d)=\\sum m(1,3,4,5,10,12,13)\\)\n\u003cul\u003e\n\u003cli\u003e\\(\n\\boxed{\\def\\arraystretch{1.4}\\begin{array}{c|c|c|c|c}\n\u0026amp;00\u0026amp;01\u0026amp;11\u0026amp;10\\\\\\hline\n00\u0026amp; \u0026amp;1\u0026amp;1\u0026amp; \\\\\\hline\n01\u0026amp;1\u0026amp;1\u0026amp;1\u0026amp; \\\\\\hline\n11\u0026amp;1\u0026amp; \u0026amp; \u0026amp; \\\\\\hline\n10\u0026amp; \u0026amp; \u0026amp; \u0026amp;1\\\\\n\\end{array}}\n\\rightarrow\nF=bc\u0026rsquo;+a\u0026rsquo; b\u0026rsquo; d+ab\u0026rsquo; c\u0026rsquo;d\n\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"考慮-dont-care-的情況\"\u003e考慮 Don\u0026rsquo;t care 的情況\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e解 \\(F(a,b,c,d)=\\sum m(1,3,5,7,9)+\\sum d(6,12,13)\\)\n\u003cul\u003e\n\u003cli\u003e\\(\n\\boxed{\\def\\arraystretch{1.4}\\begin{array}{c|c|c|c|c}\n\u0026amp;00\u0026amp;01\u0026amp;11\u0026amp;10\\\\\\hline\n00\u0026amp; \u0026amp; \u0026amp;X\u0026amp; \\\\\\hline\n01\u0026amp;1\u0026amp;1\u0026amp;X\u0026amp;1\\\\\\hline\n11\u0026amp;1\u0026amp;1\u0026amp; \u0026amp; \\\\\\hline\n10\u0026amp; \u0026amp;X\u0026amp; \u0026amp; \\\\\n\\end{array}}\n\\rightarrow\nF=a\u0026rsquo;d+c\u0026rsquo;d\n\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch2 id=\"以-max-term-expression-方式解題\"\u003e以 max-term expression 方式解題\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e解 \\(F(a,b,c,d)=\\sum m(0,2,3,4,8,10,11,15)=\\prod M(1,5,6,7,9,12,13,14)\\)\n\u003cul\u003e\n\u003cli\u003e\\(\n\\boxed{\\def\\arraystretch{1.4}\\begin{array}{c|c|c|c|c}\n\u0026amp;00\u0026amp;01\u0026amp;11\u0026amp;10\\\\\\hline\n00\u0026amp; \u0026amp; \u0026amp;0\u0026amp; \\\\\\hline\n01\u0026amp;0\u0026amp;0\u0026amp;0\u0026amp;0\\\\\\hline\n11\u0026amp; \u0026amp;0\u0026amp; \u0026amp; \\\\\\hline\n10\u0026amp; \u0026amp;0\u0026amp;0\u0026amp; \\\\\n\\end{array}}\n\\)\u003cbr\u003e\n\\(\\rightarrow F\u0026rsquo;=c\u0026rsquo; d+a\u0026rsquo; bc+abd\u0026rsquo;\\)\u003cbr\u003e\n\\(\\rightarrow F=(c+d)(a+b\u0026rsquo;+c\u0026rsquo;)(a\u0026rsquo;+b\u0026rsquo;+d)\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"基本質函項essential-prime-implicants\"\u003e基本質函項(essential prime implicants)\u003c/h1\u003e\n\u003ch2 id=\"名詞定義\"\u003e名詞定義\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e蘊函項(Implicant)\n\u003cul\u003e\n\u003cli\u003e任何可以被組合的單一或群元素(意指為 \\(F\\)的子集。)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e質函項(Prime Implicant)\n\u003cul\u003e\n\u003cli\u003e已不能再被組合更多的函項。(意指最大的、框選最多的子集)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e基本質函項(Essential Prime Implicant)\n\u003cul\u003e\n\u003cli\u003e一個帶有只能被單一質函項框選到的元素的質函項\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\\(\n\\boxed{\\def\\arraystretch{1.4}\\begin{array}{c|c|c|c|c}\n\u0026amp;00\u0026amp;01\u0026amp;11\u0026amp;10\\\\\\hline\n00\u0026amp; \u0026amp; \u0026amp;1\u0026amp; \\\\\\hline\n01\u0026amp;1\u0026amp;1\u0026amp;1\u0026amp; \\\\\\hline\n11\u0026amp; \u0026amp;1\u0026amp;1\u0026amp;1\\\\\\hline\n10\u0026amp; \u0026amp;1\u0026amp; \u0026amp; \\\\\n\\end{array}}\n\\)\n\u003cul\u003e\n\u003cli\u003e蘊函項：\\(A\u0026rsquo; C\u0026rsquo; D, ABC\u0026rsquo;, ACD, A\u0026rsquo; BC, BD, m_1, m_5, m_6, m_7\u0026hellip;. \\)\u003c/li\u003e\n\u003cli\u003e質函項：\\(A\u0026rsquo; C\u0026rsquo; D, ABC\u0026rsquo;, ACD, A\u0026rsquo; BC, BD \\)\u003c/li\u003e\n\u003cli\u003e基本質函項：\\(A\u0026rsquo; C\u0026rsquo; D,ABC\u0026rsquo;,A\u0026rsquo; BC, ACD\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"簡化原則\"\u003e簡化原則\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e因為有可能存在多個等效的最簡式，所以：\u003c/li\u003e\n\u003c/ul\u003e\n\u003col\u003e\n\u003cli\u003e盡可能將式子展開成質函項(Prime implicants)。\u003c/li\u003e\n\u003cli\u003e用盡可能最少的質函項來表式布林函式。\u003c/li\u003e\n\u003c/ol\u003e\n\u003chr\u003e\n\u003cul\u003e\n\u003cli\u003e例題\u003c/li\u003e\n\u003cli\u003e\\(\n\\boxed{\\def\\arraystretch{1.4}\\begin{array}{c|c|c|c|c}\n\u0026amp;00\u0026amp;01\u0026amp;11\u0026amp;10\\\\\\hline\n00\u0026amp; \u0026amp;1\u0026amp;1\u0026amp; \\\\\\hline\n01\u0026amp;1\u0026amp;1\u0026amp;1\u0026amp; \\\\\\hline\n11\u0026amp;1\u0026amp; \u0026amp;1\u0026amp;1\\\\\\hline\n10\u0026amp; \u0026amp; \u0026amp;1\u0026amp;1\\\\\n\\end{array}}\n\\rightarrow\nF=A\u0026rsquo; B\u0026rsquo; D+BC\u0026rsquo;+AC\n\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"5個變數的卡諾圖\"\u003e5個變數的卡諾圖\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e表示法1\n\u003cimg alt=\"Kmap1\" loading=\"lazy\" src=\"/images/LD/Kmap1.png\"\u003e\u003c/li\u003e\n\u003cli\u003e表示法2\n\u003cimg alt=\"Kmap2\" loading=\"lazy\" src=\"/images/LD/Kmap2.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"[Logic Design] Lec 04 - 卡諾圖 Karnaugh Maps"},{"content":"概要 當變數愈來愈多時，很難依靠人眼判斷，所以必須計設系統化的簡化過程讓電腦運行。 系統化的簡化過程 輸入：minterm expansion 輸出：minimum SOP 步驟： 找出所有質函項，並試著將和項消除到不能再消，利用\\(XY+XY\u0026rsquo;=X\\) \b利用質函項圖找出最小解 範例：\\(F(a,b,c)=a\u0026rsquo; b\u0026rsquo; c\u0026rsquo; + ab\u0026rsquo; c\u0026rsquo;+ab\u0026rsquo; c+ abc\\) \\( \\boxed{ \\def\\arraystretch{1.4}\\begin{array}{c|c|c|c|c} \u0026amp;a\u0026rsquo; b\u0026rsquo;\u0026amp;a\u0026rsquo; b\u0026amp;ab\u0026amp;ab\u0026rsquo;\\\\\\hline c\u0026rsquo;\u0026amp;1\u0026amp;\u0026amp;\u0026amp;1\\\\\\hline c\u0026amp;\u0026amp;\u0026amp;1\u0026amp;1 \\end{array} } \\) 所有蘊函項：\\(a\u0026rsquo; b\u0026rsquo; c\u0026rsquo;, ab\u0026rsquo; c\u0026rsquo;, ab\u0026rsquo; c, abc, ab\u0026rsquo;, b\u0026rsquo; c\u0026rsquo;, ac\\) 質函項：\\(ab\u0026rsquo;, b\u0026rsquo; c\u0026rsquo;, ac\\) 基本質函項：\\(b\u0026rsquo; c\u0026rsquo;, ac\\) Min SOP：\\(F(a,b,c)=b\u0026rsquo; c\u0026rsquo;+ac\\) 決定質函項(prime implicants) 找出所有質函項 將每個 minterm 以二進制表示。 統計每個項的1的數量作為 index 並分群。 將分完群的 minterm 以 index 排列。 從 index 最小開始，往 index + 1 的群，尋找可以用\\(XY+XY\u0026rsquo;=X\\)簡化的組合 檢查所有的項都合併成組合，留下來的項即為質函項。 重複步驟 4 到 步驟 5 直到沒有函項可以合併。\n被打勾表示不是質函項(prime implicants) 範例：\\(f(a,b,c,d)=\\sum m(0,1,2,5,6,7,8,9,10,14)\\) \\(f(a,b,c,d)=P1+P2+P3+P4+P5+P6\\) \\(f(a,b,c,d)=a\u0026rsquo; c\u0026rsquo; d+a\u0026rsquo; bd+a\u0026rsquo; bc+cd\u0026rsquo;+b\u0026rsquo; d\u0026rsquo;+b\u0026rsquo; c\u0026rsquo;\\) \\(\\boxed{ \\def\\arraystretch{1.4}\\begin{array}{c|cc} \u0026amp;\\text{Column I}\\\\\\hline m_0\u0026amp;0000\u0026amp;\\checkmark\\\\\\hline m_1\u0026amp;0001\u0026amp;\\checkmark\\\\ m_2\u0026amp;0010\u0026amp;\\checkmark\\\\ m_8\u0026amp;1000\u0026amp;\\checkmark\\\\\\hline m_5\u0026amp;0101\u0026amp;\\checkmark\\\\ m_6\u0026amp;0110\u0026amp;\\checkmark\\\\ m_9\u0026amp;1001\u0026amp;\\checkmark\\\\ m_{10}\u0026amp;1010\u0026amp;\\checkmark\\\\\\hline m_7\u0026amp;0111\u0026amp;\\checkmark\\\\ m_{14}\u0026amp;1110\u0026amp;\\checkmark \\end{array} }\\) \\(\\boxed{ \\def\\arraystretch{1.4}\\begin{array}{c|cc} \u0026amp;\\text{Column II}\\\\\\hline m_0,m_1\u0026amp;000.\u0026amp;\\checkmark\\\\ m_0,m_2\u0026amp;00.0\u0026amp;\\checkmark\\\\ m_0,m_8\u0026amp;.000\u0026amp;\\checkmark\\\\\\hline m_1,m_5\u0026amp;0.01\u0026amp;\\text{P1}\\\\ m_1,m_9\u0026amp;.001\u0026amp;\\checkmark\\\\ m_2,m_6\u0026amp;0.10\u0026amp;\\checkmark\\\\ m_2,m_{10}\u0026amp;.010\u0026amp;\\checkmark\\\\ m_8,m_9\u0026amp;100.\u0026amp;\\checkmark\\\\ m_8,m_{10}\u0026amp;10.0\u0026amp;\\checkmark\\\\\\hline m_5,m_7\u0026amp;01.1\u0026amp;\\text{P2}\\\\ m_6,m_7\u0026amp;011.\u0026amp;\\text{P3}\\\\ m_6,m_{14}\u0026amp;.110\u0026amp;\\checkmark\\\\ m_{10},m_{14}\u0026amp;1.10\u0026amp;\\checkmark \\end{array} }\\) \\(\\boxed{ \\def\\arraystretch{1.4}\\begin{array}{c|cc} \u0026amp;\\text{Column III}\\\\\\hline m_0,m_1,m_8,m_9\u0026amp;.00.\u0026amp;\\text{P4}\\\\ m_0,m_2,m_8,m_{10}\u0026amp;.0.0\u0026amp;\\text{P5}\\\\ \\sout{m_0,m_8,m_1,m_9}\u0026amp;\\sout{.00.}\\\\ \\sout{m_0,m_8,m_2,m_{10}}\u0026amp;\\sout{.0.0}\\\\\\hline m_2,m_6,m_{10},m_{14}\u0026amp;..10\u0026amp;\\text{P6}\\\\ \\sout{m_2,m_{10},m_6,m_{14}}\u0026amp;\\sout{..10}\\\\ \\end{array} } \\) 質函項圖(表) 範例 \\( \\boxed{ \\def\\arraystretch{1.4}\\begin{array}{r|l|c|cccccccccc} \u0026amp; \u0026amp; \u0026amp;0\u0026amp;1\u0026amp;2\u0026amp;5\u0026amp;6\u0026amp;7\u0026amp;8\u0026amp;9\u0026amp;10\u0026amp;14\\\\\\hline 0, 1, 8, 9\u0026amp;b\u0026rsquo; c\u0026rsquo; \u0026amp;P6\u0026amp;\\checkmark\u0026amp;\\checkmark\u0026amp;\u0026amp;\u0026amp;\u0026amp;\u0026amp;\\checkmark\u0026amp;\\oplus\\\\ 0, 2, 8,10\u0026amp;b\u0026rsquo; d\u0026rsquo; \u0026amp;P5\u0026amp;\\checkmark\u0026amp;\u0026amp;\\checkmark\u0026amp;\u0026amp;\u0026amp;\u0026amp;\\checkmark\u0026amp;\u0026amp;\\checkmark\\\\ 2, 6,10,14\u0026amp;c d\u0026rsquo; \u0026amp;P4\u0026amp;\u0026amp;\u0026amp;\\checkmark\u0026amp;\u0026amp;\\checkmark\u0026amp;\u0026amp;\u0026amp;\u0026amp;\\checkmark\u0026amp;\\oplus\\\\ 1, 5\u0026amp;a\u0026rsquo; c\u0026rsquo; d\u0026amp;P1\u0026amp;\u0026amp;\\checkmark\u0026amp;\u0026amp;\\checkmark\\\\ 5, 7\u0026amp;a\u0026rsquo; bd \u0026amp;P2\u0026amp;\u0026amp;\u0026amp;\u0026amp;\\checkmark\u0026amp;\u0026amp;\\checkmark\\\\ 6, 7\u0026amp;a\u0026rsquo; bc \u0026amp;P3\u0026amp;\u0026amp;\u0026amp;\u0026amp;\u0026amp;\\checkmark\u0026amp;\\checkmark\\\\ \\end{array} } \\) \\( \\boxed{ \\def\\arraystretch{1.4}\\begin{array}{r|l|c|cccccccccc} \u0026amp;\u0026amp;\u0026amp;5\u0026amp;7\\\\\\hline 1,5\u0026amp;a\u0026rsquo; c\u0026rsquo;d\u0026amp;P1\u0026amp;\\checkmark\\\\ 5,7\u0026amp;a\u0026rsquo; bd \u0026amp;P2\u0026amp;\\checkmark\u0026amp;\\checkmark\\\\ 6,7\u0026amp;a\u0026rsquo; bc \u0026amp;P3\u0026amp;\u0026amp;\\checkmark\\\\ \\end{array} } \\) 優先選 \\(\\oplus\\)的質函項(只出現過一次，代表是基本質函項)，如範例\\(P6與P4\\)。 刪除選出的質函項後化簡成更簡化的質函項圖。 選可以同時照顧到最多函項的質函項。 \\(\\rightarrow f(a,b,c)=P2+P4+P6=a\u0026rsquo; bd+cd\u0026rsquo;+b\u0026rsquo; c\u0026rsquo;\\) (若沒有基本質函項時，有可以有多個最佳解) Petrick\u0026rsquo;s method 用來解出質函項圖的所有 min SOP 解。 在使用 Petrick 法前，需將所有基本質函項與其函蓋的 minterms 從表上劃掉。 範例：\\(F=\\sum m(0,1,2,5,6,7)\\)\n\\( \\boxed{ \\def\\arraystretch{1.4}\\begin{array}{r|l|c|cccccc} P1\u0026amp;0,1\u0026amp;a\u0026rsquo; b\u0026rsquo;\u0026amp;\\checkmark\u0026amp;\\checkmark\\\\ P2\u0026amp;0,2\u0026amp;a\u0026rsquo; c\u0026rsquo;\u0026amp;\\checkmark\u0026amp;\u0026amp;\\checkmark\\\\ P3\u0026amp;1,5\u0026amp;b\u0026rsquo; c \u0026amp;\u0026amp;\\checkmark\u0026amp;\u0026amp;\\checkmark\\\\ P4\u0026amp;2,6\u0026amp;b c\u0026rsquo;\u0026amp;\u0026amp;\u0026amp;\\checkmark\u0026amp;\u0026amp;\\checkmark\\\\ P5\u0026amp;5,7\u0026amp;a c \u0026amp;\u0026amp;\u0026amp;\u0026amp;\\checkmark\u0026amp;\u0026amp;\\checkmark\\\\ P6\u0026amp;6,7\u0026amp;a b \u0026amp;\u0026amp;\u0026amp;\u0026amp;\u0026amp;\\checkmark\u0026amp;\\checkmark\\\\ \\end{array} } \\) \\(\\def\\arraystretch{1.4}\\begin{array}{l} 0\\rightarrow P1+P2\\\\ 1\\rightarrow P1+P3\\\\ 2\\rightarrow P2+P4\\\\ 5\\rightarrow P3+P5\\\\ 6\\rightarrow P4+P6\\\\ 7\\rightarrow P5+P6\\\\ \\end{array}\\) \\(P=(P1+P2)(P1+P3)(P2+P4)(P3+P5)(P4+P6)(P5+P6)=1\\) \\(P=(P1+P2P3)(P4+P2P6)(P5+P3P6)\\) \\(P=P1P4P5+P1P2P5P6+P2P3P4P5+P2P3P5P6+P1P3P4P6+P1P2P3P6+P2P3P4P6+P2P3P6\\) 刪掉含有\\(P2P3P6\\)的和項 \\(P=P1P4P5+P1P2P5P6+P2P3P4P5+P1P3P4P6+P2P3P6\\) \\(\\text{min Sol:}\\) \\(F=P1+P4+P5=a\u0026rsquo; b\u0026rsquo;+bc\u0026rsquo;+ac\\) \\(F=P2+P3+P6=a\u0026rsquo; c\u0026rsquo;+b\u0026rsquo; c+ab\\) 考慮 Don\u0026rsquo;t Care 的情形 稍微修改一下 Quine-McClusky 方法 找出所有質函項：將DC視為minterms 建構出質函項表：DC不必列在表頭 範例：\\(F(A,B,C,D)=\\sum m(2,3,7,9,11,13)+\\sum d(1,10,15)\\) \\(\\boxed{\\def\\arraystretch{1.4}\\begin{array}{rrl} 1\u0026amp;0001\u0026amp;\\checkmark\\\\ 2\u0026amp;0010\u0026amp;\\checkmark\\\\\\hline 3\u0026amp;0011\u0026amp;\\checkmark\\\\ 9\u0026amp;1001\u0026amp;\\checkmark\\\\ 10\u0026amp;1010\u0026amp;\\checkmark\\\\\\hline 7\u0026amp;0111\u0026amp;\\checkmark\\\\ 11\u0026amp;1011\u0026amp;\\checkmark\\\\ 13\u0026amp;1101\u0026amp;\\checkmark\\\\\\hline 15\u0026amp;1111\u0026amp;\\checkmark \\end{array}}\\) \\(\\boxed{\\def\\arraystretch{1.4}\\begin{array}{rrl} 1,3\u0026amp;00.1\u0026amp;\\checkmark\\\\ 1,9\u0026amp;.001\u0026amp;\\checkmark\\\\ 2,3\u0026amp;001.\u0026amp;\\checkmark\\\\ 2,10\u0026amp;.01.\u0026amp;\\checkmark\\\\\\hline 3,7\u0026amp;0.11\u0026amp;\\checkmark\\\\ 3,11\u0026amp;.011\u0026amp;\\checkmark\\\\ 9,11\u0026amp;10.1\u0026amp;\\checkmark\\\\ 9,13\u0026amp;1.01\u0026amp;\\checkmark\\\\ 10,11\u0026amp;101.\u0026amp;\\checkmark\\\\\\hline 7,15\u0026amp;.111\u0026amp;\\checkmark\\\\ 11,15\u0026amp;1.11\u0026amp;\\checkmark\\\\ 13,15\u0026amp;11.1\u0026amp;\\checkmark\\\\ \\end{array}}\\) \\(\\boxed{\\def\\arraystretch{1.4}\\begin{array}{rrl} 1,3,9,11\u0026amp;.0.1\\\\ 2,3,10,11,\u0026amp;.01.\\\\ 3,7,11,15\u0026amp;..11\\\\ 9,11,13,15\u0026amp;1..1\\\\ \\end{array}}\\) \\(\\boxed{\\def\\arraystretch{1.4}\\begin{array}{r|cccccc} \u0026amp;2\u0026amp;3\u0026amp;7\u0026amp;9\u0026amp;11\u0026amp;13\\\\\\hline 1,3,9,11\u0026amp;\u0026amp;\\checkmark\u0026amp;\u0026amp;\\checkmark\u0026amp;\\checkmark\\\\ *2,3,10,11\u0026amp;\\oplus\u0026amp;\\checkmark\u0026amp;\u0026amp;\u0026amp;\\checkmark\\\\ *3,7,11,15\u0026amp;\u0026amp;\\checkmark\u0026amp;\\oplus\u0026amp;\u0026amp;\\checkmark\\\\ *9,11,13,15\u0026amp;\u0026amp;\u0026amp;\u0026amp;\\checkmark\u0026amp;\\checkmark\u0026amp;\\oplus\\\\ \\end{array}}\\) \\(F=B\u0026rsquo; C+CD+AD\\) 其中 1 被當作 0，10、15當作1。 ","permalink":"https://intervalrain.github.io/logicdesign/lec5/","summary":"\u003ch1 id=\"概要\"\u003e概要\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e當變數愈來愈多時，很難依靠人眼判斷，所以必須計設系統化的簡化過程讓電腦運行。\u003c/li\u003e\n\u003cli\u003e系統化的簡化過程\n\u003cul\u003e\n\u003cli\u003e輸入：minterm expansion\u003c/li\u003e\n\u003cli\u003e輸出：minimum SOP\u003c/li\u003e\n\u003cli\u003e步驟：\n\u003col\u003e\n\u003cli\u003e找出所有質函項，並試著將和項消除到不能再消，利用\\(XY+XY\u0026rsquo;=X\\)\u003c/li\u003e\n\u003cli\u003e\b利用質函項圖找出最小解\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003cul\u003e\n\u003cli\u003e範例：\\(F(a,b,c)=a\u0026rsquo; b\u0026rsquo; c\u0026rsquo; + ab\u0026rsquo; c\u0026rsquo;+ab\u0026rsquo; c+ abc\\)\n\u003cul\u003e\n\u003cli\u003e\\(\n\\boxed{\n\\def\\arraystretch{1.4}\\begin{array}{c|c|c|c|c}\n\u0026amp;a\u0026rsquo; b\u0026rsquo;\u0026amp;a\u0026rsquo; b\u0026amp;ab\u0026amp;ab\u0026rsquo;\\\\\\hline\nc\u0026rsquo;\u0026amp;1\u0026amp;\u0026amp;\u0026amp;1\\\\\\hline\nc\u0026amp;\u0026amp;\u0026amp;1\u0026amp;1\n\\end{array}\n}\n\\)\u003c/li\u003e\n\u003cli\u003e所有蘊函項：\\(a\u0026rsquo; b\u0026rsquo; c\u0026rsquo;, ab\u0026rsquo; c\u0026rsquo;, ab\u0026rsquo; c, abc, ab\u0026rsquo;, b\u0026rsquo; c\u0026rsquo;, ac\\)\u003c/li\u003e\n\u003cli\u003e質函項：\\(ab\u0026rsquo;, b\u0026rsquo; c\u0026rsquo;, ac\\)\u003c/li\u003e\n\u003cli\u003e基本質函項：\\(b\u0026rsquo; c\u0026rsquo;, ac\\)\u003c/li\u003e\n\u003cli\u003eMin SOP：\\(F(a,b,c)=b\u0026rsquo; c\u0026rsquo;+ac\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"決定質函項prime-implicants\"\u003e決定質函項(prime implicants)\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e找出所有質函項\n\u003col\u003e\n\u003cli\u003e將每個 minterm 以二進制表示。\u003c/li\u003e\n\u003cli\u003e統計每個項的\u003ccode\u003e1\u003c/code\u003e的數量作為 index 並分群。\u003c/li\u003e\n\u003cli\u003e將分完群的 minterm 以 index 排列。\u003c/li\u003e\n\u003cli\u003e從 index 最小開始，往 index + 1 的群，尋找可以用\\(XY+XY\u0026rsquo;=X\\)簡化的組合\u003c/li\u003e\n\u003cli\u003e檢查所有的項都合併成組合，留下來的項即為質函項。\u003c/li\u003e\n\u003cli\u003e重複步驟 4 到 步驟 5 直到沒有函項可以合併。\u003cbr\u003e\n\u003cem\u003e\u003cstrong\u003e被打勾表示不是質函項(prime implicants)\u003c/strong\u003e\u003c/em\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003e範例：\\(f(a,b,c,d)=\\sum m(0,1,2,5,6,7,8,9,10,14)\\)\n\u003cul\u003e\n\u003cli\u003e\\(f(a,b,c,d)=P1+P2+P3+P4+P5+P6\\)\u003c/li\u003e\n\u003cli\u003e\\(f(a,b,c,d)=a\u0026rsquo; c\u0026rsquo; d+a\u0026rsquo; bd+a\u0026rsquo; bc+cd\u0026rsquo;+b\u0026rsquo; d\u0026rsquo;+b\u0026rsquo; c\u0026rsquo;\\)\u003c/li\u003e\n\u003cli\u003e\\(\\boxed{\n\\def\\arraystretch{1.4}\\begin{array}{c|cc}\n\u0026amp;\\text{Column I}\\\\\\hline\nm_0\u0026amp;0000\u0026amp;\\checkmark\\\\\\hline\nm_1\u0026amp;0001\u0026amp;\\checkmark\\\\\nm_2\u0026amp;0010\u0026amp;\\checkmark\\\\\nm_8\u0026amp;1000\u0026amp;\\checkmark\\\\\\hline\nm_5\u0026amp;0101\u0026amp;\\checkmark\\\\\nm_6\u0026amp;0110\u0026amp;\\checkmark\\\\\nm_9\u0026amp;1001\u0026amp;\\checkmark\\\\\nm_{10}\u0026amp;1010\u0026amp;\\checkmark\\\\\\hline\nm_7\u0026amp;0111\u0026amp;\\checkmark\\\\\nm_{14}\u0026amp;1110\u0026amp;\\checkmark\n\\end{array}\n}\\)\n\\(\\boxed{\n\\def\\arraystretch{1.4}\\begin{array}{c|cc}\n\u0026amp;\\text{Column II}\\\\\\hline\nm_0,m_1\u0026amp;000.\u0026amp;\\checkmark\\\\\nm_0,m_2\u0026amp;00.0\u0026amp;\\checkmark\\\\\nm_0,m_8\u0026amp;.000\u0026amp;\\checkmark\\\\\\hline\nm_1,m_5\u0026amp;0.01\u0026amp;\\text{P1}\\\\\nm_1,m_9\u0026amp;.001\u0026amp;\\checkmark\\\\\nm_2,m_6\u0026amp;0.10\u0026amp;\\checkmark\\\\\nm_2,m_{10}\u0026amp;.010\u0026amp;\\checkmark\\\\\nm_8,m_9\u0026amp;100.\u0026amp;\\checkmark\\\\\nm_8,m_{10}\u0026amp;10.0\u0026amp;\\checkmark\\\\\\hline\nm_5,m_7\u0026amp;01.1\u0026amp;\\text{P2}\\\\\nm_6,m_7\u0026amp;011.\u0026amp;\\text{P3}\\\\\nm_6,m_{14}\u0026amp;.110\u0026amp;\\checkmark\\\\\nm_{10},m_{14}\u0026amp;1.10\u0026amp;\\checkmark\n\\end{array}\n}\\)\n\\(\\boxed{\n\\def\\arraystretch{1.4}\\begin{array}{c|cc}\n\u0026amp;\\text{Column III}\\\\\\hline\nm_0,m_1,m_8,m_9\u0026amp;.00.\u0026amp;\\text{P4}\\\\\nm_0,m_2,m_8,m_{10}\u0026amp;.0.0\u0026amp;\\text{P5}\\\\\n\\sout{m_0,m_8,m_1,m_9}\u0026amp;\\sout{.00.}\\\\\n\\sout{m_0,m_8,m_2,m_{10}}\u0026amp;\\sout{.0.0}\\\\\\hline\nm_2,m_6,m_{10},m_{14}\u0026amp;..10\u0026amp;\\text{P6}\\\\\n\\sout{m_2,m_{10},m_6,m_{14}}\u0026amp;\\sout{..10}\\\\\n\\end{array}\n}\n\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"質函項圖表\"\u003e質函項圖(表)\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e範例\n\u003cul\u003e\n\u003cli\u003e\\(\n\\boxed{\n\\def\\arraystretch{1.4}\\begin{array}{r|l|c|cccccccccc}\n\u0026amp;       \u0026amp;  \u0026amp;0\u0026amp;1\u0026amp;2\u0026amp;5\u0026amp;6\u0026amp;7\u0026amp;8\u0026amp;9\u0026amp;10\u0026amp;14\\\\\\hline\n0, 1, 8, 9\u0026amp;b\u0026rsquo; c\u0026rsquo;  \u0026amp;P6\u0026amp;\\checkmark\u0026amp;\\checkmark\u0026amp;\u0026amp;\u0026amp;\u0026amp;\u0026amp;\\checkmark\u0026amp;\\oplus\\\\\n0, 2, 8,10\u0026amp;b\u0026rsquo; d\u0026rsquo;  \u0026amp;P5\u0026amp;\\checkmark\u0026amp;\u0026amp;\\checkmark\u0026amp;\u0026amp;\u0026amp;\u0026amp;\\checkmark\u0026amp;\u0026amp;\\checkmark\\\\\n2, 6,10,14\u0026amp;c d\u0026rsquo;   \u0026amp;P4\u0026amp;\u0026amp;\u0026amp;\\checkmark\u0026amp;\u0026amp;\\checkmark\u0026amp;\u0026amp;\u0026amp;\u0026amp;\\checkmark\u0026amp;\\oplus\\\\\n1, 5\u0026amp;a\u0026rsquo; c\u0026rsquo; d\u0026amp;P1\u0026amp;\u0026amp;\\checkmark\u0026amp;\u0026amp;\\checkmark\\\\\n5, 7\u0026amp;a\u0026rsquo; bd  \u0026amp;P2\u0026amp;\u0026amp;\u0026amp;\u0026amp;\\checkmark\u0026amp;\u0026amp;\\checkmark\\\\\n6, 7\u0026amp;a\u0026rsquo; bc  \u0026amp;P3\u0026amp;\u0026amp;\u0026amp;\u0026amp;\u0026amp;\\checkmark\u0026amp;\\checkmark\\\\\n\\end{array}\n}\n\\)\u003c/li\u003e\n\u003cli\u003e\\(\n\\boxed{\n\\def\\arraystretch{1.4}\\begin{array}{r|l|c|cccccccccc}\n\u0026amp;\u0026amp;\u0026amp;5\u0026amp;7\\\\\\hline\n1,5\u0026amp;a\u0026rsquo; c\u0026rsquo;d\u0026amp;P1\u0026amp;\\checkmark\\\\\n5,7\u0026amp;a\u0026rsquo; bd \u0026amp;P2\u0026amp;\\checkmark\u0026amp;\\checkmark\\\\\n6,7\u0026amp;a\u0026rsquo; bc \u0026amp;P3\u0026amp;\u0026amp;\\checkmark\\\\\n\\end{array}\n}\n\\)\u003c/li\u003e\n\u003cli\u003e優先選 \\(\\oplus\\)的質函項(只出現過一次，代表是基本質函項)，如範例\\(P6與P4\\)。\u003c/li\u003e\n\u003cli\u003e刪除選出的質函項後化簡成更簡化的質函項圖。\u003c/li\u003e\n\u003cli\u003e選可以同時照顧到最多函項的質函項。\u003c/li\u003e\n\u003cli\u003e\\(\\rightarrow f(a,b,c)=P2+P4+P6=a\u0026rsquo; bd+cd\u0026rsquo;+b\u0026rsquo; c\u0026rsquo;\\)\u003c/li\u003e\n\u003cli\u003e(若沒有基本質函項時，有可以有多個最佳解)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"petricks-method\"\u003ePetrick\u0026rsquo;s method\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e用來解出質函項圖的所有 min SOP 解。\u003c/li\u003e\n\u003cli\u003e在使用 Petrick 法前，需將所有基本質函項與其函蓋的 minterms 從表上劃掉。\u003c/li\u003e\n\u003cli\u003e範例：\\(F=\\sum m(0,1,2,5,6,7)\\)\u003cbr\u003e\n\\(\n\\boxed{\n\\def\\arraystretch{1.4}\\begin{array}{r|l|c|cccccc}\nP1\u0026amp;0,1\u0026amp;a\u0026rsquo; b\u0026rsquo;\u0026amp;\\checkmark\u0026amp;\\checkmark\\\\\nP2\u0026amp;0,2\u0026amp;a\u0026rsquo; c\u0026rsquo;\u0026amp;\\checkmark\u0026amp;\u0026amp;\\checkmark\\\\\nP3\u0026amp;1,5\u0026amp;b\u0026rsquo; c \u0026amp;\u0026amp;\\checkmark\u0026amp;\u0026amp;\\checkmark\\\\\nP4\u0026amp;2,6\u0026amp;b  c\u0026rsquo;\u0026amp;\u0026amp;\u0026amp;\\checkmark\u0026amp;\u0026amp;\\checkmark\\\\\nP5\u0026amp;5,7\u0026amp;a  c \u0026amp;\u0026amp;\u0026amp;\u0026amp;\\checkmark\u0026amp;\u0026amp;\\checkmark\\\\\nP6\u0026amp;6,7\u0026amp;a  b \u0026amp;\u0026amp;\u0026amp;\u0026amp;\u0026amp;\\checkmark\u0026amp;\\checkmark\\\\\n\\end{array}\n}\n\\)\n\u003cul\u003e\n\u003cli\u003e\\(\\def\\arraystretch{1.4}\\begin{array}{l}\n0\\rightarrow P1+P2\\\\\n1\\rightarrow P1+P3\\\\\n2\\rightarrow P2+P4\\\\\n5\\rightarrow P3+P5\\\\\n6\\rightarrow P4+P6\\\\\n7\\rightarrow P5+P6\\\\\n\\end{array}\\)\u003c/li\u003e\n\u003cli\u003e\\(P=(P1+P2)(P1+P3)(P2+P4)(P3+P5)(P4+P6)(P5+P6)=1\\)\u003c/li\u003e\n\u003cli\u003e\\(P=(P1+P2P3)(P4+P2P6)(P5+P3P6)\\)\u003c/li\u003e\n\u003cli\u003e\\(P=P1P4P5+P1P2P5P6+P2P3P4P5+P2P3P5P6+P1P3P4P6+P1P2P3P6+P2P3P4P6+P2P3P6\\)\u003c/li\u003e\n\u003cli\u003e刪掉含有\\(P2P3P6\\)的和項\u003c/li\u003e\n\u003cli\u003e\\(P=P1P4P5+P1P2P5P6+P2P3P4P5+P1P3P4P6+P2P3P6\\)\u003c/li\u003e\n\u003cli\u003e\\(\\text{min Sol:}\\)\n\u003cul\u003e\n\u003cli\u003e\\(F=P1+P4+P5=a\u0026rsquo; b\u0026rsquo;+bc\u0026rsquo;+ac\\)\u003c/li\u003e\n\u003cli\u003e\\(F=P2+P3+P6=a\u0026rsquo; c\u0026rsquo;+b\u0026rsquo; c+ab\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"考慮-dont-care-的情形\"\u003e考慮 Don\u0026rsquo;t Care 的情形\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e稍微修改一下 Quine-McClusky 方法\n\u003col\u003e\n\u003cli\u003e找出所有質函項：將DC視為minterms\u003c/li\u003e\n\u003cli\u003e建構出質函項表：DC不必列在表頭\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003e範例：\\(F(A,B,C,D)=\\sum m(2,3,7,9,11,13)+\\sum d(1,10,15)\\)\n\u003cul\u003e\n\u003cli\u003e\\(\\boxed{\\def\\arraystretch{1.4}\\begin{array}{rrl}\n1\u0026amp;0001\u0026amp;\\checkmark\\\\\n2\u0026amp;0010\u0026amp;\\checkmark\\\\\\hline\n3\u0026amp;0011\u0026amp;\\checkmark\\\\\n9\u0026amp;1001\u0026amp;\\checkmark\\\\\n10\u0026amp;1010\u0026amp;\\checkmark\\\\\\hline\n7\u0026amp;0111\u0026amp;\\checkmark\\\\\n11\u0026amp;1011\u0026amp;\\checkmark\\\\\n13\u0026amp;1101\u0026amp;\\checkmark\\\\\\hline\n15\u0026amp;1111\u0026amp;\\checkmark\n\\end{array}}\\)\n\\(\\boxed{\\def\\arraystretch{1.4}\\begin{array}{rrl}\n1,3\u0026amp;00.1\u0026amp;\\checkmark\\\\\n1,9\u0026amp;.001\u0026amp;\\checkmark\\\\\n2,3\u0026amp;001.\u0026amp;\\checkmark\\\\\n2,10\u0026amp;.01.\u0026amp;\\checkmark\\\\\\hline\n3,7\u0026amp;0.11\u0026amp;\\checkmark\\\\\n3,11\u0026amp;.011\u0026amp;\\checkmark\\\\\n9,11\u0026amp;10.1\u0026amp;\\checkmark\\\\\n9,13\u0026amp;1.01\u0026amp;\\checkmark\\\\\n10,11\u0026amp;101.\u0026amp;\\checkmark\\\\\\hline\n7,15\u0026amp;.111\u0026amp;\\checkmark\\\\\n11,15\u0026amp;1.11\u0026amp;\\checkmark\\\\\n13,15\u0026amp;11.1\u0026amp;\\checkmark\\\\\n\\end{array}}\\)\n\\(\\boxed{\\def\\arraystretch{1.4}\\begin{array}{rrl}\n1,3,9,11\u0026amp;.0.1\\\\\n2,3,10,11,\u0026amp;.01.\\\\\n3,7,11,15\u0026amp;..11\\\\\n9,11,13,15\u0026amp;1..1\\\\\n\\end{array}}\\)\u003c/li\u003e\n\u003cli\u003e\\(\\boxed{\\def\\arraystretch{1.4}\\begin{array}{r|cccccc}\n\u0026amp;2\u0026amp;3\u0026amp;7\u0026amp;9\u0026amp;11\u0026amp;13\\\\\\hline\n1,3,9,11\u0026amp;\u0026amp;\\checkmark\u0026amp;\u0026amp;\\checkmark\u0026amp;\\checkmark\\\\\n*2,3,10,11\u0026amp;\\oplus\u0026amp;\\checkmark\u0026amp;\u0026amp;\u0026amp;\\checkmark\\\\\n*3,7,11,15\u0026amp;\u0026amp;\\checkmark\u0026amp;\\oplus\u0026amp;\u0026amp;\\checkmark\\\\\n*9,11,13,15\u0026amp;\u0026amp;\u0026amp;\u0026amp;\\checkmark\u0026amp;\\checkmark\u0026amp;\\oplus\\\\\n\\end{array}}\\)\u003c/li\u003e\n\u003cli\u003e\\(F=B\u0026rsquo; C+CD+AD\\)\u003c/li\u003e\n\u003cli\u003e其中 1 被當作 0，10、15當作1。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","title":"[Logic Design] Lec 05 - Quine-McClusky Method"},{"content":"Multi-level gate circuits 如何決定 level 數： Gate input number \u0026amp; Delay determine level Factoring to accomplish different level AND-OR: 2-level SOP OR-AND: 2-level POS OR-AND-OR: 3-level circuit of AND and OR → no particular ordering 4 level gates: \\(\\text{Z=(AB+C)(FG+D+E)+H}\\) 3 level gates: (case fan out) \\(\\text{AB(D+E)+C(D+E)+ABFG+CFG+H}\\) Factoring 可變成 4-level \\(\\text{(AB+C)(D+E+FG)+H}\\) level \u0026amp; gate \u0026amp; gate inputs 的關係會隨之變化，可根據電路設計的需求改變 範例： \\( \\begin{array}{llll} f(a,b,c,d)=\\sum(1,5,6,10,13,14)\\\\ f=(c+d)(a\u0026rsquo;+b+c)(c\u0026rsquo;+d\u0026rsquo;)(a+b+c\u0026rsquo;)\u0026amp;\\text{2 levels}\u0026amp;\\text{5 gates}\u0026amp;\\text{14 gate inputs}\\\\ f=[c+d(a\u0026rsquo;+b)][c\u0026rsquo;+d\u0026rsquo;(a+b)]\u0026amp;\\text{4 levels}\u0026amp;\\text{7 gates}\u0026amp;\\text{14 gate inputs}\\\\ f=(c+a\u0026rsquo; d+bd)(c\u0026rsquo;+ad\u0026rsquo;+bd\u0026rsquo;)\u0026amp;\\text{3 levels}\u0026amp;\\text{7 gates}\u0026amp;\\text{16 gate inputs}\\\\ f=a\u0026rsquo; c\u0026rsquo; d+bc\u0026rsquo; d+bcd\u0026rsquo;+acd\u0026rsquo;\u0026amp;\\text{2 levels}\u0026amp;\\text{5 gates}\u0026amp;\\text{16 gate inputs}\\\\ f=c\u0026rsquo; d(a\u0026rsquo;+b)+cd\u0026rsquo;(a+b)\u0026amp;\\text{3 levels}\u0026amp;\\text{5 gates}\u0026amp;\\text{12 gate inputs} \\end{array} \\) \\( \\boxed{\\begin{array}{c|c|c|c|c} \u0026amp;00\u0026amp;01\u0026amp;11\u0026amp;10\\\\\\hline 00\u0026amp;m_0\u0026amp;m_4\u0026amp;m_{12}\u0026amp;m_{8}\\\\\\hline 01\u0026amp;m_1\u0026amp;m_5\u0026amp;m_{13}\u0026amp;m_{9}\\\\\\hline 11\u0026amp;m_3\u0026amp;m_7\u0026amp;m_{15}\u0026amp;m_{11}\\\\\\hline 10\u0026amp;m_2\u0026amp;m_6\u0026amp;m_{14}\u0026amp;m_{10} \\end{array}}\\rightarrow \\boxed{\\begin{array}{c|c|c|c|c} \u0026amp;00\u0026amp;01\u0026amp;11\u0026amp;10\\\\\\hline 00\u0026amp;\u0026amp;\u0026amp;\u0026amp;\\\\\\hline 01\u0026amp;1\u0026amp;1\u0026amp;1\u0026amp;\\\\\\hline 11\u0026amp;\u0026amp;\u0026amp;\u0026amp;\\\\\\hline 10\u0026amp;\u0026amp;1\u0026amp;1\u0026amp;1 \\end{array}}\\) \\(\\boxed{\\begin{array}{c|c|c|c|c} \u0026amp;a\u0026rsquo; b\u0026rsquo;\u0026amp;a\u0026rsquo; b\u0026amp;ab\u0026amp;ab\u0026rsquo;\\\\\\hline c\u0026rsquo; d\u0026rsquo;\u0026amp;\u0026amp;\u0026amp;\u0026amp;\\\\\\hline c\u0026rsquo; d\u0026amp;1\u0026amp;1\u0026amp;1\u0026amp;\\\\\\hline cd\u0026amp;\u0026amp;\u0026amp;\u0026amp;\\\\\\hline cd\u0026rsquo;\u0026amp;\u0026amp;1\u0026amp;1\u0026amp;1 \\end{array}}\\\\ =a\u0026rsquo; c\u0026rsquo; d+bc\u0026rsquo; d+bcd\u0026rsquo;+acd\u0026rsquo;=(a\u0026rsquo;+b)c\u0026rsquo; d+(a+b)cd\u0026rsquo;\\\\ =(c\u0026rsquo; d\u0026rsquo;+ab\u0026rsquo; c\u0026rsquo;+cd+a\u0026rsquo; b\u0026rsquo; c)\u0026rsquo;=(c+d)(a\u0026rsquo;+b+c)(c\u0026rsquo;+d\u0026rsquo;)(a+b+c\u0026rsquo;)\\\\ =[c+d(a\u0026rsquo;+b)][c\u0026rsquo;+d\u0026rsquo;(a+b)]=(c+a\u0026rsquo; d+bd)(c\u0026rsquo;+ad\u0026rsquo;+bd\u0026rsquo;) \\) NAND and NOR gates NAND 符號 真值表\n\\(\\boxed{\\begin{array}{cc|cc} A\u0026amp;B\u0026amp;AB\u0026amp;\\overline{AB}\\\\\\hline 0\u0026amp;0\u0026amp;0\u0026amp;1\\\\ 0\u0026amp;1\u0026amp;0\u0026amp;1\\\\ 1\u0026amp;0\u0026amp;0\u0026amp;1\\\\ 1\u0026amp;1\u0026amp;1\u0026amp;0 \\end{array}} \\) 布林表達式：\n\\(F=(ABC)\u0026rsquo;=A\u0026rsquo;+B\u0026rsquo;+C\u0026rsquo;\\) NOR 符號 真值表\n\\(\\boxed{\\begin{array}{cc|cc} A\u0026amp;B\u0026amp;AB\u0026amp;\\overline{AB}\\\\\\hline 0\u0026amp;0\u0026amp;0\u0026amp;1\\\\ 0\u0026amp;1\u0026amp;1\u0026amp;0\\\\ 1\u0026amp;0\u0026amp;1\u0026amp;0\\\\ 1\u0026amp;1\u0026amp;1\u0026amp;0 \\end{array}} \\) 布林表達式： \\(F=(A+B+C)\u0026rsquo;=A\u0026rsquo; B\u0026rsquo; C\u0026rsquo;\\) Functionally Complete Sets of Gates 定義：當所有的布林式皆可以被這組邏輯閘組合而成，則這組邏輯閘為 Functionally Complete \\(\\lbrace{\\text{AND, OR, NOT}}\\rbrace\\) \\(\\lbrace{\\text{AND, NOT}}\\rbrace\\rightarrow \\text{OR}=X+Y=(X\u0026rsquo; Y\u0026rsquo;)\u0026rsquo;\\) \\(\\lbrace{\\text{OR, NOT}}\\rbrace\\rightarrow \\text{AND}=XY=(X\u0026rsquo;+Y\u0026rsquo;)\u0026rsquo;\\) \\(\\lbrace{\\text{NAND}}\\rbrace\\) \\(\\lbrace{\\text{NOR}}\\rbrace\\) \\(\\lbrace{\\text{3-input Minority Gate}}\\rbrace\\) Majority Gate and Minority Gate 真值表\n\\(\\boxed{\\begin{array}{ccc|cc} A\u0026amp;B\u0026amp;C\u0026amp;F_M\u0026amp;F_m\\\\\\hline 0\u0026amp;0\u0026amp;0\u0026amp;0\u0026amp;1\\\\ 0\u0026amp;0\u0026amp;1\u0026amp;0\u0026amp;1\\\\ 0\u0026amp;1\u0026amp;0\u0026amp;0\u0026amp;1\\\\ 0\u0026amp;1\u0026amp;1\u0026amp;1\u0026amp;0\\\\ 1\u0026amp;0\u0026amp;0\u0026amp;0\u0026amp;1\\\\ 1\u0026amp;0\u0026amp;1\u0026amp;1\u0026amp;0\\\\ 1\u0026amp;1\u0026amp;0\u0026amp;1\u0026amp;0\\\\ 1\u0026amp;1\u0026amp;1\u0026amp;1\u0026amp;0 \\end{array}}\\) \\(\\text{(0, B, C)}\\rightarrow\\boxed{\\text{Minority Gate}}=\\text{NAND}=\\text{(BC)\u0026rsquo;=\\text{B\u0026rsquo;+C\u0026rsquo;}}\\) \\(\\text{(1, B, C)}\\rightarrow\\boxed{\\text{Minority Gate}}=\\text{NOR}=\\text{(B+C)\u0026rsquo;=\\text{B\u0026rsquo;C\u0026rsquo;}}\\) \\(\\text{(A, A, A)}\\rightarrow\\boxed{\\text{Minority Gate}}=\\text{NOT}=\\text{A\u0026rsquo;}\\) \\(\\text{(0, B\u0026rsquo;, C\u0026rsquo;)}\\rightarrow\\boxed{\\text{Minority Gate}}=\\text{AND}=\\text{BC}\\) \\(\\text{(1, B\u0026rsquo;, C\u0026rsquo;)}\\rightarrow\\boxed{\\text{Minority Gate}}=\\text{OR}=\\text{B+C}\\) 2-level NAND and NOR gates DeMorgon\u0026rsquo;s Law 等效邏輯閘： \\((A+B)\u0026rsquo;=A\u0026rsquo; B\u0026rsquo;\\) \\((AB)\u0026rsquo;=A\u0026rsquo;+B\u0026rsquo;\\) \\(A+B=(A\u0026rsquo; B\u0026rsquo;)\u0026rsquo;\\) \\(AB=(A\u0026rsquo;+B\u0026rsquo;)\u0026rsquo;\\) \\(\\text{Ex1: AND/OR}\\rightarrow\\text{NAND/NAND}\\) \\(\\text{Ex2: AND/OR}\\rightarrow\\text{NOR/NOR}\\) Multi-level NAND and NOR circuits Multi-level NAND and NOR circuits \\(\\text{to NAND gate}\\)\n\\(\\text{to NOR gate}\\) Multi-output circuit realization 實際一個多工器(multiplexer)內的電路實現，可以用 fan out 的方式達到最佳化。 整體最佳不一定代表個別都為最佳。 實作1: \\(F_1(A,B,C,D)=\\sum m(11,12,13,14,15) =AB+ACD \\\\ F_2(A,B,C,D)=\\sum m(3,7,11,12,13,15)=ABC\u0026rsquo;+CD\\\\ F_3(A,B,C,D)=\\sum m(3,7,12,13,14,15)=A\u0026rsquo; CD+AB\\\\ \\) \\( \\begin{array}{|c|c|c|c|c|}\\hline F_1\u0026amp;00\u0026amp;01\u0026amp;11\u0026amp;10\\\\\\hline 00\u0026amp; \u0026amp; \u0026amp; 1\u0026amp; \\\\\\hline 01\u0026amp; \u0026amp; \u0026amp; 1\u0026amp; \\\\\\hline 11\u0026amp; \u0026amp; \u0026amp; 1\u0026amp; 1\\\\\\hline 10\u0026amp; \u0026amp; \u0026amp; 1\u0026amp; \\\\\\hline \\end{array}\\quad \\begin{array}{|c|c|c|c|c|}\\hline F_2\u0026amp;00\u0026amp;01\u0026amp;11\u0026amp;10\\\\\\hline 00\u0026amp; \u0026amp; \u0026amp; 1\u0026amp; \\\\\\hline 01\u0026amp; \u0026amp; \u0026amp; 1\u0026amp; \\\\\\hline 11\u0026amp; 1\u0026amp; 1\u0026amp; 1\u0026amp; 1\\\\\\hline 10\u0026amp; \u0026amp; \u0026amp; \u0026amp; \\\\\\hline \\end{array}\\quad \\begin{array}{|c|c|c|c|c|}\\hline F_3\u0026amp;00\u0026amp;01\u0026amp;11\u0026amp;10\\\\\\hline 00\u0026amp; \u0026amp; \u0026amp;1 \u0026amp; \\\\\\hline 01\u0026amp; \u0026amp; \u0026amp;1 \u0026amp; \\\\\\hline 11\u0026amp; 1\u0026amp;1 \u0026amp;1 \u0026amp; \\\\\\hline 10\u0026amp; \u0026amp; \u0026amp;1 \u0026amp; \\\\\\hline \\end{array} \\) \\(\\text{9 Gates, 21 Gate inputs}\\rightarrow\\text{7 Gates, 18 Gate inputs}\\) \\(\\text{Share AB(fan out)}\\) \\(\\text{A\u0026rsquo;CD+ACD=CD}\\) \\(F_1(A,B,C,D)=AB+ACD \\\\ F_2(A,B,C,D)=ABC\u0026rsquo;+ACD+A\u0026rsquo; CD\\\\ F_3(A,B,C,D)=A\u0026rsquo; CD+AB\\\\ \\lbrace{AB,A\u0026rsquo; CD,ACD,ABC\u0026rsquo;}\\rbrace \\) 實作2: \\(f_1=\\sum m(2,3,5,7,8,9,10,11,13,15)=bd+b\u0026rsquo; c+ab\u0026rsquo;\\\\ f_2=\\sum m(2,3,5,6,7,10,11,14,15)=a\u0026rsquo; bd+c\\\\ f_3=\\sum m(6,7,8,9,13,14,15)=bc+ab\u0026rsquo; c\u0026rsquo;+abd\\\\ \\rightarrow\\text{10 Gates, 25 Gate inputs} \\) \\( \\begin{array}{|c|c|c|c|c|}\\hline f_1\u0026amp;00\u0026amp;01\u0026amp;11\u0026amp;10\\\\\\hline 00\u0026amp; \u0026amp; \u0026amp; \u0026amp;1 \\\\\\hline 01\u0026amp; \u0026amp;1 \u0026amp;1 \u0026amp;1 \\\\\\hline 11\u0026amp;1 \u0026amp;1 \u0026amp;1 \u0026amp;1 \\\\\\hline 10\u0026amp;1 \u0026amp; \u0026amp; \u0026amp;1 \\\\\\hline \\end{array}\\quad \\begin{array}{|c|c|c|c|c|}\\hline f_2\u0026amp;00\u0026amp;01\u0026amp;11\u0026amp;10\\\\\\hline 00\u0026amp; \u0026amp; \u0026amp; \u0026amp; \\\\\\hline 01\u0026amp; \u0026amp;1 \u0026amp; \u0026amp; \\\\\\hline 11\u0026amp;1 \u0026amp;1 \u0026amp;1 \u0026amp;1 \\\\\\hline 10\u0026amp;1 \u0026amp;1 \u0026amp;1 \u0026amp;1 \\\\\\hline \\end{array}\\quad \\begin{array}{|c|c|c|c|c|}\\hline f_3\u0026amp;00\u0026amp;01\u0026amp;11\u0026amp;10\\\\\\hline 00\u0026amp; \u0026amp; \u0026amp; \u0026amp;1 \\\\\\hline 01\u0026amp; \u0026amp; \u0026amp;1 \u0026amp;1 \\\\\\hline 11\u0026amp; \u0026amp;1 \u0026amp;1 \u0026amp; \\\\\\hline 10\u0026amp; \u0026amp;1 \u0026amp;1 \u0026amp; \\\\\\hline \\end{array} \\) \\( \\text{(1) } b\u0026rsquo; c+bc = c\\\\ \\text{(2) } a\u0026rsquo; bd+abd = bd\\\\ \\text{用}\\lbrace{b\u0026rsquo; c, bc, a\u0026rsquo;bd, abd, ab\u0026rsquo; c\u0026rsquo;}\\rbrace\\text{組合上例} \\) \\( f_1=b\u0026rsquo; c+(abd+a\u0026rsquo; bd)+ab\u0026rsquo; c\u0026rsquo;\\\\ f_2=(b\u0026rsquo; c+ bc)+a\u0026rsquo; bd\\\\ f_3=bc+abd+ab\u0026rsquo; c\u0026rsquo;\\\\ \\lbrace {b\u0026rsquo; c,bc,abd,a\u0026rsquo; bd,ab\u0026rsquo; c\u0026rsquo;}\\rbrace\\\\ \\rightarrow\\text{8 Gates, 23 Gate inputs} \\) 實作3: \\( f_1=\\sum m(1,5,9,13,15)=c\u0026rsquo; d+abd\\\\ f_2=\\sum m(4,6,12,14,15)=bd\u0026rsquo;+abc\\\\ \\rightarrow\\text{6 Gates, 14 Gate inputs} \\) \\(\\begin{array}{|c|c|c|c|c|}\\hline f_1\u0026amp;00\u0026amp;01\u0026amp;11\u0026amp;10\\\\\\hline 00\u0026amp; \u0026amp; \u0026amp; \u0026amp; \\\\\\hline 01\u0026amp; 1\u0026amp; 1\u0026amp; 1\u0026amp; 1\\\\\\hline 11\u0026amp; \u0026amp; \u0026amp; 1\u0026amp; \\\\\\hline 10\u0026amp; \u0026amp; \u0026amp; \u0026amp; \\\\\\hline \\end{array}\\quad \\begin{array}{|c|c|c|c|c|}\\hline f_2\u0026amp;00\u0026amp;01\u0026amp;11\u0026amp;10\\\\\\hline 00\u0026amp; \u0026amp; 1\u0026amp; 1\u0026amp; \\\\\\hline 01\u0026amp; \u0026amp; \u0026amp; \u0026amp; \\\\\\hline 11\u0026amp; \u0026amp; \u0026amp; 1\u0026amp; \\\\\\hline 10\u0026amp; \u0026amp; 1\u0026amp; 1\u0026amp; \\\\\\hline \\end{array}\\) 使上面兩式共用 \\(abcd\\) \\( f_1=c\u0026rsquo; d+abcd\\\\ f_2=bd\u0026rsquo;+abcd\\\\ \\rightarrow\\text{5 Gates, 12 Gate inputs} \\) 實作4: \\( f_1=\\sum m(0,3,4,5,6,14)=a\u0026rsquo; c\u0026rsquo; d\u0026rsquo;+a\u0026rsquo; bc\u0026rsquo;+a\u0026rsquo; cd\u0026rsquo;+bcd\u0026rsquo;\\\\ f_2=\\sum m(0,1,4,6,8,10)=a\u0026rsquo; c\u0026rsquo; d\u0026rsquo;+bc\u0026rsquo; d\u0026rsquo;+a\u0026rsquo; b\u0026rsquo; c\u0026rsquo;+bcd\u0026rsquo;\\\\ \\rightarrow\\text{8 Gates, 26 Gate inputs} \\) \\(\\begin{array}{|c|c|c|c|c|}\\hline f_1\u0026amp;00\u0026amp;01\u0026amp;11\u0026amp;10\\\\\\hline 00\u0026amp; 1\u0026amp; 1\u0026amp; \u0026amp; \\\\\\hline 01\u0026amp; \u0026amp; 1\u0026amp; \u0026amp; \\\\\\hline 11\u0026amp; \u0026amp; \u0026amp; \u0026amp; \\\\\\hline 10\u0026amp; 1\u0026amp; 1\u0026amp; 1\u0026amp; \\\\\\hline \\end{array}\\quad \\begin{array}{|c|c|c|c|c|}\\hline f_1\u0026amp;00\u0026amp;01\u0026amp;11\u0026amp;10\\\\\\hline 00\u0026amp; 1\u0026amp; 1\u0026amp; 1\u0026amp; \\\\\\hline 01\u0026amp; 1\u0026amp; \u0026amp; \u0026amp; \\\\\\hline 11\u0026amp; \u0026amp; \u0026amp; \u0026amp; \\\\\\hline 10\u0026amp; \u0026amp; 1\u0026amp; 1\u0026amp; \\\\\\hline \\end{array} \\) 不 combine 各自做最佳化 \\( f_1=a\u0026rsquo; d\u0026rsquo;+a\u0026rsquo; bc\u0026rsquo;+bcd\u0026rsquo;\\\\ f_2=a\u0026rsquo; b\u0026rsquo; c\u0026rsquo;+bd\u0026rsquo;\\\\ \\rightarrow\\text{7 Gates, 18 Gate Inputs} \\) 多輸出電路的基本質函項 參考實作3，若基本質函項可通過多工器中其他的輸入共用的話，則對多輸出電路而言並非基本質函項(Essential prime terms)。 參考實作4，\\(a\u0026rsquo; d\u0026rsquo;(m_2),a\u0026rsquo; bc\u0026rsquo;(m_5), a\u0026rsquo; b\u0026rsquo; c\u0026rsquo;(m_1), bd\u0026rsquo;(m_{12})\\)皆為基本質函項。 一般而言，不會為了共享而把基本質函項拆開。 和項共用(Shared by sum terms) 真值表\n\\(\\begin{array}{|cccc|cccc:c|}\\hline a\u0026amp;b\u0026amp;c\u0026amp;d\u0026amp;w\u0026amp;x\u0026amp;y\u0026amp;z\u0026amp;\\\\\\hline 0\u0026amp;0\u0026amp;0\u0026amp;0\u0026amp;0\u0026amp;0\u0026amp;1\u0026amp;1\u0026amp;0\\\\\\hline 0\u0026amp;0\u0026amp;0\u0026amp;1\u0026amp;0\u0026amp;1\u0026amp;0\u0026amp;0\u0026amp;1\\\\\\hline 0\u0026amp;0\u0026amp;1\u0026amp;0\u0026amp;0\u0026amp;1\u0026amp;0\u0026amp;1\u0026amp;2\\\\\\hline 0\u0026amp;0\u0026amp;1\u0026amp;1\u0026amp;0\u0026amp;1\u0026amp;1\u0026amp;0\u0026amp;3\\\\\\hline 0\u0026amp;1\u0026amp;0\u0026amp;0\u0026amp;0\u0026amp;1\u0026amp;1\u0026amp;1\u0026amp;4\\\\\\hline 0\u0026amp;1\u0026amp;0\u0026amp;1\u0026amp;1\u0026amp;0\u0026amp;0\u0026amp;0\u0026amp;5\\\\\\hline 0\u0026amp;1\u0026amp;1\u0026amp;0\u0026amp;1\u0026amp;0\u0026amp;0\u0026amp;1\u0026amp;6\\\\\\hline 0\u0026amp;1\u0026amp;1\u0026amp;1\u0026amp;1\u0026amp;0\u0026amp;1\u0026amp;0\u0026amp;7\\\\\\hline 1\u0026amp;0\u0026amp;0\u0026amp;0\u0026amp;1\u0026amp;0\u0026amp;1\u0026amp;1\u0026amp;8\\\\\\hline 1\u0026amp;0\u0026amp;0\u0026amp;1\u0026amp;1\u0026amp;1\u0026amp;0\u0026amp;0\u0026amp;9\\\\\\hline 1\u0026amp;0\u0026amp;1\u0026amp;0\u0026amp;X\u0026amp;X\u0026amp;X\u0026amp;X\u0026amp;\\\\\\hline 1\u0026amp;0\u0026amp;1\u0026amp;1\u0026amp;X\u0026amp;X\u0026amp;X\u0026amp;X\u0026amp;\\\\\\hline 1\u0026amp;1\u0026amp;0\u0026amp;0\u0026amp;X\u0026amp;X\u0026amp;X\u0026amp;X\u0026amp;\\\\\\hline 1\u0026amp;1\u0026amp;0\u0026amp;1\u0026amp;X\u0026amp;X\u0026amp;X\u0026amp;X\u0026amp;\\\\\\hline 1\u0026amp;1\u0026amp;1\u0026amp;0\u0026amp;X\u0026amp;X\u0026amp;X\u0026amp;X\u0026amp;\\\\\\hline 1\u0026amp;1\u0026amp;1\u0026amp;1\u0026amp;X\u0026amp;X\u0026amp;X\u0026amp;X\u0026amp;\\\\\\hline \\end{array}\\) k-map\n\\(\\begin{array}{|c|c|c|c|c||}\\hline w\u0026amp;00\u0026amp;01\u0026amp;11\u0026amp;10\\\\\\hline 00\u0026amp; \u0026amp; \u0026amp; X\u0026amp; 1\\\\\\hline 01\u0026amp; \u0026amp; 1\u0026amp; X\u0026amp; 1\\\\\\hline 11\u0026amp; \u0026amp; 1\u0026amp; X\u0026amp; X\\\\\\hline 10\u0026amp; \u0026amp; 1\u0026amp; X\u0026amp; X\\\\\\hline \\end{array} \\begin{array}{|c|c|c|c|c||}\\hline x\u0026amp;00\u0026amp;01\u0026amp;11\u0026amp;10\\\\\\hline 00\u0026amp; \u0026amp; 1\u0026amp; X\u0026amp; \\\\\\hline 01\u0026amp; 1\u0026amp; \u0026amp; X\u0026amp; 1\\\\\\hline 11\u0026amp; 1\u0026amp; \u0026amp; X\u0026amp; X\\\\\\hline 10\u0026amp; 1\u0026amp; \u0026amp; X\u0026amp; X\\\\\\hline \\end{array} \\begin{array}{|c|c|c|c|c||}\\hline y\u0026amp;00\u0026amp;01\u0026amp;11\u0026amp;10\\\\\\hline 00\u0026amp; 1\u0026amp; 1\u0026amp; X\u0026amp; 1\\\\\\hline 01\u0026amp; \u0026amp; \u0026amp; X\u0026amp; \\\\\\hline 11\u0026amp; 1\u0026amp; 1\u0026amp; X\u0026amp; X\\\\\\hline 10\u0026amp; \u0026amp; \u0026amp; X\u0026amp; X\\\\\\hline \\end{array} \\begin{array}{|c|c|c|c|c|}\\hline z\u0026amp;00\u0026amp;01\u0026amp;11\u0026amp;10\\\\\\hline 00\u0026amp; 1\u0026amp; 1\u0026amp; X\u0026amp; 1\\\\\\hline 01\u0026amp; \u0026amp; \u0026amp; X\u0026amp; \\\\\\hline 11\u0026amp; \u0026amp; \u0026amp; X\u0026amp; X\\\\\\hline 10\u0026amp; 1\u0026amp; 1\u0026amp; X\u0026amp; X\\\\\\hline \\end{array}\\) \\(w=a+bc+bd=a+b(c+d)\\\\ x=bc\u0026rsquo; d\u0026rsquo;+b\u0026rsquo; d+b\u0026rsquo; c=bc\u0026rsquo; d\u0026rsquo;+b\u0026rsquo;(c+d)\\\\ y=c\u0026rsquo; d\u0026rsquo;+cd\\\\ z=d' \\) Sum terms 也可以 share Multi-output circuits 也可以只用 \\(\\text{NAND/NOR}\\) 表示 Multi-Output NAND/NOR circuits 範例 \\(\\text{to NAND}\\) \\(\\text{to NOR}\\) ","permalink":"https://intervalrain.github.io/logicdesign/lec6/","summary":"\u003ch1 id=\"multi-level-gate-circuits\"\u003eMulti-level gate circuits\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e如何決定 level 數：\n\u003col\u003e\n\u003cli\u003eGate input number \u0026amp; Delay determine level\u003c/li\u003e\n\u003cli\u003eFactoring to accomplish different level\u003c/li\u003e\n\u003c/ol\u003e\n\u003cul\u003e\n\u003cli\u003eAND-OR: 2-level SOP\u003c/li\u003e\n\u003cli\u003eOR-AND: 2-level POS\u003c/li\u003e\n\u003cli\u003eOR-AND-OR: 3-level circuit of AND and OR → no particular ordering\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e4 level gates: \\(\\text{Z=(AB+C)(FG+D+E)+H}\\)\n\u003cimg alt=\"1\" loading=\"lazy\" src=\"/LogicDesign/L6/1.png\"\u003e\u003c/li\u003e\n\u003cli\u003e3 level gates: (case fan out) \\(\\text{AB(D+E)+C(D+E)+ABFG+CFG+H}\\)\n\u003cul\u003e\n\u003cli\u003eFactoring 可變成 4-level \\(\\text{(AB+C)(D+E+FG)+H}\\)\n\u003cimg alt=\"2\" loading=\"lazy\" src=\"/LogicDesign/L6/2.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003elevel \u0026amp; gate \u0026amp; gate inputs 的關係會隨之變化，可根據電路設計的需求改變\n\u003cul\u003e\n\u003cli\u003e範例：\n\u003cimg alt=\"3\" loading=\"lazy\" src=\"/LogicDesign/L6/3.png\"\u003e\u003c/li\u003e\n\u003cli\u003e\\(\n\\begin{array}{llll}\nf(a,b,c,d)=\\sum(1,5,6,10,13,14)\\\\\nf=(c+d)(a\u0026rsquo;+b+c)(c\u0026rsquo;+d\u0026rsquo;)(a+b+c\u0026rsquo;)\u0026amp;\\text{2 levels}\u0026amp;\\text{5 gates}\u0026amp;\\text{14 gate inputs}\\\\\nf=[c+d(a\u0026rsquo;+b)][c\u0026rsquo;+d\u0026rsquo;(a+b)]\u0026amp;\\text{4 levels}\u0026amp;\\text{7 gates}\u0026amp;\\text{14 gate inputs}\\\\\nf=(c+a\u0026rsquo; d+bd)(c\u0026rsquo;+ad\u0026rsquo;+bd\u0026rsquo;)\u0026amp;\\text{3 levels}\u0026amp;\\text{7 gates}\u0026amp;\\text{16 gate inputs}\\\\\nf=a\u0026rsquo; c\u0026rsquo; d+bc\u0026rsquo; d+bcd\u0026rsquo;+acd\u0026rsquo;\u0026amp;\\text{2 levels}\u0026amp;\\text{5 gates}\u0026amp;\\text{16 gate inputs}\\\\\nf=c\u0026rsquo; d(a\u0026rsquo;+b)+cd\u0026rsquo;(a+b)\u0026amp;\\text{3 levels}\u0026amp;\\text{5 gates}\u0026amp;\\text{12 gate inputs}\n\\end{array}\n\\)\u003c/li\u003e\n\u003cli\u003e\\(\n\\boxed{\\begin{array}{c|c|c|c|c}\n\u0026amp;00\u0026amp;01\u0026amp;11\u0026amp;10\\\\\\hline\n00\u0026amp;m_0\u0026amp;m_4\u0026amp;m_{12}\u0026amp;m_{8}\\\\\\hline\n01\u0026amp;m_1\u0026amp;m_5\u0026amp;m_{13}\u0026amp;m_{9}\\\\\\hline\n11\u0026amp;m_3\u0026amp;m_7\u0026amp;m_{15}\u0026amp;m_{11}\\\\\\hline\n10\u0026amp;m_2\u0026amp;m_6\u0026amp;m_{14}\u0026amp;m_{10}\n\\end{array}}\\rightarrow\n\\boxed{\\begin{array}{c|c|c|c|c}\n\u0026amp;00\u0026amp;01\u0026amp;11\u0026amp;10\\\\\\hline\n00\u0026amp;\u0026amp;\u0026amp;\u0026amp;\\\\\\hline\n01\u0026amp;1\u0026amp;1\u0026amp;1\u0026amp;\\\\\\hline\n11\u0026amp;\u0026amp;\u0026amp;\u0026amp;\\\\\\hline\n10\u0026amp;\u0026amp;1\u0026amp;1\u0026amp;1\n\\end{array}}\\)\u003c/li\u003e\n\u003cli\u003e\\(\\boxed{\\begin{array}{c|c|c|c|c}\n\u0026amp;a\u0026rsquo; b\u0026rsquo;\u0026amp;a\u0026rsquo; b\u0026amp;ab\u0026amp;ab\u0026rsquo;\\\\\\hline\nc\u0026rsquo; d\u0026rsquo;\u0026amp;\u0026amp;\u0026amp;\u0026amp;\\\\\\hline\nc\u0026rsquo; d\u0026amp;1\u0026amp;1\u0026amp;1\u0026amp;\\\\\\hline\ncd\u0026amp;\u0026amp;\u0026amp;\u0026amp;\\\\\\hline\ncd\u0026rsquo;\u0026amp;\u0026amp;1\u0026amp;1\u0026amp;1\n\\end{array}}\\\\\n=a\u0026rsquo; c\u0026rsquo; d+bc\u0026rsquo; d+bcd\u0026rsquo;+acd\u0026rsquo;=(a\u0026rsquo;+b)c\u0026rsquo; d+(a+b)cd\u0026rsquo;\\\\\n=(c\u0026rsquo; d\u0026rsquo;+ab\u0026rsquo; c\u0026rsquo;+cd+a\u0026rsquo; b\u0026rsquo; c)\u0026rsquo;=(c+d)(a\u0026rsquo;+b+c)(c\u0026rsquo;+d\u0026rsquo;)(a+b+c\u0026rsquo;)\\\\\n=[c+d(a\u0026rsquo;+b)][c\u0026rsquo;+d\u0026rsquo;(a+b)]=(c+a\u0026rsquo; d+bd)(c\u0026rsquo;+ad\u0026rsquo;+bd\u0026rsquo;)\n\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"nand-and-nor-gates\"\u003eNAND and NOR gates\u003c/h1\u003e\n\u003ch2 id=\"nand\"\u003eNAND\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e符號\n\u003cimg alt=\"nand\" loading=\"lazy\" src=\"/LogicDesign/L6/nand.png\"\u003e\u003c/li\u003e\n\u003cli\u003e真值表\u003cbr\u003e\n\\(\\boxed{\\begin{array}{cc|cc}\nA\u0026amp;B\u0026amp;AB\u0026amp;\\overline{AB}\\\\\\hline\n0\u0026amp;0\u0026amp;0\u0026amp;1\\\\\n0\u0026amp;1\u0026amp;0\u0026amp;1\\\\\n1\u0026amp;0\u0026amp;0\u0026amp;1\\\\\n1\u0026amp;1\u0026amp;1\u0026amp;0\n\\end{array}}\n\\)\u003c/li\u003e\n\u003cli\u003e布林表達式：\u003cbr\u003e\n\\(F=(ABC)\u0026rsquo;=A\u0026rsquo;+B\u0026rsquo;+C\u0026rsquo;\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"nor\"\u003eNOR\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e符號\n\u003cimg alt=\"nor\" loading=\"lazy\" src=\"/LogicDesign/L6/nor.png\"\u003e\u003c/li\u003e\n\u003cli\u003e真值表\u003cbr\u003e\n\\(\\boxed{\\begin{array}{cc|cc}\nA\u0026amp;B\u0026amp;AB\u0026amp;\\overline{AB}\\\\\\hline\n0\u0026amp;0\u0026amp;0\u0026amp;1\\\\\n0\u0026amp;1\u0026amp;1\u0026amp;0\\\\\n1\u0026amp;0\u0026amp;1\u0026amp;0\\\\\n1\u0026amp;1\u0026amp;1\u0026amp;0\n\\end{array}}\n\\)\u003c/li\u003e\n\u003cli\u003e布林表達式：\n\u003cul\u003e\n\u003cli\u003e\\(F=(A+B+C)\u0026rsquo;=A\u0026rsquo; B\u0026rsquo; C\u0026rsquo;\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"functionally-complete-sets-of-gates\"\u003eFunctionally Complete Sets of Gates\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e定義：當所有的布林式皆可以被這組邏輯閘組合而成，則這組邏輯閘為 Functionally Complete\n\u003cul\u003e\n\u003cli\u003e\\(\\lbrace{\\text{AND, OR, NOT}}\\rbrace\\)\u003c/li\u003e\n\u003cli\u003e\\(\\lbrace{\\text{AND, NOT}}\\rbrace\\rightarrow \\text{OR}=X+Y=(X\u0026rsquo; Y\u0026rsquo;)\u0026rsquo;\\)\u003c/li\u003e\n\u003cli\u003e\\(\\lbrace{\\text{OR, NOT}}\\rbrace\\rightarrow \\text{AND}=XY=(X\u0026rsquo;+Y\u0026rsquo;)\u0026rsquo;\\)\u003c/li\u003e\n\u003cli\u003e\\(\\lbrace{\\text{NAND}}\\rbrace\\)\u003c/li\u003e\n\u003cli\u003e\\(\\lbrace{\\text{NOR}}\\rbrace\\)\u003c/li\u003e\n\u003cli\u003e\\(\\lbrace{\\text{3-input Minority Gate}}\\rbrace\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"majority-gate-and-minority-gate\"\u003eMajority Gate and Minority Gate\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e真值表\u003cbr\u003e\n\\(\\boxed{\\begin{array}{ccc|cc}\nA\u0026amp;B\u0026amp;C\u0026amp;F_M\u0026amp;F_m\\\\\\hline\n0\u0026amp;0\u0026amp;0\u0026amp;0\u0026amp;1\\\\\n0\u0026amp;0\u0026amp;1\u0026amp;0\u0026amp;1\\\\\n0\u0026amp;1\u0026amp;0\u0026amp;0\u0026amp;1\\\\\n0\u0026amp;1\u0026amp;1\u0026amp;1\u0026amp;0\\\\\n1\u0026amp;0\u0026amp;0\u0026amp;0\u0026amp;1\\\\\n1\u0026amp;0\u0026amp;1\u0026amp;1\u0026amp;0\\\\\n1\u0026amp;1\u0026amp;0\u0026amp;1\u0026amp;0\\\\\n1\u0026amp;1\u0026amp;1\u0026amp;1\u0026amp;0\n\\end{array}}\\)\n\u003cul\u003e\n\u003cli\u003e\\(\\text{(0, B, C)}\\rightarrow\\boxed{\\text{Minority Gate}}=\\text{NAND}=\\text{(BC)\u0026rsquo;=\\text{B\u0026rsquo;+C\u0026rsquo;}}\\)\u003c/li\u003e\n\u003cli\u003e\\(\\text{(1, B, C)}\\rightarrow\\boxed{\\text{Minority Gate}}=\\text{NOR}=\\text{(B+C)\u0026rsquo;=\\text{B\u0026rsquo;C\u0026rsquo;}}\\)\u003c/li\u003e\n\u003cli\u003e\\(\\text{(A, A, A)}\\rightarrow\\boxed{\\text{Minority Gate}}=\\text{NOT}=\\text{A\u0026rsquo;}\\)\u003c/li\u003e\n\u003cli\u003e\\(\\text{(0, B\u0026rsquo;, C\u0026rsquo;)}\\rightarrow\\boxed{\\text{Minority Gate}}=\\text{AND}=\\text{BC}\\)\u003c/li\u003e\n\u003cli\u003e\\(\\text{(1, B\u0026rsquo;, C\u0026rsquo;)}\\rightarrow\\boxed{\\text{Minority Gate}}=\\text{OR}=\\text{B+C}\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"2-level-nand-and-nor-gates\"\u003e2-level NAND and NOR gates\u003c/h1\u003e\n\u003ch2 id=\"demorgons-law\"\u003eDeMorgon\u0026rsquo;s Law\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e等效邏輯閘：\u003cimg alt=\"demorgon\" loading=\"lazy\" src=\"/LogicDesign/L6/Demorgon.png\"\u003e\n\u003cul\u003e\n\u003cli\u003e\\((A+B)\u0026rsquo;=A\u0026rsquo; B\u0026rsquo;\\)\u003c/li\u003e\n\u003cli\u003e\\((AB)\u0026rsquo;=A\u0026rsquo;+B\u0026rsquo;\\)\u003c/li\u003e\n\u003cli\u003e\\(A+B=(A\u0026rsquo; B\u0026rsquo;)\u0026rsquo;\\)\u003c/li\u003e\n\u003cli\u003e\\(AB=(A\u0026rsquo;+B\u0026rsquo;)\u0026rsquo;\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\\(\\text{Ex1: AND/OR}\\rightarrow\\text{NAND/NAND}\\)\n\u003cul\u003e\n\u003cli\u003e\u003cimg alt=\"tonand\" loading=\"lazy\" src=\"/LogicDesign/L6/tonand.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\\(\\text{Ex2: AND/OR}\\rightarrow\\text{NOR/NOR}\\)\n\u003cul\u003e\n\u003cli\u003e\u003cimg alt=\"tonor\" loading=\"lazy\" src=\"/LogicDesign/L6/tonor.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"multi-level-nand-and-nor-circuits\"\u003eMulti-level NAND and NOR circuits\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMulti-level NAND and NOR circuits\n\u003cimg alt=\"sample1\" loading=\"lazy\" src=\"/LogicDesign/L6/sample1.png\"\u003e\n\u003cul\u003e\n\u003cli\u003e\\(\\text{to NAND gate}\\)\u003cbr\u003e\n\u003cimg alt=\"sample2\" loading=\"lazy\" src=\"/LogicDesign/L6/sample2.png\"\u003e\u003c/li\u003e\n\u003cli\u003e\\(\\text{to NOR gate}\\)\n\u003cimg alt=\"sample3\" loading=\"lazy\" src=\"/LogicDesign/L6/sample3.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"multi-output-circuit-realization\"\u003eMulti-output circuit realization\u003c/h1\u003e\n\u003cp\u003e\u003cimg alt=\"MUX\" loading=\"lazy\" src=\"/LogicDesign/L6/MUX.png\"\u003e\u003c/p\u003e","title":"[Logic Design] Lec 06 - Multi-Level Gate Circuits / NAND and NOR Gates"},{"content":"Review 組合電路設計 建構真值表將輸出表示成輸入的函式 \\(\\text{Inputs}\\rightarrow\\boxed{\\text{MUX}}\\rightarrow\\text{Outputs}\\) 用 K-map, Q-M method 等方法得到簡化的布林表達式 多層、多輸出的電路(Multi-level \u0026amp; Multi-outputs) Mininum SOP 起點 Minimum two-level \\(\\text{AND-OR, NAND-NAND, OR-NAND, NOR-OR}\\) Minimum POS 起點 Minimum two-level \\(\\text{OR-AND, NOR-NOR, AND-NOR, NAND-AND}\\) 限制 fan-in 數的電路設計 Ex1 \\(\\text{用 3 pin 的 NOR Gate 實現}f(a,b,c,d)=\\sum m(0,3,4,5,8,9,10,14,15)\\) \\(\\begin{array}{|c|c|c|c|c|}\\hline f \u0026amp;00\u0026amp;01\u0026amp;11\u0026amp;10\\\\\\hline 00\u0026amp; 1\u0026amp; 1\u0026amp; 0\u0026amp; 1\\\\\\hline 01\u0026amp; 0\u0026amp; 1\u0026amp; 0\u0026amp; 1\\\\\\hline 11\u0026amp; 1\u0026amp; 0\u0026amp; 1\u0026amp; 0\\\\\\hline 10\u0026amp; 0\u0026amp; 0\u0026amp; 1\u0026amp; 1\\\\\\hline \\end{array}\\) 從 POS 開始 \\(f\u0026rsquo;=a\u0026rsquo; b\u0026rsquo; c\u0026rsquo; d+ab\u0026rsquo; cd+abc\u0026rsquo; + a\u0026rsquo; bc+a\u0026rsquo; cd\u0026rsquo;\\\\ \\quad=b\u0026rsquo; d(a\u0026rsquo; c\u0026rsquo;+ac)+a\u0026rsquo; c(b+d\u0026rsquo;)+abc\u0026rsquo;\\) Ex2 Multiple-Output \\(\\text{用 2 pin 的 NAND 與 NOT 實現}\\) \\(f_1=\\sum m(0,2,3,4,5)=b\u0026rsquo; c\u0026rsquo;+ab\u0026rsquo; +a\u0026rsquo; b\\\\ f_2=\\sum m(0,2,3,4,7)=b\u0026rsquo; c\u0026rsquo;+bc+a\u0026rsquo; b\\\\ f_3=\\sum m(1,2,6,7)=a\u0026rsquo; b\u0026rsquo; c+ab+bc\u0026rsquo;\\) \\(\\begin{array}{|c|c|c|}\\hline f_1\u0026amp;0\u0026amp;1\\\\\\hline 00\u0026amp;1\u0026amp;1\\\\\\hline 01\u0026amp; \u0026amp;1\\\\\\hline 11\u0026amp;1\u0026amp; \\\\\\hline 10\u0026amp;1\u0026amp; \\\\\\hline \\end{array}\\quad \\begin{array}{|c|c|c|}\\hline f_1\u0026amp;0\u0026amp;1\\\\\\hline 00\u0026amp;1\u0026amp;1\\\\\\hline 01\u0026amp; \u0026amp; \\\\\\hline 11\u0026amp;1\u0026amp;1 \\\\\\hline 10\u0026amp;1\u0026amp; \\\\\\hline \\end{array}\\quad \\begin{array}{|c|c|c|}\\hline f_1\u0026amp;0\u0026amp;1\\\\\\hline 00\u0026amp; \u0026amp; \\\\\\hline 01\u0026amp;1\u0026amp; \\\\\\hline 11\u0026amp; \u0026amp;1\\\\\\hline 10\u0026amp;1\u0026amp;1\\\\\\hline \\end{array} \\) \\(f_1=b\u0026rsquo;(a+c\u0026rsquo;)+a\u0026rsquo; b\\\\ f_2=(b\u0026rsquo;+c)(b+c\u0026rsquo;)+b\u0026rsquo; c\u0026rsquo;\\\\ f_3=b(a+c\u0026rsquo;)+a\u0026rsquo; b\u0026rsquo; c\\) 閘延遲與時序圖 邏輯閘必然存在延遲，固然小，但存在。 組合電路 延遲亦可能來自電線，電線愈長則延遲可能愈久。 Control value \\(\\text{AND gate}\\) 的 control value 是 \\(0\\) \\(\\text{OR gate}\\) 的 control value 是 \\(1\\) \\(\\text{AND=2ns}\\\\ \\text{NOR=3ns}\\) 若 X 訊號相反時， Z 要到 5ns 訊號才有意義。 組合邏輯中的 Hazards Hazard 是在切換輸入時，因閘延遲而產生的錯誤訊號。 種類 若相鄰兩個 1 不來自同一個邏輯閘(在 K-map 上沒有被框在一起)則會存在 hazard。 \\((A,B,C)=(1,0,1)\\rightarrow (1,1,1)\\) \b可將相鄰的所有蘊函項框在一起，避免「一個bit切換」的 hazard 發生。 邏輯電路的模擬與測試 對模擬邏輯電路來說 有明確的電路元素與連線 決定輸入 觀察輸出 輸入值 有四種，分別為： 0 (low) 1 (high) X (unknown) Z (don\u0026rsquo;t care, High impedence) \\(\\text{AND } \\\u0026amp; \\text{ OR } \\text{function for 4-value simulation}\\) \\(\\begin{array}{c|cccc} \\text{AND}\u0026amp;0\u0026amp;1\u0026amp;X\u0026amp;Z\\\\\\hline 0\u0026amp;0\u0026amp;0\u0026amp;0\u0026amp;0\\\\ 1\u0026amp;0\u0026amp;1\u0026amp;X\u0026amp;X\\\\ X\u0026amp;0\u0026amp;X\u0026amp;X\u0026amp;X\\\\ Z\u0026amp;0\u0026amp;X\u0026amp;X\u0026amp;X\\\\ \\end{array} \\qquad \\begin{array}{c|cccc} \\text{OR}\u0026amp;0\u0026amp;1\u0026amp;X\u0026amp;Z\\\\\\hline 0\u0026amp;0\u0026amp;1\u0026amp;X\u0026amp;X\\\\ 1\u0026amp;1\u0026amp;1\u0026amp;1\u0026amp;1\\\\ X\u0026amp;X\u0026amp;1\u0026amp;X\u0026amp;X\\\\ Z\u0026amp;X\u0026amp;1\u0026amp;X\u0026amp;X\\\\ \\end{array} \\) 驗證(verification)與測試(testing) 邏輯電路的輸出錯誤，可以由下面兩種方式偵錯： 驗證(Verification) 錯誤的電路設計 邏輯閘接線錯誤 輸入訊號錯誤 測試(Testing) 邏輯閘缺陷 金屬接線缺陷 已知 \\(A=B=C=D=1時，F=0\\) ","permalink":"https://intervalrain.github.io/logicdesign/lec7/","summary":"\u003ch1 id=\"review\"\u003eReview\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e組合電路設計\n\u003cul\u003e\n\u003cli\u003e建構真值表將輸出表示成輸入的函式 \\(\\text{Inputs}\\rightarrow\\boxed{\\text{MUX}}\\rightarrow\\text{Outputs}\\)\u003c/li\u003e\n\u003cli\u003e用 K-map, Q-M method 等方法得到簡化的布林表達式\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e多層、多輸出的電路(Multi-level \u0026amp; Multi-outputs)\u003c/li\u003e\n\u003cli\u003eMininum SOP 起點\n\u003cul\u003e\n\u003cli\u003eMinimum two-level \\(\\text{AND-OR, NAND-NAND, OR-NAND, NOR-OR}\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eMinimum POS 起點\n\u003cul\u003e\n\u003cli\u003eMinimum two-level \\(\\text{OR-AND, NOR-NOR, AND-NOR, NAND-AND}\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"限制-fan-in-數的電路設計\"\u003e限制 fan-in 數的電路設計\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eEx1\n\u003cul\u003e\n\u003cli\u003e\\(\\text{用 3 pin 的 NOR Gate 實現}f(a,b,c,d)=\\sum m(0,3,4,5,8,9,10,14,15)\\)\u003c/li\u003e\n\u003cli\u003e\\(\\begin{array}{|c|c|c|c|c|}\\hline\nf \u0026amp;00\u0026amp;01\u0026amp;11\u0026amp;10\\\\\\hline\n00\u0026amp; 1\u0026amp; 1\u0026amp; 0\u0026amp; 1\\\\\\hline\n01\u0026amp; 0\u0026amp; 1\u0026amp; 0\u0026amp; 1\\\\\\hline\n11\u0026amp; 1\u0026amp; 0\u0026amp; 1\u0026amp; 0\\\\\\hline\n10\u0026amp; 0\u0026amp; 0\u0026amp; 1\u0026amp; 1\\\\\\hline\n\\end{array}\\)\u003c/li\u003e\n\u003cli\u003e從 POS 開始\u003c/li\u003e\n\u003cli\u003e\\(f\u0026rsquo;=a\u0026rsquo; b\u0026rsquo; c\u0026rsquo; d+ab\u0026rsquo; cd+abc\u0026rsquo; + a\u0026rsquo; bc+a\u0026rsquo; cd\u0026rsquo;\\\\\n\\quad=b\u0026rsquo; d(a\u0026rsquo; c\u0026rsquo;+ac)+a\u0026rsquo; c(b+d\u0026rsquo;)+abc\u0026rsquo;\\)\u003c/li\u003e\n\u003cli\u003e\u003cimg alt=\"1\" loading=\"lazy\" src=\"/LogicDesign/L7/1.png\"\u003e\u003c/li\u003e\n\u003cli\u003e\u003cimg alt=\"2\" loading=\"lazy\" src=\"/LogicDesign/L7/2.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eEx2 Multiple-Output\n\u003cul\u003e\n\u003cli\u003e\\(\\text{用 2 pin 的 NAND 與 NOT 實現}\\)\u003c/li\u003e\n\u003cli\u003e\\(f_1=\\sum m(0,2,3,4,5)=b\u0026rsquo; c\u0026rsquo;+ab\u0026rsquo; +a\u0026rsquo; b\\\\\nf_2=\\sum m(0,2,3,4,7)=b\u0026rsquo; c\u0026rsquo;+bc+a\u0026rsquo; b\\\\\nf_3=\\sum m(1,2,6,7)=a\u0026rsquo; b\u0026rsquo; c+ab+bc\u0026rsquo;\\)\u003c/li\u003e\n\u003cli\u003e\\(\\begin{array}{|c|c|c|}\\hline\nf_1\u0026amp;0\u0026amp;1\\\\\\hline\n00\u0026amp;1\u0026amp;1\\\\\\hline\n01\u0026amp; \u0026amp;1\\\\\\hline\n11\u0026amp;1\u0026amp; \\\\\\hline\n10\u0026amp;1\u0026amp; \\\\\\hline\n\\end{array}\\quad\n\\begin{array}{|c|c|c|}\\hline\nf_1\u0026amp;0\u0026amp;1\\\\\\hline\n00\u0026amp;1\u0026amp;1\\\\\\hline\n01\u0026amp; \u0026amp; \\\\\\hline\n11\u0026amp;1\u0026amp;1 \\\\\\hline\n10\u0026amp;1\u0026amp; \\\\\\hline\n\\end{array}\\quad\n\\begin{array}{|c|c|c|}\\hline\nf_1\u0026amp;0\u0026amp;1\\\\\\hline\n00\u0026amp; \u0026amp; \\\\\\hline\n01\u0026amp;1\u0026amp; \\\\\\hline\n11\u0026amp; \u0026amp;1\\\\\\hline\n10\u0026amp;1\u0026amp;1\\\\\\hline\n\\end{array}\n\\)\u003c/li\u003e\n\u003cli\u003e\\(f_1=b\u0026rsquo;(a+c\u0026rsquo;)+a\u0026rsquo; b\\\\\nf_2=(b\u0026rsquo;+c)(b+c\u0026rsquo;)+b\u0026rsquo; c\u0026rsquo;\\\\\nf_3=b(a+c\u0026rsquo;)+a\u0026rsquo; b\u0026rsquo; c\\)\u003c/li\u003e\n\u003cli\u003e\u003cimg alt=\"3\" loading=\"lazy\" src=\"/LogicDesign/L7/3.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"閘延遲與時序圖\"\u003e閘延遲與時序圖\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e邏輯閘必然存在延遲，固然小，但存在。\n\u003cimg alt=\"inverter\" loading=\"lazy\" src=\"/LogicDesign/L7/inverter.png\"\u003e\n\u003cimg alt=\"gatedelay\" loading=\"lazy\" src=\"/LogicDesign/L7/gatedelay.png\"\u003e\u003c/li\u003e\n\u003cli\u003e組合電路\n\u003cimg alt=\"g1g2\" loading=\"lazy\" src=\"/LogicDesign/L7/g1g2.png\"\u003e\n\u003cimg alt=\"g1g2t\" loading=\"lazy\" src=\"/LogicDesign/L7/g1g2t.png\"\u003e\u003c/li\u003e\n\u003cli\u003e延遲亦可能來自電線，電線愈長則延遲可能愈久。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"control-value\"\u003eControl value\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\\(\\text{AND gate}\\) 的 control value 是 \\(0\\)\u003c/li\u003e\n\u003cli\u003e\\(\\text{OR gate}\\) 的 control value 是 \\(1\\)\u003c/li\u003e\n\u003cli\u003e\\(\\text{AND=2ns}\\\\\n\\text{NOR=3ns}\\)\u003c/li\u003e\n\u003cli\u003e\u003cimg alt=\"hazard1\" loading=\"lazy\" src=\"/LogicDesign/L7/VWXYZ.png\"\u003e\u003c/li\u003e\n\u003cli\u003e\u003cimg alt=\"hazard2\" loading=\"lazy\" src=\"/LogicDesign/L7/VWXYZ2.png\"\u003e\u003c/li\u003e\n\u003cli\u003e若 X 訊號相反時， Z 要到 5ns 訊號才有意義。\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"組合邏輯中的-hazards\"\u003e組合邏輯中的 Hazards\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eHazard 是在切換輸入時，因閘延遲而產生的錯誤訊號。\u003c/li\u003e\n\u003cli\u003e種類\n\u003cimg alt=\"hazard\" loading=\"lazy\" src=\"/LogicDesign/L7/hazard.png\"\u003e\u003c/li\u003e\n\u003cli\u003e若相鄰兩個 1 不來自同一個邏輯閘(在 K-map 上沒有被框在一起)則會存在 hazard。\n\u003cul\u003e\n\u003cli\u003e\\((A,B,C)=(1,0,1)\\rightarrow (1,1,1)\\)\n\u003cimg alt=\"static_hazard\" loading=\"lazy\" src=\"/LogicDesign/L7/static_hazard.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\b可將相鄰的所有蘊函項框在一起，避免「一個bit切換」的 hazard 發生。\n\u003cimg alt=\"hazard_removed.png\" loading=\"lazy\" src=\"/LogicDesign/L7/hazard_removed.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"邏輯電路的模擬與測試\"\u003e邏輯電路的模擬與測試\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e對模擬邏輯電路來說\n\u003cul\u003e\n\u003cli\u003e有明確的電路元素與連線\u003c/li\u003e\n\u003cli\u003e決定輸入\u003c/li\u003e\n\u003cli\u003e觀察輸出\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"輸入值\"\u003e輸入值\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e有四種，分別為：\n\u003cul\u003e\n\u003cli\u003e0 (low)\u003c/li\u003e\n\u003cli\u003e1 (high)\u003c/li\u003e\n\u003cli\u003eX (unknown)\u003c/li\u003e\n\u003cli\u003eZ (don\u0026rsquo;t care, High impedence)\n\u003cimg alt=\"4value\" loading=\"lazy\" src=\"/LogicDesign/L7/4value.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\\(\\text{AND } \\\u0026amp; \\text{ OR } \\text{function for 4-value simulation}\\)\n\u003cul\u003e\n\u003cli\u003e\\(\\begin{array}{c|cccc}\n\\text{AND}\u0026amp;0\u0026amp;1\u0026amp;X\u0026amp;Z\\\\\\hline\n0\u0026amp;0\u0026amp;0\u0026amp;0\u0026amp;0\\\\\n1\u0026amp;0\u0026amp;1\u0026amp;X\u0026amp;X\\\\\nX\u0026amp;0\u0026amp;X\u0026amp;X\u0026amp;X\\\\\nZ\u0026amp;0\u0026amp;X\u0026amp;X\u0026amp;X\\\\\n\\end{array}\n\\qquad\n\\begin{array}{c|cccc}\n\\text{OR}\u0026amp;0\u0026amp;1\u0026amp;X\u0026amp;Z\\\\\\hline\n0\u0026amp;0\u0026amp;1\u0026amp;X\u0026amp;X\\\\\n1\u0026amp;1\u0026amp;1\u0026amp;1\u0026amp;1\\\\\nX\u0026amp;X\u0026amp;1\u0026amp;X\u0026amp;X\\\\\nZ\u0026amp;X\u0026amp;1\u0026amp;X\u0026amp;X\\\\\n\\end{array}\n\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"驗證verification與測試testing\"\u003e驗證(verification)與測試(testing)\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e邏輯電路的輸出錯誤，可以由下面兩種方式偵錯：\n\u003cul\u003e\n\u003cli\u003e驗證(Verification)\n\u003cul\u003e\n\u003cli\u003e錯誤的電路設計\u003c/li\u003e\n\u003cli\u003e邏輯閘接線錯誤\u003c/li\u003e\n\u003cli\u003e輸入訊號錯誤\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e測試(Testing)\n\u003cul\u003e\n\u003cli\u003e邏輯閘缺陷\u003c/li\u003e\n\u003cli\u003e金屬接線缺陷\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e已知 \\(A=B=C=D=1時，F=0\\)\n\u003cimg alt=\"testing\" loading=\"lazy\" src=\"/LogicDesign/L7/testing.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"[Logic Design] Lec 07 - 組合電路設計與模擬"},{"content":"多工器(Multiplexer, MUX) 一個 \\(2^n\\text{ to }1\\) 多工器，需要有 n 個控制項(選項器) \\(\\begin{array}{c|c|l} \\text{MUX}\u0026amp;\\text{sel}\u0026amp;\\text{Output}\\\\\\hline \\text{2 to 1}\u0026amp;1\u0026amp;A\u0026rsquo; I_0+AI_1\\\\\\hline \\text{4 to 1}\u0026amp;2\u0026amp;A\u0026rsquo; B\u0026rsquo; I_0+A\u0026rsquo; BI_1+AB\u0026rsquo; I_2+ABI_3\\\\\\hline \\text{8 to 1}\u0026amp;3\u0026amp;A\u0026rsquo; B\u0026rsquo; C\u0026rsquo; I_0+A\u0026rsquo; B\u0026rsquo; CI_1+\u0026hellip;\\\\\\hline 2^n\\text{ to 1}\u0026amp;n\u0026amp;\\sum_{k=0}^{2^n-1}m_kI_k \\end{array}\\) quad multiplexer 多了一個致能(enable, en)來控制多工器 用 4-1 多工器實現三個變數函式 代數展開\n\\(\\begin{array}{rl} F(A,B,C)\u0026amp;=A\u0026rsquo; B\u0026rsquo;+AC\\\\ \u0026amp;=A\u0026rsquo; B\u0026rsquo;(C+C\u0026rsquo;)+A(B+B\u0026rsquo;)C\\\\ \u0026amp;=A\u0026rsquo; B\u0026rsquo;\\cdot1+A\u0026rsquo; B\\cdot0+AB\u0026rsquo; C+ABC \\end{array}\\) 真值表法\n\\(\\begin{array}{|cccc:cc|}\\hline \u0026amp;A\u0026amp;B\u0026amp;C\u0026amp;F\\\\\\hline \u0026amp;0\u0026amp;0\u0026amp;0\u0026amp;1\\\\ I_0\u0026amp;0\u0026amp;0\u0026amp;1\u0026amp;1\u0026amp;1\\\\\\hline \u0026amp;0\u0026amp;1\u0026amp;0\u0026amp;0\\\\ I_1\u0026amp;0\u0026amp;1\u0026amp;1\u0026amp;0\u0026amp;0\\\\\\hline \u0026amp;1\u0026amp;0\u0026amp;0\u0026amp;0\\\\ I_2\u0026amp;1\u0026amp;0\u0026amp;1\u0026amp;1\u0026amp;C\\\\\\hline \u0026amp;1\u0026amp;1\u0026amp;0\u0026amp;0\\\\ I_3\u0026amp;1\u0026amp;1\u0026amp;1\u0026amp;1\u0026amp;C\\\\\\hline \\end{array}\\) Verilog 4-to-1 MUX implements 3-var function test bench 三態緩衝器(Three state buffer) 緩衝器(Buffers)的用途: 用來增加閘輸出的趨動力(driving force) 因為閘並聯而造成電容增加(fan out)，電容增加充電變慢，使電路變慢 總體而言，可用來調節電路的速度。 三態緩衝器: Three-state buffer 或 tri-state buffer 真值表\n\\(\\begin{array}{|cc|c|}\\hline B\u0026amp;A\u0026amp;C\\\\\\hline 0\u0026amp;0\u0026amp;Z\\\\\\hline 0\u0026amp;1\u0026amp;Z\\\\\\hline 1\u0026amp;0\u0026amp;0\\\\\\hline 1\u0026amp;1\u0026amp;1\\\\\\hline \\end{array}\\) 利用 tri-state buffer 實現 2-to-1 MUX tri-state buffer 並聯 真值表\n\\(\\begin{array}{|c|c|c|c|c|}\\hline \u0026amp;X\u0026amp;0\u0026amp;1\u0026amp;Z\\\\\\hline X\u0026amp;X\u0026amp;X\u0026amp;X\u0026amp;X\\\\\\hline 0\u0026amp;X\u0026amp;0\u0026amp;X\u0026amp;0\\\\\\hline 1\u0026amp;X\u0026amp;X\u0026amp;1\u0026amp;1\\\\\\hline Z\u0026amp;X\u0026amp;0\u0026amp;1\u0026amp;Z\\\\\\hline \\end{array}\\) 應用 Bus 匯流排 Chip I/O 解碼器(Decoder) \\(n 個 \\text{input} 可以對應到 2^n 個 \\text{output}\\) 事實上，n 個 input 在編碼器前成生各種 minterm 的組合，後面面編碼器就是將 minterm \\(OR\\) 起來。 7442 編碼器，數字 1 到 9 產生對應位置的輸出為 0。 這樣的設計可以使雜訊的干擾變輕。 配合 \\(\\text{NAND Gate}\\)，其實就跟前面的編碼器一樣，是產生 minterm 再 \\(OR\\) 起來的過程。 \\(F_1=m_1+m_2+m_4 \\qquad F_2=m_4+m_7+m_9\\) Verilog 7442 f124 f479 編碼器(Encoder) Priority Encoder 8-to-3 編碼，將輸入將對應的數字編到 abc 中。 若 input 端有兩個以上為 1，則輸出數字較高的數(MSB)。 d 的作用，用來表示輸入是否含有 1，否則為 0。 唯讀記憶體(Read only memories, ROMs) 唯讀記憶體就是一個編寫好的編碼器，輸入就像是位址(address)。 General Form \\(\\text{n inputs}\\rightarrow 2^n 個 \\text{words} \\rightarrow \\text{m outputs}\\) 可以把 ROM 看成 decoder 加上 memory array 用二極體形成 \\(OR\\) 的效果，一般也會將二極體極化成黑點。 二極體在這邊使電流為單向流動，一般二極體的壓降為 0.7V。 整個矩陣稱為 OR-plane。 word line 用於控制儲存單元與 bit line 的連通 bit line 用於讀寫儲存單元。(此處只有讀) ROM 的變形 PROM (prgrammable ROM): 使用光罩定義金屬線 OTP (one time program ROM): 利用 fuse 熔斷機制，一次性 EPROM(Erasable Programmable ROM) EEPROM(Electrically Erasable Programmable ROM) 可程式化邏輯元件(programmable logic devices) 可程式化邏輯矩陣(Programmable Logic Array, PLA) 可程式化矩陣邏輯(Programmable Array Logic, PAL) 現場可程式化邏輯閘陣列(Field programmable gate arrays, FPGAs) ","permalink":"https://intervalrain.github.io/logicdesign/lec8/","summary":"\u003ch1 id=\"多工器multiplexer-mux\"\u003e多工器(Multiplexer, MUX)\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e一個 \\(2^n\\text{ to }1\\) 多工器，需要有 n 個控制項(選項器)\n\u003cul\u003e\n\u003cli\u003e\\(\\begin{array}{c|c|l}\n\\text{MUX}\u0026amp;\\text{sel}\u0026amp;\\text{Output}\\\\\\hline\n\\text{2 to 1}\u0026amp;1\u0026amp;A\u0026rsquo; I_0+AI_1\\\\\\hline\n\\text{4 to 1}\u0026amp;2\u0026amp;A\u0026rsquo; B\u0026rsquo; I_0+A\u0026rsquo; BI_1+AB\u0026rsquo; I_2+ABI_3\\\\\\hline\n\\text{8 to 1}\u0026amp;3\u0026amp;A\u0026rsquo; B\u0026rsquo; C\u0026rsquo; I_0+A\u0026rsquo; B\u0026rsquo; CI_1+\u0026hellip;\\\\\\hline\n2^n\\text{ to 1}\u0026amp;n\u0026amp;\\sum_{k=0}^{2^n-1}m_kI_k\n\\end{array}\\)\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003equad multiplexer\n\u003cul\u003e\n\u003cli\u003e多了一個致能(enable, en)來控制多工器\n\u003cimg alt=\"quadMUX\" loading=\"lazy\" src=\"/LogicDesign/L8/quadMUX.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e用 4-1 多工器實現三個變數函式\n\u003cimg alt=\"sample\" loading=\"lazy\" src=\"/LogicDesign/L8/sample.png\"\u003e\n\u003cul\u003e\n\u003cli\u003e代數展開\u003cbr\u003e\n\\(\\begin{array}{rl}\nF(A,B,C)\u0026amp;=A\u0026rsquo; B\u0026rsquo;+AC\\\\\n\u0026amp;=A\u0026rsquo; B\u0026rsquo;(C+C\u0026rsquo;)+A(B+B\u0026rsquo;)C\\\\\n\u0026amp;=A\u0026rsquo; B\u0026rsquo;\\cdot1+A\u0026rsquo; B\\cdot0+AB\u0026rsquo; C+ABC\n\\end{array}\\)\u003c/li\u003e\n\u003cli\u003e真值表法\u003cbr\u003e\n\\(\\begin{array}{|cccc:cc|}\\hline\n\u0026amp;A\u0026amp;B\u0026amp;C\u0026amp;F\\\\\\hline\n\u0026amp;0\u0026amp;0\u0026amp;0\u0026amp;1\\\\\nI_0\u0026amp;0\u0026amp;0\u0026amp;1\u0026amp;1\u0026amp;1\\\\\\hline\n\u0026amp;0\u0026amp;1\u0026amp;0\u0026amp;0\\\\\nI_1\u0026amp;0\u0026amp;1\u0026amp;1\u0026amp;0\u0026amp;0\\\\\\hline\n\u0026amp;1\u0026amp;0\u0026amp;0\u0026amp;0\\\\\nI_2\u0026amp;1\u0026amp;0\u0026amp;1\u0026amp;1\u0026amp;C\\\\\\hline\n\u0026amp;1\u0026amp;1\u0026amp;0\u0026amp;0\\\\\nI_3\u0026amp;1\u0026amp;1\u0026amp;1\u0026amp;1\u0026amp;C\\\\\\hline\n\\end{array}\\)\u003c/li\u003e\n\u003cli\u003eVerilog\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/intervalrain/Verilog/blob/main/3varMUX/threevarMUX.v\"\u003e4-to-1 MUX implements 3-var function\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/intervalrain/Verilog/blob/main/3varMUX/threevarMUX_tb.v\"\u003etest bench\u003c/a\u003e\n\u003cimg alt=\"3varMUX\" loading=\"lazy\" src=\"/LogicDesign/L8/3varMUX.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"三態緩衝器three-state-buffer\"\u003e三態緩衝器(Three state buffer)\u003c/h1\u003e\n\u003cp\u003e\u003cimg alt=\"buffer\" loading=\"lazy\" src=\"/LogicDesign/L8/buffer.png\"\u003e\u003c/p\u003e","title":"[Logic Design] Lec 08 - 多工器、編碼器、可程式化邏輯元件"},{"content":"準備中 ","permalink":"https://intervalrain.github.io/logicdesign/lec9/","summary":"\u003ch1 id=\"準備中\"\u003e準備中\u003c/h1\u003e","title":"[Logic Design] Lec 09 - Flips-FLops"},{"content":"準備中 ","permalink":"https://intervalrain.github.io/logicdesign/lec10/","summary":"\u003ch1 id=\"準備中\"\u003e準備中\u003c/h1\u003e","title":"[Logic Design] Lec 10 - 暫存器與計數器"},{"content":"準備中 ","permalink":"https://intervalrain.github.io/logicdesign/lec11/","summary":"\u003ch1 id=\"準備中\"\u003e準備中\u003c/h1\u003e","title":"[Logic Design] Lec 11 - 創建圖表與設計電路"},{"content":"準備中 ","permalink":"https://intervalrain.github.io/logicdesign/lec12/","summary":"\u003ch1 id=\"準備中\"\u003e準備中\u003c/h1\u003e","title":"[Logic Design] Lec 12 - 電路實現與簡化"},{"content":"Coding Interview University John Washam:\nI originally created this as a short to-do list of study topics for becoming a software engineer, but it grew to the large list you see today. After going through this study plan, I got hired as a Software Development Engineer at Amazon! You probably won\u0026rsquo;t have to study as much as I did. Anyway, everything you need is here.\nI studied about 8-12 hours a day, for several months. This is my story: Why I studied full-time for 8 months for a Google interview\nPlease Note: You won\u0026rsquo;t need to study as much as I did. I wasted a lot of time on things I didn\u0026rsquo;t need to know. More info about that below. I\u0026rsquo;ll help you get there without wasting your precious time.\nThe items listed here will prepare you well for a technical interview at just about any software company, including the giants: Amazon, Facebook, Google, and Microsoft.\nBest of luck to you!\nWhat is it? This is my multi-month study plan for becoming a software engineer for a large company.\nRequired:\nA little experience with coding (variables, loops, methods/functions, etc) Patience Time Note this is a study plan for software engineering, not web development. Large software companies like Google, Amazon, Facebook and Microsoft view software engineering as different from web development. For example, Amazon has Frontend Engineers (FEE) and Software Development Engineers (SDE). These are 2 separate roles and the interviews for them will not be the same, as each has its own competencies. These companies require computer science knowledge for software development/engineering roles.\nTable of Contents The Study Plan What is it? Why use it? How to use it Don\u0026rsquo;t feel you aren\u0026rsquo;t smart enough A Note About Video Resources Choose a Programming Language Books for Data Structures and Algorithms Interview Prep Books Don\u0026rsquo;t Make My Mistakes What you Won\u0026rsquo;t See Covered The Daily Plan Coding Question Practice Coding Problems Topics of Study Algorithmic complexity / Big-O / Asymptotic analysis Data Structures Arrays Linked Lists Stack Queue Hash table More Knowledge Binary search Bitwise operations Trees Trees - Notes \u0026amp; Background Binary search trees: BSTs Heap / Priority Queue / Binary Heap balanced search trees (general concept, not details) traversals: preorder, inorder, postorder, BFS, DFS Sorting selection insertion heapsort quicksort merge sort Graphs directed undirected adjacency matrix adjacency list traversals: BFS, DFS Even More Knowledge Recursion Dynamic Programming Design Patterns Combinatorics (n choose k) \u0026amp; Probability NP, NP-Complete and Approximation Algorithms How computers process a program Caches Processes and Threads Testing String searching \u0026amp; manipulations Tries Floating Point Numbers Unicode Endianness Networking Final Review Getting the Job Update Your Resume Find a Job Interview Process \u0026amp; General Interview Prep Be thinking of for when the interview comes Have questions for the interviewer Once You\u0026rsquo;ve Got The Job \u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;- Everything below this point is optional \u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash;-\nOptional Extra Topics \u0026amp; Resources Additional Books System Design, Scalability, Data Handling (if you have 4+ years experience) Additional Learning Compilers Emacs and vi(m) Unix command line tools Information theory Parity \u0026amp; Hamming Code Entropy Cryptography Compression Computer Security Garbage collection Parallel Programming Messaging, Serialization, and Queueing Systems A* Fast Fourier Transform Bloom Filter HyperLogLog Locality-Sensitive Hashing van Emde Boas Trees Augmented Data Structures Balanced search trees AVL trees Splay trees Red/black trees 2-3 search trees 2-3-4 Trees (aka 2-4 trees) N-ary (K-ary, M-ary) trees B-Trees k-D Trees Skip lists Network Flows Disjoint Sets \u0026amp; Union Find Math for Fast Processing Treap Linear Programming Geometry, Convex hull Discrete math Machine Learning Additional Detail on Some Subjects Video Series Computer Science Courses Papers Why use it? If you want to work as a software engineer for a large company, these are the things you have to know.\nIf you missed out on getting a degree in computer science, like I did, this will catch you up and save four years of your life.\nWhen I started this project, I didn\u0026rsquo;t know a stack from a heap, didn\u0026rsquo;t know Big-O anything, or anything about trees, or how to traverse a graph. If I had to code a sorting algorithm, I can tell ya it would have been terrible. Every data structure I had ever used was built into the language, and I didn\u0026rsquo;t know how they worked under the hood at all. I never had to manage memory unless a process I was running would give an \u0026ldquo;out of memory\u0026rdquo; error, and then I\u0026rsquo;d have to find a workaround. I used a few multidimensional arrays in my life and thousands of associative arrays, but I never created data structures from scratch.\nIt\u0026rsquo;s a long plan. It may take you months. If you are familiar with a lot of this already it will take you a lot less time.\nHow to use it Everything below is an outline, and you should tackle the items in order from top to bottom.\nI\u0026rsquo;m using GitHub\u0026rsquo;s special markdown flavor, including tasks lists to track progress.\nCreate a new branch so you can check items like this, just put an x in the brackets: [x]\nFork a branch and follow the commands below Fork the GitHub repo https://github.com/jwasham/coding-interview-university by clicking on the Fork button.\nClone to your local repo:\ngit clone git@github.com:\u0026lt;your_github_username\u0026gt;/coding-interview-university.git git checkout -b progress git remote add jwasham https://github.com/jwasham/coding-interview-university git fetch --all Mark all boxes with X after you completed your changes:\ngit add . git commit -m \u0026quot;Marked x\u0026quot; git rebase jwasham/main git push --set-upstream origin progress git push --force More about GitHub-flavored markdown\nDon\u0026rsquo;t feel you aren\u0026rsquo;t smart enough Successful software engineers are smart, but many have an insecurity that they aren\u0026rsquo;t smart enough. The myth of the Genius Programmer It\u0026rsquo;s Dangerous to Go Alone: Battling the Invisible Monsters in Tech A Note About Video Resources Some videos are available only by enrolling in a Coursera or EdX class. These are called MOOCs. Sometimes the classes are not in session so you have to wait a couple of months, so you have no access.\nIt would be great to replace the online course resources with free and always-available public sources, such as YouTube videos (preferably university lectures), so that you people can study these anytime, not just when a specific online course is in session.\nChoose a Programming Language You\u0026rsquo;ll need to choose a programming language for the coding interviews you do, but you\u0026rsquo;ll also need to find a language that you can use to study computer science concepts.\nPreferably the language would be the same, so that you only need to be proficient in one.\nFor this Study Plan When I did the study plan, I used 2 languages for most of it: C and Python\nC: Very low level. Allows you to deal with pointers and memory allocation/deallocation, so you feel the data structures and algorithms in your bones. In higher level languages like Python or Java, these are hidden from you. In day to day work, that\u0026rsquo;s terrific, but when you\u0026rsquo;re learning how these low-level data structures are built, it\u0026rsquo;s great to feel close to the metal. C is everywhere. You\u0026rsquo;ll see examples in books, lectures, videos, everywhere while you\u0026rsquo;re studying. The C Programming Language, Vol 2 This is a short book, but it will give you a great handle on the C language and if you practice it a little you\u0026rsquo;ll quickly get proficient. Understanding C helps you understand how programs and memory work. You don\u0026rsquo;t need to go super deep in the book (or even finish it). Just get to where you\u0026rsquo;re comfortable reading and writing in C. Answers to questions in the book Python: Modern and very expressive, I learned it because it\u0026rsquo;s just super useful and also allows me to write less code in an interview. This is my preference. You do what you like, of course.\nYou may not need it, but here are some sites for learning a new language:\nExercism Codewars Codility HackerEarth Sphere Online Judge (spoj) Codechef Codeforces For your Coding Interview You can use a language you are comfortable in to do the coding part of the interview, but for large companies, these are solid choices:\nC++ Java Python You could also use these, but read around first. There may be caveats:\nJavaScript Ruby Here is an article I wrote about choosing a language for the interview: Pick One Language for the Coding Interview. This is the original article my post was based on: http://blog.codingforinterviews.com/best-programming-language-jobs/\nYou need to be very comfortable in the language and be knowledgeable.\nRead more about choices:\nChoose the Right Language for Your Coding Interview See language-specific resources here\nBooks for Data Structures and Algorithms This book will form your foundation for computer science.\nJust choose one, in a language that you will be comfortable with. You\u0026rsquo;ll be doing a lot of reading and coding.\nC Algorithms in C, Parts 1-5 (Bundle), 3rd Edition Fundamentals, Data Structures, Sorting, Searching, and Graph Algorithms Python Data Structures and Algorithms in Python by Goodrich, Tamassia, Goldwasser I loved this book. It covered everything and more. Pythonic code my glowing book report: https://startupnextdoor.com/book-report-data-structures-and-algorithms-in-python/ Java Your choice:\nGoodrich, Tamassia, Goldwasser Data Structures and Algorithms in Java Sedgewick and Wayne: Algorithms Free Coursera course that covers the book (taught by the authors!): Algorithms I Algorithms II C++ Your choice:\nGoodrich, Tamassia, and Mount Data Structures and Algorithms in C++, 2nd Edition Sedgewick and Wayne Algorithms in C++, Parts 1-4: Fundamentals, Data Structure, Sorting, Searching Algorithms in C++ Part 5: Graph Algorithms Interview Prep Books You don\u0026rsquo;t need to buy a bunch of these. Honestly \u0026ldquo;Cracking the Coding Interview\u0026rdquo; is probably enough, but I bought more to give myself more practice. But I always do too much.\nI bought both of these. They gave me plenty of practice.\nProgramming Interviews Exposed: Coding Your Way Through the Interview, 4th Edition Answers in C++ and Java This is a good warm-up for Cracking the Coding Interview Not too difficult. Most problems may be easier than what you\u0026rsquo;ll see in an interview (from what I\u0026rsquo;ve read) Cracking the Coding Interview, 6th Edition answers in Java If you have tons of extra time: Choose one:\nElements of Programming Interviews (C++ version) Elements of Programming Interviews in Python Elements of Programming Interviews (Java version) - Companion Project - Method Stub and Test Cases for Every Problem in the Book Don\u0026rsquo;t Make My Mistakes This list grew over many months, and yes, it got out of hand.\nHere are some mistakes I made so you\u0026rsquo;ll have a better experience. And you\u0026rsquo;ll save months of time.\n1. You Won\u0026rsquo;t Remember it All I watched hours of videos and took copious notes, and months later there was much I didn\u0026rsquo;t remember. I spent 3 days going through my notes and making flashcards, so I could review. I didn\u0026rsquo;t need all of that knowledge.\nPlease, read so you won\u0026rsquo;t make my mistakes:\nRetaining Computer Science Knowledge.\n2. Use Flashcards To solve the problem, I made a little flashcards site where I could add flashcards of 2 types: general and code. Each card has different formatting. I made a mobile-first website, so I could review on my phone or tablet, wherever I am.\nMake your own for free:\nFlashcards site repo I DON\u0026rsquo;T RECOMMEND using my flashcards. There are too many and many of them are trivia that you don\u0026rsquo;t need.\nBut if you don\u0026rsquo;t want to listen to me, here you go:\nMy flash cards database (1200 cards): My flash cards database (extreme - 1800 cards): Keep in mind I went overboard and have cards covering everything from assembly language and Python trivia to machine learning and statistics. It\u0026rsquo;s way too much for what\u0026rsquo;s required.\nNote on flashcards: The first time you recognize you know the answer, don\u0026rsquo;t mark it as known. You have to see the same card and answer it several times correctly before you really know it. Repetition will put that knowledge deeper in your brain.\nAn alternative to using my flashcard site is Anki, which has been recommended to me numerous times. It uses a repetition system to help you remember. It\u0026rsquo;s user-friendly, available on all platforms and has a cloud sync system. It costs $25 on iOS but is free on other platforms.\nMy flashcard database in Anki format: https://ankiweb.net/shared/info/25173560 (thanks @xiewenya).\nSome students have mentioned formatting issues with white space that can be fixed by doing the following: open deck, edit card, click cards, select the \u0026ldquo;styling\u0026rdquo; radio button, add the member \u0026ldquo;white-space: pre;\u0026rdquo; to the card class.\n3. Do Coding Interview Questions While You\u0026rsquo;re Learning THIS IS VERY IMPORTANT.\nStart doing coding interview questions while you\u0026rsquo;re learning data structures and algorithms.\nYou need to apply what you\u0026rsquo;re learning to solving problems, or you\u0026rsquo;ll forget. I made this mistake.\nOnce you\u0026rsquo;ve learned a topic, and feel somewhat comfortable with it, for example, linked lists:\nOpen one of the coding interview books (or coding problem websites, listed below) Do 2 or 3 questions regarding linked lists. Move on to the next learning topic. Later, go back and do another 2 or 3 linked list problems. Do this with each new topic you learn. Keep doing problems while you\u0026rsquo;re learning all this stuff, not after.\nYou\u0026rsquo;re not being hired for knowledge, but how you apply the knowledge.\nThere are many resources for this, listed below. Keep going.\n4. Focus There are a lot of distractions that can take up valuable time. Focus and concentration are hard. Turn on some music without lyrics and you\u0026rsquo;ll be able to focus pretty well.\nWhat you won\u0026rsquo;t see covered These are prevalent technologies but not part of this study plan:\nSQL Javascript HTML, CSS, and other front-end technologies The Daily Plan This course goes over a lot of subjects. Each will probably take you a few days, or maybe even a week or more. It depends on your schedule.\nEach day, take the next subject in the list, watch some videos about that subject, and then write an implementation of that data structure or algorithm in the language you chose for this course.\nYou can see my code here:\nC C++ Python You don\u0026rsquo;t need to memorize every algorithm. You just need to be able to understand it enough to be able to write your own implementation.\nCoding Question Practice Why is this here? I'm not ready to interview. Then go back and read this.\nWhy you need to practice doing programming problems:\nProblem recognition, and where the right data structures and algorithms fit in Gathering requirements for the problem Talking your way through the problem like you will in the interview Coding on a whiteboard or paper, not a computer Coming up with time and space complexity for your solutions (see Big-O below) Testing your solutions There is a great intro for methodical, communicative problem solving in an interview. You\u0026rsquo;ll get this from the programming interview books, too, but I found this outstanding: Algorithm design canvas\nWrite code on a whiteboard or paper, not a computer. Test with some sample inputs. Then type it and test it out on a computer.\nIf you don\u0026rsquo;t have a whiteboard at home, pick up a large drawing pad from an art store. You can sit on the couch and practice. This is my \u0026ldquo;sofa whiteboard\u0026rdquo;. I added the pen in the photo just for scale. If you use a pen, you\u0026rsquo;ll wish you could erase. Gets messy quick. I use a pencil and eraser.\nCoding question practice is not about memorizing answers to programming problems.\nCoding Problems Don\u0026rsquo;t forget your key coding interview books here.\nSolving Problems:\nHow to Find a Solution How to Dissect a Topcoder Problem Statement Coding Interview Question Videos:\nIDeserve (88 videos) Tushar Roy (5 playlists) Super for walkthroughs of problem solutions Nick White - LeetCode Solutions (187 Videos) Good explanations of solution and the code You can watch several in a short time FisherCoder - LeetCode Solutions Challenge sites:\nLeetCode My favorite coding problem site. It\u0026rsquo;s worth the subscription money for the 1-2 months you\u0026rsquo;ll likely be preparing. See Nick White and FisherCoder Videos above for code walk-throughs. HackerRank TopCoder Geeks for Geeks InterviewBit Project Euler Let\u0026rsquo;s Get Started Alright, enough talk, let\u0026rsquo;s learn!\nBut don\u0026rsquo;t forget to do coding problems from above while you learn!\nAlgorithmic complexity / Big-O / Asymptotic analysis Nothing to implement here, you\u0026rsquo;re just watching videos and taking notes! Yay! There are a lot of videos here. Just watch enough until you understand it. You can always come back and review. Don\u0026rsquo;t worry if you don\u0026rsquo;t understand all the math behind it. You just need to understand how to express the complexity of an algorithm in terms of Big-O. Harvard CS50 - Asymptotic Notation (video) Big O Notations (general quick tutorial) (video) Big O Notation (and Omega and Theta) - best mathematical explanation (video) Skiena: video slides UC Berkeley Big O (video) Amortized Analysis (video) TopCoder (includes recurrence relations and master theorem): Computational Complexity: Section 1 Computational Complexity: Section 2 Cheat sheet Well, that\u0026rsquo;s about enough of that.\nWhen you go through \u0026ldquo;Cracking the Coding Interview\u0026rdquo;, there is a chapter on this, and at the end there is a quiz to see if you can identify the runtime complexity of different algorithms. It\u0026rsquo;s a super review and test.\nData Structures Arrays About Arrays: Arrays (video) UC Berkeley CS61B - Linear and Multi-Dim Arrays (video) (Start watching from 15m 32s) Dynamic Arrays (video) Jagged Arrays (video) Implement a vector (mutable array with automatic resizing): Practice coding using arrays and pointers, and pointer math to jump to an index instead of using indexing. New raw data array with allocated memory can allocate int array under the hood, just not use its features start with 16, or if starting number is greater, use power of 2 - 16, 32, 64, 128 size() - number of items capacity() - number of items it can hold is_empty() at(index) - returns item at given index, blows up if index out of bounds push(item) insert(index, item) - inserts item at index, shifts that index\u0026rsquo;s value and trailing elements to the right prepend(item) - can use insert above at index 0 pop() - remove from end, return value delete(index) - delete item at index, shifting all trailing elements left remove(item) - looks for value and removes index holding it (even if in multiple places) find(item) - looks for value and returns first index with that value, -1 if not found resize(new_capacity) // private function when you reach capacity, resize to double the size when popping an item, if size is 1/4 of capacity, resize to half Time O(1) to add/remove at end (amortized for allocations for more space), index, or update O(n) to insert/remove elsewhere Space contiguous in memory, so proximity helps performance space needed = (array capacity, which is \u0026gt;= n) * size of item, but even if 2n, still O(n) Linked Lists Description: Singly Linked Lists (video) CS 61B - Linked Lists 1 (video) CS 61B - Linked Lists 2 (video) C Code (video) - not the whole video, just portions about Node struct and memory allocation Linked List vs Arrays: Core Linked Lists Vs Arrays (video) In The Real World Linked Lists Vs Arrays (video) why you should avoid linked lists (video) Gotcha: you need pointer to pointer knowledge: (for when you pass a pointer to a function that may change the address where that pointer points) This page is just to get a grasp on ptr to ptr. I don\u0026rsquo;t recommend this list traversal style. Readability and maintainability suffer due to cleverness. Pointers to Pointers Implement (I did with tail pointer \u0026amp; without): size() - returns number of data elements in list empty() - bool returns true if empty value_at(index) - returns the value of the nth item (starting at 0 for first) push_front(value) - adds an item to the front of the list pop_front() - remove front item and return its value push_back(value) - adds an item at the end pop_back() - removes end item and returns its value front() - get value of front item back() - get value of end item insert(index, value) - insert value at index, so current item at that index is pointed to by new item at index erase(index) - removes node at given index value_n_from_end(n) - returns the value of the node at nth position from the end of the list reverse() - reverses the list remove_value(value) - removes the first item in the list with this value Doubly-linked List Description (video) No need to implement Stack Stacks (video) Will not implement. Implementing with array is trivial Queue Queue (video) Circular buffer/FIFO Implement using linked-list, with tail pointer: enqueue(value) - adds value at position at tail dequeue() - returns value and removes least recently added element (front) empty() Implement using fixed-sized array: enqueue(value) - adds item at end of available storage dequeue() - returns value and removes least recently added element empty() full() Cost: a bad implementation using linked list where you enqueue at head and dequeue at tail would be O(n) because you\u0026rsquo;d need the next to last element, causing a full traversal each dequeue enqueue: O(1) (amortized, linked list and array [probing]) dequeue: O(1) (linked list and array) empty: O(1) (linked list and array) Hash table Videos:\nHashing with Chaining (video) Table Doubling, Karp-Rabin (video) Open Addressing, Cryptographic Hashing (video) PyCon 2010: The Mighty Dictionary (video) PyCon 2017: The Dictionary Even Mightier (video) (Advanced) Randomization: Universal \u0026amp; Perfect Hashing (video) (Advanced) Perfect hashing (video) Online Courses:\nCore Hash Tables (video) Data Structures (video) Phone Book Problem (video) distributed hash tables: Instant Uploads And Storage Optimization In Dropbox (video) Distributed Hash Tables (video) Implement with array using linear probing\nhash(k, m) - m is size of hash table add(key, value) - if key already exists, update value exists(key) get(key) remove(key) More Knowledge Binary search Binary Search (video) Binary Search (video) detail Implement: binary search (on sorted array of integers) binary search using recursion Bitwise operations Bits cheat sheet - you should know many of the powers of 2 from (2^1 to 2^16 and 2^32) Get a really good understanding of manipulating bits with: \u0026amp;, |, ^, ~, \u0026raquo;, \u0026laquo; words Good intro: Bit Manipulation (video) C Programming Tutorial 2-10: Bitwise Operators (video) Bit Manipulation Bitwise Operation Bithacks The Bit Twiddler The Bit Twiddler Interactive Bit Hacks (video) Practice Operations 2s and 1s complement Binary: Plusses \u0026amp; Minuses (Why We Use Two\u0026rsquo;s Complement) (video) 1s Complement 2s Complement Count set bits 4 ways to count bits in a byte (video) Count Bits How To Count The Number Of Set Bits In a 32 Bit Integer Swap values: Swap Absolute value: Absolute Integer Trees Trees - Notes \u0026amp; Background Series: Trees (video) basic tree construction traversal manipulation algorithms BFS(breadth-first search) and DFS(depth-first search) (video) BFS notes: level order (BFS, using queue) time complexity: O(n) space complexity: best: O(1), worst: O(n/2)=O(n) DFS notes: time complexity: O(n) space complexity: best: O(log n) - avg. height of tree worst: O(n) inorder (DFS: left, self, right) postorder (DFS: left, right, self) preorder (DFS: self, left, right) Binary search trees: BSTs Binary Search Tree Review (video) Introduction (video) MIT (video) C/C++: Binary search tree - Implementation in C/C++ (video) BST implementation - memory allocation in stack and heap (video) Find min and max element in a binary search tree (video) Find height of a binary tree (video) Binary tree traversal - breadth-first and depth-first strategies (video) Binary tree: Level Order Traversal (video) Binary tree traversal: Preorder, Inorder, Postorder (video) Check if a binary tree is binary search tree or not (video) Delete a node from Binary Search Tree (video) Inorder Successor in a binary search tree (video) Implement: insert // insert value into tree get_node_count // get count of values stored print_values // prints the values in the tree, from min to max delete_tree is_in_tree // returns true if given value exists in the tree get_height // returns the height in nodes (single node\u0026rsquo;s height is 1) get_min // returns the minimum value stored in the tree get_max // returns the maximum value stored in the tree is_binary_search_tree delete_value get_successor // returns next-highest value in tree after given value, -1 if none Heap / Priority Queue / Binary Heap visualized as a tree, but is usually linear in storage (array, linked list) Heap Introduction (video) Naive Implementations (video) Binary Trees (video) Tree Height Remark (video) Basic Operations (video) Complete Binary Trees (video) Pseudocode (video) Heap Sort - jumps to start (video) Heap Sort (video) Building a heap (video) MIT: Heaps and Heap Sort (video) CS 61B Lecture 24: Priority Queues (video) Linear Time BuildHeap (max-heap) Implement a max-heap: insert sift_up - needed for insert get_max - returns the max item, without removing it get_size() - return number of elements stored is_empty() - returns true if heap contains no elements extract_max - returns the max item, removing it sift_down - needed for extract_max remove(x) - removes item at index x heapify - create a heap from an array of elements, needed for heap_sort heap_sort() - take an unsorted array and turn it into a sorted array in-place using a max heap or min heap Sorting Notes:\nImplement sorts \u0026amp; know best case/worst case, average complexity of each: no bubble sort - it\u0026rsquo;s terrible - O(n^2), except when n \u0026lt;= 16 Stability in sorting algorithms (\u0026ldquo;Is Quicksort stable?\u0026rdquo;) Sorting Algorithm Stability Stability In Sorting Algorithms Stability In Sorting Algorithms Sorting Algorithms - Stability Which algorithms can be used on linked lists? Which on arrays? Which on both? I wouldn\u0026rsquo;t recommend sorting a linked list, but merge sort is doable. Merge Sort For Linked List For heapsort, see Heap data structure above. Heap sort is great, but not stable\nSedgewick - Mergesort (5 videos)\n1. Mergesort 2. Bottom up Mergesort 3. Sorting Complexity 4. Comparators 5. Stability Sedgewick - Quicksort (4 videos)\n1. Quicksort 2. Selection 3. Duplicate Keys 4. System Sorts UC Berkeley:\nCS 61B Lecture 29: Sorting I (video) CS 61B Lecture 30: Sorting II (video) CS 61B Lecture 32: Sorting III (video) CS 61B Lecture 33: Sorting V (video) Bubble Sort (video)\nAnalyzing Bubble Sort (video)\nInsertion Sort, Merge Sort (video)\nInsertion Sort (video)\nMerge Sort (video)\nQuicksort (video)\nSelection Sort (video)\nMerge sort code:\nUsing output array (C) Using output array (Python) In-place (C++) Quick sort code:\nImplementation (C) Implementation (C) Implementation (Python) Implement:\nMergesort: O(n log n) average and worst case Quicksort O(n log n) average case Selection sort and insertion sort are both O(n^2) average and worst case For heapsort, see Heap data structure above Not required, but I recommended them:\nSedgewick - Radix Sorts (6 videos) 1. Strings in Java 2. Key Indexed Counting 3. Least Significant Digit First String Radix Sort 4. Most Significant Digit First String Radix Sort 5. 3 Way Radix Quicksort 6. Suffix Arrays Radix Sort Radix Sort (video) Radix Sort, Counting Sort (linear time given constraints) (video) Randomization: Matrix Multiply, Quicksort, Freivalds\u0026rsquo; algorithm (video) Sorting in Linear Time (video) As a summary, here is a visual representation of 15 sorting algorithms. If you need more detail on this subject, see \u0026ldquo;Sorting\u0026rdquo; section in Additional Detail on Some Subjects\nGraphs Graphs can be used to represent many problems in computer science, so this section is long, like trees and sorting were.\nNotes:\nThere are 4 basic ways to represent a graph in memory: objects and pointers adjacency matrix adjacency list adjacency map Familiarize yourself with each representation and its pros \u0026amp; cons BFS and DFS - know their computational complexity, their trade offs, and how to implement them in real code When asked a question, look for a graph-based solution first, then move on if none MIT(videos):\nBreadth-First Search Depth-First Search Skiena Lectures - great intro:\nCSE373 2012 - Lecture 11 - Graph Data Structures (video) CSE373 2012 - Lecture 12 - Breadth-First Search (video) CSE373 2012 - Lecture 13 - Graph Algorithms (video) CSE373 2012 - Lecture 14 - Graph Algorithms (con\u0026rsquo;t) (video) CSE373 2012 - Lecture 15 - Graph Algorithms (con\u0026rsquo;t 2) (video) CSE373 2012 - Lecture 16 - Graph Algorithms (con\u0026rsquo;t 3) (video) Graphs (review and more):\n6.006 Single-Source Shortest Paths Problem (video) 6.006 Dijkstra (video) 6.006 Bellman-Ford (video) 6.006 Speeding Up Dijkstra (video) Aduni: Graph Algorithms I - Topological Sorting, Minimum Spanning Trees, Prim\u0026rsquo;s Algorithm - Lecture 6 (video) Aduni: Graph Algorithms II - DFS, BFS, Kruskal\u0026rsquo;s Algorithm, Union Find Data Structure - Lecture 7 (video) Aduni: Graph Algorithms III: Shortest Path - Lecture 8 (video) Aduni: Graph Alg. IV: Intro to geometric algorithms - Lecture 9 (video) CS 61B 2014 (starting at 58:09) (video) CS 61B 2014: Weighted graphs (video) Greedy Algorithms: Minimum Spanning Tree (video) Strongly Connected Components Kosaraju\u0026rsquo;s Algorithm Graph Algorithm (video) Full Coursera Course:\nAlgorithms on Graphs (video) I\u0026rsquo;ll implement:\nDFS with adjacency list (recursive) DFS with adjacency list (iterative with stack) DFS with adjacency matrix (recursive) DFS with adjacency matrix (iterative with stack) BFS with adjacency list BFS with adjacency matrix single-source shortest path (Dijkstra) minimum spanning tree DFS-based algorithms (see Aduni videos above): check for cycle (needed for topological sort, since we\u0026rsquo;ll check for cycle before starting) topological sort count connected components in a graph list strongly connected components check for bipartite graph Even More Knowledge Recursion Stanford lectures on recursion \u0026amp; backtracking: Lecture 8 | Programming Abstractions (video) Lecture 9 | Programming Abstractions (video) Lecture 10 | Programming Abstractions (video) Lecture 11 | Programming Abstractions (video) When it is appropriate to use it? How is tail recursion better than not? What Is Tail Recursion Why Is It So Bad? Tail Recursion (video) Dynamic Programming You probably won\u0026rsquo;t see any dynamic programming problems in your interview, but it\u0026rsquo;s worth being able to recognize a problem as being a candidate for dynamic programming. This subject can be pretty difficult, as each DP soluble problem must be defined as a recursion relation, and coming up with it can be tricky. I suggest looking at many examples of DP problems until you have a solid understanding of the pattern involved. Videos: the Skiena videos can be hard to follow since he sometimes uses the whiteboard, which is too small to see Skiena: CSE373 2012 - Lecture 19 - Introduction to Dynamic Programming (video) Skiena: CSE373 2012 - Lecture 20 - Edit Distance (video) Skiena: CSE373 2012 - Lecture 21 - Dynamic Programming Examples (video) Skiena: CSE373 2012 - Lecture 22 - Applications of Dynamic Programming (video) Simonson: Dynamic Programming 0 (starts at 59:18) (video) Simonson: Dynamic Programming I - Lecture 11 (video) Simonson: Dynamic programming II - Lecture 12 (video) List of individual DP problems (each is short): Dynamic Programming (video) Yale Lecture notes: Dynamic Programming Coursera: The RNA secondary structure problem (video) A dynamic programming algorithm (video) Illustrating the DP algorithm (video) Running time of the DP algorithm (video) DP vs. recursive implementation (video) Global pairwise sequence alignment (video) Local pairwise sequence alignment (video) Design patterns Quick UML review (video) Learn these patterns: strategy singleton adapter prototype decorator visitor factory, abstract factory facade observer proxy delegate command state memento iterator composite flyweight Series of videos (27 videos) Book: Head First Design Patterns I know the canonical book is \u0026ldquo;Design Patterns: Elements of Reusable Object-Oriented Software\u0026rdquo;, but Head First is great for beginners to OO. Handy reference: 101 Design Patterns \u0026amp; Tips for Developers Combinatorics (n choose k) \u0026amp; Probability Math Skills: How to find Factorial, Permutation and Combination (Choose) (video) Make School: Probability (video) Make School: More Probability and Markov Chains (video) Khan Academy: Course layout: Basic Theoretical Probability Just the videos - 41 (each are simple and each are short): Probability Explained (video) NP, NP-Complete and Approximation Algorithms Know about the most famous classes of NP-complete problems, such as traveling salesman and the knapsack problem, and be able to recognize them when an interviewer asks you them in disguise. Know what NP-complete means. Computational Complexity (video) Simonson: Greedy Algs. II \u0026amp; Intro to NP Completeness (video) NP Completeness II \u0026amp; Reductions (video) NP Completeness III (Video) NP Completeness IV (video) Skiena: CSE373 2012 - Lecture 23 - Introduction to NP-Completeness (video) CSE373 2012 - Lecture 24 - NP-Completeness Proofs (video) CSE373 2012 - Lecture 25 - NP-Completeness Challenge (video) Complexity: P, NP, NP-completeness, Reductions (video) Complexity: Approximation Algorithms (video) Complexity: Fixed-Parameter Algorithms (video) Peter Norvig discusses near-optimal solutions to traveling salesman problem: Jupyter Notebook Pages 1048 - 1140 in CLRS if you have it. How computers process a program How CPU executes a program (video) How computers calculate - ALU (video) Registers and RAM (video) The Central Processing Unit (CPU) (video) Instructions and Programs (video) Caches LRU cache: The Magic of LRU Cache (100 Days of Google Dev) (video) Implementing LRU (video) LeetCode - 146 LRU Cache (C++) (video) CPU cache: MIT 6.004 L15: The Memory Hierarchy (video) MIT 6.004 L16: Cache Issues (video) Processes and Threads Computer Science 162 - Operating Systems (25 videos): for processes and threads see videos 1-11 Operating Systems and System Programming (video) What Is The Difference Between A Process And A Thread? Covers: Processes, Threads, Concurrency issues Difference between processes and threads Processes Threads Locks Mutexes Semaphores Monitors How they work? Deadlock Livelock CPU activity, interrupts, context switching Modern concurrency constructs with multicore processors Paging, segmentation and virtual memory (video) Interrupts (video) Process resource needs (memory: code, static storage, stack, heap, and also file descriptors, i/o) Thread resource needs (shares above (minus stack) with other threads in the same process but each has its own pc, stack counter, registers, and stack) Forking is really copy on write (read-only) until the new process writes to memory, then it does a full copy. Context switching How context switching is initiated by the operating system and underlying hardware? threads in C++ (series - 10 videos) CS 377 Spring \u0026lsquo;14: Operating Systems from University of Massachusetts concurrency in Python (videos): Short series on threads Python Threads Understanding the Python GIL (2010) reference David Beazley - Python Concurrency From the Ground Up: LIVE! - PyCon 2015 Keynote David Beazley - Topics of Interest (Python Asyncio) Mutex in Python Testing To cover: how unit testing works what are mock objects what is integration testing what is dependency injection Agile Software Testing with James Bach (video) Open Lecture by James Bach on Software Testing (video) Steve Freeman - Test-Driven Development (that’s not what we meant) (video) slides Dependency injection: video Tao Of Testing How to write tests String searching \u0026amp; manipulations Sedgewick - Suffix Arrays (video) Sedgewick - Substring Search (videos) 1. Introduction to Substring Search 2. Brute-Force Substring Search 3. Knuth-Morris Pratt 4. Boyer-Moore 5. Rabin-Karp Search pattern in text (video) If you need more detail on this subject, see \u0026ldquo;String Matching\u0026rdquo; section in Additional Detail on Some Subjects.\nTries Note there are different kinds of tries. Some have prefixes, some don\u0026rsquo;t, and some use string instead of bits to track the path I read through code, but will not implement Sedgewick - Tries (3 videos) 1. R Way Tries 2. Ternary Search Tries 3. Character Based Operations Notes on Data Structures and Programming Techniques Short course videos: Introduction To Tries (video) Performance Of Tries (video) Implementing A Trie (video) The Trie: A Neglected Data Structure TopCoder - Using Tries Stanford Lecture (real world use case) (video) MIT, Advanced Data Structures, Strings (can get pretty obscure about halfway through) (video) Floating Point Numbers simple 8-bit: Representation of Floating Point Numbers - 1 (video - there is an error in calculations - see video description) 32 bit: IEEE754 32-bit floating point binary (video) Unicode The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets What Every Programmer Absolutely, Positively Needs To Know About Encodings And Character Sets To Work With Text Endianness Big And Little Endian Big Endian Vs Little Endian (video) Big And Little Endian Inside/Out (video) Very technical talk for kernel devs. Don\u0026rsquo;t worry if most is over your head. The first half is enough. Networking if you have networking experience or want to be a reliability engineer or operations engineer, expect questions Otherwise, this is just good to know Khan Academy UDP and TCP: Comparison of Transport Protocols (video) TCP/IP and the OSI Model Explained! (video) Packet Transmission across the Internet. Networking \u0026amp; TCP/IP tutorial. (video) HTTP (video) SSL and HTTPS (video) SSL/TLS (video) HTTP 2.0 (video) Video Series (21 videos) (video) Subnetting Demystified - Part 5 CIDR Notation (video) Sockets: Java - Sockets - Introduction (video) Socket Programming (video) Final Review This section will have shorter videos that you can watch pretty quickly to review most of the important concepts. It's nice if you want a refresher often. Series of 2-3 minutes short subject videos (23 videos) Videos Series of 2-5 minutes short subject videos - Michael Sambol (18 videos): Videos Sedgewick Videos - Algorithms I Sedgewick Videos - Algorithms II Update Your Resume See Resume prep information in the books: \u0026ldquo;Cracking The Coding Interview\u0026rdquo; and \u0026ldquo;Programming Interviews Exposed\u0026rdquo; I don\u0026rsquo;t know how important this is (you can do your own research) but here is an article on making your resume ATS Compliant: How to Create or Check if your Resume is ATS Compliant \u0026ldquo;This Is What A GOOD Resume Should Look Like\u0026rdquo; by Gayle McDowell (author of Cracking the Coding Interview), Note by the author: \u0026ldquo;This is for a US-focused resume. CVs for India and other countries have different expectations, although many of the points will be the same.\u0026rdquo; Find a Job Sites for Finding Jobs Interview Process \u0026amp; General Interview Prep How to Pass the Engineering Interview in 2021 Demystifying Tech Recruiting How to Get a Job at the Big 4: How to Get a Job at the Big 4 - Amazon, Facebook, Google \u0026amp; Microsoft (video) How to Get a Job at the Big 4.1 (Follow-up video) Cracking The Coding Interview Set 1: Gayle L McDowell - Cracking The Coding Interview (video) Cracking the Coding Interview with Author Gayle Laakmann McDowell (video) Cracking the Facebook Coding Interview: The Approach Problem Walkthrough Prep Courses: Software Engineer Interview Unleashed (paid course): Learn how to make yourself ready for software engineer interviews from a former Google interviewer. Python for Data Structures, Algorithms, and Interviews (paid course): A Python centric interview prep course which covers data structures, algorithms, mock interviews and much more. Intro to Data Structures and Algorithms using Python (Udacity free course): A free Python centric data structures and algorithms course. Data Structures and Algorithms Nanodegree! (Udacity paid Nanodegree): Get hands-on practice with over 100 data structures and algorithm exercises and guidance from a dedicated mentor to help prepare you for interviews and on-the-job scenarios. Grokking the Behavioral Interview (Educative free course): Many times, it’s not your technical competency that holds you back from landing your dream job, it’s how you perform on the behavioral interview. Mock Interviews:\nGainlo.co: Mock interviewers from big companies - I used this and it helped me relax for the phone screen and on-site interview Pramp: Mock interviews from/with peers - peer-to-peer model of practice interviews interviewing.io: Practice mock interview with senior engineers - anonymous algorithmic/systems design interviews with senior engineers from FAANG anonymously Be thinking of for when the interview comes Think of about 20 interview questions you\u0026rsquo;ll get, along with the lines of the items below. Have at least one answer for each. Have a story, not just data, about something you accomplished.\nWhy do you want this job?\nWhat\u0026rsquo;s a tough problem you\u0026rsquo;ve solved?\nBiggest challenges faced?\nBest/worst designs seen?\nIdeas for improving an existing product\nHow do you work best, as an individual and as part of a team?\nWhich of your skills or experiences would be assets in the role and why?\nWhat did you most enjoy at [job x / project y]?\nWhat was the biggest challenge you faced at [job x / project y]?\nWhat was the hardest bug you faced at [job x / project y]?\nWhat did you learn at [job x / project y]?\nWhat would you have done better at [job x / project y]?\nIf you find it hard to come up with good answers of these types of interview questions, here are some ideas:\nGeneral Interview Questions and their Answers Have questions for the interviewer Some of mine (I already may know the answers, but want their opinion or team perspective):\nHow large is your team? What does your dev cycle look like? Do you do waterfall/sprints/agile? Are rushes to deadlines common? Or is there flexibility? How are decisions made in your team? How many meetings do you have per week? Do you feel your work environment helps you concentrate? What are you working on? What do you like about it? What is the work life like? How is the work/life balance? Once You\u0026rsquo;ve Got The Job Congratulations!\nKeep learning.\nYou\u0026rsquo;re never really done.\n***************************************************************************************************** ***************************************************************************************************** Everything below this point is optional. It is NOT needed for an entry-level interview. However, by studying these, you'll get greater exposure to more CS concepts, and will be better prepared for any software engineering job. You'll be a much more well-rounded software engineer. ***************************************************************************************************** ***************************************************************************************************** Additional Books These are here so you can dive into a topic you find interesting. The Unix Programming Environment An oldie but a goodie The Linux Command Line: A Complete Introduction A modern option TCP/IP Illustrated Series Head First Design Patterns A gentle introduction to design patterns Design Patterns: Elements of Reusable Object-Oriente​d Software AKA the \u0026ldquo;Gang Of Four\u0026rdquo; book, or GOF The canonical design patterns book Algorithm Design Manual (Skiena) As a review and problem recognition The algorithm catalog portion is well beyond the scope of difficulty you\u0026rsquo;ll get in an interview This book has 2 parts: Class textbook on data structures and algorithms Pros: Is a good review as any algorithms textbook would be Nice stories from his experiences solving problems in industry and academia Code examples in C Cons: Can be as dense or impenetrable as CLRS, and in some cases, CLRS may be a better alternative for some subjects Chapters 7, 8, 9 can be painful to try to follow, as some items are not explained well or require more brain than I have Don\u0026rsquo;t get me wrong: I like Skiena, his teaching style, and mannerisms, but I may not be Stony Brook material Algorithm catalog: This is the real reason you buy this book. This book is better as an algorithm reference, and not something you read cover to cover. Can rent it on Kindle Answers: Solutions Solutions Errata Write Great Code: Volume 1: Understanding the Machine The book was published in 2004, and is somewhat outdated, but it\u0026rsquo;s a terrific resource for understanding a computer in brief The author invented HLA, so take mentions and examples in HLA with a grain of salt. Not widely used, but decent examples of what assembly looks like These chapters are worth the read to give you a nice foundation: Chapter 2 - Numeric Representation Chapter 3 - Binary Arithmetic and Bit Operations Chapter 4 - Floating-Point Representation Chapter 5 - Character Representation Chapter 6 - Memory Organization and Access Chapter 7 - Composite Data Types and Memory Objects Chapter 9 - CPU Architecture Chapter 10 - Instruction Set Architecture Chapter 11 - Memory Architecture and Organization Introduction to Algorithms Important: Reading this book will only have limited value. This book is a great review of algorithms and data structures, but won\u0026rsquo;t teach you how to write good code. You have to be able to code a decent solution efficiently AKA CLR, sometimes CLRS, because Stein was late to the game Computer Architecture, Sixth Edition: A Quantitative Approach For a richer, more up-to-date (2017), but longer treatment System Design, Scalability, Data Handling You can expect system design questions if you have 4+ years of experience.\nScalability and System Design are very large topics with many topics and resources, since there is a lot to consider when designing a software/hardware system that can scale. Expect to spend quite a bit of time on this Considerations: Scalability Distill large data sets to single values Transform one data set to another Handling obscenely large amounts of data System design features sets interfaces class hierarchies designing a system under certain constraints simplicity and robustness tradeoffs performance analysis and optimization START HERE: The System Design Primer System Design from HiredInTech How Do I Prepare To Answer Design Questions In A Technical Interview? 8 Things You Need to Know Before a System Design Interview Database Normalization - 1NF, 2NF, 3NF and 4NF (video) System Design Interview - There are a lot of resources in this one. Look through the articles and examples. I put some of them below How to ace a systems design interview Numbers Everyone Should Know How long does it take to make a context switch? Transactions Across Datacenters (video) A plain English introduction to CAP Theorem MIT 6.824: Distributed Systems, Spring 2020 (20 videos) Consensus Algorithms: Paxos - Paxos Agreement - Computerphile (video) Raft - An Introduction to the Raft Distributed Consensus Algorithm (video) Easy-to-read paper Infographic Consistent Hashing NoSQL Patterns Scalability: You don\u0026rsquo;t need all of these. Just pick a few that interest you. Great overview (video) Short series: Clones Database Cache Asynchronism Scalable Web Architecture and Distributed Systems Fallacies of Distributed Computing Explained Jeff Dean - Building Software Systems At Google and Lessons Learned (video) Introduction to Architecting Systems for Scale Scaling mobile games to a global audience using App Engine and Cloud Datastore (video) How Google Does Planet-Scale Engineering for Planet-Scale Infra (video) The Importance of Algorithms Sharding Engineering for the Long Game - Astrid Atkinson Keynote(video) 7 Years Of YouTube Scalability Lessons In 30 Minutes video How PayPal Scaled To Billions Of Transactions Daily Using Just 8VMs How to Remove Duplicates in Large Datasets A look inside Etsy\u0026rsquo;s scale and engineering culture with Jon Cowie (video) What Led Amazon to its Own Microservices Architecture To Compress Or Not To Compress, That Was Uber\u0026rsquo;s Question When Should Approximate Query Processing Be Used? Google\u0026rsquo;s Transition From Single Datacenter, To Failover, To A Native Multihomed Architecture The Image Optimization Technology That Serves Millions Of Requests Per Day A Patreon Architecture Short Tinder: How Does One Of The Largest Recommendation Engines Decide Who You\u0026rsquo;ll See Next? Design Of A Modern Cache Live Video Streaming At Facebook Scale A Beginner\u0026rsquo;s Guide To Scaling To 11 Million+ Users On Amazon\u0026rsquo;s AWS A 360 Degree View Of The Entire Netflix Stack Latency Is Everywhere And It Costs You Sales - How To Crush It What Powers Instagram: Hundreds of Instances, Dozens of Technologies Salesforce Architecture - How They Handle 1.3 Billion Transactions A Day ESPN\u0026rsquo;s Architecture At Scale - Operating At 100,000 Duh Nuh Nuhs Per Second See \u0026ldquo;Messaging, Serialization, and Queueing Systems\u0026rdquo; way below for info on some of the technologies that can glue services together Twitter: O\u0026rsquo;Reilly MySQL CE 2011: Jeremy Cole, \u0026ldquo;Big and Small Data at @Twitter\u0026rdquo; (video) Timelines at Scale For even more, see \u0026ldquo;Mining Massive Datasets\u0026rdquo; video series in the Video Series section Practicing the system design process: Here are some ideas to try working through on paper, each with some documentation on how it was handled in the real world: review: The System Design Primer System Design from HiredInTech cheat sheet flow: Understand the problem and scope: Define the use cases, with interviewer\u0026rsquo;s help Suggest additional features Remove items that interviewer deems out of scope Assume high availability is required, add as a use case Think about constraints: Ask how many requests per month Ask how many requests per second (they may volunteer it or make you do the math) Estimate reads vs. writes percentage Keep 80/20 rule in mind when estimating How much data written per second Total storage required over 5 years How much data read per second Abstract design: Layers (service, data, caching) Infrastructure: load balancing, messaging Rough overview of any key algorithm that drives the service Consider bottlenecks and determine solutions Exercises: Design a random unique ID generation system Design a key-value database Design a picture sharing system Design a recommendation system Design a URL-shortener system: copied from above Design a cache system Additional Learning I added them to help you become a well-rounded software engineer, and to be aware of certain technologies and algorithms, so you'll have a bigger toolbox. Compilers How a Compiler Works in ~1 minute (video) Harvard CS50 - Compilers (video) C++ (video) Understanding Compiler Optimization (C++) (video) Emacs and vi(m) Familiarize yourself with a unix-based code editor vi(m): Editing With vim 01 - Installation, Setup, and The Modes (video) VIM Adventures set of 4 videos: The vi/vim editor - Lesson 1 The vi/vim editor - Lesson 2 The vi/vim editor - Lesson 3 The vi/vim editor - Lesson 4 Using Vi Instead of Emacs emacs: Basics Emacs Tutorial (video) set of 3 (videos): Emacs Tutorial (Beginners) -Part 1- File commands, cut/copy/paste, cursor commands Emacs Tutorial (Beginners) -Part 2- Buffer management, search, M-x grep and rgrep modes Emacs Tutorial (Beginners) -Part 3- Expressions, Statements, ~/.emacs file and packages Evil Mode: Or, How I Learned to Stop Worrying and Love Emacs (video) Writing C Programs With Emacs (maybe) Org Mode In Depth: Managing Structure (video) Unix command line tools I filled in the list below from good tools. bash cat grep sed awk curl or wget sort tr uniq strace tcpdump Information theory (videos) Khan Academy More about Markov processes: Core Markov Text Generation Core Implementing Markov Text Generation Project = Markov Text Generation Walk Through See more in MIT 6.050J Information and Entropy series below Parity \u0026amp; Hamming Code (videos) Intro Parity Hamming Code: Error detection Error correction Error Checking Entropy Also see videos below Make sure to watch information theory videos first Information Theory, Claude Shannon, Entropy, Redundancy, Data Compression \u0026amp; Bits (video) Cryptography Also see videos below Make sure to watch information theory videos first Khan Academy Series Cryptography: Hash Functions Cryptography: Encryption Compression Make sure to watch information theory videos first Computerphile (videos): Compression Entropy in Compression Upside Down Trees (Huffman Trees) EXTRA BITS/TRITS - Huffman Trees Elegant Compression in Text (The LZ 77 Method) Text Compression Meets Probabilities Compressor Head videos (optional) Google Developers Live: GZIP is not enough! Computer Security MIT (23 videos) Introduction, Threat Models Control Hijacking Attacks Buffer Overflow Exploits and Defenses Privilege Separation Capabilities Sandboxing Native Code Web Security Model Securing Web Applications Symbolic Execution Network Security Network Protocols Side-Channel Attacks Garbage collection GC in Python (video) Deep Dive Java: Garbage Collection is Good! Deep Dive Python: Garbage Collection in CPython (video) Parallel Programming Coursera (Scala) Efficient Python for High Performance Parallel Computing (video) Messaging, Serialization, and Queueing Systems Thrift Tutorial Protocol Buffers Tutorials gRPC gRPC 101 for Java Developers (video) Redis Tutorial Amazon SQS (queue) Amazon SNS (pub-sub) RabbitMQ Get Started Celery First Steps With Celery ZeroMQ Intro - Read The Manual ActiveMQ Kafka MessagePack Avro A* A Search Algorithm A* Pathfinding Tutorial (video) A* Pathfinding (E01: algorithm explanation) (video) Fast Fourier Transform An Interactive Guide To The Fourier Transform What is a Fourier transform? What is it used for? What is the Fourier Transform? (video) Divide \u0026amp; Conquer: FFT (video) Understanding The FFT Bloom Filter Given a Bloom filter with m bits and k hashing functions, both insertion and membership testing are O(k) Bloom Filters (video) Bloom Filters | Mining of Massive Datasets | Stanford University (video) Tutorial How To Write A Bloom Filter App HyperLogLog How To Count A Billion Distinct Objects Using Only 1.5KB Of Memory Locality-Sensitive Hashing Used to determine the similarity of documents The opposite of MD5 or SHA which are used to determine if 2 documents/strings are exactly the same Simhashing (hopefully) made simple van Emde Boas Trees Divide \u0026amp; Conquer: van Emde Boas Trees (video) MIT Lecture Notes Augmented Data Structures CS 61B Lecture 39: Augmenting Data Structures Balanced search trees Know at least one type of balanced binary tree (and know how it\u0026rsquo;s implemented):\n\u0026ldquo;Among balanced search trees, AVL and 2/3 trees are now passé, and red-black trees seem to be more popular. A particularly interesting self-organizing data structure is the splay tree, which uses rotations to move any accessed key to the root.\u0026rdquo; - Skiena\nOf these, I chose to implement a splay tree. From what I\u0026rsquo;ve read, you won\u0026rsquo;t implement a balanced search tree in your interview. But I wanted exposure to coding one up and let\u0026rsquo;s face it, splay trees are the bee\u0026rsquo;s knees. I did read a lot of red-black tree code\nSplay tree: insert, search, delete functions If you end up implementing red/black tree try just these: Search and insertion functions, skipping delete I want to learn more about B-Tree since it\u0026rsquo;s used so widely with very large data sets\nSelf-balancing binary search tree\nAVL trees\nIn practice: From what I can tell, these aren\u0026rsquo;t used much in practice, but I could see where they would be: The AVL tree is another structure supporting O(log n) search, insertion, and removal. It is more rigidly balanced than red–black trees, leading to slower insertion and removal but faster retrieval. This makes it attractive for data structures that may be built once and loaded without reconstruction, such as language dictionaries (or program dictionaries, such as the opcodes of an assembler or interpreter) MIT AVL Trees / AVL Sort (video) AVL Trees (video) AVL Tree Implementation (video) Split And Merge Splay trees\nIn practice: Splay trees are typically used in the implementation of caches, memory allocators, routers, garbage collectors, data compression, ropes (replacement of string used for long text strings), in Windows NT (in the virtual memory, networking and file system code) etc CS 61B: Splay Trees (video) MIT Lecture: Splay Trees: Gets very mathy, but watch the last 10 minutes for sure. Video Red/black trees\nThese are a translation of a 2-3 tree (see below). In practice: Red–black trees offer worst-case guarantees for insertion time, deletion time, and search time. Not only does this make them valuable in time-sensitive applications such as real-time applications, but it makes them valuable building blocks in other data structures which provide worst-case guarantees; for example, many data structures used in computational geometry can be based on red–black trees, and the Completely Fair Scheduler used in current Linux kernels uses red–black trees. In the version 8 of Java, the Collection HashMap has been modified such that instead of using a LinkedList to store identical elements with poor hashcodes, a Red-Black tree is used Aduni - Algorithms - Lecture 4 (link jumps to starting point) (video) Aduni - Algorithms - Lecture 5 (video) Red-Black Tree An Introduction To Binary Search And Red Black Tree 2-3 search trees\nIn practice: 2-3 trees have faster inserts at the expense of slower searches (since height is more compared to AVL trees). You would use 2-3 tree very rarely because its implementation involves different types of nodes. Instead, people use Red Black trees. 23-Tree Intuition and Definition (video) Binary View of 23-Tree 2-3 Trees (student recitation) (video) 2-3-4 Trees (aka 2-4 trees)\nIn practice: For every 2-4 tree, there are corresponding red–black trees with data elements in the same order. The insertion and deletion operations on 2-4 trees are also equivalent to color-flipping and rotations in red–black trees. This makes 2-4 trees an important tool for understanding the logic behind red–black trees, and this is why many introductory algorithm texts introduce 2-4 trees just before red–black trees, even though 2-4 trees are not often used in practice. CS 61B Lecture 26: Balanced Search Trees (video) Bottom Up 234-Trees (video) Top Down 234-Trees (video) N-ary (K-ary, M-ary) trees\nnote: the N or K is the branching factor (max branches) binary trees are a 2-ary tree, with branching factor = 2 2-3 trees are 3-ary K-Ary Tree B-Trees\nFun fact: it\u0026rsquo;s a mystery, but the B could stand for Boeing, Balanced, or Bayer (co-inventor). In Practice: B-Trees are widely used in databases. Most modern filesystems use B-trees (or Variants). In addition to its use in databases, the B-tree is also used in filesystems to allow quick random access to an arbitrary block in a particular file. The basic problem is turning the file block i address into a disk block (or perhaps to a cylinder-head-sector) address B-Tree B-Tree Datastructure Introduction to B-Trees (video) B-Tree Definition and Insertion (video) B-Tree Deletion (video) MIT 6.851 - Memory Hierarchy Models (video) - covers cache-oblivious B-Trees, very interesting data structures - the first 37 minutes are very technical, may be skipped (B is block size, cache line size) k-D Trees Great for finding number of points in a rectangle or higher dimension object A good fit for k-nearest neighbors Kd Trees (video) kNN K-d tree algorithm (video) Skip lists \u0026ldquo;These are somewhat of a cult data structure\u0026rdquo; - Skiena Randomization: Skip Lists (video) For animations and a little more detail Network Flows Ford-Fulkerson in 5 minutes — Step by step example (video) Ford-Fulkerson Algorithm (video) Network Flows (video) Disjoint Sets \u0026amp; Union Find UCB 61B - Disjoint Sets; Sorting \u0026amp; selection (video) Sedgewick Algorithms - Union-Find (6 videos) Math for Fast Processing Integer Arithmetic, Karatsuba Multiplication (video) The Chinese Remainder Theorem (used in cryptography) (video) Treap Combination of a binary search tree and a heap Treap Data Structures: Treaps explained (video) Applications in set operations Linear Programming (videos) Linear Programming Finding minimum cost Finding maximum value Solve Linear Equations with Python - Simplex Algorithm Geometry, Convex hull (videos) Graph Alg. IV: Intro to geometric algorithms - Lecture 9 Geometric Algorithms: Graham \u0026amp; Jarvis - Lecture 10 Divide \u0026amp; Conquer: Convex Hull, Median Finding Discrete math Computer Science 70, 001 - Spring 2015 - Discrete Mathematics and Probability Theory Discrete Mathematics by Shai Simonson (19 videos) Discrete Mathematics By IIT Ropar NPTEL Machine Learning Why ML? How Google Is Remaking Itself As A Machine Learning First Company Large-Scale Deep Learning for Intelligent Computer Systems (video) Deep Learning and Understandability versus Software Engineering and Verification by Peter Norvig Google\u0026rsquo;s Cloud Machine learning tools (video) Google Developers\u0026rsquo; Machine Learning Recipes (Scikit Learn \u0026amp; Tensorflow) (video) Tensorflow (video) Tensorflow Tutorials Practical Guide to implementing Neural Networks in Python (using Theano) Courses: Great starter course: Machine Learning - videos only - see videos 12-18 for a review of linear algebra (14 and 15 are duplicates) Neural Networks for Machine Learning Google\u0026rsquo;s Deep Learning Nanodegree Google/Kaggle Machine Learning Engineer Nanodegree Self-Driving Car Engineer Nanodegree Metis Online Course ($99 for 2 months) Resources: Books: Python Machine Learning Data Science from Scratch: First Principles with Python Introduction to Machine Learning with Python Machine Learning for Software Engineers Data School: http://www.dataschool.io/ Additional Detail on Some Subjects I added these to reinforce some ideas already presented above, but didn't want to include them above because it's just too much. It's easy to overdo it on a subject. You want to get hired in this century, right? SOLID\nBob Martin SOLID Principles of Object Oriented and Agile Design (video) S - Single Responsibility Principle | Single responsibility to each Object more flavor O - Open/Closed Principle | On production level Objects are ready for extension but not for modification more flavor L - Liskov Substitution Principle | Base Class and Derived class follow ‘IS A’ Principle more flavor I - Interface segregation principle | clients should not be forced to implement interfaces they don\u0026rsquo;t use Interface Segregation Principle in 5 minutes (video) more flavor D -Dependency Inversion principle | Reduce the dependency In composition of objects. Why Is The Dependency Inversion Principle And Why Is It Important more flavor Union-Find\nOverview Naive Implementation Trees Union By Rank Path Compression Analysis Options More Dynamic Programming (videos)\n6.006: Dynamic Programming I: Fibonacci, Shortest Paths 6.006: Dynamic Programming II: Text Justification, Blackjack 6.006: DP III: Parenthesization, Edit Distance, Knapsack 6.006: DP IV: Guitar Fingering, Tetris, Super Mario Bros. 6.046: Dynamic Programming \u0026amp; Advanced DP 6.046: Dynamic Programming: All-Pairs Shortest Paths 6.046: Dynamic Programming (student recitation) Advanced Graph Processing (videos)\nSynchronous Distributed Algorithms: Symmetry-Breaking. Shortest-Paths Spanning Trees Asynchronous Distributed Algorithms: Shortest-Paths Spanning Trees MIT Probability (mathy, and go slowly, which is good for mathy things) (videos):\nMIT 6.042J - Probability Introduction MIT 6.042J - Conditional Probability MIT 6.042J - Independence MIT 6.042J - Random Variables MIT 6.042J - Expectation I MIT 6.042J - Expectation II MIT 6.042J - Large Deviations MIT 6.042J - Random Walks Simonson: Approximation Algorithms (video)\nString Matching\nRabin-Karp (videos): Rabin Karps Algorithm Precomputing Optimization: Implementation and Analysis Table Doubling, Karp-Rabin Rolling Hashes, Amortized Analysis Knuth-Morris-Pratt (KMP): TThe Knuth-Morris-Pratt (KMP) String Matching Algorithm Boyer–Moore string search algorithm Boyer-Moore String Search Algorithm Advanced String Searching Boyer-Moore-Horspool Algorithms (video) Coursera: Algorithms on Strings starts off great, but by the time it gets past KMP it gets more complicated than it needs to be nice explanation of tries can be skipped Sorting\nStanford lectures on sorting: Lecture 15 | Programming Abstractions (video) Lecture 16 | Programming Abstractions (video) Shai Simonson, Aduni.org: Algorithms - Sorting - Lecture 2 (video) Algorithms - Sorting II - Lecture 3 (video) Steven Skiena lectures on sorting: lecture begins at 26:46 (video) lecture begins at 27:40 (video) lecture begins at 35:00 (video) lecture begins at 23:50 (video) Video Series Sit back and enjoy.\nList of individual Dynamic Programming problems (each is short)\nx86 Architecture, Assembly, Applications (11 videos)\nMIT 18.06 Linear Algebra, Spring 2005 (35 videos)\nExcellent - MIT Calculus Revisited: Single Variable Calculus\nCSE373 - Analysis of Algorithms (25 videos)\nSkiena lectures from Algorithm Design Manual UC Berkeley 61B (Spring 2014): Data Structures (25 videos)\nUC Berkeley 61B (Fall 2006): Data Structures (39 videos)\nUC Berkeley 61C: Machine Structures (26 videos)\nOOSE: Software Dev Using UML and Java (21 videos)\nUC Berkeley CS 152: Computer Architecture and Engineering (20 videos)\nMIT 6.004: Computation Structures (49 videos)\nCarnegie Mellon - Computer Architecture Lectures (39 videos)\nMIT 6.006: Intro to Algorithms (47 videos)\nMIT 6.033: Computer System Engineering (22 videos)\nMIT 6.034 Artificial Intelligence, Fall 2010 (30 videos)\nMIT 6.042J: Mathematics for Computer Science, Fall 2010 (25 videos)\nMIT 6.046: Design and Analysis of Algorithms (34 videos)\nMIT 6.050J: Information and Entropy, Spring 2008 (19 videos)\nMIT 6.824: Distributed Systems, Spring 2020 (20 videos)\nMIT 6.851: Advanced Data Structures (22 videos)\nMIT 6.854: Advanced Algorithms, Spring 2016 (24 videos)\nHarvard COMPSCI 224: Advanced Algorithms (25 videos)\nMIT 6.858 Computer Systems Security, Fall 2014\nStanford: Programming Paradigms (27 videos)\nIntroduction to Cryptography by Christof Paar\nCourse Website along with Slides and Problem Sets Mining Massive Datasets - Stanford University (94 videos)\nGraph Theory by Sarada Herke (67 videos)\nComputer Science Courses Directory of Online CS Courses Directory of CS Courses (many with online lectures) Algorithms implementation Multiple Algorithms implementation by Princeton University Papers Love classic papers? 1978: Communicating Sequential Processes implemented in Go 2003: The Google File System replaced by Colossus in 2012 2004: MapReduce: Simplified Data Processing on Large Clusters mostly replaced by Cloud Dataflow? 2006: Bigtable: A Distributed Storage System for Structured Data 2006: The Chubby Lock Service for Loosely-Coupled Distributed Systems 2007: Dynamo: Amazon’s Highly Available Key-value Store The Dynamo paper kicked off the NoSQL revolution 2007: What Every Programmer Should Know About Memory (very long, and the author encourages skipping of some sections) 2012: AddressSanitizer: A Fast Address Sanity Checker: paper video 2013: Spanner: Google’s Globally-Distributed Database: paper video 2014: Machine Learning: The High-Interest Credit Card of Technical Debt 2015: Continuous Pipelines at Google 2015: High-Availability at Massive Scale: Building Google’s Data Infrastructure for Ads 2015: TensorFlow: Large-Scale Machine Learning on Heterogeneous Distributed Systems 2015: How Developers Search for Code: A Case Study More papers: 1,000 papers LICENSE CC-BY-SA-4.0\n","permalink":"https://intervalrain.github.io/washam/","summary":"\u003ch1 id=\"coding-interview-university\"\u003eCoding Interview University\u003c/h1\u003e\n\u003cp\u003e\u003cem\u003eJohn Washam\u003c/em\u003e:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eI originally created this as a short to-do list of study topics for becoming a software engineer,\nbut it grew to the large list you see today. After going through this study plan, \u003ca href=\"https://startupnextdoor.com/ive-been-acquired-by-amazon/?src=ciu\"\u003eI got hired\nas a Software Development Engineer at Amazon\u003c/a\u003e!\nYou probably won\u0026rsquo;t have to study as much as I did. Anyway, everything you need is here.\u003c/p\u003e\n\u003cp\u003eI studied about 8-12 hours a day, for several months. This is my story: \u003ca href=\"https://medium.freecodecamp.org/why-i-studied-full-time-for-8-months-for-a-google-interview-cc662ce9bb13\"\u003eWhy I studied full-time for 8 months for a Google interview\u003c/a\u003e\u003c/p\u003e","title":"[Washam] Way to SWE"},{"content":"\u003c!DOCTYPE HTML\u003e 詞曲：胡鎮宇\n你生活的　都踏踏實實地過了\n把曾經走過的路全都擺在記憶了\n那憂鬱悲傷快樂歡笑都記得\n記在腦海了\n你熟悉的　該輕輕鬆鬆地放了\n把人生未來的路全都拿在手裡了\n那曾經有過的與曾經失去的\n都成回憶了\n而我將洋洋灑灑邁開步伐地走了\n將四年的青春塗上另一種顏色\n而我還是無法自拔矯情卻又無法割捨\n回想自己的夢　去成就另一種快樂\n","permalink":"https://intervalrain.github.io/music/about_future/","summary":"\u003c!DOCTYPE HTML\u003e\n\u003chtml lang=\"en\"\u003e\n\u003chead\u003e\n    \u003cstyle type=\"text/css\"\u003e\n        .youtube_shortcodes {\n            position: relative;\n            width: 100%;\n            height: 0;\n            padding-bottom: 66%;\n            margin: auto;\n            overflow: hidden;\n            text-align: center;\n        }\n        .youtube_shortcodes iframe {\n            position: absolute;\n            width: 100%;\n            height: 100%;\n            left: 0;\n            top: 0;\n        }\n    \u003c/style\u003e\n    \u003ctitle\u003e\u003c/title\u003e\n\u003c/head\u003e\n\u003cbody\u003e\n\u003cdiv class=\"youtube_shortcodes\"\u003e\n    \u003ciframe\n            class=\"youtube-player\"\n            type=\"text/html\"\n            width=\"640\"\n            height=\"385\"\n            src=\"https://www.youtube.com/embed/rlxD01UEuio?autoplay=0\"\n            style=\"\n                 position: absolute;\n                 top: 0;\n                 left: 0;\n                 width: 100%;\n                 height: 100%;\n                 border:0;\"\n            allowfullscreen frameborder=\"0\"\u003e\n    \u003c/iframe\u003e\n\u003c/div\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n\u003cp\u003e詞曲：胡鎮宇\u003c/p\u003e\n\u003cp\u003e你生活的　都踏踏實實地過了\u003cbr\u003e\n把曾經走過的路全都擺在記憶了\u003cbr\u003e\n那憂鬱悲傷快樂歡笑都記得\u003cbr\u003e\n記在腦海了\u003c/p\u003e\n\u003cp\u003e你熟悉的　該輕輕鬆鬆地放了\u003cbr\u003e\n把人生未來的路全都拿在手裡了\u003cbr\u003e\n那曾經有過的與曾經失去的\u003cbr\u003e\n都成回憶了\u003c/p\u003e\n\u003cp\u003e而我將洋洋灑灑邁開步伐地走了\u003cbr\u003e\n將四年的青春塗上另一種顏色\u003cbr\u003e\n而我還是無法自拔矯情卻又無法割捨\u003cbr\u003e\n回想自己的夢　去成就另一種快樂\u003c/p\u003e","title":"[創作] 關於未來"}]