<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Clean Architectrue on Rain Hu&#39;s Workspace</title>
    <link>http://localhost:1313/tags/clean-architectrue/</link>
    <description>Recent content in Clean Architectrue on Rain Hu&#39;s Workspace</description>
    <generator>Hugo -- 0.139.2</generator>
    <language>zh-tw</language>
    <lastBuildDate>Tue, 03 Oct 2023 22:28:44 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/clean-architectrue/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[IT] Clean Architecture - 第4章 - 結構化程式設計</title>
      <link>http://localhost:1313/clean_arch/ch4/</link>
      <pubDate>Tue, 03 Oct 2023 22:28:44 +0800</pubDate>
      <guid>http://localhost:1313/clean_arch/ch4/</guid>
      <description>structured programming</description>
    </item>
    <item>
      <title>[IT] Clean Architecture</title>
      <link>http://localhost:1313/clean_arch/clean_arch/</link>
      <pubDate>Fri, 29 Sep 2023 02:03:47 +0800</pubDate>
      <guid>http://localhost:1313/clean_arch/clean_arch/</guid>
      <description>&lt;h1 id=&#34;乾淨架構&#34;&gt;乾淨架構&lt;/h1&gt;
&lt;h2 id=&#34;設計design與架構architecture為何重要&#34;&gt;設計(design)與架構(architecture)為何重要？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;軟體架構的目標是將&lt;strong&gt;開發&lt;/strong&gt;與&lt;strong&gt;維護&lt;/strong&gt;軟體系統所需的人力最小化。
&lt;ul&gt;
&lt;li&gt;不好的設計會使維護的成本愈來愈高。
&lt;img alt=&#34;1-1&#34; loading=&#34;lazy&#34; src=&#34;http://localhost:1313/clean_arch/images/img1_3.png&#34;&gt;&lt;/li&gt;
&lt;li&gt;每次版本的發布時的生產力。
&lt;img alt=&#34;1-2&#34; loading=&#34;lazy&#34; src=&#34;http://localhost:1313/clean_arch/images/img1_4.png&#34;&gt;&lt;/li&gt;
&lt;li&gt;良好的開發模式(TDD)大幅減少開發時間。
&lt;img alt=&#34;1-3&#34; loading=&#34;lazy&#34; src=&#34;http://localhost:1313/clean_arch/images/img1_6.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;行為behavior與架構architecture&#34;&gt;行為(behavior)與架構(architecture)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;行為：緊迫但並非特別重要&lt;/li&gt;
&lt;li&gt;架構：重要不緊迫&lt;br&gt;
∵ 緊急且重要 &amp;gt; 不緊急但重要 &amp;gt; 緊急但不重要 &amp;gt; 不緊急且不重要&lt;br&gt;
∴ 大多情況下，架構(設計)比行為(開發)更重要。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;程式設計範式paradigms&#34;&gt;程式設計範式(paradigms)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;結構化程式設計(structed programming)
&lt;ul&gt;
&lt;li&gt;不要使用 &lt;code&gt;goto&lt;/code&gt;，使用結構化的設計模式。(順序、選擇、迭代)&lt;/li&gt;
&lt;li&gt;總結：對直接控制權施加限制。&lt;/li&gt;
&lt;li&gt;關注點：&lt;strong&gt;功能&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;物件導向程式設計(object-oriented programming)
&lt;ul&gt;
&lt;li&gt;使用多型來避免函數指針的濫用。&lt;/li&gt;
&lt;li&gt;總結：對間接控制權施加限制。&lt;/li&gt;
&lt;li&gt;關注點：&lt;strong&gt;組件分離&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;函式程式設計(functional programming)
&lt;ul&gt;
&lt;li&gt;λ演算的概念是不可變性，符號的值不會改變，意味著沒有賦值。&lt;/li&gt;
&lt;li&gt;總結：對賦值施加限制。&lt;/li&gt;
&lt;li&gt;關注點：&lt;strong&gt;數據管理&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;物件導向設計&#34;&gt;物件導向設計：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;依賴反轉：
&lt;img alt=&#34;DIP&#34; loading=&#34;lazy&#34; src=&#34;http://localhost:1313/clean_arch/images/DIP.png&#34;&gt;&lt;/li&gt;
&lt;li&gt;商業邏輯不依賴於 UI 與 DB，UI 與 DB 可以做為商業邏輯的插件。
&lt;img alt=&#34;DIP2&#34; loading=&#34;lazy&#34; src=&#34;http://localhost:1313/clean_arch/images/DIP2.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;小結&#34;&gt;小結：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;三種範式都在約束你寫 code 的某些行為。這些約束就是在制定規則。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;solid-設計原則&#34;&gt;SOLID 設計原則&lt;/h2&gt;
&lt;h3 id=&#34;srp-單一職責原則the-single-responsibility-principle&#34;&gt;SRP: 單一職責原則(The Single Responsibility Principle)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;一個模組只有一個原因(用戶/利益相關者)需要改變。
&lt;img alt=&#34;SRP&#34; loading=&#34;lazy&#34; src=&#34;http://localhost:1313/clean_arch/images/SRP.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ocp-開放封閉原則the-open-closed-principle&#34;&gt;OCP: 開放封閉原則(The Open-Closed Principle)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;軟體工程應對擴展開放，但對修改封閉。
&lt;img alt=&#34;OCP&#34; loading=&#34;lazy&#34; src=&#34;http://localhost:1313/clean_arch/images/OCP.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;lsp-里氏替體原則the-liskov-substitution-principle&#34;&gt;LSP: 里氏替體原則(The Liskov Substitution Principle)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;避免簡單的可替代性違規導致大量的額外機制。
&lt;img alt=&#34;LSP&#34; loading=&#34;lazy&#34; src=&#34;http://localhost:1313/clean_arch/images/LSP.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;isp-介面隔離原則the-interface-segregation-principle&#34;&gt;ISP: 介面隔離原則(The Interface Segregation Principle)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;關注點分離。將一個多功能的物件拆成繼承三個不同功能介面的物件。
&lt;img alt=&#34;SRP&#34; loading=&#34;lazy&#34; src=&#34;http://localhost:1313/clean_arch/images/ISP.png&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dip-依賴反轉原則the-dependency-inversion-principle&#34;&gt;DIP: 依賴反轉原則(The Dependency Inversion Principle)&lt;/h3&gt;
&lt;p&gt;&lt;img alt=&#34;DIP3&#34; loading=&#34;lazy&#34; src=&#34;http://localhost:1313/clean_arch/images/DIP3.png&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>[IT] Clean Architecture - 重點整理</title>
      <link>http://localhost:1313/it/ca/</link>
      <pubDate>Sat, 23 Sep 2023 20:03:55 +0800</pubDate>
      <guid>http://localhost:1313/it/ca/</guid>
      <description>&lt;h1 id=&#34;乾淨架構clean-architecture-筆記&#34;&gt;乾淨架構(Clean Architecture) 筆記&lt;/h1&gt;
&lt;h2 id=&#34;分層&#34;&gt;分層&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;乾淨架構中從外而內依序為
&lt;ul&gt;
&lt;li&gt;Framework Layer&lt;/li&gt;
&lt;li&gt;Interface Adapter Layer&lt;/li&gt;
&lt;li&gt;Application Layer&lt;/li&gt;
&lt;li&gt;Domain Layer&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;models&#34;&gt;Models&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;一般來說會有四個 Models
&lt;ul&gt;
&lt;li&gt;View Model(給前端)&lt;/li&gt;
&lt;li&gt;App Model(App Layer 隔離 Domain Layer 所用，aka DTO)&lt;/li&gt;
&lt;li&gt;Domain Model&lt;/li&gt;
&lt;li&gt;Data Model(for DBMS)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;usecase&#34;&gt;Usecase&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;App Layer 中的 Usecase 做四件事：
&lt;ul&gt;
&lt;li&gt;查&lt;/li&gt;
&lt;li&gt;改&lt;/li&gt;
&lt;li&gt;存&lt;/li&gt;
&lt;li&gt;推&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;單向依賴原則&#34;&gt;單向依賴原則&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;依賴的方向必為單向且為&lt;br&gt;
\(\boxed{\text{Interface Adapter}} \rightarrow \boxed{\text{Application Layer}} \rightarrow \boxed{\text{Domain Layer}}\)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;repository&#34;&gt;Repository&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Application Layer 為了遵守單向依賴，與 ORM 解耦會做一次依賴反轉，翠取 Repository 介面。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;套用乾淨架構的效益衡量&#34;&gt;套用乾淨架構的效益衡量&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Model Mapping 的成本 vs.
&lt;ol&gt;
&lt;li&gt;獨立出「領域模型」的價值&lt;/li&gt;
&lt;li&gt;省下更換技術的成本(migration cost)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;領域層的部分通常會結合-ddd&#34;&gt;「領域層」的部分通常會結合 DDD&lt;/h2&gt;</description>
    </item>
    <item>
      <title>[IT] Clean Architecture - 第3章 - 程式設計範式總覽</title>
      <link>http://localhost:1313/clean_arch/ch3/</link>
      <pubDate>Thu, 07 Sep 2023 22:07:54 +0800</pubDate>
      <guid>http://localhost:1313/clean_arch/ch3/</guid>
      <description>paradigm overview</description>
    </item>
    <item>
      <title>[IT] Clean Architecture - 第二部分 從基礎構件開始: 程式設計範式(Paradigms)</title>
      <link>http://localhost:1313/clean_arch/sec2/</link>
      <pubDate>Tue, 05 Sep 2023 21:43:11 +0800</pubDate>
      <guid>http://localhost:1313/clean_arch/sec2/</guid>
      <description>&lt;p&gt;　　軟體架構始於程式碼，因此我們將從程式碼的角度開始討論架構，看看自從程式碼被寫下以來我們所學到的內容。&lt;/p&gt;
&lt;p&gt;　　1938年，艾倫·圖靈(Alan Turing)奠定了計算機編程的基礎。他並不是第一個構想可編程機器的人，但他是第一個理解程式即數據(programs are simply data)的人。到了1945年，圖靈已經在真正的電腦上用我們現在能夠認出的程式碼編寫真正的程式了。這些程式使用了循環(loops)、分支(branches)、賦值(assignment)、子程序(subroutines)、堆棧(stacks)和其他熟悉的結構。但，圖靈的語言是二進制的。&lt;/p&gt;
&lt;p&gt;　　自從那些日子以來，程式設計界發生了許多革命。其中一個我們都非常熟悉的革命就是語言的革命。首先，在1940年代末期，出現了組合語言(assemblers)。這些「語言」解放了程式設計師將他們的程式轉換成二進制的苦差。1951年，格雷斯·霍珀(Grace Hopper)發明了第一個編譯器 A0。事實上，她創造了「編譯器(compiler)」這個詞彙。Fortran 在1953年被發明出來。接著，一股源源不斷的新程式語言湧入 - COBOL、PL/1、SNOBOL、C、Pascal、C++、Java等等，無窮無盡。&lt;/p&gt;
&lt;p&gt;　　另一個可能更重要的革命是在程式設計範式方面。範式是編程的方式，與語言相對無關。範式指導了開發人員應該使用哪些程式結構，以及何時使用它們。&lt;/p&gt;
&lt;p&gt;　　迄今為止，已經有三種這樣的範式，也不太可能再有其它的範式，原因後述。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[IT] Clean Architecture - 第2章 - 兩個價值維度</title>
      <link>http://localhost:1313/clean_arch/ch2/</link>
      <pubDate>Mon, 04 Sep 2023 15:18:12 +0800</pubDate>
      <guid>http://localhost:1313/clean_arch/ch2/</guid>
      <description>two values</description>
    </item>
    <item>
      <title>[IT] Clean Architecture - 第1章 - 設計與架構到底是什麼</title>
      <link>http://localhost:1313/clean_arch/ch1/</link>
      <pubDate>Sun, 03 Sep 2023 23:14:07 +0800</pubDate>
      <guid>http://localhost:1313/clean_arch/ch1/</guid>
      <description>What is design and architecture?</description>
    </item>
    <item>
      <title>[IT] Clean Architecture - 第一部分 概述</title>
      <link>http://localhost:1313/clean_arch/sec1/</link>
      <pubDate>Sun, 03 Sep 2023 22:48:22 +0800</pubDate>
      <guid>http://localhost:1313/clean_arch/sec1/</guid>
      <description>&lt;p&gt;　　採用好的軟體架構可以大大節省&lt;strong&gt;軟體項目構建&lt;/strong&gt;與&lt;strong&gt;維護的人力成本&lt;/strong&gt;。讓每次變更都短小簡單，易於實施，並且避免缺陷，用最小的成本，最大程度地滿足功能性和靈活性的要求。&lt;/p&gt;</description>
    </item>
    <item>
      <title>[IT] Clean Architecture - Catalog</title>
      <link>http://localhost:1313/clean_arch/toc/</link>
      <pubDate>Sun, 03 Sep 2023 22:32:22 +0800</pubDate>
      <guid>http://localhost:1313/clean_arch/toc/</guid>
      <description>&lt;p&gt;&lt;img alt=&#34;CleanArchitecture&#34; loading=&#34;lazy&#34; src=&#34;http://geekdaxue.co/uploads/projects/Clean-Architecture-zh/docs/cover.jpg&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Clean Architecture&lt;br&gt;
A Craftsman&amp;rsquo;s Guide to Software Structure and Design&lt;br&gt;
中文翻譯: 無瑕的程式碼 - 整潔的軟體設計與架構&lt;br&gt;
原著: Robert C. Martin(Uncle Bob)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;目錄&#34;&gt;目錄&lt;/h1&gt;
&lt;hr&gt;
&lt;h3 id=&#34;第一部分-概述clean_archsec1&#34;&gt;&lt;a href=&#34;http://localhost:1313/clean_arch/sec1&#34;&gt;第一部分 概述&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;第1章---設計與架構到底是什麼clean_archch1&#34;&gt;&lt;a href=&#34;http://localhost:1313/clean_arch/ch1&#34;&gt;第1章 - 設計與架構到底是什麼&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&#34;第2章---兩個價值維度clean_archch2&#34;&gt;&lt;a href=&#34;http://localhost:1313/clean_arch/ch2&#34;&gt;第2章 - 兩個價值維度&lt;/a&gt;&lt;/h4&gt;
&lt;hr&gt;
&lt;h3 id=&#34;第二部分-從基礎構件開始-程式設計範式clean_archsec2&#34;&gt;&lt;a href=&#34;http://localhost:1313/clean_arch/sec2&#34;&gt;第二部分 從基礎構件開始: 程式設計範式&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;第3章---程式設計範式總覽clean_archch3&#34;&gt;&lt;a href=&#34;http://localhost:1313/clean_arch/ch3&#34;&gt;第3章 - 程式設計範式總覽&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&#34;第4章---結構化程式設計clean_archch4&#34;&gt;&lt;a href=&#34;http://localhost:1313/clean_arch/ch4&#34;&gt;第4章 - 結構化程式設計&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&#34;第5章---物件導向程式設計clean_archch5&#34;&gt;&lt;a href=&#34;http://localhost:1313/clean_arch/ch5&#34;&gt;第5章 - 物件導向程式設計&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&#34;第6章---函數式程式設計clean_archch6&#34;&gt;&lt;a href=&#34;http://localhost:1313/clean_arch/ch6&#34;&gt;第6章 - 函數式程式設計&lt;/a&gt;&lt;/h4&gt;
&lt;hr&gt;
&lt;h3 id=&#34;第三部分-設計原則clean_archsec3&#34;&gt;&lt;a href=&#34;http://localhost:1313/clean_arch/sec3&#34;&gt;第三部分 設計原則&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;第7章---srp-單一職責原則clean_archch7&#34;&gt;&lt;a href=&#34;http://localhost:1313/clean_arch/ch7&#34;&gt;第7章 - SRP 單一職責原則&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&#34;第8章---ocp-開放封則原則clean_archch8&#34;&gt;&lt;a href=&#34;http://localhost:1313/clean_arch/ch8&#34;&gt;第8章 - OCP 開放封則原則&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&#34;第9章---lsp-里氏替換原則clean_archch9&#34;&gt;&lt;a href=&#34;http://localhost:1313/clean_arch/ch9&#34;&gt;第9章 - LSP 里氏替換原則&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&#34;第10章---isp-介面隔離原則clean_archch10&#34;&gt;&lt;a href=&#34;http://localhost:1313/clean_arch/ch10&#34;&gt;第10章 - ISP 介面隔離原則&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&#34;第11章---dip-依賴反轉原則clean_archch11&#34;&gt;&lt;a href=&#34;http://localhost:1313/clean_arch/ch11&#34;&gt;第11章 - DIP 依賴反轉原則&lt;/a&gt;&lt;/h4&gt;
&lt;hr&gt;
&lt;h3 id=&#34;第四部分-組件構建原則clean_archsec4&#34;&gt;[第四部分 組件構建原則)(/clean_arch/sec4)&lt;/h3&gt;
&lt;h4 id=&#34;第12章---元件clean_archch12&#34;&gt;&lt;a href=&#34;http://localhost:1313/clean_arch/ch12&#34;&gt;第12章 - 元件&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&#34;第13章---元件聚合clean_archch13&#34;&gt;&lt;a href=&#34;http://localhost:1313/clean_arch/ch13&#34;&gt;第13章 - 元件聚合&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&#34;第14章---元件耦合clean_archch14&#34;&gt;&lt;a href=&#34;http://localhost:1313/clean_arch/ch14&#34;&gt;第14章 - 元件耦合&lt;/a&gt;&lt;/h4&gt;
&lt;hr&gt;
&lt;h3 id=&#34;第五部分-軟體架構clean_archsec5&#34;&gt;&lt;a href=&#34;http://localhost:1313/clean_arch/sec5&#34;&gt;第五部分 軟體架構&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&#34;第15章---什麼是軟體架構clean_archch15&#34;&gt;&lt;a href=&#34;http://localhost:1313/clean_arch/ch15&#34;&gt;第15章 - 什麼是軟體架構&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&#34;第16章---獨立性clean_archch16&#34;&gt;&lt;a href=&#34;http://localhost:1313/clean_arch/ch16&#34;&gt;第16章 - 獨立性&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&#34;第17章---劃分邊界clean_archch17&#34;&gt;&lt;a href=&#34;http://localhost:1313/clean_arch/ch17&#34;&gt;第17章 - 劃分邊界&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&#34;第18章---邊界剖析clean_archch18&#34;&gt;&lt;a href=&#34;http://localhost:1313/clean_arch/ch18&#34;&gt;第18章 - 邊界剖析&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&#34;第19章---策略與層次clean_archch19&#34;&gt;&lt;a href=&#34;http://localhost:1313/clean_arch/ch19&#34;&gt;第19章 - 策略與層次&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&#34;第20章---業務邏輯clean_archch20&#34;&gt;&lt;a href=&#34;http://localhost:1313/clean_arch/ch20&#34;&gt;第20章 - 業務邏輯&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&#34;第21章---尖叫的軟體架構clean_archch21&#34;&gt;&lt;a href=&#34;http://localhost:1313/clean_arch/ch21&#34;&gt;第21章 - 尖叫的軟體架構&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&#34;第22章---整潔架構clean_archch22&#34;&gt;&lt;a href=&#34;http://localhost:1313/clean_arch/ch22&#34;&gt;第22章 - 整潔架構&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&#34;第23章---展示器和謙卑物件clean_archch23&#34;&gt;&lt;a href=&#34;http://localhost:1313/clean_arch/ch23&#34;&gt;第23章 - 展示器和謙卑物件&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&#34;第24章---不完全邊界clean_archch24&#34;&gt;&lt;a href=&#34;http://localhost:1313/clean_arch/ch24&#34;&gt;第24章 - 不完全邊界&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&#34;第25章---層次與邊界clean_archch25&#34;&gt;&lt;a href=&#34;http://localhost:1313/clean_arch/ch25&#34;&gt;第25章 - 層次與邊界&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&#34;第26章---main-元件clean_arch_h26&#34;&gt;&lt;a href=&#34;http://localhost:1313/clean_arch_/h26&#34;&gt;第26章 - Main 元件&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&#34;第27章---服務-宏觀與微觀clean_archch27&#34;&gt;&lt;a href=&#34;http://localhost:1313/clean_arch/ch27&#34;&gt;第27章 - 服務: 宏觀與微觀&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&#34;第28章---測試邊界clean_archch28&#34;&gt;&lt;a href=&#34;http://localhost:1313/clean_arch/ch28&#34;&gt;第28章 - 測試邊界&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&#34;第29章---整潔的嵌入式架構clean_archch29&#34;&gt;&lt;a href=&#34;http://localhost:1313/clean_arch/ch29&#34;&gt;第29章 - 整潔的嵌入式架構&lt;/a&gt;&lt;/h4&gt;
&lt;hr&gt;
&lt;h3 id=&#34;第六部分-實現細節clean_archsec6&#34;&gt;&lt;a href=&#34;http://localhost:1313/clean_arch/sec6&#34;&gt;第六部分 實現細節&lt;/a&gt;]&lt;/h3&gt;
&lt;h4 id=&#34;第30章---數據庫只是實現細節clean_archch30&#34;&gt;&lt;a href=&#34;http://localhost:1313/clean_arch/ch30&#34;&gt;第30章 - 數據庫只是實現細節&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&#34;第31章---web-是實現細節clean_archch31&#34;&gt;&lt;a href=&#34;http://localhost:1313/clean_arch/ch31&#34;&gt;第31章 - Web 是實現細節&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&#34;第32章---應用程式框架是實現細節clean_archch32&#34;&gt;&lt;a href=&#34;http://localhost:1313/clean_arch/ch32&#34;&gt;第32章 - 應用程式框架是實現細節&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&#34;第33章---案例分析-影片銷售網站clean_archch33&#34;&gt;&lt;a href=&#34;http://localhost:1313/clean_arch/ch33&#34;&gt;第33章 - 案例分析: 影片銷售網站&lt;/a&gt;&lt;/h4&gt;
&lt;h4 id=&#34;第34章---拾遺clean_archch34&#34;&gt;&lt;a href=&#34;http://localhost:1313/clean_arch/ch34&#34;&gt;第34章 - 拾遺&lt;/a&gt;&lt;/h4&gt;</description>
    </item>
  </channel>
</rss>
