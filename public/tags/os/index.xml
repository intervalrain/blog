<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>OS on Rain Hu&#39;s Workspace</title>
    <link>https://intervalrain.github.io/tags/os/</link>
    <description>Recent content in OS on Rain Hu&#39;s Workspace</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 02 Jul 2022 21:43:15 +0800</lastBuildDate><atom:link href="https://intervalrain.github.io/tags/os/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CPU 個數、CPU 核心數、CPU 執行緒數</title>
      <link>https://intervalrain.github.io/cs/os/cpucorethread/</link>
      <pubDate>Sat, 02 Jul 2022 21:43:15 +0800</pubDate>
      
      <guid>https://intervalrain.github.io/cs/os/cpucorethread/</guid>
      <description>Introduction to CPU, core and thread</description>
    </item>
    
    <item>
      <title>[作業系統] 計算機作業系統</title>
      <link>https://intervalrain.github.io/cs/os/</link>
      <pubDate>Sat, 02 Jul 2022 04:00:55 +0800</pubDate>
      
      <guid>https://intervalrain.github.io/cs/os/</guid>
      <description>計算機作業系統  概述 進程管理 死鎖 記憶體管理 設備管理 鏈接  參考資料  cyc2018 Mr. opengate  </description>
    </item>
    
    <item>
      <title>[計算機作業系統] 概述</title>
      <link>https://intervalrain.github.io/cs/os/intro/</link>
      <pubDate>Sat, 02 Jul 2022 04:00:55 +0800</pubDate>
      
      <guid>https://intervalrain.github.io/cs/os/intro/</guid>
      <description>作業系統 簡介   電腦系統主要可分成四個部分，或分成硬體(hardware)、軟體(software)、數據(data)
 硬體(hardware)：為系統提供基本的計算資源。  中央處理器(central processing unit, CPU) 記憶體(memory) I/O 裝置   應用程式(Application programs)：定義資源如何用來解決使用者的計算問題。 使用者(users) 作業系統(Operating system, OS)：    作業系統(Operating system, OS) 是管理電腦硬體與軟體資源的電腦程式，同時也是電腦系統的核心與基石。
  OS 最主要的兩個功能是：
 資源分配：根據需求調配資源分配率(resource utilization)與效能(performance) 監控使用者程式的執行，避免不正常的運作造成對系統的危害。    一個標準的 PC 作業系統應該提供以下的功能：
 行程管理(Processing management) 記憶體管理(Memory management) 檔案系統(File system) 網路通訊(Networking) 安全機制(Security) 使用者介面(User interface) 驅動程式(Device drivers)    PC 基本特徵 1. 並行計算(Concurrent computing)  Concurrent computing 是指宏觀上在一段時間內能同時運行多個進程，微觀上是交替發生的；而平行計算(parallel computing) 則指同一個時間內能運行多個指令。 平行計算需要硬體支持，如多線程(multi-thread)、多核處理器(multi-core processor)或者分散式計算機系統(distributed OS)。 作業系統通過引入進程(process)與線程(thread)，使程式能夠並行運作。  2.</description>
    </item>
    
    <item>
      <title>[計算機作業系統] 死鎖</title>
      <link>https://intervalrain.github.io/cs/os/deadlock/</link>
      <pubDate>Sat, 02 Jul 2022 04:00:55 +0800</pubDate>
      
      <guid>https://intervalrain.github.io/cs/os/deadlock/</guid>
      <description>準備中 </description>
    </item>
    
    <item>
      <title>[計算機作業系統] 記憶體管理</title>
      <link>https://intervalrain.github.io/cs/os/memorymanagement/</link>
      <pubDate>Sat, 02 Jul 2022 04:00:55 +0800</pubDate>
      
      <guid>https://intervalrain.github.io/cs/os/memorymanagement/</guid>
      <description>準備中 </description>
    </item>
    
    <item>
      <title>[計算機作業系統] 設備管理</title>
      <link>https://intervalrain.github.io/cs/os/equipmentmanagement/</link>
      <pubDate>Sat, 02 Jul 2022 04:00:55 +0800</pubDate>
      
      <guid>https://intervalrain.github.io/cs/os/equipmentmanagement/</guid>
      <description>準備中 </description>
    </item>
    
    <item>
      <title>[計算機作業系統] 進程管理</title>
      <link>https://intervalrain.github.io/cs/os/processmanagement/</link>
      <pubDate>Sat, 02 Jul 2022 04:00:55 +0800</pubDate>
      
      <guid>https://intervalrain.github.io/cs/os/processmanagement/</guid>
      <description>進程管理 進程與執行緒 1. 進程(process)  進程是資源分配的基本單位。 進程控制塊(Process Control Block, PCB)描述進程的基本訊息和運行狀態，所謂的創建進程和撤銷進程，都是指對 PCB 的操作。   2. 執行緒(thread)  執行緒又稱線程，是獨立調度的基本單位。 一個進程可以有多個執行緒，它們共享進程資源。 以瀏覽器(browser)為例，瀏覽器進程有很多執行緒，如 HTTP 請求(request)、事件響應、渲染。執行緒的並行處理(concurrent)使得瀏覽器中點擊一個新的超連結從而發起 HTTP 請求時，瀏覽器還可以響應用戶的其它事件。   3. 區別  擁有資源  進程是資源分配的基本單位，但是執行緒不擁有資源，而是訪問隸屬進程的資源。   調度  執行緒是獨立調度的基本單位，在同一進程中，執行緒的切換不會引起進程切換，從一個進程中的執行緒切換到另一個進程中的執行緒時，才會進行進程的切換。   系統開銷  由於創建或撤銷進程時，系統都要為之分配或回收資源，如硬碟中的記憶體、I/O 設備等，所付出的開銷遠大於創建或撤銷執行緒時的開銷。 同樣的，在進行進程切換時，涉及當前執行進程 CPU 環境的保存及新調度進程 CPU 環境的設置，而執行緒切換只需保存和設置少量暫存器的內容，開銷較小。   通訊  執行緒可以通過直接讀寫同一個進程中的數據進行通訊，但是進程的通訊需要借助 IPC(inter-process communication)。    進程狀態的切換  就緒就態(ready)：等待被調度 執行狀態(running) 阻塞狀態(waiting)：等待資源  只有就緒狀態和執行狀態可以相互轉換，其它的都是單向轉換。就緒狀態的進程通過調度演算法從而獲得 CPU Time，轉為執行狀態；而執行狀態的進程，在分配給它的 CPU Time 片段用完之後就會轉為就緒狀態，等待下一次調度。 阻塞狀態是缺少需要的資源從而由執行狀態轉換而來，但是該資源不包括 CPU Time, 缺少 CPU Time 會從執行狀態轉換為就緒狀態。    進程調度演算法  不同環境的調度演算法目標不同，因此需要針對不同環境來討論調度演算法。  1.</description>
    </item>
    
    <item>
      <title>[計算機作業系統] 鏈接</title>
      <link>https://intervalrain.github.io/cs/os/link/</link>
      <pubDate>Sat, 02 Jul 2022 04:00:55 +0800</pubDate>
      
      <guid>https://intervalrain.github.io/cs/os/link/</guid>
      <description>準備中 </description>
    </item>
    
    <item>
      <title>[OS] Lec 1 - Introduction</title>
      <link>https://intervalrain.github.io/os/lec1/</link>
      <pubDate>Thu, 24 Feb 2022 02:43:30 +0800</pubDate>
      
      <guid>https://intervalrain.github.io/os/lec1/</guid>
      <description>概觀作業系統的歷史發展與進程</description>
    </item>
    
  </channel>
</rss>
